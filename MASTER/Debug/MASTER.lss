
MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  000070c8  0000715c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005f1  008001da  008001da  000072d6  2**0
                  ALLOC
  3 .stab         00007e6c  00000000  00000000  000072d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004864  00000000  00000000  0000f144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000139a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000be  00000000  00000000  00013a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f74  00000000  00000000  00013b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a7  00000000  00000000  00015a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a03  00000000  00000000  00016221  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00016c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000017c  00000000  00000000  00016cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003410  00000000  00000000  00016e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  0001a250  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c9 25 	jmp	0x4b92	; 0x4b92 <__vector_1>
       8:	0c 94 f2 25 	jmp	0x4be4	; 0x4be4 <__vector_2>
       c:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <__vector_3>
      10:	0c 94 63 23 	jmp	0x46c6	; 0x46c6 <__vector_4>
      14:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <__vector_5>
      18:	0c 94 11 23 	jmp	0x4622	; 0x4622 <__vector_6>
      1c:	0c 94 ff 2d 	jmp	0x5bfe	; 0x5bfe <__vector_7>
      20:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__vector_8>
      24:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__vector_9>
      28:	0c 94 96 22 	jmp	0x452c	; 0x452c <__vector_10>
      2c:	0c 94 6d 22 	jmp	0x44da	; 0x44da <__vector_11>
      30:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <__vector_12>
      34:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f0 e7       	ldi	r31, 0x70	; 112
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <main>
      8a:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__divdi3>:
     190:	a2 e7       	ldi	r26, 0x72	; 114
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 0c 38 	jmp	0x7018	; 0x7018 <__prologue_saves__>
     19c:	98 2e       	mov	r9, r24
     19e:	89 2e       	mov	r8, r25
     1a0:	71 2e       	mov	r7, r17
     1a2:	88 e0       	ldi	r24, 0x08	; 8
     1a4:	fe 01       	movw	r30, r28
     1a6:	31 96       	adiw	r30, 0x01	; 1
     1a8:	df 01       	movw	r26, r30
     1aa:	68 2e       	mov	r6, r24
     1ac:	1d 92       	st	X+, r1
     1ae:	6a 94       	dec	r6
     1b0:	e9 f7       	brne	.-6      	; 0x1ac <__divdi3+0x1c>
     1b2:	29 83       	std	Y+1, r18	; 0x01
     1b4:	3a 83       	std	Y+2, r19	; 0x02
     1b6:	4b 83       	std	Y+3, r20	; 0x03
     1b8:	5c 83       	std	Y+4, r21	; 0x04
     1ba:	6d 83       	std	Y+5, r22	; 0x05
     1bc:	7e 83       	std	Y+6, r23	; 0x06
     1be:	9f 82       	std	Y+7, r9	; 0x07
     1c0:	98 87       	std	Y+8, r25	; 0x08
     1c2:	fe 01       	movw	r30, r28
     1c4:	39 96       	adiw	r30, 0x09	; 9
     1c6:	df 01       	movw	r26, r30
     1c8:	1d 92       	st	X+, r1
     1ca:	8a 95       	dec	r24
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <__divdi3+0x38>
     1ce:	a9 86       	std	Y+9, r10	; 0x09
     1d0:	ba 86       	std	Y+10, r11	; 0x0a
     1d2:	cb 86       	std	Y+11, r12	; 0x0b
     1d4:	dc 86       	std	Y+12, r13	; 0x0c
     1d6:	ed 86       	std	Y+13, r14	; 0x0d
     1d8:	fe 86       	std	Y+14, r15	; 0x0e
     1da:	0f 87       	std	Y+15, r16	; 0x0f
     1dc:	18 8b       	std	Y+16, r17	; 0x10
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	af 81       	ldd	r26, Y+7	; 0x07
     1e4:	b8 85       	ldd	r27, Y+8	; 0x08
     1e6:	b7 fd       	sbrc	r27, 7
     1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__divdi3+0x68>
     1ea:	e1 96       	adiw	r28, 0x31	; 49
     1ec:	1c ae       	std	Y+60, r1	; 0x3c
     1ee:	1d ae       	std	Y+61, r1	; 0x3d
     1f0:	1e ae       	std	Y+62, r1	; 0x3e
     1f2:	1f ae       	std	Y+63, r1	; 0x3f
     1f4:	e1 97       	sbiw	r28, 0x31	; 49
     1f6:	64 c0       	rjmp	.+200    	; 0x2c0 <__divdi3+0x130>
     1f8:	21 95       	neg	r18
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	12 16       	cp	r1, r18
     1fe:	08 f0       	brcs	.+2      	; 0x202 <__divdi3+0x72>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	31 95       	neg	r19
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	13 16       	cp	r1, r19
     208:	08 f0       	brcs	.+2      	; 0x20c <__divdi3+0x7c>
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	b3 2f       	mov	r27, r19
     20e:	b8 1b       	sub	r27, r24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	3b 17       	cp	r19, r27
     214:	08 f0       	brcs	.+2      	; 0x218 <__divdi3+0x88>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	98 2b       	or	r25, r24
     21a:	41 95       	neg	r20
     21c:	31 e0       	ldi	r19, 0x01	; 1
     21e:	14 16       	cp	r1, r20
     220:	08 f0       	brcs	.+2      	; 0x224 <__divdi3+0x94>
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	a4 2f       	mov	r26, r20
     226:	a9 1b       	sub	r26, r25
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	4a 17       	cp	r20, r26
     22c:	08 f0       	brcs	.+2      	; 0x230 <__divdi3+0xa0>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	38 2b       	or	r19, r24
     232:	51 95       	neg	r21
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	15 16       	cp	r1, r21
     238:	08 f0       	brcs	.+2      	; 0x23c <__divdi3+0xac>
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f5 2f       	mov	r31, r21
     23e:	f3 1b       	sub	r31, r19
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	5f 17       	cp	r21, r31
     244:	08 f0       	brcs	.+2      	; 0x248 <__divdi3+0xb8>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	98 2b       	or	r25, r24
     24a:	61 95       	neg	r22
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	16 16       	cp	r1, r22
     250:	08 f0       	brcs	.+2      	; 0x254 <__divdi3+0xc4>
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	e6 2f       	mov	r30, r22
     256:	e9 1b       	sub	r30, r25
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	6e 17       	cp	r22, r30
     25c:	08 f0       	brcs	.+2      	; 0x260 <__divdi3+0xd0>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	38 2b       	or	r19, r24
     262:	71 95       	neg	r23
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	17 16       	cp	r1, r23
     268:	08 f0       	brcs	.+2      	; 0x26c <__divdi3+0xdc>
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	57 2f       	mov	r21, r23
     26e:	53 1b       	sub	r21, r19
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	75 17       	cp	r23, r21
     274:	08 f0       	brcs	.+2      	; 0x278 <__divdi3+0xe8>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	48 2b       	or	r20, r24
     27a:	89 2d       	mov	r24, r9
     27c:	81 95       	neg	r24
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	18 16       	cp	r1, r24
     282:	08 f0       	brcs	.+2      	; 0x286 <__divdi3+0xf6>
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	68 2e       	mov	r6, r24
     288:	64 1a       	sub	r6, r20
     28a:	46 2d       	mov	r20, r6
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	86 15       	cp	r24, r6
     290:	08 f0       	brcs	.+2      	; 0x294 <__divdi3+0x104>
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	93 2b       	or	r25, r19
     296:	88 2d       	mov	r24, r8
     298:	81 95       	neg	r24
     29a:	89 1b       	sub	r24, r25
     29c:	29 83       	std	Y+1, r18	; 0x01
     29e:	ba 83       	std	Y+2, r27	; 0x02
     2a0:	ab 83       	std	Y+3, r26	; 0x03
     2a2:	fc 83       	std	Y+4, r31	; 0x04
     2a4:	ed 83       	std	Y+5, r30	; 0x05
     2a6:	5e 83       	std	Y+6, r21	; 0x06
     2a8:	4f 83       	std	Y+7, r20	; 0x07
     2aa:	88 87       	std	Y+8, r24	; 0x08
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f ef       	ldi	r20, 0xFF	; 255
     2b2:	5f ef       	ldi	r21, 0xFF	; 255
     2b4:	e1 96       	adiw	r28, 0x31	; 49
     2b6:	2c af       	std	Y+60, r18	; 0x3c
     2b8:	3d af       	std	Y+61, r19	; 0x3d
     2ba:	4e af       	std	Y+62, r20	; 0x3e
     2bc:	5f af       	std	Y+63, r21	; 0x3f
     2be:	e1 97       	sbiw	r28, 0x31	; 49
     2c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c4:	af 85       	ldd	r26, Y+15	; 0x0f
     2c6:	b8 89       	ldd	r27, Y+16	; 0x10
     2c8:	b7 ff       	sbrs	r27, 7
     2ca:	6a c0       	rjmp	.+212    	; 0x3a0 <__divdi3+0x210>
     2cc:	e1 96       	adiw	r28, 0x31	; 49
     2ce:	4c ad       	ldd	r20, Y+60	; 0x3c
     2d0:	5d ad       	ldd	r21, Y+61	; 0x3d
     2d2:	6e ad       	ldd	r22, Y+62	; 0x3e
     2d4:	7f ad       	ldd	r23, Y+63	; 0x3f
     2d6:	e1 97       	sbiw	r28, 0x31	; 49
     2d8:	40 95       	com	r20
     2da:	50 95       	com	r21
     2dc:	60 95       	com	r22
     2de:	70 95       	com	r23
     2e0:	e1 96       	adiw	r28, 0x31	; 49
     2e2:	4c af       	std	Y+60, r20	; 0x3c
     2e4:	5d af       	std	Y+61, r21	; 0x3d
     2e6:	6e af       	std	Y+62, r22	; 0x3e
     2e8:	7f af       	std	Y+63, r23	; 0x3f
     2ea:	e1 97       	sbiw	r28, 0x31	; 49
     2ec:	a1 94       	neg	r10
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	1a 14       	cp	r1, r10
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <__divdi3+0x166>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	b1 94       	neg	r11
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	1b 14       	cp	r1, r11
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__divdi3+0x170>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	6b 2d       	mov	r22, r11
     302:	68 1b       	sub	r22, r24
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	b6 16       	cp	r11, r22
     308:	08 f0       	brcs	.+2      	; 0x30c <__divdi3+0x17c>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	98 2b       	or	r25, r24
     30e:	c1 94       	neg	r12
     310:	21 e0       	ldi	r18, 0x01	; 1
     312:	1c 14       	cp	r1, r12
     314:	08 f0       	brcs	.+2      	; 0x318 <__divdi3+0x188>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	5c 2d       	mov	r21, r12
     31a:	59 1b       	sub	r21, r25
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	c5 16       	cp	r12, r21
     320:	08 f0       	brcs	.+2      	; 0x324 <__divdi3+0x194>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	28 2b       	or	r18, r24
     326:	d1 94       	neg	r13
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	1d 14       	cp	r1, r13
     32c:	08 f0       	brcs	.+2      	; 0x330 <__divdi3+0x1a0>
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	4d 2d       	mov	r20, r13
     332:	42 1b       	sub	r20, r18
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	d4 16       	cp	r13, r20
     338:	08 f0       	brcs	.+2      	; 0x33c <__divdi3+0x1ac>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	98 2b       	or	r25, r24
     33e:	e1 94       	neg	r14
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	1e 14       	cp	r1, r14
     344:	08 f0       	brcs	.+2      	; 0x348 <__divdi3+0x1b8>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	3e 2d       	mov	r19, r14
     34a:	39 1b       	sub	r19, r25
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	e3 16       	cp	r14, r19
     350:	08 f0       	brcs	.+2      	; 0x354 <__divdi3+0x1c4>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	28 2b       	or	r18, r24
     356:	f1 94       	neg	r15
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	1f 14       	cp	r1, r15
     35c:	08 f0       	brcs	.+2      	; 0x360 <__divdi3+0x1d0>
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	7f 2d       	mov	r23, r15
     362:	72 1b       	sub	r23, r18
     364:	27 2f       	mov	r18, r23
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	f7 16       	cp	r15, r23
     36a:	08 f0       	brcs	.+2      	; 0x36e <__divdi3+0x1de>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	98 2b       	or	r25, r24
     370:	01 95       	neg	r16
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	10 16       	cp	r1, r16
     376:	08 f0       	brcs	.+2      	; 0x37a <__divdi3+0x1ea>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	80 2f       	mov	r24, r16
     37c:	89 1b       	sub	r24, r25
     37e:	98 2f       	mov	r25, r24
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	09 17       	cp	r16, r25
     384:	08 f0       	brcs	.+2      	; 0x388 <__divdi3+0x1f8>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	18 2b       	or	r17, r24
     38a:	87 2d       	mov	r24, r7
     38c:	81 95       	neg	r24
     38e:	81 1b       	sub	r24, r17
     390:	a9 86       	std	Y+9, r10	; 0x09
     392:	6a 87       	std	Y+10, r22	; 0x0a
     394:	5b 87       	std	Y+11, r21	; 0x0b
     396:	4c 87       	std	Y+12, r20	; 0x0c
     398:	3d 87       	std	Y+13, r19	; 0x0d
     39a:	2e 87       	std	Y+14, r18	; 0x0e
     39c:	9f 87       	std	Y+15, r25	; 0x0f
     39e:	88 8b       	std	Y+16, r24	; 0x10
     3a0:	99 81       	ldd	r25, Y+1	; 0x01
     3a2:	2a 81       	ldd	r18, Y+2	; 0x02
     3a4:	3b 81       	ldd	r19, Y+3	; 0x03
     3a6:	4c 81       	ldd	r20, Y+4	; 0x04
     3a8:	5d 81       	ldd	r21, Y+5	; 0x05
     3aa:	6e 81       	ldd	r22, Y+6	; 0x06
     3ac:	7f 81       	ldd	r23, Y+7	; 0x07
     3ae:	a8 85       	ldd	r26, Y+8	; 0x08
     3b0:	b9 85       	ldd	r27, Y+9	; 0x09
     3b2:	1a 85       	ldd	r17, Y+10	; 0x0a
     3b4:	0b 85       	ldd	r16, Y+11	; 0x0b
     3b6:	fc 84       	ldd	r15, Y+12	; 0x0c
     3b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     3ba:	de 84       	ldd	r13, Y+14	; 0x0e
     3bc:	cf 84       	ldd	r12, Y+15	; 0x0f
     3be:	b8 88       	ldd	r11, Y+16	; 0x10
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	e1 e1       	ldi	r30, 0x11	; 17
     3c4:	8e 2e       	mov	r8, r30
     3c6:	91 2c       	mov	r9, r1
     3c8:	8c 0e       	add	r8, r28
     3ca:	9d 1e       	adc	r9, r29
     3cc:	f4 01       	movw	r30, r8
     3ce:	68 2e       	mov	r6, r24
     3d0:	11 92       	st	Z+, r1
     3d2:	6a 94       	dec	r6
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <__divdi3+0x240>
     3d6:	99 8b       	std	Y+17, r25	; 0x11
     3d8:	2a 8b       	std	Y+18, r18	; 0x12
     3da:	3b 8b       	std	Y+19, r19	; 0x13
     3dc:	4c 8b       	std	Y+20, r20	; 0x14
     3de:	5d 8b       	std	Y+21, r21	; 0x15
     3e0:	6e 8b       	std	Y+22, r22	; 0x16
     3e2:	7f 8b       	std	Y+23, r23	; 0x17
     3e4:	a8 8f       	std	Y+24, r26	; 0x18
     3e6:	9e 01       	movw	r18, r28
     3e8:	27 5e       	subi	r18, 0xE7	; 231
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	f9 01       	movw	r30, r18
     3ee:	11 92       	st	Z+, r1
     3f0:	8a 95       	dec	r24
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <__divdi3+0x25e>
     3f4:	b9 8f       	std	Y+25, r27	; 0x19
     3f6:	1a 8f       	std	Y+26, r17	; 0x1a
     3f8:	0b 8f       	std	Y+27, r16	; 0x1b
     3fa:	fc 8e       	std	Y+28, r15	; 0x1c
     3fc:	ed 8e       	std	Y+29, r14	; 0x1d
     3fe:	de 8e       	std	Y+30, r13	; 0x1e
     400:	cf 8e       	std	Y+31, r12	; 0x1f
     402:	b8 a2       	std	Y+32, r11	; 0x20
     404:	29 8c       	ldd	r2, Y+25	; 0x19
     406:	3a 8c       	ldd	r3, Y+26	; 0x1a
     408:	4b 8c       	ldd	r4, Y+27	; 0x1b
     40a:	5c 8c       	ldd	r5, Y+28	; 0x1c
     40c:	ed 8c       	ldd	r14, Y+29	; 0x1d
     40e:	fe 8c       	ldd	r15, Y+30	; 0x1e
     410:	0f 8d       	ldd	r16, Y+31	; 0x1f
     412:	18 a1       	ldd	r17, Y+32	; 0x20
     414:	69 88       	ldd	r6, Y+17	; 0x11
     416:	7a 88       	ldd	r7, Y+18	; 0x12
     418:	8b 88       	ldd	r8, Y+19	; 0x13
     41a:	9c 88       	ldd	r9, Y+20	; 0x14
     41c:	21 96       	adiw	r28, 0x01	; 1
     41e:	6c ae       	std	Y+60, r6	; 0x3c
     420:	7d ae       	std	Y+61, r7	; 0x3d
     422:	8e ae       	std	Y+62, r8	; 0x3e
     424:	9f ae       	std	Y+63, r9	; 0x3f
     426:	21 97       	sbiw	r28, 0x01	; 1
     428:	6d 88       	ldd	r6, Y+21	; 0x15
     42a:	7e 88       	ldd	r7, Y+22	; 0x16
     42c:	8f 88       	ldd	r8, Y+23	; 0x17
     42e:	98 8c       	ldd	r9, Y+24	; 0x18
     430:	e1 14       	cp	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	01 05       	cpc	r16, r1
     436:	11 05       	cpc	r17, r1
     438:	09 f0       	breq	.+2      	; 0x43c <__divdi3+0x2ac>
     43a:	d9 c3       	rjmp	.+1970   	; 0xbee <__stack+0x38f>
     43c:	62 14       	cp	r6, r2
     43e:	73 04       	cpc	r7, r3
     440:	84 04       	cpc	r8, r4
     442:	95 04       	cpc	r9, r5
     444:	08 f0       	brcs	.+2      	; 0x448 <__divdi3+0x2b8>
     446:	57 c1       	rjmp	.+686    	; 0x6f6 <__divdi3+0x566>
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	20 16       	cp	r2, r16
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	30 06       	cpc	r3, r16
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	40 06       	cpc	r4, r16
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	50 06       	cpc	r5, r16
     458:	88 f4       	brcc	.+34     	; 0x47c <__divdi3+0x2ec>
     45a:	1f ef       	ldi	r17, 0xFF	; 255
     45c:	21 16       	cp	r2, r17
     45e:	31 04       	cpc	r3, r1
     460:	41 04       	cpc	r4, r1
     462:	51 04       	cpc	r5, r1
     464:	39 f0       	breq	.+14     	; 0x474 <__divdi3+0x2e4>
     466:	30 f0       	brcs	.+12     	; 0x474 <__divdi3+0x2e4>
     468:	48 e0       	ldi	r20, 0x08	; 8
     46a:	e4 2e       	mov	r14, r20
     46c:	f1 2c       	mov	r15, r1
     46e:	01 2d       	mov	r16, r1
     470:	11 2d       	mov	r17, r1
     472:	18 c0       	rjmp	.+48     	; 0x4a4 <__divdi3+0x314>
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15
     478:	87 01       	movw	r16, r14
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <__divdi3+0x314>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	22 16       	cp	r2, r18
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	32 06       	cpc	r3, r18
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	42 06       	cpc	r4, r18
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	52 06       	cpc	r5, r18
     48c:	30 f0       	brcs	.+12     	; 0x49a <__divdi3+0x30a>
     48e:	38 e1       	ldi	r19, 0x18	; 24
     490:	e3 2e       	mov	r14, r19
     492:	f1 2c       	mov	r15, r1
     494:	01 2d       	mov	r16, r1
     496:	11 2d       	mov	r17, r1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__divdi3+0x314>
     49a:	20 e1       	ldi	r18, 0x10	; 16
     49c:	e2 2e       	mov	r14, r18
     49e:	f1 2c       	mov	r15, r1
     4a0:	01 2d       	mov	r16, r1
     4a2:	11 2d       	mov	r17, r1
     4a4:	d2 01       	movw	r26, r4
     4a6:	c1 01       	movw	r24, r2
     4a8:	0e 2c       	mov	r0, r14
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__divdi3+0x324>
     4ac:	b6 95       	lsr	r27
     4ae:	a7 95       	ror	r26
     4b0:	97 95       	ror	r25
     4b2:	87 95       	ror	r24
     4b4:	0a 94       	dec	r0
     4b6:	d2 f7       	brpl	.-12     	; 0x4ac <__divdi3+0x31c>
     4b8:	8c 52       	subi	r24, 0x2C	; 44
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	dc 01       	movw	r26, r24
     4be:	2c 91       	ld	r18, X
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	8e 19       	sub	r24, r14
     4ca:	9f 09       	sbc	r25, r15
     4cc:	a0 0b       	sbc	r26, r16
     4ce:	b1 0b       	sbc	r27, r17
     4d0:	7c 01       	movw	r14, r24
     4d2:	8d 01       	movw	r16, r26
     4d4:	e2 1a       	sub	r14, r18
     4d6:	f1 08       	sbc	r15, r1
     4d8:	01 09       	sbc	r16, r1
     4da:	11 09       	sbc	r17, r1
     4dc:	e1 14       	cp	r14, r1
     4de:	f1 04       	cpc	r15, r1
     4e0:	01 05       	cpc	r16, r1
     4e2:	11 05       	cpc	r17, r1
     4e4:	d1 f1       	breq	.+116    	; 0x55a <__divdi3+0x3ca>
     4e6:	0e 2c       	mov	r0, r14
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__divdi3+0x362>
     4ea:	22 0c       	add	r2, r2
     4ec:	33 1c       	adc	r3, r3
     4ee:	44 1c       	adc	r4, r4
     4f0:	55 1c       	adc	r5, r5
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__divdi3+0x35a>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	0e 2c       	mov	r0, r14
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__divdi3+0x376>
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	44 1f       	adc	r20, r20
     504:	55 1f       	adc	r21, r21
     506:	0a 94       	dec	r0
     508:	d2 f7       	brpl	.-12     	; 0x4fe <__divdi3+0x36e>
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8e 19       	sub	r24, r14
     510:	9f 09       	sbc	r25, r15
     512:	21 96       	adiw	r28, 0x01	; 1
     514:	6c ac       	ldd	r6, Y+60	; 0x3c
     516:	7d ac       	ldd	r7, Y+61	; 0x3d
     518:	8e ac       	ldd	r8, Y+62	; 0x3e
     51a:	9f ac       	ldd	r9, Y+63	; 0x3f
     51c:	21 97       	sbiw	r28, 0x01	; 1
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__divdi3+0x398>
     520:	96 94       	lsr	r9
     522:	87 94       	ror	r8
     524:	77 94       	ror	r7
     526:	67 94       	ror	r6
     528:	8a 95       	dec	r24
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__divdi3+0x390>
     52c:	62 2a       	or	r6, r18
     52e:	73 2a       	or	r7, r19
     530:	84 2a       	or	r8, r20
     532:	95 2a       	or	r9, r21
     534:	21 96       	adiw	r28, 0x01	; 1
     536:	ac ac       	ldd	r10, Y+60	; 0x3c
     538:	bd ac       	ldd	r11, Y+61	; 0x3d
     53a:	ce ac       	ldd	r12, Y+62	; 0x3e
     53c:	df ac       	ldd	r13, Y+63	; 0x3f
     53e:	21 97       	sbiw	r28, 0x01	; 1
     540:	04 c0       	rjmp	.+8      	; 0x54a <__divdi3+0x3ba>
     542:	aa 0c       	add	r10, r10
     544:	bb 1c       	adc	r11, r11
     546:	cc 1c       	adc	r12, r12
     548:	dd 1c       	adc	r13, r13
     54a:	ea 94       	dec	r14
     54c:	d2 f7       	brpl	.-12     	; 0x542 <__divdi3+0x3b2>
     54e:	21 96       	adiw	r28, 0x01	; 1
     550:	ac ae       	std	Y+60, r10	; 0x3c
     552:	bd ae       	std	Y+61, r11	; 0x3d
     554:	ce ae       	std	Y+62, r12	; 0x3e
     556:	df ae       	std	Y+63, r13	; 0x3f
     558:	21 97       	sbiw	r28, 0x01	; 1
     55a:	62 01       	movw	r12, r4
     55c:	ee 24       	eor	r14, r14
     55e:	ff 24       	eor	r15, r15
     560:	29 96       	adiw	r28, 0x09	; 9
     562:	cc ae       	std	Y+60, r12	; 0x3c
     564:	dd ae       	std	Y+61, r13	; 0x3d
     566:	ee ae       	std	Y+62, r14	; 0x3e
     568:	ff ae       	std	Y+63, r15	; 0x3f
     56a:	29 97       	sbiw	r28, 0x09	; 9
     56c:	92 01       	movw	r18, r4
     56e:	81 01       	movw	r16, r2
     570:	20 70       	andi	r18, 0x00	; 0
     572:	30 70       	andi	r19, 0x00	; 0
     574:	2d 96       	adiw	r28, 0x0d	; 13
     576:	0c af       	std	Y+60, r16	; 0x3c
     578:	1d af       	std	Y+61, r17	; 0x3d
     57a:	2e af       	std	Y+62, r18	; 0x3e
     57c:	3f af       	std	Y+63, r19	; 0x3f
     57e:	2d 97       	sbiw	r28, 0x0d	; 13
     580:	c4 01       	movw	r24, r8
     582:	b3 01       	movw	r22, r6
     584:	a7 01       	movw	r20, r14
     586:	96 01       	movw	r18, r12
     588:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     58c:	7b 01       	movw	r14, r22
     58e:	8c 01       	movw	r16, r24
     590:	c4 01       	movw	r24, r8
     592:	b3 01       	movw	r22, r6
     594:	29 96       	adiw	r28, 0x09	; 9
     596:	2c ad       	ldd	r18, Y+60	; 0x3c
     598:	3d ad       	ldd	r19, Y+61	; 0x3d
     59a:	4e ad       	ldd	r20, Y+62	; 0x3e
     59c:	5f ad       	ldd	r21, Y+63	; 0x3f
     59e:	29 97       	sbiw	r28, 0x09	; 9
     5a0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     5a4:	c9 01       	movw	r24, r18
     5a6:	da 01       	movw	r26, r20
     5a8:	3c 01       	movw	r6, r24
     5aa:	4d 01       	movw	r8, r26
     5ac:	c4 01       	movw	r24, r8
     5ae:	b3 01       	movw	r22, r6
     5b0:	2d 96       	adiw	r28, 0x0d	; 13
     5b2:	2c ad       	ldd	r18, Y+60	; 0x3c
     5b4:	3d ad       	ldd	r19, Y+61	; 0x3d
     5b6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b8:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ba:	2d 97       	sbiw	r28, 0x0d	; 13
     5bc:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	87 01       	movw	r16, r14
     5c6:	ff 24       	eor	r15, r15
     5c8:	ee 24       	eor	r14, r14
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	ac ac       	ldd	r10, Y+60	; 0x3c
     5ce:	bd ac       	ldd	r11, Y+61	; 0x3d
     5d0:	ce ac       	ldd	r12, Y+62	; 0x3e
     5d2:	df ac       	ldd	r13, Y+63	; 0x3f
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	c6 01       	movw	r24, r12
     5d8:	aa 27       	eor	r26, r26
     5da:	bb 27       	eor	r27, r27
     5dc:	57 01       	movw	r10, r14
     5de:	68 01       	movw	r12, r16
     5e0:	a8 2a       	or	r10, r24
     5e2:	b9 2a       	or	r11, r25
     5e4:	ca 2a       	or	r12, r26
     5e6:	db 2a       	or	r13, r27
     5e8:	a2 16       	cp	r10, r18
     5ea:	b3 06       	cpc	r11, r19
     5ec:	c4 06       	cpc	r12, r20
     5ee:	d5 06       	cpc	r13, r21
     5f0:	e0 f4       	brcc	.+56     	; 0x62a <__divdi3+0x49a>
     5f2:	08 94       	sec
     5f4:	61 08       	sbc	r6, r1
     5f6:	71 08       	sbc	r7, r1
     5f8:	81 08       	sbc	r8, r1
     5fa:	91 08       	sbc	r9, r1
     5fc:	a2 0c       	add	r10, r2
     5fe:	b3 1c       	adc	r11, r3
     600:	c4 1c       	adc	r12, r4
     602:	d5 1c       	adc	r13, r5
     604:	a2 14       	cp	r10, r2
     606:	b3 04       	cpc	r11, r3
     608:	c4 04       	cpc	r12, r4
     60a:	d5 04       	cpc	r13, r5
     60c:	70 f0       	brcs	.+28     	; 0x62a <__divdi3+0x49a>
     60e:	a2 16       	cp	r10, r18
     610:	b3 06       	cpc	r11, r19
     612:	c4 06       	cpc	r12, r20
     614:	d5 06       	cpc	r13, r21
     616:	48 f4       	brcc	.+18     	; 0x62a <__divdi3+0x49a>
     618:	08 94       	sec
     61a:	61 08       	sbc	r6, r1
     61c:	71 08       	sbc	r7, r1
     61e:	81 08       	sbc	r8, r1
     620:	91 08       	sbc	r9, r1
     622:	a2 0c       	add	r10, r2
     624:	b3 1c       	adc	r11, r3
     626:	c4 1c       	adc	r12, r4
     628:	d5 1c       	adc	r13, r5
     62a:	a2 1a       	sub	r10, r18
     62c:	b3 0a       	sbc	r11, r19
     62e:	c4 0a       	sbc	r12, r20
     630:	d5 0a       	sbc	r13, r21
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	29 96       	adiw	r28, 0x09	; 9
     638:	2c ad       	ldd	r18, Y+60	; 0x3c
     63a:	3d ad       	ldd	r19, Y+61	; 0x3d
     63c:	4e ad       	ldd	r20, Y+62	; 0x3e
     63e:	5f ad       	ldd	r21, Y+63	; 0x3f
     640:	29 97       	sbiw	r28, 0x09	; 9
     642:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     646:	7b 01       	movw	r14, r22
     648:	8c 01       	movw	r16, r24
     64a:	c6 01       	movw	r24, r12
     64c:	b5 01       	movw	r22, r10
     64e:	29 96       	adiw	r28, 0x09	; 9
     650:	2c ad       	ldd	r18, Y+60	; 0x3c
     652:	3d ad       	ldd	r19, Y+61	; 0x3d
     654:	4e ad       	ldd	r20, Y+62	; 0x3e
     656:	5f ad       	ldd	r21, Y+63	; 0x3f
     658:	29 97       	sbiw	r28, 0x09	; 9
     65a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     65e:	c9 01       	movw	r24, r18
     660:	da 01       	movw	r26, r20
     662:	5c 01       	movw	r10, r24
     664:	6d 01       	movw	r12, r26
     666:	c6 01       	movw	r24, r12
     668:	b5 01       	movw	r22, r10
     66a:	2d 96       	adiw	r28, 0x0d	; 13
     66c:	2c ad       	ldd	r18, Y+60	; 0x3c
     66e:	3d ad       	ldd	r19, Y+61	; 0x3d
     670:	4e ad       	ldd	r20, Y+62	; 0x3e
     672:	5f ad       	ldd	r21, Y+63	; 0x3f
     674:	2d 97       	sbiw	r28, 0x0d	; 13
     676:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	87 01       	movw	r16, r14
     680:	ff 24       	eor	r15, r15
     682:	ee 24       	eor	r14, r14
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	8c ad       	ldd	r24, Y+60	; 0x3c
     688:	9d ad       	ldd	r25, Y+61	; 0x3d
     68a:	ae ad       	ldd	r26, Y+62	; 0x3e
     68c:	bf ad       	ldd	r27, Y+63	; 0x3f
     68e:	21 97       	sbiw	r28, 0x01	; 1
     690:	a0 70       	andi	r26, 0x00	; 0
     692:	b0 70       	andi	r27, 0x00	; 0
     694:	e8 2a       	or	r14, r24
     696:	f9 2a       	or	r15, r25
     698:	0a 2b       	or	r16, r26
     69a:	1b 2b       	or	r17, r27
     69c:	e2 16       	cp	r14, r18
     69e:	f3 06       	cpc	r15, r19
     6a0:	04 07       	cpc	r16, r20
     6a2:	15 07       	cpc	r17, r21
     6a4:	c0 f4       	brcc	.+48     	; 0x6d6 <__divdi3+0x546>
     6a6:	08 94       	sec
     6a8:	a1 08       	sbc	r10, r1
     6aa:	b1 08       	sbc	r11, r1
     6ac:	c1 08       	sbc	r12, r1
     6ae:	d1 08       	sbc	r13, r1
     6b0:	e2 0c       	add	r14, r2
     6b2:	f3 1c       	adc	r15, r3
     6b4:	04 1d       	adc	r16, r4
     6b6:	15 1d       	adc	r17, r5
     6b8:	e2 14       	cp	r14, r2
     6ba:	f3 04       	cpc	r15, r3
     6bc:	04 05       	cpc	r16, r4
     6be:	15 05       	cpc	r17, r5
     6c0:	50 f0       	brcs	.+20     	; 0x6d6 <__divdi3+0x546>
     6c2:	e2 16       	cp	r14, r18
     6c4:	f3 06       	cpc	r15, r19
     6c6:	04 07       	cpc	r16, r20
     6c8:	15 07       	cpc	r17, r21
     6ca:	28 f4       	brcc	.+10     	; 0x6d6 <__divdi3+0x546>
     6cc:	08 94       	sec
     6ce:	a1 08       	sbc	r10, r1
     6d0:	b1 08       	sbc	r11, r1
     6d2:	c1 08       	sbc	r12, r1
     6d4:	d1 08       	sbc	r13, r1
     6d6:	d3 01       	movw	r26, r6
     6d8:	99 27       	eor	r25, r25
     6da:	88 27       	eor	r24, r24
     6dc:	86 01       	movw	r16, r12
     6de:	75 01       	movw	r14, r10
     6e0:	e8 2a       	or	r14, r24
     6e2:	f9 2a       	or	r15, r25
     6e4:	0a 2b       	or	r16, r26
     6e6:	1b 2b       	or	r17, r27
     6e8:	25 96       	adiw	r28, 0x05	; 5
     6ea:	ec ae       	std	Y+60, r14	; 0x3c
     6ec:	fd ae       	std	Y+61, r15	; 0x3d
     6ee:	0e af       	std	Y+62, r16	; 0x3e
     6f0:	1f af       	std	Y+63, r17	; 0x3f
     6f2:	25 97       	sbiw	r28, 0x05	; 5
     6f4:	eb c4       	rjmp	.+2518   	; 0x10cc <__stack+0x86d>
     6f6:	21 14       	cp	r2, r1
     6f8:	31 04       	cpc	r3, r1
     6fa:	41 04       	cpc	r4, r1
     6fc:	51 04       	cpc	r5, r1
     6fe:	71 f4       	brne	.+28     	; 0x71c <__divdi3+0x58c>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     714:	c9 01       	movw	r24, r18
     716:	da 01       	movw	r26, r20
     718:	1c 01       	movw	r2, r24
     71a:	2d 01       	movw	r4, r26
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	20 16       	cp	r2, r16
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	30 06       	cpc	r3, r16
     724:	01 e0       	ldi	r16, 0x01	; 1
     726:	40 06       	cpc	r4, r16
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	50 06       	cpc	r5, r16
     72c:	88 f4       	brcc	.+34     	; 0x750 <__divdi3+0x5c0>
     72e:	1f ef       	ldi	r17, 0xFF	; 255
     730:	21 16       	cp	r2, r17
     732:	31 04       	cpc	r3, r1
     734:	41 04       	cpc	r4, r1
     736:	51 04       	cpc	r5, r1
     738:	31 f0       	breq	.+12     	; 0x746 <__divdi3+0x5b6>
     73a:	28 f0       	brcs	.+10     	; 0x746 <__divdi3+0x5b6>
     73c:	48 e0       	ldi	r20, 0x08	; 8
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	17 c0       	rjmp	.+46     	; 0x774 <__divdi3+0x5e4>
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	12 c0       	rjmp	.+36     	; 0x774 <__divdi3+0x5e4>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	22 16       	cp	r2, r18
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	32 06       	cpc	r3, r18
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	42 06       	cpc	r4, r18
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	52 06       	cpc	r5, r18
     760:	28 f0       	brcs	.+10     	; 0x76c <__divdi3+0x5dc>
     762:	48 e1       	ldi	r20, 0x18	; 24
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <__divdi3+0x5e4>
     76c:	40 e1       	ldi	r20, 0x10	; 16
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	d2 01       	movw	r26, r4
     776:	c1 01       	movw	r24, r2
     778:	04 2e       	mov	r0, r20
     77a:	04 c0       	rjmp	.+8      	; 0x784 <__divdi3+0x5f4>
     77c:	b6 95       	lsr	r27
     77e:	a7 95       	ror	r26
     780:	97 95       	ror	r25
     782:	87 95       	ror	r24
     784:	0a 94       	dec	r0
     786:	d2 f7       	brpl	.-12     	; 0x77c <__divdi3+0x5ec>
     788:	8c 52       	subi	r24, 0x2C	; 44
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	dc 01       	movw	r26, r24
     78e:	2c 91       	ld	r18, X
     790:	e0 e2       	ldi	r30, 0x20	; 32
     792:	ee 2e       	mov	r14, r30
     794:	f1 2c       	mov	r15, r1
     796:	01 2d       	mov	r16, r1
     798:	11 2d       	mov	r17, r1
     79a:	d8 01       	movw	r26, r16
     79c:	c7 01       	movw	r24, r14
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	a6 0b       	sbc	r26, r22
     7a4:	b7 0b       	sbc	r27, r23
     7a6:	82 1b       	sub	r24, r18
     7a8:	91 09       	sbc	r25, r1
     7aa:	a1 09       	sbc	r26, r1
     7ac:	b1 09       	sbc	r27, r1
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	a1 05       	cpc	r26, r1
     7b2:	b1 05       	cpc	r27, r1
     7b4:	61 f4       	brne	.+24     	; 0x7ce <__divdi3+0x63e>
     7b6:	64 01       	movw	r12, r8
     7b8:	53 01       	movw	r10, r6
     7ba:	a2 18       	sub	r10, r2
     7bc:	b3 08       	sbc	r11, r3
     7be:	c4 08       	sbc	r12, r4
     7c0:	d5 08       	sbc	r13, r5
     7c2:	31 e0       	ldi	r19, 0x01	; 1
     7c4:	63 2e       	mov	r6, r19
     7c6:	71 2c       	mov	r7, r1
     7c8:	81 2c       	mov	r8, r1
     7ca:	91 2c       	mov	r9, r1
     7cc:	24 c1       	rjmp	.+584    	; 0xa16 <__stack+0x1b7>
     7ce:	e3 96       	adiw	r28, 0x33	; 51
     7d0:	8f af       	std	Y+63, r24	; 0x3f
     7d2:	e3 97       	sbiw	r28, 0x33	; 51
     7d4:	08 2e       	mov	r0, r24
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <__divdi3+0x650>
     7d8:	22 0c       	add	r2, r2
     7da:	33 1c       	adc	r3, r3
     7dc:	44 1c       	adc	r4, r4
     7de:	55 1c       	adc	r5, r5
     7e0:	0a 94       	dec	r0
     7e2:	d2 f7       	brpl	.-12     	; 0x7d8 <__divdi3+0x648>
     7e4:	ee 2d       	mov	r30, r14
     7e6:	e8 1b       	sub	r30, r24
     7e8:	64 01       	movw	r12, r8
     7ea:	53 01       	movw	r10, r6
     7ec:	0e 2e       	mov	r0, r30
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__divdi3+0x668>
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	b7 94       	ror	r11
     7f6:	a7 94       	ror	r10
     7f8:	0a 94       	dec	r0
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__divdi3+0x660>
     7fc:	a4 01       	movw	r20, r8
     7fe:	93 01       	movw	r18, r6
     800:	e3 96       	adiw	r28, 0x33	; 51
     802:	0f ac       	ldd	r0, Y+63	; 0x3f
     804:	e3 97       	sbiw	r28, 0x33	; 51
     806:	04 c0       	rjmp	.+8      	; 0x810 <__divdi3+0x680>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	44 1f       	adc	r20, r20
     80e:	55 1f       	adc	r21, r21
     810:	0a 94       	dec	r0
     812:	d2 f7       	brpl	.-12     	; 0x808 <__divdi3+0x678>
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	6c ac       	ldd	r6, Y+60	; 0x3c
     818:	7d ac       	ldd	r7, Y+61	; 0x3d
     81a:	8e ac       	ldd	r8, Y+62	; 0x3e
     81c:	9f ac       	ldd	r9, Y+63	; 0x3f
     81e:	21 97       	sbiw	r28, 0x01	; 1
     820:	0e 2e       	mov	r0, r30
     822:	04 c0       	rjmp	.+8      	; 0x82c <__divdi3+0x69c>
     824:	96 94       	lsr	r9
     826:	87 94       	ror	r8
     828:	77 94       	ror	r7
     82a:	67 94       	ror	r6
     82c:	0a 94       	dec	r0
     82e:	d2 f7       	brpl	.-12     	; 0x824 <__divdi3+0x694>
     830:	84 01       	movw	r16, r8
     832:	73 01       	movw	r14, r6
     834:	e2 2a       	or	r14, r18
     836:	f3 2a       	or	r15, r19
     838:	04 2b       	or	r16, r20
     83a:	15 2b       	or	r17, r21
     83c:	e9 ae       	std	Y+57, r14	; 0x39
     83e:	fa ae       	std	Y+58, r15	; 0x3a
     840:	0b af       	std	Y+59, r16	; 0x3b
     842:	1c af       	std	Y+60, r17	; 0x3c
     844:	32 01       	movw	r6, r4
     846:	88 24       	eor	r8, r8
     848:	99 24       	eor	r9, r9
     84a:	92 01       	movw	r18, r4
     84c:	81 01       	movw	r16, r2
     84e:	20 70       	andi	r18, 0x00	; 0
     850:	30 70       	andi	r19, 0x00	; 0
     852:	61 96       	adiw	r28, 0x11	; 17
     854:	0c af       	std	Y+60, r16	; 0x3c
     856:	1d af       	std	Y+61, r17	; 0x3d
     858:	2e af       	std	Y+62, r18	; 0x3e
     85a:	3f af       	std	Y+63, r19	; 0x3f
     85c:	61 97       	sbiw	r28, 0x11	; 17
     85e:	c6 01       	movw	r24, r12
     860:	b5 01       	movw	r22, r10
     862:	a4 01       	movw	r20, r8
     864:	93 01       	movw	r18, r6
     866:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     86a:	7b 01       	movw	r14, r22
     86c:	8c 01       	movw	r16, r24
     86e:	c6 01       	movw	r24, r12
     870:	b5 01       	movw	r22, r10
     872:	a4 01       	movw	r20, r8
     874:	93 01       	movw	r18, r6
     876:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     87a:	c9 01       	movw	r24, r18
     87c:	da 01       	movw	r26, r20
     87e:	65 96       	adiw	r28, 0x15	; 21
     880:	8c af       	std	Y+60, r24	; 0x3c
     882:	9d af       	std	Y+61, r25	; 0x3d
     884:	ae af       	std	Y+62, r26	; 0x3e
     886:	bf af       	std	Y+63, r27	; 0x3f
     888:	65 97       	sbiw	r28, 0x15	; 21
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	61 96       	adiw	r28, 0x11	; 17
     890:	2c ad       	ldd	r18, Y+60	; 0x3c
     892:	3d ad       	ldd	r19, Y+61	; 0x3d
     894:	4e ad       	ldd	r20, Y+62	; 0x3e
     896:	5f ad       	ldd	r21, Y+63	; 0x3f
     898:	61 97       	sbiw	r28, 0x11	; 17
     89a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	87 01       	movw	r16, r14
     8a4:	ff 24       	eor	r15, r15
     8a6:	ee 24       	eor	r14, r14
     8a8:	a9 ac       	ldd	r10, Y+57	; 0x39
     8aa:	ba ac       	ldd	r11, Y+58	; 0x3a
     8ac:	cb ac       	ldd	r12, Y+59	; 0x3b
     8ae:	dc ac       	ldd	r13, Y+60	; 0x3c
     8b0:	c6 01       	movw	r24, r12
     8b2:	aa 27       	eor	r26, r26
     8b4:	bb 27       	eor	r27, r27
     8b6:	5c 01       	movw	r10, r24
     8b8:	6d 01       	movw	r12, r26
     8ba:	ae 28       	or	r10, r14
     8bc:	bf 28       	or	r11, r15
     8be:	c0 2a       	or	r12, r16
     8c0:	d1 2a       	or	r13, r17
     8c2:	a2 16       	cp	r10, r18
     8c4:	b3 06       	cpc	r11, r19
     8c6:	c4 06       	cpc	r12, r20
     8c8:	d5 06       	cpc	r13, r21
     8ca:	60 f5       	brcc	.+88     	; 0x924 <__stack+0xc5>
     8cc:	65 96       	adiw	r28, 0x15	; 21
     8ce:	6c ad       	ldd	r22, Y+60	; 0x3c
     8d0:	7d ad       	ldd	r23, Y+61	; 0x3d
     8d2:	8e ad       	ldd	r24, Y+62	; 0x3e
     8d4:	9f ad       	ldd	r25, Y+63	; 0x3f
     8d6:	65 97       	sbiw	r28, 0x15	; 21
     8d8:	61 50       	subi	r22, 0x01	; 1
     8da:	70 40       	sbci	r23, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	90 40       	sbci	r25, 0x00	; 0
     8e0:	65 96       	adiw	r28, 0x15	; 21
     8e2:	6c af       	std	Y+60, r22	; 0x3c
     8e4:	7d af       	std	Y+61, r23	; 0x3d
     8e6:	8e af       	std	Y+62, r24	; 0x3e
     8e8:	9f af       	std	Y+63, r25	; 0x3f
     8ea:	65 97       	sbiw	r28, 0x15	; 21
     8ec:	a2 0c       	add	r10, r2
     8ee:	b3 1c       	adc	r11, r3
     8f0:	c4 1c       	adc	r12, r4
     8f2:	d5 1c       	adc	r13, r5
     8f4:	a2 14       	cp	r10, r2
     8f6:	b3 04       	cpc	r11, r3
     8f8:	c4 04       	cpc	r12, r4
     8fa:	d5 04       	cpc	r13, r5
     8fc:	98 f0       	brcs	.+38     	; 0x924 <__stack+0xc5>
     8fe:	a2 16       	cp	r10, r18
     900:	b3 06       	cpc	r11, r19
     902:	c4 06       	cpc	r12, r20
     904:	d5 06       	cpc	r13, r21
     906:	70 f4       	brcc	.+28     	; 0x924 <__stack+0xc5>
     908:	61 50       	subi	r22, 0x01	; 1
     90a:	70 40       	sbci	r23, 0x00	; 0
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	65 96       	adiw	r28, 0x15	; 21
     912:	6c af       	std	Y+60, r22	; 0x3c
     914:	7d af       	std	Y+61, r23	; 0x3d
     916:	8e af       	std	Y+62, r24	; 0x3e
     918:	9f af       	std	Y+63, r25	; 0x3f
     91a:	65 97       	sbiw	r28, 0x15	; 21
     91c:	a2 0c       	add	r10, r2
     91e:	b3 1c       	adc	r11, r3
     920:	c4 1c       	adc	r12, r4
     922:	d5 1c       	adc	r13, r5
     924:	a2 1a       	sub	r10, r18
     926:	b3 0a       	sbc	r11, r19
     928:	c4 0a       	sbc	r12, r20
     92a:	d5 0a       	sbc	r13, r21
     92c:	c6 01       	movw	r24, r12
     92e:	b5 01       	movw	r22, r10
     930:	a4 01       	movw	r20, r8
     932:	93 01       	movw	r18, r6
     934:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     938:	7b 01       	movw	r14, r22
     93a:	8c 01       	movw	r16, r24
     93c:	c6 01       	movw	r24, r12
     93e:	b5 01       	movw	r22, r10
     940:	a4 01       	movw	r20, r8
     942:	93 01       	movw	r18, r6
     944:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     948:	c9 01       	movw	r24, r18
     94a:	da 01       	movw	r26, r20
     94c:	3c 01       	movw	r6, r24
     94e:	4d 01       	movw	r8, r26
     950:	c4 01       	movw	r24, r8
     952:	b3 01       	movw	r22, r6
     954:	61 96       	adiw	r28, 0x11	; 17
     956:	2c ad       	ldd	r18, Y+60	; 0x3c
     958:	3d ad       	ldd	r19, Y+61	; 0x3d
     95a:	4e ad       	ldd	r20, Y+62	; 0x3e
     95c:	5f ad       	ldd	r21, Y+63	; 0x3f
     95e:	61 97       	sbiw	r28, 0x11	; 17
     960:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	87 01       	movw	r16, r14
     96a:	ff 24       	eor	r15, r15
     96c:	ee 24       	eor	r14, r14
     96e:	89 ad       	ldd	r24, Y+57	; 0x39
     970:	9a ad       	ldd	r25, Y+58	; 0x3a
     972:	ab ad       	ldd	r26, Y+59	; 0x3b
     974:	bc ad       	ldd	r27, Y+60	; 0x3c
     976:	a0 70       	andi	r26, 0x00	; 0
     978:	b0 70       	andi	r27, 0x00	; 0
     97a:	57 01       	movw	r10, r14
     97c:	68 01       	movw	r12, r16
     97e:	a8 2a       	or	r10, r24
     980:	b9 2a       	or	r11, r25
     982:	ca 2a       	or	r12, r26
     984:	db 2a       	or	r13, r27
     986:	a2 16       	cp	r10, r18
     988:	b3 06       	cpc	r11, r19
     98a:	c4 06       	cpc	r12, r20
     98c:	d5 06       	cpc	r13, r21
     98e:	e0 f4       	brcc	.+56     	; 0x9c8 <__stack+0x169>
     990:	08 94       	sec
     992:	61 08       	sbc	r6, r1
     994:	71 08       	sbc	r7, r1
     996:	81 08       	sbc	r8, r1
     998:	91 08       	sbc	r9, r1
     99a:	a2 0c       	add	r10, r2
     99c:	b3 1c       	adc	r11, r3
     99e:	c4 1c       	adc	r12, r4
     9a0:	d5 1c       	adc	r13, r5
     9a2:	a2 14       	cp	r10, r2
     9a4:	b3 04       	cpc	r11, r3
     9a6:	c4 04       	cpc	r12, r4
     9a8:	d5 04       	cpc	r13, r5
     9aa:	70 f0       	brcs	.+28     	; 0x9c8 <__stack+0x169>
     9ac:	a2 16       	cp	r10, r18
     9ae:	b3 06       	cpc	r11, r19
     9b0:	c4 06       	cpc	r12, r20
     9b2:	d5 06       	cpc	r13, r21
     9b4:	48 f4       	brcc	.+18     	; 0x9c8 <__stack+0x169>
     9b6:	08 94       	sec
     9b8:	61 08       	sbc	r6, r1
     9ba:	71 08       	sbc	r7, r1
     9bc:	81 08       	sbc	r8, r1
     9be:	91 08       	sbc	r9, r1
     9c0:	a2 0c       	add	r10, r2
     9c2:	b3 1c       	adc	r11, r3
     9c4:	c4 1c       	adc	r12, r4
     9c6:	d5 1c       	adc	r13, r5
     9c8:	21 96       	adiw	r28, 0x01	; 1
     9ca:	8c ad       	ldd	r24, Y+60	; 0x3c
     9cc:	9d ad       	ldd	r25, Y+61	; 0x3d
     9ce:	ae ad       	ldd	r26, Y+62	; 0x3e
     9d0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9d2:	21 97       	sbiw	r28, 0x01	; 1
     9d4:	e3 96       	adiw	r28, 0x33	; 51
     9d6:	0f ac       	ldd	r0, Y+63	; 0x3f
     9d8:	e3 97       	sbiw	r28, 0x33	; 51
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__stack+0x185>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	aa 1f       	adc	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <__stack+0x17d>
     9e8:	21 96       	adiw	r28, 0x01	; 1
     9ea:	8c af       	std	Y+60, r24	; 0x3c
     9ec:	9d af       	std	Y+61, r25	; 0x3d
     9ee:	ae af       	std	Y+62, r26	; 0x3e
     9f0:	bf af       	std	Y+63, r27	; 0x3f
     9f2:	21 97       	sbiw	r28, 0x01	; 1
     9f4:	a2 1a       	sub	r10, r18
     9f6:	b3 0a       	sbc	r11, r19
     9f8:	c4 0a       	sbc	r12, r20
     9fa:	d5 0a       	sbc	r13, r21
     9fc:	65 96       	adiw	r28, 0x15	; 21
     9fe:	ec ac       	ldd	r14, Y+60	; 0x3c
     a00:	fd ac       	ldd	r15, Y+61	; 0x3d
     a02:	0e ad       	ldd	r16, Y+62	; 0x3e
     a04:	1f ad       	ldd	r17, Y+63	; 0x3f
     a06:	65 97       	sbiw	r28, 0x15	; 21
     a08:	d7 01       	movw	r26, r14
     a0a:	99 27       	eor	r25, r25
     a0c:	88 27       	eor	r24, r24
     a0e:	68 2a       	or	r6, r24
     a10:	79 2a       	or	r7, r25
     a12:	8a 2a       	or	r8, r26
     a14:	9b 2a       	or	r9, r27
     a16:	82 01       	movw	r16, r4
     a18:	22 27       	eor	r18, r18
     a1a:	33 27       	eor	r19, r19
     a1c:	69 96       	adiw	r28, 0x19	; 25
     a1e:	0c af       	std	Y+60, r16	; 0x3c
     a20:	1d af       	std	Y+61, r17	; 0x3d
     a22:	2e af       	std	Y+62, r18	; 0x3e
     a24:	3f af       	std	Y+63, r19	; 0x3f
     a26:	69 97       	sbiw	r28, 0x19	; 25
     a28:	a2 01       	movw	r20, r4
     a2a:	91 01       	movw	r18, r2
     a2c:	40 70       	andi	r20, 0x00	; 0
     a2e:	50 70       	andi	r21, 0x00	; 0
     a30:	6d 96       	adiw	r28, 0x1d	; 29
     a32:	2c af       	std	Y+60, r18	; 0x3c
     a34:	3d af       	std	Y+61, r19	; 0x3d
     a36:	4e af       	std	Y+62, r20	; 0x3e
     a38:	5f af       	std	Y+63, r21	; 0x3f
     a3a:	6d 97       	sbiw	r28, 0x1d	; 29
     a3c:	c6 01       	movw	r24, r12
     a3e:	b5 01       	movw	r22, r10
     a40:	69 96       	adiw	r28, 0x19	; 25
     a42:	2c ad       	ldd	r18, Y+60	; 0x3c
     a44:	3d ad       	ldd	r19, Y+61	; 0x3d
     a46:	4e ad       	ldd	r20, Y+62	; 0x3e
     a48:	5f ad       	ldd	r21, Y+63	; 0x3f
     a4a:	69 97       	sbiw	r28, 0x19	; 25
     a4c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     a50:	7b 01       	movw	r14, r22
     a52:	8c 01       	movw	r16, r24
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	69 96       	adiw	r28, 0x19	; 25
     a5a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a5e:	4e ad       	ldd	r20, Y+62	; 0x3e
     a60:	5f ad       	ldd	r21, Y+63	; 0x3f
     a62:	69 97       	sbiw	r28, 0x19	; 25
     a64:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     a68:	c9 01       	movw	r24, r18
     a6a:	da 01       	movw	r26, r20
     a6c:	a1 96       	adiw	r28, 0x21	; 33
     a6e:	8c af       	std	Y+60, r24	; 0x3c
     a70:	9d af       	std	Y+61, r25	; 0x3d
     a72:	ae af       	std	Y+62, r26	; 0x3e
     a74:	bf af       	std	Y+63, r27	; 0x3f
     a76:	a1 97       	sbiw	r28, 0x21	; 33
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	6d 96       	adiw	r28, 0x1d	; 29
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	6d 97       	sbiw	r28, 0x1d	; 29
     a88:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	87 01       	movw	r16, r14
     a92:	ff 24       	eor	r15, r15
     a94:	ee 24       	eor	r14, r14
     a96:	21 96       	adiw	r28, 0x01	; 1
     a98:	ac ac       	ldd	r10, Y+60	; 0x3c
     a9a:	bd ac       	ldd	r11, Y+61	; 0x3d
     a9c:	ce ac       	ldd	r12, Y+62	; 0x3e
     a9e:	df ac       	ldd	r13, Y+63	; 0x3f
     aa0:	21 97       	sbiw	r28, 0x01	; 1
     aa2:	c6 01       	movw	r24, r12
     aa4:	aa 27       	eor	r26, r26
     aa6:	bb 27       	eor	r27, r27
     aa8:	57 01       	movw	r10, r14
     aaa:	68 01       	movw	r12, r16
     aac:	a8 2a       	or	r10, r24
     aae:	b9 2a       	or	r11, r25
     ab0:	ca 2a       	or	r12, r26
     ab2:	db 2a       	or	r13, r27
     ab4:	a2 16       	cp	r10, r18
     ab6:	b3 06       	cpc	r11, r19
     ab8:	c4 06       	cpc	r12, r20
     aba:	d5 06       	cpc	r13, r21
     abc:	60 f5       	brcc	.+88     	; 0xb16 <__stack+0x2b7>
     abe:	a1 96       	adiw	r28, 0x21	; 33
     ac0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ac2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ac4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ac8:	a1 97       	sbiw	r28, 0x21	; 33
     aca:	61 50       	subi	r22, 0x01	; 1
     acc:	70 40       	sbci	r23, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	a1 96       	adiw	r28, 0x21	; 33
     ad4:	6c af       	std	Y+60, r22	; 0x3c
     ad6:	7d af       	std	Y+61, r23	; 0x3d
     ad8:	8e af       	std	Y+62, r24	; 0x3e
     ada:	9f af       	std	Y+63, r25	; 0x3f
     adc:	a1 97       	sbiw	r28, 0x21	; 33
     ade:	a2 0c       	add	r10, r2
     ae0:	b3 1c       	adc	r11, r3
     ae2:	c4 1c       	adc	r12, r4
     ae4:	d5 1c       	adc	r13, r5
     ae6:	a2 14       	cp	r10, r2
     ae8:	b3 04       	cpc	r11, r3
     aea:	c4 04       	cpc	r12, r4
     aec:	d5 04       	cpc	r13, r5
     aee:	98 f0       	brcs	.+38     	; 0xb16 <__stack+0x2b7>
     af0:	a2 16       	cp	r10, r18
     af2:	b3 06       	cpc	r11, r19
     af4:	c4 06       	cpc	r12, r20
     af6:	d5 06       	cpc	r13, r21
     af8:	70 f4       	brcc	.+28     	; 0xb16 <__stack+0x2b7>
     afa:	61 50       	subi	r22, 0x01	; 1
     afc:	70 40       	sbci	r23, 0x00	; 0
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	a1 96       	adiw	r28, 0x21	; 33
     b04:	6c af       	std	Y+60, r22	; 0x3c
     b06:	7d af       	std	Y+61, r23	; 0x3d
     b08:	8e af       	std	Y+62, r24	; 0x3e
     b0a:	9f af       	std	Y+63, r25	; 0x3f
     b0c:	a1 97       	sbiw	r28, 0x21	; 33
     b0e:	a2 0c       	add	r10, r2
     b10:	b3 1c       	adc	r11, r3
     b12:	c4 1c       	adc	r12, r4
     b14:	d5 1c       	adc	r13, r5
     b16:	a2 1a       	sub	r10, r18
     b18:	b3 0a       	sbc	r11, r19
     b1a:	c4 0a       	sbc	r12, r20
     b1c:	d5 0a       	sbc	r13, r21
     b1e:	c6 01       	movw	r24, r12
     b20:	b5 01       	movw	r22, r10
     b22:	69 96       	adiw	r28, 0x19	; 25
     b24:	2c ad       	ldd	r18, Y+60	; 0x3c
     b26:	3d ad       	ldd	r19, Y+61	; 0x3d
     b28:	4e ad       	ldd	r20, Y+62	; 0x3e
     b2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b2c:	69 97       	sbiw	r28, 0x19	; 25
     b2e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     b32:	7b 01       	movw	r14, r22
     b34:	8c 01       	movw	r16, r24
     b36:	c6 01       	movw	r24, r12
     b38:	b5 01       	movw	r22, r10
     b3a:	69 96       	adiw	r28, 0x19	; 25
     b3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b40:	4e ad       	ldd	r20, Y+62	; 0x3e
     b42:	5f ad       	ldd	r21, Y+63	; 0x3f
     b44:	69 97       	sbiw	r28, 0x19	; 25
     b46:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     b4a:	c9 01       	movw	r24, r18
     b4c:	da 01       	movw	r26, r20
     b4e:	5c 01       	movw	r10, r24
     b50:	6d 01       	movw	r12, r26
     b52:	c6 01       	movw	r24, r12
     b54:	b5 01       	movw	r22, r10
     b56:	6d 96       	adiw	r28, 0x1d	; 29
     b58:	2c ad       	ldd	r18, Y+60	; 0x3c
     b5a:	3d ad       	ldd	r19, Y+61	; 0x3d
     b5c:	4e ad       	ldd	r20, Y+62	; 0x3e
     b5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     b60:	6d 97       	sbiw	r28, 0x1d	; 29
     b62:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	87 01       	movw	r16, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	ee 24       	eor	r14, r14
     b70:	21 96       	adiw	r28, 0x01	; 1
     b72:	8c ad       	ldd	r24, Y+60	; 0x3c
     b74:	9d ad       	ldd	r25, Y+61	; 0x3d
     b76:	ae ad       	ldd	r26, Y+62	; 0x3e
     b78:	bf ad       	ldd	r27, Y+63	; 0x3f
     b7a:	21 97       	sbiw	r28, 0x01	; 1
     b7c:	a0 70       	andi	r26, 0x00	; 0
     b7e:	b0 70       	andi	r27, 0x00	; 0
     b80:	e8 2a       	or	r14, r24
     b82:	f9 2a       	or	r15, r25
     b84:	0a 2b       	or	r16, r26
     b86:	1b 2b       	or	r17, r27
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	c0 f4       	brcc	.+48     	; 0xbc2 <__stack+0x363>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	e2 0c       	add	r14, r2
     b9e:	f3 1c       	adc	r15, r3
     ba0:	04 1d       	adc	r16, r4
     ba2:	15 1d       	adc	r17, r5
     ba4:	e2 14       	cp	r14, r2
     ba6:	f3 04       	cpc	r15, r3
     ba8:	04 05       	cpc	r16, r4
     baa:	15 05       	cpc	r17, r5
     bac:	50 f0       	brcs	.+20     	; 0xbc2 <__stack+0x363>
     bae:	e2 16       	cp	r14, r18
     bb0:	f3 06       	cpc	r15, r19
     bb2:	04 07       	cpc	r16, r20
     bb4:	15 07       	cpc	r17, r21
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <__stack+0x363>
     bb8:	08 94       	sec
     bba:	a1 08       	sbc	r10, r1
     bbc:	b1 08       	sbc	r11, r1
     bbe:	c1 08       	sbc	r12, r1
     bc0:	d1 08       	sbc	r13, r1
     bc2:	a1 96       	adiw	r28, 0x21	; 33
     bc4:	ec ac       	ldd	r14, Y+60	; 0x3c
     bc6:	fd ac       	ldd	r15, Y+61	; 0x3d
     bc8:	0e ad       	ldd	r16, Y+62	; 0x3e
     bca:	1f ad       	ldd	r17, Y+63	; 0x3f
     bcc:	a1 97       	sbiw	r28, 0x21	; 33
     bce:	d7 01       	movw	r26, r14
     bd0:	99 27       	eor	r25, r25
     bd2:	88 27       	eor	r24, r24
     bd4:	96 01       	movw	r18, r12
     bd6:	85 01       	movw	r16, r10
     bd8:	08 2b       	or	r16, r24
     bda:	19 2b       	or	r17, r25
     bdc:	2a 2b       	or	r18, r26
     bde:	3b 2b       	or	r19, r27
     be0:	25 96       	adiw	r28, 0x05	; 5
     be2:	0c af       	std	Y+60, r16	; 0x3c
     be4:	1d af       	std	Y+61, r17	; 0x3d
     be6:	2e af       	std	Y+62, r18	; 0x3e
     be8:	3f af       	std	Y+63, r19	; 0x3f
     bea:	25 97       	sbiw	r28, 0x05	; 5
     bec:	72 c2       	rjmp	.+1252   	; 0x10d2 <__stack+0x873>
     bee:	6e 14       	cp	r6, r14
     bf0:	7f 04       	cpc	r7, r15
     bf2:	80 06       	cpc	r8, r16
     bf4:	91 06       	cpc	r9, r17
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	5f c2       	rjmp	.+1214   	; 0x10b8 <__stack+0x859>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	e2 16       	cp	r14, r18
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	f2 06       	cpc	r15, r18
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	02 07       	cpc	r16, r18
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	12 07       	cpc	r17, r18
     c0a:	88 f4       	brcc	.+34     	; 0xc2e <__stack+0x3cf>
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	e3 16       	cp	r14, r19
     c10:	f1 04       	cpc	r15, r1
     c12:	01 05       	cpc	r16, r1
     c14:	11 05       	cpc	r17, r1
     c16:	31 f0       	breq	.+12     	; 0xc24 <__stack+0x3c5>
     c18:	28 f0       	brcs	.+10     	; 0xc24 <__stack+0x3c5>
     c1a:	48 e0       	ldi	r20, 0x08	; 8
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	17 c0       	rjmp	.+46     	; 0xc52 <__stack+0x3f3>
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__stack+0x3f3>
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	e4 16       	cp	r14, r20
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	f4 06       	cpc	r15, r20
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	04 07       	cpc	r16, r20
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	14 07       	cpc	r17, r20
     c3e:	28 f0       	brcs	.+10     	; 0xc4a <__stack+0x3eb>
     c40:	48 e1       	ldi	r20, 0x18	; 24
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__stack+0x3f3>
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	04 2e       	mov	r0, r20
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__stack+0x403>
     c5a:	b6 95       	lsr	r27
     c5c:	a7 95       	ror	r26
     c5e:	97 95       	ror	r25
     c60:	87 95       	ror	r24
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__stack+0x3fb>
     c66:	8c 52       	subi	r24, 0x2C	; 44
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	dc 01       	movw	r26, r24
     c6c:	2c 91       	ld	r18, X
     c6e:	30 e2       	ldi	r19, 0x20	; 32
     c70:	a3 2e       	mov	r10, r19
     c72:	b1 2c       	mov	r11, r1
     c74:	c1 2c       	mov	r12, r1
     c76:	d1 2c       	mov	r13, r1
     c78:	d6 01       	movw	r26, r12
     c7a:	c5 01       	movw	r24, r10
     c7c:	84 1b       	sub	r24, r20
     c7e:	95 0b       	sbc	r25, r21
     c80:	a6 0b       	sbc	r26, r22
     c82:	b7 0b       	sbc	r27, r23
     c84:	82 1b       	sub	r24, r18
     c86:	91 09       	sbc	r25, r1
     c88:	a1 09       	sbc	r26, r1
     c8a:	b1 09       	sbc	r27, r1
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 05       	cpc	r26, r1
     c90:	b1 05       	cpc	r27, r1
     c92:	99 f4       	brne	.+38     	; 0xcba <__stack+0x45b>
     c94:	e6 14       	cp	r14, r6
     c96:	f7 04       	cpc	r15, r7
     c98:	08 05       	cpc	r16, r8
     c9a:	19 05       	cpc	r17, r9
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <__stack+0x441>
     c9e:	fe c1       	rjmp	.+1020   	; 0x109c <__stack+0x83d>
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca4:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ca8:	9f ac       	ldd	r9, Y+63	; 0x3f
     caa:	21 97       	sbiw	r28, 0x01	; 1
     cac:	62 14       	cp	r6, r2
     cae:	73 04       	cpc	r7, r3
     cb0:	84 04       	cpc	r8, r4
     cb2:	95 04       	cpc	r9, r5
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__stack+0x459>
     cb6:	f2 c1       	rjmp	.+996    	; 0x109c <__stack+0x83d>
     cb8:	ff c1       	rjmp	.+1022   	; 0x10b8 <__stack+0x859>
     cba:	e2 96       	adiw	r28, 0x32	; 50
     cbc:	8f af       	std	Y+63, r24	; 0x3f
     cbe:	e2 97       	sbiw	r28, 0x32	; 50
     cc0:	08 2e       	mov	r0, r24
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__stack+0x46d>
     cc4:	ee 0c       	add	r14, r14
     cc6:	ff 1c       	adc	r15, r15
     cc8:	00 1f       	adc	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <__stack+0x465>
     cd0:	6a 2d       	mov	r22, r10
     cd2:	68 1b       	sub	r22, r24
     cd4:	d2 01       	movw	r26, r4
     cd6:	c1 01       	movw	r24, r2
     cd8:	06 2e       	mov	r0, r22
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__stack+0x485>
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__stack+0x47d>
     ce8:	5c 01       	movw	r10, r24
     cea:	6d 01       	movw	r12, r26
     cec:	ae 28       	or	r10, r14
     cee:	bf 28       	or	r11, r15
     cf0:	c0 2a       	or	r12, r16
     cf2:	d1 2a       	or	r13, r17
     cf4:	ad aa       	std	Y+53, r10	; 0x35
     cf6:	be aa       	std	Y+54, r11	; 0x36
     cf8:	cf aa       	std	Y+55, r12	; 0x37
     cfa:	d8 ae       	std	Y+56, r13	; 0x38
     cfc:	72 01       	movw	r14, r4
     cfe:	61 01       	movw	r12, r2
     d00:	e2 96       	adiw	r28, 0x32	; 50
     d02:	0f ac       	ldd	r0, Y+63	; 0x3f
     d04:	e2 97       	sbiw	r28, 0x32	; 50
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__stack+0x4b1>
     d08:	cc 0c       	add	r12, r12
     d0a:	dd 1c       	adc	r13, r13
     d0c:	ee 1c       	adc	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	0a 94       	dec	r0
     d12:	d2 f7       	brpl	.-12     	; 0xd08 <__stack+0x4a9>
     d14:	c9 aa       	std	Y+49, r12	; 0x31
     d16:	da aa       	std	Y+50, r13	; 0x32
     d18:	eb aa       	std	Y+51, r14	; 0x33
     d1a:	fc aa       	std	Y+52, r15	; 0x34
     d1c:	64 01       	movw	r12, r8
     d1e:	53 01       	movw	r10, r6
     d20:	06 2e       	mov	r0, r22
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x4cd>
     d24:	d6 94       	lsr	r13
     d26:	c7 94       	ror	r12
     d28:	b7 94       	ror	r11
     d2a:	a7 94       	ror	r10
     d2c:	0a 94       	dec	r0
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x4c5>
     d30:	d4 01       	movw	r26, r8
     d32:	c3 01       	movw	r24, r6
     d34:	e2 96       	adiw	r28, 0x32	; 50
     d36:	0f ac       	ldd	r0, Y+63	; 0x3f
     d38:	e2 97       	sbiw	r28, 0x32	; 50
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__stack+0x4e5>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <__stack+0x4dd>
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	ec ac       	ldd	r14, Y+60	; 0x3c
     d4c:	fd ac       	ldd	r15, Y+61	; 0x3d
     d4e:	0e ad       	ldd	r16, Y+62	; 0x3e
     d50:	1f ad       	ldd	r17, Y+63	; 0x3f
     d52:	21 97       	sbiw	r28, 0x01	; 1
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <__stack+0x4ff>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	6a 95       	dec	r22
     d60:	d2 f7       	brpl	.-12     	; 0xd56 <__stack+0x4f7>
     d62:	37 01       	movw	r6, r14
     d64:	48 01       	movw	r8, r16
     d66:	68 2a       	or	r6, r24
     d68:	79 2a       	or	r7, r25
     d6a:	8a 2a       	or	r8, r26
     d6c:	9b 2a       	or	r9, r27
     d6e:	6d a6       	std	Y+45, r6	; 0x2d
     d70:	7e a6       	std	Y+46, r7	; 0x2e
     d72:	8f a6       	std	Y+47, r8	; 0x2f
     d74:	98 aa       	std	Y+48, r9	; 0x30
     d76:	ed a8       	ldd	r14, Y+53	; 0x35
     d78:	fe a8       	ldd	r15, Y+54	; 0x36
     d7a:	0f a9       	ldd	r16, Y+55	; 0x37
     d7c:	18 ad       	ldd	r17, Y+56	; 0x38
     d7e:	38 01       	movw	r6, r16
     d80:	88 24       	eor	r8, r8
     d82:	99 24       	eor	r9, r9
     d84:	98 01       	movw	r18, r16
     d86:	87 01       	movw	r16, r14
     d88:	20 70       	andi	r18, 0x00	; 0
     d8a:	30 70       	andi	r19, 0x00	; 0
     d8c:	a5 96       	adiw	r28, 0x25	; 37
     d8e:	0c af       	std	Y+60, r16	; 0x3c
     d90:	1d af       	std	Y+61, r17	; 0x3d
     d92:	2e af       	std	Y+62, r18	; 0x3e
     d94:	3f af       	std	Y+63, r19	; 0x3f
     d96:	a5 97       	sbiw	r28, 0x25	; 37
     d98:	c6 01       	movw	r24, r12
     d9a:	b5 01       	movw	r22, r10
     d9c:	a4 01       	movw	r20, r8
     d9e:	93 01       	movw	r18, r6
     da0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     da4:	7b 01       	movw	r14, r22
     da6:	8c 01       	movw	r16, r24
     da8:	c6 01       	movw	r24, r12
     daa:	b5 01       	movw	r22, r10
     dac:	a4 01       	movw	r20, r8
     dae:	93 01       	movw	r18, r6
     db0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     db4:	c9 01       	movw	r24, r18
     db6:	da 01       	movw	r26, r20
     db8:	1c 01       	movw	r2, r24
     dba:	2d 01       	movw	r4, r26
     dbc:	c2 01       	movw	r24, r4
     dbe:	b1 01       	movw	r22, r2
     dc0:	a5 96       	adiw	r28, 0x25	; 37
     dc2:	2c ad       	ldd	r18, Y+60	; 0x3c
     dc4:	3d ad       	ldd	r19, Y+61	; 0x3d
     dc6:	4e ad       	ldd	r20, Y+62	; 0x3e
     dc8:	5f ad       	ldd	r21, Y+63	; 0x3f
     dca:	a5 97       	sbiw	r28, 0x25	; 37
     dcc:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	87 01       	movw	r16, r14
     dd6:	ff 24       	eor	r15, r15
     dd8:	ee 24       	eor	r14, r14
     dda:	ad a4       	ldd	r10, Y+45	; 0x2d
     ddc:	be a4       	ldd	r11, Y+46	; 0x2e
     dde:	cf a4       	ldd	r12, Y+47	; 0x2f
     de0:	d8 a8       	ldd	r13, Y+48	; 0x30
     de2:	c6 01       	movw	r24, r12
     de4:	aa 27       	eor	r26, r26
     de6:	bb 27       	eor	r27, r27
     de8:	57 01       	movw	r10, r14
     dea:	68 01       	movw	r12, r16
     dec:	a8 2a       	or	r10, r24
     dee:	b9 2a       	or	r11, r25
     df0:	ca 2a       	or	r12, r26
     df2:	db 2a       	or	r13, r27
     df4:	a2 16       	cp	r10, r18
     df6:	b3 06       	cpc	r11, r19
     df8:	c4 06       	cpc	r12, r20
     dfa:	d5 06       	cpc	r13, r21
     dfc:	00 f5       	brcc	.+64     	; 0xe3e <__stack+0x5df>
     dfe:	08 94       	sec
     e00:	21 08       	sbc	r2, r1
     e02:	31 08       	sbc	r3, r1
     e04:	41 08       	sbc	r4, r1
     e06:	51 08       	sbc	r5, r1
     e08:	ed a8       	ldd	r14, Y+53	; 0x35
     e0a:	fe a8       	ldd	r15, Y+54	; 0x36
     e0c:	0f a9       	ldd	r16, Y+55	; 0x37
     e0e:	18 ad       	ldd	r17, Y+56	; 0x38
     e10:	ae 0c       	add	r10, r14
     e12:	bf 1c       	adc	r11, r15
     e14:	c0 1e       	adc	r12, r16
     e16:	d1 1e       	adc	r13, r17
     e18:	ae 14       	cp	r10, r14
     e1a:	bf 04       	cpc	r11, r15
     e1c:	c0 06       	cpc	r12, r16
     e1e:	d1 06       	cpc	r13, r17
     e20:	70 f0       	brcs	.+28     	; 0xe3e <__stack+0x5df>
     e22:	a2 16       	cp	r10, r18
     e24:	b3 06       	cpc	r11, r19
     e26:	c4 06       	cpc	r12, r20
     e28:	d5 06       	cpc	r13, r21
     e2a:	48 f4       	brcc	.+18     	; 0xe3e <__stack+0x5df>
     e2c:	08 94       	sec
     e2e:	21 08       	sbc	r2, r1
     e30:	31 08       	sbc	r3, r1
     e32:	41 08       	sbc	r4, r1
     e34:	51 08       	sbc	r5, r1
     e36:	ae 0c       	add	r10, r14
     e38:	bf 1c       	adc	r11, r15
     e3a:	c0 1e       	adc	r12, r16
     e3c:	d1 1e       	adc	r13, r17
     e3e:	a2 1a       	sub	r10, r18
     e40:	b3 0a       	sbc	r11, r19
     e42:	c4 0a       	sbc	r12, r20
     e44:	d5 0a       	sbc	r13, r21
     e46:	c6 01       	movw	r24, r12
     e48:	b5 01       	movw	r22, r10
     e4a:	a4 01       	movw	r20, r8
     e4c:	93 01       	movw	r18, r6
     e4e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     e52:	7b 01       	movw	r14, r22
     e54:	8c 01       	movw	r16, r24
     e56:	c6 01       	movw	r24, r12
     e58:	b5 01       	movw	r22, r10
     e5a:	a4 01       	movw	r20, r8
     e5c:	93 01       	movw	r18, r6
     e5e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
     e62:	c9 01       	movw	r24, r18
     e64:	da 01       	movw	r26, r20
     e66:	3c 01       	movw	r6, r24
     e68:	4d 01       	movw	r8, r26
     e6a:	c4 01       	movw	r24, r8
     e6c:	b3 01       	movw	r22, r6
     e6e:	a5 96       	adiw	r28, 0x25	; 37
     e70:	2c ad       	ldd	r18, Y+60	; 0x3c
     e72:	3d ad       	ldd	r19, Y+61	; 0x3d
     e74:	4e ad       	ldd	r20, Y+62	; 0x3e
     e76:	5f ad       	ldd	r21, Y+63	; 0x3f
     e78:	a5 97       	sbiw	r28, 0x25	; 37
     e7a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	87 01       	movw	r16, r14
     e84:	ff 24       	eor	r15, r15
     e86:	ee 24       	eor	r14, r14
     e88:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e8c:	af a5       	ldd	r26, Y+47	; 0x2f
     e8e:	b8 a9       	ldd	r27, Y+48	; 0x30
     e90:	a0 70       	andi	r26, 0x00	; 0
     e92:	b0 70       	andi	r27, 0x00	; 0
     e94:	57 01       	movw	r10, r14
     e96:	68 01       	movw	r12, r16
     e98:	a8 2a       	or	r10, r24
     e9a:	b9 2a       	or	r11, r25
     e9c:	ca 2a       	or	r12, r26
     e9e:	db 2a       	or	r13, r27
     ea0:	a2 16       	cp	r10, r18
     ea2:	b3 06       	cpc	r11, r19
     ea4:	c4 06       	cpc	r12, r20
     ea6:	d5 06       	cpc	r13, r21
     ea8:	00 f5       	brcc	.+64     	; 0xeea <__stack+0x68b>
     eaa:	08 94       	sec
     eac:	61 08       	sbc	r6, r1
     eae:	71 08       	sbc	r7, r1
     eb0:	81 08       	sbc	r8, r1
     eb2:	91 08       	sbc	r9, r1
     eb4:	6d a9       	ldd	r22, Y+53	; 0x35
     eb6:	7e a9       	ldd	r23, Y+54	; 0x36
     eb8:	8f a9       	ldd	r24, Y+55	; 0x37
     eba:	98 ad       	ldd	r25, Y+56	; 0x38
     ebc:	a6 0e       	add	r10, r22
     ebe:	b7 1e       	adc	r11, r23
     ec0:	c8 1e       	adc	r12, r24
     ec2:	d9 1e       	adc	r13, r25
     ec4:	a6 16       	cp	r10, r22
     ec6:	b7 06       	cpc	r11, r23
     ec8:	c8 06       	cpc	r12, r24
     eca:	d9 06       	cpc	r13, r25
     ecc:	70 f0       	brcs	.+28     	; 0xeea <__stack+0x68b>
     ece:	a2 16       	cp	r10, r18
     ed0:	b3 06       	cpc	r11, r19
     ed2:	c4 06       	cpc	r12, r20
     ed4:	d5 06       	cpc	r13, r21
     ed6:	48 f4       	brcc	.+18     	; 0xeea <__stack+0x68b>
     ed8:	08 94       	sec
     eda:	61 08       	sbc	r6, r1
     edc:	71 08       	sbc	r7, r1
     ede:	81 08       	sbc	r8, r1
     ee0:	91 08       	sbc	r9, r1
     ee2:	a6 0e       	add	r10, r22
     ee4:	b7 1e       	adc	r11, r23
     ee6:	c8 1e       	adc	r12, r24
     ee8:	d9 1e       	adc	r13, r25
     eea:	d6 01       	movw	r26, r12
     eec:	c5 01       	movw	r24, r10
     eee:	82 1b       	sub	r24, r18
     ef0:	93 0b       	sbc	r25, r19
     ef2:	a4 0b       	sbc	r26, r20
     ef4:	b5 0b       	sbc	r27, r21
     ef6:	89 a7       	std	Y+41, r24	; 0x29
     ef8:	9a a7       	std	Y+42, r25	; 0x2a
     efa:	ab a7       	std	Y+43, r26	; 0x2b
     efc:	bc a7       	std	Y+44, r27	; 0x2c
     efe:	d1 01       	movw	r26, r2
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	64 01       	movw	r12, r8
     f06:	53 01       	movw	r10, r6
     f08:	a8 2a       	or	r10, r24
     f0a:	b9 2a       	or	r11, r25
     f0c:	ca 2a       	or	r12, r26
     f0e:	db 2a       	or	r13, r27
     f10:	25 96       	adiw	r28, 0x05	; 5
     f12:	ac ae       	std	Y+60, r10	; 0x3c
     f14:	bd ae       	std	Y+61, r11	; 0x3d
     f16:	ce ae       	std	Y+62, r12	; 0x3e
     f18:	df ae       	std	Y+63, r13	; 0x3f
     f1a:	25 97       	sbiw	r28, 0x05	; 5
     f1c:	86 01       	movw	r16, r12
     f1e:	75 01       	movw	r14, r10
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	e2 22       	and	r14, r18
     f2a:	f3 22       	and	r15, r19
     f2c:	04 23       	and	r16, r20
     f2e:	15 23       	and	r17, r21
     f30:	a6 01       	movw	r20, r12
     f32:	66 27       	eor	r22, r22
     f34:	77 27       	eor	r23, r23
     f36:	ad 96       	adiw	r28, 0x2d	; 45
     f38:	4c af       	std	Y+60, r20	; 0x3c
     f3a:	5d af       	std	Y+61, r21	; 0x3d
     f3c:	6e af       	std	Y+62, r22	; 0x3e
     f3e:	7f af       	std	Y+63, r23	; 0x3f
     f40:	ad 97       	sbiw	r28, 0x2d	; 45
     f42:	a9 a8       	ldd	r10, Y+49	; 0x31
     f44:	ba a8       	ldd	r11, Y+50	; 0x32
     f46:	cb a8       	ldd	r12, Y+51	; 0x33
     f48:	dc a8       	ldd	r13, Y+52	; 0x34
     f4a:	6f ef       	ldi	r22, 0xFF	; 255
     f4c:	7f ef       	ldi	r23, 0xFF	; 255
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a6 22       	and	r10, r22
     f54:	b7 22       	and	r11, r23
     f56:	c8 22       	and	r12, r24
     f58:	d9 22       	and	r13, r25
     f5a:	89 a9       	ldd	r24, Y+49	; 0x31
     f5c:	9a a9       	ldd	r25, Y+50	; 0x32
     f5e:	ab a9       	ldd	r26, Y+51	; 0x33
     f60:	bc a9       	ldd	r27, Y+52	; 0x34
     f62:	1d 01       	movw	r2, r26
     f64:	44 24       	eor	r4, r4
     f66:	55 24       	eor	r5, r5
     f68:	c8 01       	movw	r24, r16
     f6a:	b7 01       	movw	r22, r14
     f6c:	a6 01       	movw	r20, r12
     f6e:	95 01       	movw	r18, r10
     f70:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     f74:	a9 96       	adiw	r28, 0x29	; 41
     f76:	6c af       	std	Y+60, r22	; 0x3c
     f78:	7d af       	std	Y+61, r23	; 0x3d
     f7a:	8e af       	std	Y+62, r24	; 0x3e
     f7c:	9f af       	std	Y+63, r25	; 0x3f
     f7e:	a9 97       	sbiw	r28, 0x29	; 41
     f80:	c8 01       	movw	r24, r16
     f82:	b7 01       	movw	r22, r14
     f84:	a2 01       	movw	r20, r4
     f86:	91 01       	movw	r18, r2
     f88:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     f8c:	3b 01       	movw	r6, r22
     f8e:	4c 01       	movw	r8, r24
     f90:	ad 96       	adiw	r28, 0x2d	; 45
     f92:	6c ad       	ldd	r22, Y+60	; 0x3c
     f94:	7d ad       	ldd	r23, Y+61	; 0x3d
     f96:	8e ad       	ldd	r24, Y+62	; 0x3e
     f98:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9a:	ad 97       	sbiw	r28, 0x2d	; 45
     f9c:	a6 01       	movw	r20, r12
     f9e:	95 01       	movw	r18, r10
     fa0:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     fa4:	7b 01       	movw	r14, r22
     fa6:	8c 01       	movw	r16, r24
     fa8:	ad 96       	adiw	r28, 0x2d	; 45
     faa:	6c ad       	ldd	r22, Y+60	; 0x3c
     fac:	7d ad       	ldd	r23, Y+61	; 0x3d
     fae:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb2:	ad 97       	sbiw	r28, 0x2d	; 45
     fb4:	a2 01       	movw	r20, r4
     fb6:	91 01       	movw	r18, r2
     fb8:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
     fbc:	5b 01       	movw	r10, r22
     fbe:	6c 01       	movw	r12, r24
     fc0:	a8 01       	movw	r20, r16
     fc2:	97 01       	movw	r18, r14
     fc4:	26 0d       	add	r18, r6
     fc6:	37 1d       	adc	r19, r7
     fc8:	48 1d       	adc	r20, r8
     fca:	59 1d       	adc	r21, r9
     fcc:	a9 96       	adiw	r28, 0x29	; 41
     fce:	6c ac       	ldd	r6, Y+60	; 0x3c
     fd0:	7d ac       	ldd	r7, Y+61	; 0x3d
     fd2:	8e ac       	ldd	r8, Y+62	; 0x3e
     fd4:	9f ac       	ldd	r9, Y+63	; 0x3f
     fd6:	a9 97       	sbiw	r28, 0x29	; 41
     fd8:	c4 01       	movw	r24, r8
     fda:	aa 27       	eor	r26, r26
     fdc:	bb 27       	eor	r27, r27
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	4a 1f       	adc	r20, r26
     fe4:	5b 1f       	adc	r21, r27
     fe6:	2e 15       	cp	r18, r14
     fe8:	3f 05       	cpc	r19, r15
     fea:	40 07       	cpc	r20, r16
     fec:	51 07       	cpc	r21, r17
     fee:	48 f4       	brcc	.+18     	; 0x1002 <__stack+0x7a3>
     ff0:	e1 2c       	mov	r14, r1
     ff2:	f1 2c       	mov	r15, r1
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	06 2f       	mov	r16, r22
     ff8:	11 2d       	mov	r17, r1
     ffa:	ae 0c       	add	r10, r14
     ffc:	bf 1c       	adc	r11, r15
     ffe:	c0 1e       	adc	r12, r16
    1000:	d1 1e       	adc	r13, r17
    1002:	ca 01       	movw	r24, r20
    1004:	aa 27       	eor	r26, r26
    1006:	bb 27       	eor	r27, r27
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	6a 0d       	add	r22, r10
    100e:	7b 1d       	adc	r23, r11
    1010:	8c 1d       	adc	r24, r12
    1012:	9d 1d       	adc	r25, r13
    1014:	69 a4       	ldd	r6, Y+41	; 0x29
    1016:	7a a4       	ldd	r7, Y+42	; 0x2a
    1018:	8b a4       	ldd	r8, Y+43	; 0x2b
    101a:	9c a4       	ldd	r9, Y+44	; 0x2c
    101c:	66 16       	cp	r6, r22
    101e:	77 06       	cpc	r7, r23
    1020:	88 06       	cpc	r8, r24
    1022:	99 06       	cpc	r9, r25
    1024:	50 f1       	brcs	.+84     	; 0x107a <__stack+0x81b>
    1026:	66 15       	cp	r22, r6
    1028:	77 05       	cpc	r23, r7
    102a:	88 05       	cpc	r24, r8
    102c:	99 05       	cpc	r25, r9
    102e:	09 f0       	breq	.+2      	; 0x1032 <__stack+0x7d3>
    1030:	4d c0       	rjmp	.+154    	; 0x10cc <__stack+0x86d>
    1032:	d9 01       	movw	r26, r18
    1034:	99 27       	eor	r25, r25
    1036:	88 27       	eor	r24, r24
    1038:	a9 96       	adiw	r28, 0x29	; 41
    103a:	2c ad       	ldd	r18, Y+60	; 0x3c
    103c:	3d ad       	ldd	r19, Y+61	; 0x3d
    103e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1040:	5f ad       	ldd	r21, Y+63	; 0x3f
    1042:	a9 97       	sbiw	r28, 0x29	; 41
    1044:	40 70       	andi	r20, 0x00	; 0
    1046:	50 70       	andi	r21, 0x00	; 0
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	a4 1f       	adc	r26, r20
    104e:	b5 1f       	adc	r27, r21
    1050:	21 96       	adiw	r28, 0x01	; 1
    1052:	2c ad       	ldd	r18, Y+60	; 0x3c
    1054:	3d ad       	ldd	r19, Y+61	; 0x3d
    1056:	4e ad       	ldd	r20, Y+62	; 0x3e
    1058:	5f ad       	ldd	r21, Y+63	; 0x3f
    105a:	21 97       	sbiw	r28, 0x01	; 1
    105c:	e2 96       	adiw	r28, 0x32	; 50
    105e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1060:	e2 97       	sbiw	r28, 0x32	; 50
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__stack+0x80d>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	0a 94       	dec	r0
    106e:	d2 f7       	brpl	.-12     	; 0x1064 <__stack+0x805>
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	4a 07       	cpc	r20, r26
    1076:	5b 07       	cpc	r21, r27
    1078:	48 f5       	brcc	.+82     	; 0x10cc <__stack+0x86d>
    107a:	25 96       	adiw	r28, 0x05	; 5
    107c:	0c ad       	ldd	r16, Y+60	; 0x3c
    107e:	1d ad       	ldd	r17, Y+61	; 0x3d
    1080:	2e ad       	ldd	r18, Y+62	; 0x3e
    1082:	3f ad       	ldd	r19, Y+63	; 0x3f
    1084:	25 97       	sbiw	r28, 0x05	; 5
    1086:	01 50       	subi	r16, 0x01	; 1
    1088:	10 40       	sbci	r17, 0x00	; 0
    108a:	20 40       	sbci	r18, 0x00	; 0
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	25 96       	adiw	r28, 0x05	; 5
    1090:	0c af       	std	Y+60, r16	; 0x3c
    1092:	1d af       	std	Y+61, r17	; 0x3d
    1094:	2e af       	std	Y+62, r18	; 0x3e
    1096:	3f af       	std	Y+63, r19	; 0x3f
    1098:	25 97       	sbiw	r28, 0x05	; 5
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <__stack+0x86d>
    109c:	66 24       	eor	r6, r6
    109e:	77 24       	eor	r7, r7
    10a0:	43 01       	movw	r8, r6
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	25 96       	adiw	r28, 0x05	; 5
    10ac:	2c af       	std	Y+60, r18	; 0x3c
    10ae:	3d af       	std	Y+61, r19	; 0x3d
    10b0:	4e af       	std	Y+62, r20	; 0x3e
    10b2:	5f af       	std	Y+63, r21	; 0x3f
    10b4:	25 97       	sbiw	r28, 0x05	; 5
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__stack+0x873>
    10b8:	66 24       	eor	r6, r6
    10ba:	77 24       	eor	r7, r7
    10bc:	43 01       	movw	r8, r6
    10be:	25 96       	adiw	r28, 0x05	; 5
    10c0:	1c ae       	std	Y+60, r1	; 0x3c
    10c2:	1d ae       	std	Y+61, r1	; 0x3d
    10c4:	1e ae       	std	Y+62, r1	; 0x3e
    10c6:	1f ae       	std	Y+63, r1	; 0x3f
    10c8:	25 97       	sbiw	r28, 0x05	; 5
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <__stack+0x873>
    10cc:	66 24       	eor	r6, r6
    10ce:	77 24       	eor	r7, r7
    10d0:	43 01       	movw	r8, r6
    10d2:	fe 01       	movw	r30, r28
    10d4:	b1 96       	adiw	r30, 0x21	; 33
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	df 01       	movw	r26, r30
    10da:	1d 92       	st	X+, r1
    10dc:	8a 95       	dec	r24
    10de:	e9 f7       	brne	.-6      	; 0x10da <__stack+0x87b>
    10e0:	25 96       	adiw	r28, 0x05	; 5
    10e2:	ac ac       	ldd	r10, Y+60	; 0x3c
    10e4:	bd ac       	ldd	r11, Y+61	; 0x3d
    10e6:	ce ac       	ldd	r12, Y+62	; 0x3e
    10e8:	df ac       	ldd	r13, Y+63	; 0x3f
    10ea:	25 97       	sbiw	r28, 0x05	; 5
    10ec:	a9 a2       	std	Y+33, r10	; 0x21
    10ee:	ba a2       	std	Y+34, r11	; 0x22
    10f0:	cb a2       	std	Y+35, r12	; 0x23
    10f2:	dc a2       	std	Y+36, r13	; 0x24
    10f4:	6d a2       	std	Y+37, r6	; 0x25
    10f6:	7e a2       	std	Y+38, r7	; 0x26
    10f8:	8f a2       	std	Y+39, r8	; 0x27
    10fa:	98 a6       	std	Y+40, r9	; 0x28
    10fc:	22 96       	adiw	r28, 0x02	; 2
    10fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    1100:	22 97       	sbiw	r28, 0x02	; 2
    1102:	3a a1       	ldd	r19, Y+34	; 0x22
    1104:	4b a1       	ldd	r20, Y+35	; 0x23
    1106:	5c a1       	ldd	r21, Y+36	; 0x24
    1108:	66 2d       	mov	r22, r6
    110a:	7e a1       	ldd	r23, Y+38	; 0x26
    110c:	df a0       	ldd	r13, Y+39	; 0x27
    110e:	98 a5       	ldd	r25, Y+40	; 0x28
    1110:	e1 96       	adiw	r28, 0x31	; 49
    1112:	ec ac       	ldd	r14, Y+60	; 0x3c
    1114:	fd ac       	ldd	r15, Y+61	; 0x3d
    1116:	0e ad       	ldd	r16, Y+62	; 0x3e
    1118:	1f ad       	ldd	r17, Y+63	; 0x3f
    111a:	e1 97       	sbiw	r28, 0x31	; 49
    111c:	e1 14       	cp	r14, r1
    111e:	f1 04       	cpc	r15, r1
    1120:	01 05       	cpc	r16, r1
    1122:	11 05       	cpc	r17, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x8c9>
    1126:	56 c0       	rjmp	.+172    	; 0x11d4 <__stack+0x975>
    1128:	21 95       	neg	r18
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	12 16       	cp	r1, r18
    112e:	08 f0       	brcs	.+2      	; 0x1132 <__stack+0x8d3>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	31 95       	neg	r19
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	13 16       	cp	r1, r19
    1138:	08 f0       	brcs	.+2      	; 0x113c <__stack+0x8dd>
    113a:	e0 e0       	ldi	r30, 0x00	; 0
    113c:	93 2e       	mov	r9, r19
    113e:	98 1a       	sub	r9, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	39 15       	cp	r19, r9
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__stack+0x8e9>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	e8 2b       	or	r30, r24
    114a:	41 95       	neg	r20
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	14 16       	cp	r1, r20
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__stack+0x8f5>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	a4 2e       	mov	r10, r20
    1156:	ae 1a       	sub	r10, r30
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	4a 15       	cp	r20, r10
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__stack+0x901>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	f8 2b       	or	r31, r24
    1162:	51 95       	neg	r21
    1164:	e1 e0       	ldi	r30, 0x01	; 1
    1166:	15 16       	cp	r1, r21
    1168:	08 f0       	brcs	.+2      	; 0x116c <__stack+0x90d>
    116a:	e0 e0       	ldi	r30, 0x00	; 0
    116c:	b5 2e       	mov	r11, r21
    116e:	bf 1a       	sub	r11, r31
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	5b 15       	cp	r21, r11
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__stack+0x919>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	e8 2b       	or	r30, r24
    117a:	61 95       	neg	r22
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	16 16       	cp	r1, r22
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__stack+0x925>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	a6 2f       	mov	r26, r22
    1186:	ae 1b       	sub	r26, r30
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	6a 17       	cp	r22, r26
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__stack+0x931>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	f8 2b       	or	r31, r24
    1192:	71 95       	neg	r23
    1194:	e1 e0       	ldi	r30, 0x01	; 1
    1196:	17 16       	cp	r1, r23
    1198:	08 f0       	brcs	.+2      	; 0x119c <__stack+0x93d>
    119a:	e0 e0       	ldi	r30, 0x00	; 0
    119c:	c7 2e       	mov	r12, r23
    119e:	cf 1a       	sub	r12, r31
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	7c 15       	cp	r23, r12
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <__stack+0x949>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	e8 2b       	or	r30, r24
    11aa:	8d 2d       	mov	r24, r13
    11ac:	81 95       	neg	r24
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	18 16       	cp	r1, r24
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__stack+0x957>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	d8 2e       	mov	r13, r24
    11b8:	de 1a       	sub	r13, r30
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	8d 15       	cp	r24, r13
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__stack+0x963>
    11c0:	e0 e0       	ldi	r30, 0x00	; 0
    11c2:	fe 2b       	or	r31, r30
    11c4:	89 2f       	mov	r24, r25
    11c6:	81 95       	neg	r24
    11c8:	39 2d       	mov	r19, r9
    11ca:	a5 01       	movw	r20, r10
    11cc:	6a 2f       	mov	r22, r26
    11ce:	7c 2d       	mov	r23, r12
    11d0:	98 2f       	mov	r25, r24
    11d2:	9f 1b       	sub	r25, r31
    11d4:	8d 2d       	mov	r24, r13
    11d6:	ce 58       	subi	r28, 0x8E	; 142
    11d8:	df 4f       	sbci	r29, 0xFF	; 255
    11da:	e2 e1       	ldi	r30, 0x12	; 18
    11dc:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__epilogue_restores__>

000011e0 <__moddi3>:
    11e0:	a7 e7       	ldi	r26, 0x77	; 119
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 ef       	ldi	r30, 0xF6	; 246
    11e6:	f8 e0       	ldi	r31, 0x08	; 8
    11e8:	0c 94 0c 38 	jmp	0x7018	; 0x7018 <__prologue_saves__>
    11ec:	98 2e       	mov	r9, r24
    11ee:	89 2e       	mov	r8, r25
    11f0:	71 2e       	mov	r7, r17
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	fe 01       	movw	r30, r28
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	df 01       	movw	r26, r30
    11fa:	68 2e       	mov	r6, r24
    11fc:	1d 92       	st	X+, r1
    11fe:	6a 94       	dec	r6
    1200:	e9 f7       	brne	.-6      	; 0x11fc <__moddi3+0x1c>
    1202:	29 83       	std	Y+1, r18	; 0x01
    1204:	3a 83       	std	Y+2, r19	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
    1208:	5c 83       	std	Y+4, r21	; 0x04
    120a:	6d 83       	std	Y+5, r22	; 0x05
    120c:	7e 83       	std	Y+6, r23	; 0x06
    120e:	9f 82       	std	Y+7, r9	; 0x07
    1210:	98 87       	std	Y+8, r25	; 0x08
    1212:	fe 01       	movw	r30, r28
    1214:	39 96       	adiw	r30, 0x09	; 9
    1216:	df 01       	movw	r26, r30
    1218:	1d 92       	st	X+, r1
    121a:	8a 95       	dec	r24
    121c:	e9 f7       	brne	.-6      	; 0x1218 <__moddi3+0x38>
    121e:	a9 86       	std	Y+9, r10	; 0x09
    1220:	ba 86       	std	Y+10, r11	; 0x0a
    1222:	cb 86       	std	Y+11, r12	; 0x0b
    1224:	dc 86       	std	Y+12, r13	; 0x0c
    1226:	ed 86       	std	Y+13, r14	; 0x0d
    1228:	fe 86       	std	Y+14, r15	; 0x0e
    122a:	0f 87       	std	Y+15, r16	; 0x0f
    122c:	18 8b       	std	Y+16, r17	; 0x10
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	af 81       	ldd	r26, Y+7	; 0x07
    1234:	b8 85       	ldd	r27, Y+8	; 0x08
    1236:	b7 fd       	sbrc	r27, 7
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <__moddi3+0x68>
    123a:	e1 96       	adiw	r28, 0x31	; 49
    123c:	1c ae       	std	Y+60, r1	; 0x3c
    123e:	1d ae       	std	Y+61, r1	; 0x3d
    1240:	1e ae       	std	Y+62, r1	; 0x3e
    1242:	1f ae       	std	Y+63, r1	; 0x3f
    1244:	e1 97       	sbiw	r28, 0x31	; 49
    1246:	64 c0       	rjmp	.+200    	; 0x1310 <__moddi3+0x130>
    1248:	21 95       	neg	r18
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	12 16       	cp	r1, r18
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__moddi3+0x72>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	31 95       	neg	r19
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	13 16       	cp	r1, r19
    1258:	08 f0       	brcs	.+2      	; 0x125c <__moddi3+0x7c>
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b3 2f       	mov	r27, r19
    125e:	b8 1b       	sub	r27, r24
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	3b 17       	cp	r19, r27
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__moddi3+0x88>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	98 2b       	or	r25, r24
    126a:	41 95       	neg	r20
    126c:	31 e0       	ldi	r19, 0x01	; 1
    126e:	14 16       	cp	r1, r20
    1270:	08 f0       	brcs	.+2      	; 0x1274 <__moddi3+0x94>
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a4 2f       	mov	r26, r20
    1276:	a9 1b       	sub	r26, r25
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	4a 17       	cp	r20, r26
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0xa0>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	38 2b       	or	r19, r24
    1282:	51 95       	neg	r21
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	15 16       	cp	r1, r21
    1288:	08 f0       	brcs	.+2      	; 0x128c <__moddi3+0xac>
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f5 2f       	mov	r31, r21
    128e:	f3 1b       	sub	r31, r19
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	5f 17       	cp	r21, r31
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__moddi3+0xb8>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	98 2b       	or	r25, r24
    129a:	61 95       	neg	r22
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	16 16       	cp	r1, r22
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__moddi3+0xc4>
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	e6 2f       	mov	r30, r22
    12a6:	e9 1b       	sub	r30, r25
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	6e 17       	cp	r22, r30
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__moddi3+0xd0>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	38 2b       	or	r19, r24
    12b2:	71 95       	neg	r23
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	17 16       	cp	r1, r23
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__moddi3+0xdc>
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	57 2f       	mov	r21, r23
    12be:	53 1b       	sub	r21, r19
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	75 17       	cp	r23, r21
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__moddi3+0xe8>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	48 2b       	or	r20, r24
    12ca:	89 2d       	mov	r24, r9
    12cc:	81 95       	neg	r24
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	18 16       	cp	r1, r24
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__moddi3+0xf6>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	68 2e       	mov	r6, r24
    12d8:	64 1a       	sub	r6, r20
    12da:	46 2d       	mov	r20, r6
    12dc:	31 e0       	ldi	r19, 0x01	; 1
    12de:	86 15       	cp	r24, r6
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__moddi3+0x104>
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	93 2b       	or	r25, r19
    12e6:	88 2d       	mov	r24, r8
    12e8:	81 95       	neg	r24
    12ea:	89 1b       	sub	r24, r25
    12ec:	29 83       	std	Y+1, r18	; 0x01
    12ee:	ba 83       	std	Y+2, r27	; 0x02
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	fc 83       	std	Y+4, r31	; 0x04
    12f4:	ed 83       	std	Y+5, r30	; 0x05
    12f6:	5e 83       	std	Y+6, r21	; 0x06
    12f8:	4f 83       	std	Y+7, r20	; 0x07
    12fa:	88 87       	std	Y+8, r24	; 0x08
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f ef       	ldi	r20, 0xFF	; 255
    1302:	5f ef       	ldi	r21, 0xFF	; 255
    1304:	e1 96       	adiw	r28, 0x31	; 49
    1306:	2c af       	std	Y+60, r18	; 0x3c
    1308:	3d af       	std	Y+61, r19	; 0x3d
    130a:	4e af       	std	Y+62, r20	; 0x3e
    130c:	5f af       	std	Y+63, r21	; 0x3f
    130e:	e1 97       	sbiw	r28, 0x31	; 49
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	af 85       	ldd	r26, Y+15	; 0x0f
    1316:	b8 89       	ldd	r27, Y+16	; 0x10
    1318:	b7 ff       	sbrs	r27, 7
    131a:	5a c0       	rjmp	.+180    	; 0x13d0 <__moddi3+0x1f0>
    131c:	a1 94       	neg	r10
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	1a 14       	cp	r1, r10
    1322:	08 f0       	brcs	.+2      	; 0x1326 <__moddi3+0x146>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	b1 94       	neg	r11
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	1b 14       	cp	r1, r11
    132c:	08 f0       	brcs	.+2      	; 0x1330 <__moddi3+0x150>
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	6b 2d       	mov	r22, r11
    1332:	68 1b       	sub	r22, r24
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	b6 16       	cp	r11, r22
    1338:	08 f0       	brcs	.+2      	; 0x133c <__moddi3+0x15c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	98 2b       	or	r25, r24
    133e:	c1 94       	neg	r12
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	1c 14       	cp	r1, r12
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__moddi3+0x168>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	5c 2d       	mov	r21, r12
    134a:	59 1b       	sub	r21, r25
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	c5 16       	cp	r12, r21
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__moddi3+0x174>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	28 2b       	or	r18, r24
    1356:	d1 94       	neg	r13
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	1d 14       	cp	r1, r13
    135c:	08 f0       	brcs	.+2      	; 0x1360 <__moddi3+0x180>
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	4d 2d       	mov	r20, r13
    1362:	42 1b       	sub	r20, r18
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	d4 16       	cp	r13, r20
    1368:	08 f0       	brcs	.+2      	; 0x136c <__moddi3+0x18c>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	98 2b       	or	r25, r24
    136e:	e1 94       	neg	r14
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	1e 14       	cp	r1, r14
    1374:	08 f0       	brcs	.+2      	; 0x1378 <__moddi3+0x198>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3e 2d       	mov	r19, r14
    137a:	39 1b       	sub	r19, r25
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	e3 16       	cp	r14, r19
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__moddi3+0x1a4>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	28 2b       	or	r18, r24
    1386:	f1 94       	neg	r15
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	1f 14       	cp	r1, r15
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__moddi3+0x1b0>
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	7f 2d       	mov	r23, r15
    1392:	72 1b       	sub	r23, r18
    1394:	27 2f       	mov	r18, r23
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	f7 16       	cp	r15, r23
    139a:	08 f0       	brcs	.+2      	; 0x139e <__moddi3+0x1be>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	98 2b       	or	r25, r24
    13a0:	01 95       	neg	r16
    13a2:	11 e0       	ldi	r17, 0x01	; 1
    13a4:	10 16       	cp	r1, r16
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <__moddi3+0x1ca>
    13a8:	10 e0       	ldi	r17, 0x00	; 0
    13aa:	80 2f       	mov	r24, r16
    13ac:	89 1b       	sub	r24, r25
    13ae:	98 2f       	mov	r25, r24
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	09 17       	cp	r16, r25
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__moddi3+0x1d8>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	18 2b       	or	r17, r24
    13ba:	87 2d       	mov	r24, r7
    13bc:	81 95       	neg	r24
    13be:	81 1b       	sub	r24, r17
    13c0:	a9 86       	std	Y+9, r10	; 0x09
    13c2:	6a 87       	std	Y+10, r22	; 0x0a
    13c4:	5b 87       	std	Y+11, r21	; 0x0b
    13c6:	4c 87       	std	Y+12, r20	; 0x0c
    13c8:	3d 87       	std	Y+13, r19	; 0x0d
    13ca:	2e 87       	std	Y+14, r18	; 0x0e
    13cc:	9f 87       	std	Y+15, r25	; 0x0f
    13ce:	88 8b       	std	Y+16, r24	; 0x10
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	3b 81       	ldd	r19, Y+3	; 0x03
    13d6:	4c 81       	ldd	r20, Y+4	; 0x04
    13d8:	5d 81       	ldd	r21, Y+5	; 0x05
    13da:	6e 81       	ldd	r22, Y+6	; 0x06
    13dc:	7f 81       	ldd	r23, Y+7	; 0x07
    13de:	a8 85       	ldd	r26, Y+8	; 0x08
    13e0:	b9 85       	ldd	r27, Y+9	; 0x09
    13e2:	1a 85       	ldd	r17, Y+10	; 0x0a
    13e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    13e6:	fc 84       	ldd	r15, Y+12	; 0x0c
    13e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ea:	de 84       	ldd	r13, Y+14	; 0x0e
    13ec:	cf 84       	ldd	r12, Y+15	; 0x0f
    13ee:	b8 88       	ldd	r11, Y+16	; 0x10
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	e9 e1       	ldi	r30, 0x19	; 25
    13f4:	8e 2e       	mov	r8, r30
    13f6:	91 2c       	mov	r9, r1
    13f8:	8c 0e       	add	r8, r28
    13fa:	9d 1e       	adc	r9, r29
    13fc:	f4 01       	movw	r30, r8
    13fe:	68 2e       	mov	r6, r24
    1400:	11 92       	st	Z+, r1
    1402:	6a 94       	dec	r6
    1404:	e9 f7       	brne	.-6      	; 0x1400 <__moddi3+0x220>
    1406:	99 8f       	std	Y+25, r25	; 0x19
    1408:	2a 8f       	std	Y+26, r18	; 0x1a
    140a:	3b 8f       	std	Y+27, r19	; 0x1b
    140c:	4c 8f       	std	Y+28, r20	; 0x1c
    140e:	5d 8f       	std	Y+29, r21	; 0x1d
    1410:	6e 8f       	std	Y+30, r22	; 0x1e
    1412:	7f 8f       	std	Y+31, r23	; 0x1f
    1414:	a8 a3       	std	Y+32, r26	; 0x20
    1416:	9e 01       	movw	r18, r28
    1418:	2f 5d       	subi	r18, 0xDF	; 223
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	f9 01       	movw	r30, r18
    141e:	11 92       	st	Z+, r1
    1420:	8a 95       	dec	r24
    1422:	e9 f7       	brne	.-6      	; 0x141e <__moddi3+0x23e>
    1424:	b9 a3       	std	Y+33, r27	; 0x21
    1426:	1a a3       	std	Y+34, r17	; 0x22
    1428:	0b a3       	std	Y+35, r16	; 0x23
    142a:	fc a2       	std	Y+36, r15	; 0x24
    142c:	ed a2       	std	Y+37, r14	; 0x25
    142e:	de a2       	std	Y+38, r13	; 0x26
    1430:	cf a2       	std	Y+39, r12	; 0x27
    1432:	b8 a6       	std	Y+40, r11	; 0x28
    1434:	29 a0       	ldd	r2, Y+33	; 0x21
    1436:	3a a0       	ldd	r3, Y+34	; 0x22
    1438:	4b a0       	ldd	r4, Y+35	; 0x23
    143a:	5c a0       	ldd	r5, Y+36	; 0x24
    143c:	ad a0       	ldd	r10, Y+37	; 0x25
    143e:	be a0       	ldd	r11, Y+38	; 0x26
    1440:	cf a0       	ldd	r12, Y+39	; 0x27
    1442:	d8 a4       	ldd	r13, Y+40	; 0x28
    1444:	49 8d       	ldd	r20, Y+25	; 0x19
    1446:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1448:	6b 8d       	ldd	r22, Y+27	; 0x1b
    144a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    144c:	e5 96       	adiw	r28, 0x35	; 53
    144e:	4f af       	std	Y+63, r20	; 0x3f
    1450:	e5 97       	sbiw	r28, 0x35	; 53
    1452:	e6 96       	adiw	r28, 0x36	; 54
    1454:	5f af       	std	Y+63, r21	; 0x3f
    1456:	e6 97       	sbiw	r28, 0x36	; 54
    1458:	e7 96       	adiw	r28, 0x37	; 55
    145a:	6f af       	std	Y+63, r22	; 0x3f
    145c:	e7 97       	sbiw	r28, 0x37	; 55
    145e:	e8 96       	adiw	r28, 0x38	; 56
    1460:	7f af       	std	Y+63, r23	; 0x3f
    1462:	e8 97       	sbiw	r28, 0x38	; 56
    1464:	e8 96       	adiw	r28, 0x38	; 56
    1466:	6c ac       	ldd	r6, Y+60	; 0x3c
    1468:	7d ac       	ldd	r7, Y+61	; 0x3d
    146a:	8e ac       	ldd	r8, Y+62	; 0x3e
    146c:	9f ac       	ldd	r9, Y+63	; 0x3f
    146e:	e8 97       	sbiw	r28, 0x38	; 56
    1470:	2d 96       	adiw	r28, 0x0d	; 13
    1472:	6c ae       	std	Y+60, r6	; 0x3c
    1474:	7d ae       	std	Y+61, r7	; 0x3d
    1476:	8e ae       	std	Y+62, r8	; 0x3e
    1478:	9f ae       	std	Y+63, r9	; 0x3f
    147a:	2d 97       	sbiw	r28, 0x0d	; 13
    147c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1480:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1482:	38 a1       	ldd	r19, Y+32	; 0x20
    1484:	3c 01       	movw	r6, r24
    1486:	49 01       	movw	r8, r18
    1488:	61 96       	adiw	r28, 0x11	; 17
    148a:	6c ae       	std	Y+60, r6	; 0x3c
    148c:	7d ae       	std	Y+61, r7	; 0x3d
    148e:	8e ae       	std	Y+62, r8	; 0x3e
    1490:	9f ae       	std	Y+63, r9	; 0x3f
    1492:	61 97       	sbiw	r28, 0x11	; 17
    1494:	a1 14       	cp	r10, r1
    1496:	b1 04       	cpc	r11, r1
    1498:	c1 04       	cpc	r12, r1
    149a:	d1 04       	cpc	r13, r1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__moddi3+0x2c0>
    149e:	28 c3       	rjmp	.+1616   	; 0x1af0 <__moddi3+0x910>
    14a0:	62 14       	cp	r6, r2
    14a2:	73 04       	cpc	r7, r3
    14a4:	84 04       	cpc	r8, r4
    14a6:	95 04       	cpc	r9, r5
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <__moddi3+0x2cc>
    14aa:	0e c1       	rjmp	.+540    	; 0x16c8 <__moddi3+0x4e8>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	20 16       	cp	r2, r16
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	30 06       	cpc	r3, r16
    14b4:	01 e0       	ldi	r16, 0x01	; 1
    14b6:	40 06       	cpc	r4, r16
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	50 06       	cpc	r5, r16
    14bc:	88 f4       	brcc	.+34     	; 0x14e0 <__moddi3+0x300>
    14be:	1f ef       	ldi	r17, 0xFF	; 255
    14c0:	21 16       	cp	r2, r17
    14c2:	31 04       	cpc	r3, r1
    14c4:	41 04       	cpc	r4, r1
    14c6:	51 04       	cpc	r5, r1
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <__moddi3+0x2f8>
    14ca:	30 f0       	brcs	.+12     	; 0x14d8 <__moddi3+0x2f8>
    14cc:	88 e0       	ldi	r24, 0x08	; 8
    14ce:	e8 2e       	mov	r14, r24
    14d0:	f1 2c       	mov	r15, r1
    14d2:	01 2d       	mov	r16, r1
    14d4:	11 2d       	mov	r17, r1
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <__moddi3+0x328>
    14d8:	ee 24       	eor	r14, r14
    14da:	ff 24       	eor	r15, r15
    14dc:	87 01       	movw	r16, r14
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <__moddi3+0x328>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	22 16       	cp	r2, r18
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	32 06       	cpc	r3, r18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	42 06       	cpc	r4, r18
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	52 06       	cpc	r5, r18
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <__moddi3+0x31e>
    14f2:	b8 e1       	ldi	r27, 0x18	; 24
    14f4:	eb 2e       	mov	r14, r27
    14f6:	f1 2c       	mov	r15, r1
    14f8:	01 2d       	mov	r16, r1
    14fa:	11 2d       	mov	r17, r1
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <__moddi3+0x328>
    14fe:	a0 e1       	ldi	r26, 0x10	; 16
    1500:	ea 2e       	mov	r14, r26
    1502:	f1 2c       	mov	r15, r1
    1504:	01 2d       	mov	r16, r1
    1506:	11 2d       	mov	r17, r1
    1508:	d2 01       	movw	r26, r4
    150a:	c1 01       	movw	r24, r2
    150c:	0e 2c       	mov	r0, r14
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <__moddi3+0x338>
    1510:	b6 95       	lsr	r27
    1512:	a7 95       	ror	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	0a 94       	dec	r0
    151a:	d2 f7       	brpl	.-12     	; 0x1510 <__moddi3+0x330>
    151c:	8c 52       	subi	r24, 0x2C	; 44
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	dc 01       	movw	r26, r24
    1522:	2c 91       	ld	r18, X
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	8e 19       	sub	r24, r14
    152e:	9f 09       	sbc	r25, r15
    1530:	a0 0b       	sbc	r26, r16
    1532:	b1 0b       	sbc	r27, r17
    1534:	5c 01       	movw	r10, r24
    1536:	6d 01       	movw	r12, r26
    1538:	a2 1a       	sub	r10, r18
    153a:	b1 08       	sbc	r11, r1
    153c:	c1 08       	sbc	r12, r1
    153e:	d1 08       	sbc	r13, r1
    1540:	65 96       	adiw	r28, 0x15	; 21
    1542:	ac ae       	std	Y+60, r10	; 0x3c
    1544:	bd ae       	std	Y+61, r11	; 0x3d
    1546:	ce ae       	std	Y+62, r12	; 0x3e
    1548:	df ae       	std	Y+63, r13	; 0x3f
    154a:	65 97       	sbiw	r28, 0x15	; 21
    154c:	a1 14       	cp	r10, r1
    154e:	b1 04       	cpc	r11, r1
    1550:	c1 04       	cpc	r12, r1
    1552:	d1 04       	cpc	r13, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <__moddi3+0x378>
    1556:	45 c0       	rjmp	.+138    	; 0x15e2 <__moddi3+0x402>
    1558:	62 96       	adiw	r28, 0x12	; 18
    155a:	6f ad       	ldd	r22, Y+63	; 0x3f
    155c:	62 97       	sbiw	r28, 0x12	; 18
    155e:	06 2e       	mov	r0, r22
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__moddi3+0x38a>
    1562:	22 0c       	add	r2, r2
    1564:	33 1c       	adc	r3, r3
    1566:	44 1c       	adc	r4, r4
    1568:	55 1c       	adc	r5, r5
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__moddi3+0x382>
    156e:	a4 01       	movw	r20, r8
    1570:	93 01       	movw	r18, r6
    1572:	06 2e       	mov	r0, r22
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__moddi3+0x39e>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	0a 94       	dec	r0
    1580:	d2 f7       	brpl	.-12     	; 0x1576 <__moddi3+0x396>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	8a 19       	sub	r24, r10
    1588:	9b 09       	sbc	r25, r11
    158a:	e8 96       	adiw	r28, 0x38	; 56
    158c:	cc ac       	ldd	r12, Y+60	; 0x3c
    158e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1590:	ee ac       	ldd	r14, Y+62	; 0x3e
    1592:	ff ac       	ldd	r15, Y+63	; 0x3f
    1594:	e8 97       	sbiw	r28, 0x38	; 56
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__moddi3+0x3c0>
    1598:	f6 94       	lsr	r15
    159a:	e7 94       	ror	r14
    159c:	d7 94       	ror	r13
    159e:	c7 94       	ror	r12
    15a0:	8a 95       	dec	r24
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__moddi3+0x3b8>
    15a4:	87 01       	movw	r16, r14
    15a6:	76 01       	movw	r14, r12
    15a8:	e2 2a       	or	r14, r18
    15aa:	f3 2a       	or	r15, r19
    15ac:	04 2b       	or	r16, r20
    15ae:	15 2b       	or	r17, r21
    15b0:	61 96       	adiw	r28, 0x11	; 17
    15b2:	ec ae       	std	Y+60, r14	; 0x3c
    15b4:	fd ae       	std	Y+61, r15	; 0x3d
    15b6:	0e af       	std	Y+62, r16	; 0x3e
    15b8:	1f af       	std	Y+63, r17	; 0x3f
    15ba:	61 97       	sbiw	r28, 0x11	; 17
    15bc:	e8 96       	adiw	r28, 0x38	; 56
    15be:	0c ad       	ldd	r16, Y+60	; 0x3c
    15c0:	1d ad       	ldd	r17, Y+61	; 0x3d
    15c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    15c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    15c6:	e8 97       	sbiw	r28, 0x38	; 56
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <__moddi3+0x3f2>
    15ca:	00 0f       	add	r16, r16
    15cc:	11 1f       	adc	r17, r17
    15ce:	22 1f       	adc	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	6a 95       	dec	r22
    15d4:	d2 f7       	brpl	.-12     	; 0x15ca <__moddi3+0x3ea>
    15d6:	2d 96       	adiw	r28, 0x0d	; 13
    15d8:	0c af       	std	Y+60, r16	; 0x3c
    15da:	1d af       	std	Y+61, r17	; 0x3d
    15dc:	2e af       	std	Y+62, r18	; 0x3e
    15de:	3f af       	std	Y+63, r19	; 0x3f
    15e0:	2d 97       	sbiw	r28, 0x0d	; 13
    15e2:	32 01       	movw	r6, r4
    15e4:	88 24       	eor	r8, r8
    15e6:	99 24       	eor	r9, r9
    15e8:	a2 01       	movw	r20, r4
    15ea:	91 01       	movw	r18, r2
    15ec:	40 70       	andi	r20, 0x00	; 0
    15ee:	50 70       	andi	r21, 0x00	; 0
    15f0:	69 96       	adiw	r28, 0x19	; 25
    15f2:	2c af       	std	Y+60, r18	; 0x3c
    15f4:	3d af       	std	Y+61, r19	; 0x3d
    15f6:	4e af       	std	Y+62, r20	; 0x3e
    15f8:	5f af       	std	Y+63, r21	; 0x3f
    15fa:	69 97       	sbiw	r28, 0x19	; 25
    15fc:	61 96       	adiw	r28, 0x11	; 17
    15fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1600:	7d ad       	ldd	r23, Y+61	; 0x3d
    1602:	8e ad       	ldd	r24, Y+62	; 0x3e
    1604:	9f ad       	ldd	r25, Y+63	; 0x3f
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1610:	7b 01       	movw	r14, r22
    1612:	8c 01       	movw	r16, r24
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	6c ad       	ldd	r22, Y+60	; 0x3c
    1618:	7d ad       	ldd	r23, Y+61	; 0x3d
    161a:	8e ad       	ldd	r24, Y+62	; 0x3e
    161c:	9f ad       	ldd	r25, Y+63	; 0x3f
    161e:	61 97       	sbiw	r28, 0x11	; 17
    1620:	a4 01       	movw	r20, r8
    1622:	93 01       	movw	r18, r6
    1624:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1628:	ca 01       	movw	r24, r20
    162a:	b9 01       	movw	r22, r18
    162c:	69 96       	adiw	r28, 0x19	; 25
    162e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1630:	3d ad       	ldd	r19, Y+61	; 0x3d
    1632:	4e ad       	ldd	r20, Y+62	; 0x3e
    1634:	5f ad       	ldd	r21, Y+63	; 0x3f
    1636:	69 97       	sbiw	r28, 0x19	; 25
    1638:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	87 01       	movw	r16, r14
    1642:	ff 24       	eor	r15, r15
    1644:	ee 24       	eor	r14, r14
    1646:	2d 96       	adiw	r28, 0x0d	; 13
    1648:	ac ac       	ldd	r10, Y+60	; 0x3c
    164a:	bd ac       	ldd	r11, Y+61	; 0x3d
    164c:	ce ac       	ldd	r12, Y+62	; 0x3e
    164e:	df ac       	ldd	r13, Y+63	; 0x3f
    1650:	2d 97       	sbiw	r28, 0x0d	; 13
    1652:	c6 01       	movw	r24, r12
    1654:	aa 27       	eor	r26, r26
    1656:	bb 27       	eor	r27, r27
    1658:	57 01       	movw	r10, r14
    165a:	68 01       	movw	r12, r16
    165c:	a8 2a       	or	r10, r24
    165e:	b9 2a       	or	r11, r25
    1660:	ca 2a       	or	r12, r26
    1662:	db 2a       	or	r13, r27
    1664:	a2 16       	cp	r10, r18
    1666:	b3 06       	cpc	r11, r19
    1668:	c4 06       	cpc	r12, r20
    166a:	d5 06       	cpc	r13, r21
    166c:	90 f4       	brcc	.+36     	; 0x1692 <__moddi3+0x4b2>
    166e:	a2 0c       	add	r10, r2
    1670:	b3 1c       	adc	r11, r3
    1672:	c4 1c       	adc	r12, r4
    1674:	d5 1c       	adc	r13, r5
    1676:	a2 14       	cp	r10, r2
    1678:	b3 04       	cpc	r11, r3
    167a:	c4 04       	cpc	r12, r4
    167c:	d5 04       	cpc	r13, r5
    167e:	48 f0       	brcs	.+18     	; 0x1692 <__moddi3+0x4b2>
    1680:	a2 16       	cp	r10, r18
    1682:	b3 06       	cpc	r11, r19
    1684:	c4 06       	cpc	r12, r20
    1686:	d5 06       	cpc	r13, r21
    1688:	20 f4       	brcc	.+8      	; 0x1692 <__moddi3+0x4b2>
    168a:	a2 0c       	add	r10, r2
    168c:	b3 1c       	adc	r11, r3
    168e:	c4 1c       	adc	r12, r4
    1690:	d5 1c       	adc	r13, r5
    1692:	a2 1a       	sub	r10, r18
    1694:	b3 0a       	sbc	r11, r19
    1696:	c4 0a       	sbc	r12, r20
    1698:	d5 0a       	sbc	r13, r21
    169a:	c6 01       	movw	r24, r12
    169c:	b5 01       	movw	r22, r10
    169e:	a4 01       	movw	r20, r8
    16a0:	93 01       	movw	r18, r6
    16a2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    16a6:	7b 01       	movw	r14, r22
    16a8:	8c 01       	movw	r16, r24
    16aa:	c6 01       	movw	r24, r12
    16ac:	b5 01       	movw	r22, r10
    16ae:	a4 01       	movw	r20, r8
    16b0:	93 01       	movw	r18, r6
    16b2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    16b6:	ca 01       	movw	r24, r20
    16b8:	b9 01       	movw	r22, r18
    16ba:	69 96       	adiw	r28, 0x19	; 25
    16bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    16be:	3d ad       	ldd	r19, Y+61	; 0x3d
    16c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    16c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16c4:	69 97       	sbiw	r28, 0x19	; 25
    16c6:	c8 c1       	rjmp	.+912    	; 0x1a58 <__moddi3+0x878>
    16c8:	21 14       	cp	r2, r1
    16ca:	31 04       	cpc	r3, r1
    16cc:	41 04       	cpc	r4, r1
    16ce:	51 04       	cpc	r5, r1
    16d0:	71 f4       	brne	.+28     	; 0x16ee <__moddi3+0x50e>
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    16e6:	c9 01       	movw	r24, r18
    16e8:	da 01       	movw	r26, r20
    16ea:	1c 01       	movw	r2, r24
    16ec:	2d 01       	movw	r4, r26
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	20 16       	cp	r2, r16
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	30 06       	cpc	r3, r16
    16f6:	01 e0       	ldi	r16, 0x01	; 1
    16f8:	40 06       	cpc	r4, r16
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	50 06       	cpc	r5, r16
    16fe:	88 f4       	brcc	.+34     	; 0x1722 <__moddi3+0x542>
    1700:	1f ef       	ldi	r17, 0xFF	; 255
    1702:	21 16       	cp	r2, r17
    1704:	31 04       	cpc	r3, r1
    1706:	41 04       	cpc	r4, r1
    1708:	51 04       	cpc	r5, r1
    170a:	39 f0       	breq	.+14     	; 0x171a <__moddi3+0x53a>
    170c:	30 f0       	brcs	.+12     	; 0x171a <__moddi3+0x53a>
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	e6 2e       	mov	r14, r22
    1712:	f1 2c       	mov	r15, r1
    1714:	01 2d       	mov	r16, r1
    1716:	11 2d       	mov	r17, r1
    1718:	18 c0       	rjmp	.+48     	; 0x174a <__moddi3+0x56a>
    171a:	ee 24       	eor	r14, r14
    171c:	ff 24       	eor	r15, r15
    171e:	87 01       	movw	r16, r14
    1720:	14 c0       	rjmp	.+40     	; 0x174a <__moddi3+0x56a>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	22 16       	cp	r2, r18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	32 06       	cpc	r3, r18
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	42 06       	cpc	r4, r18
    172e:	21 e0       	ldi	r18, 0x01	; 1
    1730:	52 06       	cpc	r5, r18
    1732:	30 f0       	brcs	.+12     	; 0x1740 <__moddi3+0x560>
    1734:	58 e1       	ldi	r21, 0x18	; 24
    1736:	e5 2e       	mov	r14, r21
    1738:	f1 2c       	mov	r15, r1
    173a:	01 2d       	mov	r16, r1
    173c:	11 2d       	mov	r17, r1
    173e:	05 c0       	rjmp	.+10     	; 0x174a <__moddi3+0x56a>
    1740:	40 e1       	ldi	r20, 0x10	; 16
    1742:	e4 2e       	mov	r14, r20
    1744:	f1 2c       	mov	r15, r1
    1746:	01 2d       	mov	r16, r1
    1748:	11 2d       	mov	r17, r1
    174a:	d2 01       	movw	r26, r4
    174c:	c1 01       	movw	r24, r2
    174e:	0e 2c       	mov	r0, r14
    1750:	04 c0       	rjmp	.+8      	; 0x175a <__moddi3+0x57a>
    1752:	b6 95       	lsr	r27
    1754:	a7 95       	ror	r26
    1756:	97 95       	ror	r25
    1758:	87 95       	ror	r24
    175a:	0a 94       	dec	r0
    175c:	d2 f7       	brpl	.-12     	; 0x1752 <__moddi3+0x572>
    175e:	8c 52       	subi	r24, 0x2C	; 44
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	dc 01       	movw	r26, r24
    1764:	2c 91       	ld	r18, X
    1766:	30 e2       	ldi	r19, 0x20	; 32
    1768:	a3 2e       	mov	r10, r19
    176a:	b1 2c       	mov	r11, r1
    176c:	c1 2c       	mov	r12, r1
    176e:	d1 2c       	mov	r13, r1
    1770:	d6 01       	movw	r26, r12
    1772:	c5 01       	movw	r24, r10
    1774:	8e 19       	sub	r24, r14
    1776:	9f 09       	sbc	r25, r15
    1778:	a0 0b       	sbc	r26, r16
    177a:	b1 0b       	sbc	r27, r17
    177c:	7c 01       	movw	r14, r24
    177e:	8d 01       	movw	r16, r26
    1780:	e2 1a       	sub	r14, r18
    1782:	f1 08       	sbc	r15, r1
    1784:	01 09       	sbc	r16, r1
    1786:	11 09       	sbc	r17, r1
    1788:	65 96       	adiw	r28, 0x15	; 21
    178a:	ec ae       	std	Y+60, r14	; 0x3c
    178c:	fd ae       	std	Y+61, r15	; 0x3d
    178e:	0e af       	std	Y+62, r16	; 0x3e
    1790:	1f af       	std	Y+63, r17	; 0x3f
    1792:	65 97       	sbiw	r28, 0x15	; 21
    1794:	e1 14       	cp	r14, r1
    1796:	f1 04       	cpc	r15, r1
    1798:	01 05       	cpc	r16, r1
    179a:	11 05       	cpc	r17, r1
    179c:	39 f4       	brne	.+14     	; 0x17ac <__moddi3+0x5cc>
    179e:	64 01       	movw	r12, r8
    17a0:	53 01       	movw	r10, r6
    17a2:	a2 18       	sub	r10, r2
    17a4:	b3 08       	sbc	r11, r3
    17a6:	c4 08       	sbc	r12, r4
    17a8:	d5 08       	sbc	r13, r5
    17aa:	ec c0       	rjmp	.+472    	; 0x1984 <__moddi3+0x7a4>
    17ac:	62 96       	adiw	r28, 0x12	; 18
    17ae:	ff ac       	ldd	r15, Y+63	; 0x3f
    17b0:	62 97       	sbiw	r28, 0x12	; 18
    17b2:	e4 96       	adiw	r28, 0x34	; 52
    17b4:	ff ae       	std	Y+63, r15	; 0x3f
    17b6:	e4 97       	sbiw	r28, 0x34	; 52
    17b8:	0f 2c       	mov	r0, r15
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <__moddi3+0x5e4>
    17bc:	22 0c       	add	r2, r2
    17be:	33 1c       	adc	r3, r3
    17c0:	44 1c       	adc	r4, r4
    17c2:	55 1c       	adc	r5, r5
    17c4:	0a 94       	dec	r0
    17c6:	d2 f7       	brpl	.-12     	; 0x17bc <__moddi3+0x5dc>
    17c8:	8a 2d       	mov	r24, r10
    17ca:	8f 19       	sub	r24, r15
    17cc:	64 01       	movw	r12, r8
    17ce:	53 01       	movw	r10, r6
    17d0:	08 2e       	mov	r0, r24
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__moddi3+0x5fc>
    17d4:	d6 94       	lsr	r13
    17d6:	c7 94       	ror	r12
    17d8:	b7 94       	ror	r11
    17da:	a7 94       	ror	r10
    17dc:	0a 94       	dec	r0
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <__moddi3+0x5f4>
    17e0:	a4 01       	movw	r20, r8
    17e2:	93 01       	movw	r18, r6
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__moddi3+0x60e>
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	44 1f       	adc	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	fa 94       	dec	r15
    17f0:	d2 f7       	brpl	.-12     	; 0x17e6 <__moddi3+0x606>
    17f2:	e8 96       	adiw	r28, 0x38	; 56
    17f4:	6c ac       	ldd	r6, Y+60	; 0x3c
    17f6:	7d ac       	ldd	r7, Y+61	; 0x3d
    17f8:	8e ac       	ldd	r8, Y+62	; 0x3e
    17fa:	9f ac       	ldd	r9, Y+63	; 0x3f
    17fc:	e8 97       	sbiw	r28, 0x38	; 56
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <__moddi3+0x628>
    1800:	96 94       	lsr	r9
    1802:	87 94       	ror	r8
    1804:	77 94       	ror	r7
    1806:	67 94       	ror	r6
    1808:	8a 95       	dec	r24
    180a:	d2 f7       	brpl	.-12     	; 0x1800 <__moddi3+0x620>
    180c:	84 01       	movw	r16, r8
    180e:	73 01       	movw	r14, r6
    1810:	e2 2a       	or	r14, r18
    1812:	f3 2a       	or	r15, r19
    1814:	04 2b       	or	r16, r20
    1816:	15 2b       	or	r17, r21
    1818:	29 96       	adiw	r28, 0x09	; 9
    181a:	ec ae       	std	Y+60, r14	; 0x3c
    181c:	fd ae       	std	Y+61, r15	; 0x3d
    181e:	0e af       	std	Y+62, r16	; 0x3e
    1820:	1f af       	std	Y+63, r17	; 0x3f
    1822:	29 97       	sbiw	r28, 0x09	; 9
    1824:	32 01       	movw	r6, r4
    1826:	88 24       	eor	r8, r8
    1828:	99 24       	eor	r9, r9
    182a:	92 01       	movw	r18, r4
    182c:	81 01       	movw	r16, r2
    182e:	20 70       	andi	r18, 0x00	; 0
    1830:	30 70       	andi	r19, 0x00	; 0
    1832:	6d 96       	adiw	r28, 0x1d	; 29
    1834:	0c af       	std	Y+60, r16	; 0x3c
    1836:	1d af       	std	Y+61, r17	; 0x3d
    1838:	2e af       	std	Y+62, r18	; 0x3e
    183a:	3f af       	std	Y+63, r19	; 0x3f
    183c:	6d 97       	sbiw	r28, 0x1d	; 29
    183e:	c6 01       	movw	r24, r12
    1840:	b5 01       	movw	r22, r10
    1842:	a4 01       	movw	r20, r8
    1844:	93 01       	movw	r18, r6
    1846:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    184a:	7b 01       	movw	r14, r22
    184c:	8c 01       	movw	r16, r24
    184e:	c6 01       	movw	r24, r12
    1850:	b5 01       	movw	r22, r10
    1852:	a4 01       	movw	r20, r8
    1854:	93 01       	movw	r18, r6
    1856:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    185a:	ca 01       	movw	r24, r20
    185c:	b9 01       	movw	r22, r18
    185e:	6d 96       	adiw	r28, 0x1d	; 29
    1860:	2c ad       	ldd	r18, Y+60	; 0x3c
    1862:	3d ad       	ldd	r19, Y+61	; 0x3d
    1864:	4e ad       	ldd	r20, Y+62	; 0x3e
    1866:	5f ad       	ldd	r21, Y+63	; 0x3f
    1868:	6d 97       	sbiw	r28, 0x1d	; 29
    186a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	87 01       	movw	r16, r14
    1874:	ff 24       	eor	r15, r15
    1876:	ee 24       	eor	r14, r14
    1878:	29 96       	adiw	r28, 0x09	; 9
    187a:	ac ac       	ldd	r10, Y+60	; 0x3c
    187c:	bd ac       	ldd	r11, Y+61	; 0x3d
    187e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1880:	df ac       	ldd	r13, Y+63	; 0x3f
    1882:	29 97       	sbiw	r28, 0x09	; 9
    1884:	c6 01       	movw	r24, r12
    1886:	aa 27       	eor	r26, r26
    1888:	bb 27       	eor	r27, r27
    188a:	5c 01       	movw	r10, r24
    188c:	6d 01       	movw	r12, r26
    188e:	ae 28       	or	r10, r14
    1890:	bf 28       	or	r11, r15
    1892:	c0 2a       	or	r12, r16
    1894:	d1 2a       	or	r13, r17
    1896:	a2 16       	cp	r10, r18
    1898:	b3 06       	cpc	r11, r19
    189a:	c4 06       	cpc	r12, r20
    189c:	d5 06       	cpc	r13, r21
    189e:	90 f4       	brcc	.+36     	; 0x18c4 <__moddi3+0x6e4>
    18a0:	a2 0c       	add	r10, r2
    18a2:	b3 1c       	adc	r11, r3
    18a4:	c4 1c       	adc	r12, r4
    18a6:	d5 1c       	adc	r13, r5
    18a8:	a2 14       	cp	r10, r2
    18aa:	b3 04       	cpc	r11, r3
    18ac:	c4 04       	cpc	r12, r4
    18ae:	d5 04       	cpc	r13, r5
    18b0:	48 f0       	brcs	.+18     	; 0x18c4 <__moddi3+0x6e4>
    18b2:	a2 16       	cp	r10, r18
    18b4:	b3 06       	cpc	r11, r19
    18b6:	c4 06       	cpc	r12, r20
    18b8:	d5 06       	cpc	r13, r21
    18ba:	20 f4       	brcc	.+8      	; 0x18c4 <__moddi3+0x6e4>
    18bc:	a2 0c       	add	r10, r2
    18be:	b3 1c       	adc	r11, r3
    18c0:	c4 1c       	adc	r12, r4
    18c2:	d5 1c       	adc	r13, r5
    18c4:	a2 1a       	sub	r10, r18
    18c6:	b3 0a       	sbc	r11, r19
    18c8:	c4 0a       	sbc	r12, r20
    18ca:	d5 0a       	sbc	r13, r21
    18cc:	c6 01       	movw	r24, r12
    18ce:	b5 01       	movw	r22, r10
    18d0:	a4 01       	movw	r20, r8
    18d2:	93 01       	movw	r18, r6
    18d4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    18d8:	7b 01       	movw	r14, r22
    18da:	8c 01       	movw	r16, r24
    18dc:	c6 01       	movw	r24, r12
    18de:	b5 01       	movw	r22, r10
    18e0:	a4 01       	movw	r20, r8
    18e2:	93 01       	movw	r18, r6
    18e4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    18e8:	ca 01       	movw	r24, r20
    18ea:	b9 01       	movw	r22, r18
    18ec:	6d 96       	adiw	r28, 0x1d	; 29
    18ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f6:	6d 97       	sbiw	r28, 0x1d	; 29
    18f8:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	87 01       	movw	r16, r14
    1902:	ff 24       	eor	r15, r15
    1904:	ee 24       	eor	r14, r14
    1906:	29 96       	adiw	r28, 0x09	; 9
    1908:	8c ad       	ldd	r24, Y+60	; 0x3c
    190a:	9d ad       	ldd	r25, Y+61	; 0x3d
    190c:	ae ad       	ldd	r26, Y+62	; 0x3e
    190e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1910:	29 97       	sbiw	r28, 0x09	; 9
    1912:	a0 70       	andi	r26, 0x00	; 0
    1914:	b0 70       	andi	r27, 0x00	; 0
    1916:	57 01       	movw	r10, r14
    1918:	68 01       	movw	r12, r16
    191a:	a8 2a       	or	r10, r24
    191c:	b9 2a       	or	r11, r25
    191e:	ca 2a       	or	r12, r26
    1920:	db 2a       	or	r13, r27
    1922:	a2 16       	cp	r10, r18
    1924:	b3 06       	cpc	r11, r19
    1926:	c4 06       	cpc	r12, r20
    1928:	d5 06       	cpc	r13, r21
    192a:	90 f4       	brcc	.+36     	; 0x1950 <__moddi3+0x770>
    192c:	a2 0c       	add	r10, r2
    192e:	b3 1c       	adc	r11, r3
    1930:	c4 1c       	adc	r12, r4
    1932:	d5 1c       	adc	r13, r5
    1934:	a2 14       	cp	r10, r2
    1936:	b3 04       	cpc	r11, r3
    1938:	c4 04       	cpc	r12, r4
    193a:	d5 04       	cpc	r13, r5
    193c:	48 f0       	brcs	.+18     	; 0x1950 <__moddi3+0x770>
    193e:	a2 16       	cp	r10, r18
    1940:	b3 06       	cpc	r11, r19
    1942:	c4 06       	cpc	r12, r20
    1944:	d5 06       	cpc	r13, r21
    1946:	20 f4       	brcc	.+8      	; 0x1950 <__moddi3+0x770>
    1948:	a2 0c       	add	r10, r2
    194a:	b3 1c       	adc	r11, r3
    194c:	c4 1c       	adc	r12, r4
    194e:	d5 1c       	adc	r13, r5
    1950:	e8 96       	adiw	r28, 0x38	; 56
    1952:	ec ac       	ldd	r14, Y+60	; 0x3c
    1954:	fd ac       	ldd	r15, Y+61	; 0x3d
    1956:	0e ad       	ldd	r16, Y+62	; 0x3e
    1958:	1f ad       	ldd	r17, Y+63	; 0x3f
    195a:	e8 97       	sbiw	r28, 0x38	; 56
    195c:	e4 96       	adiw	r28, 0x34	; 52
    195e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1960:	e4 97       	sbiw	r28, 0x34	; 52
    1962:	04 c0       	rjmp	.+8      	; 0x196c <__moddi3+0x78c>
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	00 1f       	adc	r16, r16
    196a:	11 1f       	adc	r17, r17
    196c:	0a 94       	dec	r0
    196e:	d2 f7       	brpl	.-12     	; 0x1964 <__moddi3+0x784>
    1970:	2d 96       	adiw	r28, 0x0d	; 13
    1972:	ec ae       	std	Y+60, r14	; 0x3c
    1974:	fd ae       	std	Y+61, r15	; 0x3d
    1976:	0e af       	std	Y+62, r16	; 0x3e
    1978:	1f af       	std	Y+63, r17	; 0x3f
    197a:	2d 97       	sbiw	r28, 0x0d	; 13
    197c:	a2 1a       	sub	r10, r18
    197e:	b3 0a       	sbc	r11, r19
    1980:	c4 0a       	sbc	r12, r20
    1982:	d5 0a       	sbc	r13, r21
    1984:	32 01       	movw	r6, r4
    1986:	88 24       	eor	r8, r8
    1988:	99 24       	eor	r9, r9
    198a:	92 01       	movw	r18, r4
    198c:	81 01       	movw	r16, r2
    198e:	20 70       	andi	r18, 0x00	; 0
    1990:	30 70       	andi	r19, 0x00	; 0
    1992:	a1 96       	adiw	r28, 0x21	; 33
    1994:	0c af       	std	Y+60, r16	; 0x3c
    1996:	1d af       	std	Y+61, r17	; 0x3d
    1998:	2e af       	std	Y+62, r18	; 0x3e
    199a:	3f af       	std	Y+63, r19	; 0x3f
    199c:	a1 97       	sbiw	r28, 0x21	; 33
    199e:	c6 01       	movw	r24, r12
    19a0:	b5 01       	movw	r22, r10
    19a2:	a4 01       	movw	r20, r8
    19a4:	93 01       	movw	r18, r6
    19a6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    19aa:	7b 01       	movw	r14, r22
    19ac:	8c 01       	movw	r16, r24
    19ae:	c6 01       	movw	r24, r12
    19b0:	b5 01       	movw	r22, r10
    19b2:	a4 01       	movw	r20, r8
    19b4:	93 01       	movw	r18, r6
    19b6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    19ba:	ca 01       	movw	r24, r20
    19bc:	b9 01       	movw	r22, r18
    19be:	a1 96       	adiw	r28, 0x21	; 33
    19c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    19c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    19c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    19c8:	a1 97       	sbiw	r28, 0x21	; 33
    19ca:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	87 01       	movw	r16, r14
    19d4:	ff 24       	eor	r15, r15
    19d6:	ee 24       	eor	r14, r14
    19d8:	2d 96       	adiw	r28, 0x0d	; 13
    19da:	ac ac       	ldd	r10, Y+60	; 0x3c
    19dc:	bd ac       	ldd	r11, Y+61	; 0x3d
    19de:	ce ac       	ldd	r12, Y+62	; 0x3e
    19e0:	df ac       	ldd	r13, Y+63	; 0x3f
    19e2:	2d 97       	sbiw	r28, 0x0d	; 13
    19e4:	c6 01       	movw	r24, r12
    19e6:	aa 27       	eor	r26, r26
    19e8:	bb 27       	eor	r27, r27
    19ea:	57 01       	movw	r10, r14
    19ec:	68 01       	movw	r12, r16
    19ee:	a8 2a       	or	r10, r24
    19f0:	b9 2a       	or	r11, r25
    19f2:	ca 2a       	or	r12, r26
    19f4:	db 2a       	or	r13, r27
    19f6:	a2 16       	cp	r10, r18
    19f8:	b3 06       	cpc	r11, r19
    19fa:	c4 06       	cpc	r12, r20
    19fc:	d5 06       	cpc	r13, r21
    19fe:	90 f4       	brcc	.+36     	; 0x1a24 <__moddi3+0x844>
    1a00:	a2 0c       	add	r10, r2
    1a02:	b3 1c       	adc	r11, r3
    1a04:	c4 1c       	adc	r12, r4
    1a06:	d5 1c       	adc	r13, r5
    1a08:	a2 14       	cp	r10, r2
    1a0a:	b3 04       	cpc	r11, r3
    1a0c:	c4 04       	cpc	r12, r4
    1a0e:	d5 04       	cpc	r13, r5
    1a10:	48 f0       	brcs	.+18     	; 0x1a24 <__moddi3+0x844>
    1a12:	a2 16       	cp	r10, r18
    1a14:	b3 06       	cpc	r11, r19
    1a16:	c4 06       	cpc	r12, r20
    1a18:	d5 06       	cpc	r13, r21
    1a1a:	20 f4       	brcc	.+8      	; 0x1a24 <__moddi3+0x844>
    1a1c:	a2 0c       	add	r10, r2
    1a1e:	b3 1c       	adc	r11, r3
    1a20:	c4 1c       	adc	r12, r4
    1a22:	d5 1c       	adc	r13, r5
    1a24:	a2 1a       	sub	r10, r18
    1a26:	b3 0a       	sbc	r11, r19
    1a28:	c4 0a       	sbc	r12, r20
    1a2a:	d5 0a       	sbc	r13, r21
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	b5 01       	movw	r22, r10
    1a30:	a4 01       	movw	r20, r8
    1a32:	93 01       	movw	r18, r6
    1a34:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1a38:	7b 01       	movw	r14, r22
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	b5 01       	movw	r22, r10
    1a40:	a4 01       	movw	r20, r8
    1a42:	93 01       	movw	r18, r6
    1a44:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1a48:	ca 01       	movw	r24, r20
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	a1 96       	adiw	r28, 0x21	; 33
    1a4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a50:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a52:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a54:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a56:	a1 97       	sbiw	r28, 0x21	; 33
    1a58:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	87 01       	movw	r16, r14
    1a62:	ff 24       	eor	r15, r15
    1a64:	ee 24       	eor	r14, r14
    1a66:	2d 96       	adiw	r28, 0x0d	; 13
    1a68:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a6a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a6c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a6e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a70:	2d 97       	sbiw	r28, 0x0d	; 13
    1a72:	a0 70       	andi	r26, 0x00	; 0
    1a74:	b0 70       	andi	r27, 0x00	; 0
    1a76:	e8 2a       	or	r14, r24
    1a78:	f9 2a       	or	r15, r25
    1a7a:	0a 2b       	or	r16, r26
    1a7c:	1b 2b       	or	r17, r27
    1a7e:	e2 16       	cp	r14, r18
    1a80:	f3 06       	cpc	r15, r19
    1a82:	04 07       	cpc	r16, r20
    1a84:	15 07       	cpc	r17, r21
    1a86:	90 f4       	brcc	.+36     	; 0x1aac <__moddi3+0x8cc>
    1a88:	e2 0c       	add	r14, r2
    1a8a:	f3 1c       	adc	r15, r3
    1a8c:	04 1d       	adc	r16, r4
    1a8e:	15 1d       	adc	r17, r5
    1a90:	e2 14       	cp	r14, r2
    1a92:	f3 04       	cpc	r15, r3
    1a94:	04 05       	cpc	r16, r4
    1a96:	15 05       	cpc	r17, r5
    1a98:	48 f0       	brcs	.+18     	; 0x1aac <__moddi3+0x8cc>
    1a9a:	e2 16       	cp	r14, r18
    1a9c:	f3 06       	cpc	r15, r19
    1a9e:	04 07       	cpc	r16, r20
    1aa0:	15 07       	cpc	r17, r21
    1aa2:	20 f4       	brcc	.+8      	; 0x1aac <__moddi3+0x8cc>
    1aa4:	e2 0c       	add	r14, r2
    1aa6:	f3 1c       	adc	r15, r3
    1aa8:	04 1d       	adc	r16, r4
    1aaa:	15 1d       	adc	r17, r5
    1aac:	e2 1a       	sub	r14, r18
    1aae:	f3 0a       	sbc	r15, r19
    1ab0:	04 0b       	sbc	r16, r20
    1ab2:	15 0b       	sbc	r17, r21
    1ab4:	d8 01       	movw	r26, r16
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	62 96       	adiw	r28, 0x12	; 18
    1aba:	0f ac       	ldd	r0, Y+63	; 0x3f
    1abc:	62 97       	sbiw	r28, 0x12	; 18
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <__moddi3+0x8e8>
    1ac0:	b6 95       	lsr	r27
    1ac2:	a7 95       	ror	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	0a 94       	dec	r0
    1aca:	d2 f7       	brpl	.-12     	; 0x1ac0 <__moddi3+0x8e0>
    1acc:	89 a7       	std	Y+41, r24	; 0x29
    1ace:	9a a7       	std	Y+42, r25	; 0x2a
    1ad0:	ab a7       	std	Y+43, r26	; 0x2b
    1ad2:	bc a7       	std	Y+44, r27	; 0x2c
    1ad4:	1d a6       	std	Y+45, r1	; 0x2d
    1ad6:	1e a6       	std	Y+46, r1	; 0x2e
    1ad8:	1f a6       	std	Y+47, r1	; 0x2f
    1ada:	18 aa       	std	Y+48, r1	; 0x30
    1adc:	89 8b       	std	Y+17, r24	; 0x11
    1ade:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ae0:	8a 8b       	std	Y+18, r24	; 0x12
    1ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ae8:	8c 8b       	std	Y+20, r24	; 0x14
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	2f c3       	rjmp	.+1630   	; 0x214e <__moddi3+0xf6e>
    1af0:	6a 14       	cp	r6, r10
    1af2:	7b 04       	cpc	r7, r11
    1af4:	8c 04       	cpc	r8, r12
    1af6:	9d 04       	cpc	r9, r13
    1af8:	48 f4       	brcc	.+18     	; 0x1b0c <__moddi3+0x92c>
    1afa:	49 8b       	std	Y+17, r20	; 0x11
    1afc:	5a 8b       	std	Y+18, r21	; 0x12
    1afe:	6b 8b       	std	Y+19, r22	; 0x13
    1b00:	7c 8b       	std	Y+20, r23	; 0x14
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	2f 8b       	std	Y+23, r18	; 0x17
    1b08:	38 8f       	std	Y+24, r19	; 0x18
    1b0a:	27 c3       	rjmp	.+1614   	; 0x215a <__moddi3+0xf7a>
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	a0 16       	cp	r10, r16
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	b0 06       	cpc	r11, r16
    1b14:	01 e0       	ldi	r16, 0x01	; 1
    1b16:	c0 06       	cpc	r12, r16
    1b18:	00 e0       	ldi	r16, 0x00	; 0
    1b1a:	d0 06       	cpc	r13, r16
    1b1c:	88 f4       	brcc	.+34     	; 0x1b40 <__moddi3+0x960>
    1b1e:	1f ef       	ldi	r17, 0xFF	; 255
    1b20:	a1 16       	cp	r10, r17
    1b22:	b1 04       	cpc	r11, r1
    1b24:	c1 04       	cpc	r12, r1
    1b26:	d1 04       	cpc	r13, r1
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <__moddi3+0x958>
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <__moddi3+0x958>
    1b2c:	28 e0       	ldi	r18, 0x08	; 8
    1b2e:	e2 2e       	mov	r14, r18
    1b30:	f1 2c       	mov	r15, r1
    1b32:	01 2d       	mov	r16, r1
    1b34:	11 2d       	mov	r17, r1
    1b36:	18 c0       	rjmp	.+48     	; 0x1b68 <__moddi3+0x988>
    1b38:	ee 24       	eor	r14, r14
    1b3a:	ff 24       	eor	r15, r15
    1b3c:	87 01       	movw	r16, r14
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <__moddi3+0x988>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	a2 16       	cp	r10, r18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	b2 06       	cpc	r11, r18
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	c2 06       	cpc	r12, r18
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	d2 06       	cpc	r13, r18
    1b50:	30 f0       	brcs	.+12     	; 0x1b5e <__moddi3+0x97e>
    1b52:	98 e1       	ldi	r25, 0x18	; 24
    1b54:	e9 2e       	mov	r14, r25
    1b56:	f1 2c       	mov	r15, r1
    1b58:	01 2d       	mov	r16, r1
    1b5a:	11 2d       	mov	r17, r1
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__moddi3+0x988>
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	e8 2e       	mov	r14, r24
    1b62:	f1 2c       	mov	r15, r1
    1b64:	01 2d       	mov	r16, r1
    1b66:	11 2d       	mov	r17, r1
    1b68:	d6 01       	movw	r26, r12
    1b6a:	c5 01       	movw	r24, r10
    1b6c:	0e 2c       	mov	r0, r14
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <__moddi3+0x998>
    1b70:	b6 95       	lsr	r27
    1b72:	a7 95       	ror	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	0a 94       	dec	r0
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <__moddi3+0x990>
    1b7c:	8c 52       	subi	r24, 0x2C	; 44
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	dc 01       	movw	r26, r24
    1b82:	2c 91       	ld	r18, X
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	8e 19       	sub	r24, r14
    1b8e:	9f 09       	sbc	r25, r15
    1b90:	a0 0b       	sbc	r26, r16
    1b92:	b1 0b       	sbc	r27, r17
    1b94:	82 1b       	sub	r24, r18
    1b96:	91 09       	sbc	r25, r1
    1b98:	a1 09       	sbc	r26, r1
    1b9a:	b1 09       	sbc	r27, r1
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	a1 05       	cpc	r26, r1
    1ba0:	b1 05       	cpc	r27, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <__moddi3+0x9c6>
    1ba4:	59 c0       	rjmp	.+178    	; 0x1c58 <__moddi3+0xa78>
    1ba6:	a6 14       	cp	r10, r6
    1ba8:	b7 04       	cpc	r11, r7
    1baa:	c8 04       	cpc	r12, r8
    1bac:	d9 04       	cpc	r13, r9
    1bae:	70 f0       	brcs	.+28     	; 0x1bcc <__moddi3+0x9ec>
    1bb0:	e8 96       	adiw	r28, 0x38	; 56
    1bb2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1bb4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1bb6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1bb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bba:	e8 97       	sbiw	r28, 0x38	; 56
    1bbc:	e2 14       	cp	r14, r2
    1bbe:	f3 04       	cpc	r15, r3
    1bc0:	04 05       	cpc	r16, r4
    1bc2:	15 05       	cpc	r17, r5
    1bc4:	18 f4       	brcc	.+6      	; 0x1bcc <__moddi3+0x9ec>
    1bc6:	d8 01       	movw	r26, r16
    1bc8:	c7 01       	movw	r24, r14
    1bca:	2f c0       	rjmp	.+94     	; 0x1c2a <__moddi3+0xa4a>
    1bcc:	e8 96       	adiw	r28, 0x38	; 56
    1bce:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bd0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bd2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bd4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bd6:	e8 97       	sbiw	r28, 0x38	; 56
    1bd8:	82 19       	sub	r24, r2
    1bda:	93 09       	sbc	r25, r3
    1bdc:	a4 09       	sbc	r26, r4
    1bde:	b5 09       	sbc	r27, r5
    1be0:	a4 01       	movw	r20, r8
    1be2:	93 01       	movw	r18, r6
    1be4:	2a 19       	sub	r18, r10
    1be6:	3b 09       	sbc	r19, r11
    1be8:	4c 09       	sbc	r20, r12
    1bea:	5d 09       	sbc	r21, r13
    1bec:	aa 24       	eor	r10, r10
    1bee:	bb 24       	eor	r11, r11
    1bf0:	65 01       	movw	r12, r10
    1bf2:	e8 96       	adiw	r28, 0x38	; 56
    1bf4:	6c ac       	ldd	r6, Y+60	; 0x3c
    1bf6:	7d ac       	ldd	r7, Y+61	; 0x3d
    1bf8:	8e ac       	ldd	r8, Y+62	; 0x3e
    1bfa:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bfc:	e8 97       	sbiw	r28, 0x38	; 56
    1bfe:	68 16       	cp	r6, r24
    1c00:	79 06       	cpc	r7, r25
    1c02:	8a 06       	cpc	r8, r26
    1c04:	9b 06       	cpc	r9, r27
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <__moddi3+0xa32>
    1c08:	11 e0       	ldi	r17, 0x01	; 1
    1c0a:	a1 2e       	mov	r10, r17
    1c0c:	b1 2c       	mov	r11, r1
    1c0e:	c1 2c       	mov	r12, r1
    1c10:	d1 2c       	mov	r13, r1
    1c12:	79 01       	movw	r14, r18
    1c14:	8a 01       	movw	r16, r20
    1c16:	ea 18       	sub	r14, r10
    1c18:	fb 08       	sbc	r15, r11
    1c1a:	0c 09       	sbc	r16, r12
    1c1c:	1d 09       	sbc	r17, r13
    1c1e:	61 96       	adiw	r28, 0x11	; 17
    1c20:	ec ae       	std	Y+60, r14	; 0x3c
    1c22:	fd ae       	std	Y+61, r15	; 0x3d
    1c24:	0e af       	std	Y+62, r16	; 0x3e
    1c26:	1f af       	std	Y+63, r17	; 0x3f
    1c28:	61 97       	sbiw	r28, 0x11	; 17
    1c2a:	89 a7       	std	Y+41, r24	; 0x29
    1c2c:	9a a7       	std	Y+42, r25	; 0x2a
    1c2e:	ab a7       	std	Y+43, r26	; 0x2b
    1c30:	bc a7       	std	Y+44, r27	; 0x2c
    1c32:	61 96       	adiw	r28, 0x11	; 17
    1c34:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c36:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c38:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c3c:	61 97       	sbiw	r28, 0x11	; 17
    1c3e:	0d a7       	std	Y+45, r16	; 0x2d
    1c40:	1e a7       	std	Y+46, r17	; 0x2e
    1c42:	2f a7       	std	Y+47, r18	; 0x2f
    1c44:	38 ab       	std	Y+48, r19	; 0x30
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c4a:	8a 8b       	std	Y+18, r24	; 0x12
    1c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
    1c50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c52:	8c 8b       	std	Y+20, r24	; 0x14
    1c54:	0d 8b       	std	Y+21, r16	; 0x15
    1c56:	7b c2       	rjmp	.+1270   	; 0x214e <__moddi3+0xf6e>
    1c58:	e3 96       	adiw	r28, 0x33	; 51
    1c5a:	8f af       	std	Y+63, r24	; 0x3f
    1c5c:	e3 97       	sbiw	r28, 0x33	; 51
    1c5e:	a6 01       	movw	r20, r12
    1c60:	95 01       	movw	r18, r10
    1c62:	08 2e       	mov	r0, r24
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__moddi3+0xa8e>
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	44 1f       	adc	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	0a 94       	dec	r0
    1c70:	d2 f7       	brpl	.-12     	; 0x1c66 <__moddi3+0xa86>
    1c72:	10 e2       	ldi	r17, 0x20	; 32
    1c74:	18 1b       	sub	r17, r24
    1c76:	e2 96       	adiw	r28, 0x32	; 50
    1c78:	1f af       	std	Y+63, r17	; 0x3f
    1c7a:	e2 97       	sbiw	r28, 0x32	; 50
    1c7c:	d2 01       	movw	r26, r4
    1c7e:	c1 01       	movw	r24, r2
    1c80:	01 2e       	mov	r0, r17
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__moddi3+0xaac>
    1c84:	b6 95       	lsr	r27
    1c86:	a7 95       	ror	r26
    1c88:	97 95       	ror	r25
    1c8a:	87 95       	ror	r24
    1c8c:	0a 94       	dec	r0
    1c8e:	d2 f7       	brpl	.-12     	; 0x1c84 <__moddi3+0xaa4>
    1c90:	5c 01       	movw	r10, r24
    1c92:	6d 01       	movw	r12, r26
    1c94:	a2 2a       	or	r10, r18
    1c96:	b3 2a       	or	r11, r19
    1c98:	c4 2a       	or	r12, r20
    1c9a:	d5 2a       	or	r13, r21
    1c9c:	25 96       	adiw	r28, 0x05	; 5
    1c9e:	ac ae       	std	Y+60, r10	; 0x3c
    1ca0:	bd ae       	std	Y+61, r11	; 0x3d
    1ca2:	ce ae       	std	Y+62, r12	; 0x3e
    1ca4:	df ae       	std	Y+63, r13	; 0x3f
    1ca6:	25 97       	sbiw	r28, 0x05	; 5
    1ca8:	72 01       	movw	r14, r4
    1caa:	61 01       	movw	r12, r2
    1cac:	e3 96       	adiw	r28, 0x33	; 51
    1cae:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cb0:	e3 97       	sbiw	r28, 0x33	; 51
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <__moddi3+0xadc>
    1cb4:	cc 0c       	add	r12, r12
    1cb6:	dd 1c       	adc	r13, r13
    1cb8:	ee 1c       	adc	r14, r14
    1cba:	ff 1c       	adc	r15, r15
    1cbc:	0a 94       	dec	r0
    1cbe:	d2 f7       	brpl	.-12     	; 0x1cb4 <__moddi3+0xad4>
    1cc0:	21 96       	adiw	r28, 0x01	; 1
    1cc2:	cc ae       	std	Y+60, r12	; 0x3c
    1cc4:	dd ae       	std	Y+61, r13	; 0x3d
    1cc6:	ee ae       	std	Y+62, r14	; 0x3e
    1cc8:	ff ae       	std	Y+63, r15	; 0x3f
    1cca:	21 97       	sbiw	r28, 0x01	; 1
    1ccc:	64 01       	movw	r12, r8
    1cce:	53 01       	movw	r10, r6
    1cd0:	01 2e       	mov	r0, r17
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <__moddi3+0xafc>
    1cd4:	d6 94       	lsr	r13
    1cd6:	c7 94       	ror	r12
    1cd8:	b7 94       	ror	r11
    1cda:	a7 94       	ror	r10
    1cdc:	0a 94       	dec	r0
    1cde:	d2 f7       	brpl	.-12     	; 0x1cd4 <__moddi3+0xaf4>
    1ce0:	a4 01       	movw	r20, r8
    1ce2:	93 01       	movw	r18, r6
    1ce4:	e3 96       	adiw	r28, 0x33	; 51
    1ce6:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ce8:	e3 97       	sbiw	r28, 0x33	; 51
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <__moddi3+0xb14>
    1cec:	22 0f       	add	r18, r18
    1cee:	33 1f       	adc	r19, r19
    1cf0:	44 1f       	adc	r20, r20
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	0a 94       	dec	r0
    1cf6:	d2 f7       	brpl	.-12     	; 0x1cec <__moddi3+0xb0c>
    1cf8:	e8 96       	adiw	r28, 0x38	; 56
    1cfa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cfc:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cfe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d00:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d02:	e8 97       	sbiw	r28, 0x38	; 56
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <__moddi3+0xb2e>
    1d06:	b6 95       	lsr	r27
    1d08:	a7 95       	ror	r26
    1d0a:	97 95       	ror	r25
    1d0c:	87 95       	ror	r24
    1d0e:	1a 95       	dec	r17
    1d10:	d2 f7       	brpl	.-12     	; 0x1d06 <__moddi3+0xb26>
    1d12:	7c 01       	movw	r14, r24
    1d14:	8d 01       	movw	r16, r26
    1d16:	e2 2a       	or	r14, r18
    1d18:	f3 2a       	or	r15, r19
    1d1a:	04 2b       	or	r16, r20
    1d1c:	15 2b       	or	r17, r21
    1d1e:	e9 ae       	std	Y+57, r14	; 0x39
    1d20:	fa ae       	std	Y+58, r15	; 0x3a
    1d22:	0b af       	std	Y+59, r16	; 0x3b
    1d24:	1c af       	std	Y+60, r17	; 0x3c
    1d26:	e8 96       	adiw	r28, 0x38	; 56
    1d28:	0c ad       	ldd	r16, Y+60	; 0x3c
    1d2a:	1d ad       	ldd	r17, Y+61	; 0x3d
    1d2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d30:	e8 97       	sbiw	r28, 0x38	; 56
    1d32:	e3 96       	adiw	r28, 0x33	; 51
    1d34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d36:	e3 97       	sbiw	r28, 0x33	; 51
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <__moddi3+0xb62>
    1d3a:	00 0f       	add	r16, r16
    1d3c:	11 1f       	adc	r17, r17
    1d3e:	22 1f       	adc	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	0a 94       	dec	r0
    1d44:	d2 f7       	brpl	.-12     	; 0x1d3a <__moddi3+0xb5a>
    1d46:	0d ab       	std	Y+53, r16	; 0x35
    1d48:	1e ab       	std	Y+54, r17	; 0x36
    1d4a:	2f ab       	std	Y+55, r18	; 0x37
    1d4c:	38 af       	std	Y+56, r19	; 0x38
    1d4e:	25 96       	adiw	r28, 0x05	; 5
    1d50:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d52:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d54:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d56:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d58:	25 97       	sbiw	r28, 0x05	; 5
    1d5a:	3a 01       	movw	r6, r20
    1d5c:	88 24       	eor	r8, r8
    1d5e:	99 24       	eor	r9, r9
    1d60:	40 70       	andi	r20, 0x00	; 0
    1d62:	50 70       	andi	r21, 0x00	; 0
    1d64:	a5 96       	adiw	r28, 0x25	; 37
    1d66:	2c af       	std	Y+60, r18	; 0x3c
    1d68:	3d af       	std	Y+61, r19	; 0x3d
    1d6a:	4e af       	std	Y+62, r20	; 0x3e
    1d6c:	5f af       	std	Y+63, r21	; 0x3f
    1d6e:	a5 97       	sbiw	r28, 0x25	; 37
    1d70:	c6 01       	movw	r24, r12
    1d72:	b5 01       	movw	r22, r10
    1d74:	a4 01       	movw	r20, r8
    1d76:	93 01       	movw	r18, r6
    1d78:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	8c 01       	movw	r16, r24
    1d80:	c6 01       	movw	r24, r12
    1d82:	b5 01       	movw	r22, r10
    1d84:	a4 01       	movw	r20, r8
    1d86:	93 01       	movw	r18, r6
    1d88:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1d8c:	c9 01       	movw	r24, r18
    1d8e:	da 01       	movw	r26, r20
    1d90:	1c 01       	movw	r2, r24
    1d92:	2d 01       	movw	r4, r26
    1d94:	c2 01       	movw	r24, r4
    1d96:	b1 01       	movw	r22, r2
    1d98:	a5 96       	adiw	r28, 0x25	; 37
    1d9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da2:	a5 97       	sbiw	r28, 0x25	; 37
    1da4:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	87 01       	movw	r16, r14
    1dae:	ff 24       	eor	r15, r15
    1db0:	ee 24       	eor	r14, r14
    1db2:	a9 ac       	ldd	r10, Y+57	; 0x39
    1db4:	ba ac       	ldd	r11, Y+58	; 0x3a
    1db6:	cb ac       	ldd	r12, Y+59	; 0x3b
    1db8:	dc ac       	ldd	r13, Y+60	; 0x3c
    1dba:	c6 01       	movw	r24, r12
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	57 01       	movw	r10, r14
    1dc2:	68 01       	movw	r12, r16
    1dc4:	a8 2a       	or	r10, r24
    1dc6:	b9 2a       	or	r11, r25
    1dc8:	ca 2a       	or	r12, r26
    1dca:	db 2a       	or	r13, r27
    1dcc:	a2 16       	cp	r10, r18
    1dce:	b3 06       	cpc	r11, r19
    1dd0:	c4 06       	cpc	r12, r20
    1dd2:	d5 06       	cpc	r13, r21
    1dd4:	10 f5       	brcc	.+68     	; 0x1e1a <__moddi3+0xc3a>
    1dd6:	08 94       	sec
    1dd8:	21 08       	sbc	r2, r1
    1dda:	31 08       	sbc	r3, r1
    1ddc:	41 08       	sbc	r4, r1
    1dde:	51 08       	sbc	r5, r1
    1de0:	25 96       	adiw	r28, 0x05	; 5
    1de2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1de4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1de6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1de8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1dea:	25 97       	sbiw	r28, 0x05	; 5
    1dec:	ae 0c       	add	r10, r14
    1dee:	bf 1c       	adc	r11, r15
    1df0:	c0 1e       	adc	r12, r16
    1df2:	d1 1e       	adc	r13, r17
    1df4:	ae 14       	cp	r10, r14
    1df6:	bf 04       	cpc	r11, r15
    1df8:	c0 06       	cpc	r12, r16
    1dfa:	d1 06       	cpc	r13, r17
    1dfc:	70 f0       	brcs	.+28     	; 0x1e1a <__moddi3+0xc3a>
    1dfe:	a2 16       	cp	r10, r18
    1e00:	b3 06       	cpc	r11, r19
    1e02:	c4 06       	cpc	r12, r20
    1e04:	d5 06       	cpc	r13, r21
    1e06:	48 f4       	brcc	.+18     	; 0x1e1a <__moddi3+0xc3a>
    1e08:	08 94       	sec
    1e0a:	21 08       	sbc	r2, r1
    1e0c:	31 08       	sbc	r3, r1
    1e0e:	41 08       	sbc	r4, r1
    1e10:	51 08       	sbc	r5, r1
    1e12:	ae 0c       	add	r10, r14
    1e14:	bf 1c       	adc	r11, r15
    1e16:	c0 1e       	adc	r12, r16
    1e18:	d1 1e       	adc	r13, r17
    1e1a:	a2 1a       	sub	r10, r18
    1e1c:	b3 0a       	sbc	r11, r19
    1e1e:	c4 0a       	sbc	r12, r20
    1e20:	d5 0a       	sbc	r13, r21
    1e22:	c6 01       	movw	r24, r12
    1e24:	b5 01       	movw	r22, r10
    1e26:	a4 01       	movw	r20, r8
    1e28:	93 01       	movw	r18, r6
    1e2a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1e2e:	7b 01       	movw	r14, r22
    1e30:	8c 01       	movw	r16, r24
    1e32:	c6 01       	movw	r24, r12
    1e34:	b5 01       	movw	r22, r10
    1e36:	a4 01       	movw	r20, r8
    1e38:	93 01       	movw	r18, r6
    1e3a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    1e3e:	c9 01       	movw	r24, r18
    1e40:	da 01       	movw	r26, r20
    1e42:	3c 01       	movw	r6, r24
    1e44:	4d 01       	movw	r8, r26
    1e46:	c4 01       	movw	r24, r8
    1e48:	b3 01       	movw	r22, r6
    1e4a:	a5 96       	adiw	r28, 0x25	; 37
    1e4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e50:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e54:	a5 97       	sbiw	r28, 0x25	; 37
    1e56:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	87 01       	movw	r16, r14
    1e60:	ff 24       	eor	r15, r15
    1e62:	ee 24       	eor	r14, r14
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e68:	ab ad       	ldd	r26, Y+59	; 0x3b
    1e6a:	bc ad       	ldd	r27, Y+60	; 0x3c
    1e6c:	a0 70       	andi	r26, 0x00	; 0
    1e6e:	b0 70       	andi	r27, 0x00	; 0
    1e70:	57 01       	movw	r10, r14
    1e72:	68 01       	movw	r12, r16
    1e74:	a8 2a       	or	r10, r24
    1e76:	b9 2a       	or	r11, r25
    1e78:	ca 2a       	or	r12, r26
    1e7a:	db 2a       	or	r13, r27
    1e7c:	a2 16       	cp	r10, r18
    1e7e:	b3 06       	cpc	r11, r19
    1e80:	c4 06       	cpc	r12, r20
    1e82:	d5 06       	cpc	r13, r21
    1e84:	10 f5       	brcc	.+68     	; 0x1eca <__moddi3+0xcea>
    1e86:	08 94       	sec
    1e88:	61 08       	sbc	r6, r1
    1e8a:	71 08       	sbc	r7, r1
    1e8c:	81 08       	sbc	r8, r1
    1e8e:	91 08       	sbc	r9, r1
    1e90:	25 96       	adiw	r28, 0x05	; 5
    1e92:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e94:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9a:	25 97       	sbiw	r28, 0x05	; 5
    1e9c:	a6 0e       	add	r10, r22
    1e9e:	b7 1e       	adc	r11, r23
    1ea0:	c8 1e       	adc	r12, r24
    1ea2:	d9 1e       	adc	r13, r25
    1ea4:	a6 16       	cp	r10, r22
    1ea6:	b7 06       	cpc	r11, r23
    1ea8:	c8 06       	cpc	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	70 f0       	brcs	.+28     	; 0x1eca <__moddi3+0xcea>
    1eae:	a2 16       	cp	r10, r18
    1eb0:	b3 06       	cpc	r11, r19
    1eb2:	c4 06       	cpc	r12, r20
    1eb4:	d5 06       	cpc	r13, r21
    1eb6:	48 f4       	brcc	.+18     	; 0x1eca <__moddi3+0xcea>
    1eb8:	08 94       	sec
    1eba:	61 08       	sbc	r6, r1
    1ebc:	71 08       	sbc	r7, r1
    1ebe:	81 08       	sbc	r8, r1
    1ec0:	91 08       	sbc	r9, r1
    1ec2:	a6 0e       	add	r10, r22
    1ec4:	b7 1e       	adc	r11, r23
    1ec6:	c8 1e       	adc	r12, r24
    1ec8:	d9 1e       	adc	r13, r25
    1eca:	d6 01       	movw	r26, r12
    1ecc:	c5 01       	movw	r24, r10
    1ece:	82 1b       	sub	r24, r18
    1ed0:	93 0b       	sbc	r25, r19
    1ed2:	a4 0b       	sbc	r26, r20
    1ed4:	b5 0b       	sbc	r27, r21
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	9a ab       	std	Y+50, r25	; 0x32
    1eda:	ab ab       	std	Y+51, r26	; 0x33
    1edc:	bc ab       	std	Y+52, r27	; 0x34
    1ede:	d1 01       	movw	r26, r2
    1ee0:	99 27       	eor	r25, r25
    1ee2:	88 27       	eor	r24, r24
    1ee4:	84 01       	movw	r16, r8
    1ee6:	73 01       	movw	r14, r6
    1ee8:	e8 2a       	or	r14, r24
    1eea:	f9 2a       	or	r15, r25
    1eec:	0a 2b       	or	r16, r26
    1eee:	1b 2b       	or	r17, r27
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
    1ef2:	a8 2e       	mov	r10, r24
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	b8 2e       	mov	r11, r24
    1ef8:	c1 2c       	mov	r12, r1
    1efa:	d1 2c       	mov	r13, r1
    1efc:	ae 20       	and	r10, r14
    1efe:	bf 20       	and	r11, r15
    1f00:	c0 22       	and	r12, r16
    1f02:	d1 22       	and	r13, r17
    1f04:	78 01       	movw	r14, r16
    1f06:	00 27       	eor	r16, r16
    1f08:	11 27       	eor	r17, r17
    1f0a:	21 96       	adiw	r28, 0x01	; 1
    1f0c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f0e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f10:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f12:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f14:	21 97       	sbiw	r28, 0x01	; 1
    1f16:	2f ef       	ldi	r18, 0xFF	; 255
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	62 22       	and	r6, r18
    1f20:	73 22       	and	r7, r19
    1f22:	84 22       	and	r8, r20
    1f24:	95 22       	and	r9, r21
    1f26:	21 96       	adiw	r28, 0x01	; 1
    1f28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	ac 01       	movw	r20, r24
    1f34:	66 27       	eor	r22, r22
    1f36:	77 27       	eor	r23, r23
    1f38:	ad 96       	adiw	r28, 0x2d	; 45
    1f3a:	4c af       	std	Y+60, r20	; 0x3c
    1f3c:	5d af       	std	Y+61, r21	; 0x3d
    1f3e:	6e af       	std	Y+62, r22	; 0x3e
    1f40:	7f af       	std	Y+63, r23	; 0x3f
    1f42:	ad 97       	sbiw	r28, 0x2d	; 45
    1f44:	c6 01       	movw	r24, r12
    1f46:	b5 01       	movw	r22, r10
    1f48:	a4 01       	movw	r20, r8
    1f4a:	93 01       	movw	r18, r6
    1f4c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	6c af       	std	Y+60, r22	; 0x3c
    1f54:	7d af       	std	Y+61, r23	; 0x3d
    1f56:	8e af       	std	Y+62, r24	; 0x3e
    1f58:	9f af       	std	Y+63, r25	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	b5 01       	movw	r22, r10
    1f60:	ad 96       	adiw	r28, 0x2d	; 45
    1f62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1f6c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1f70:	1b 01       	movw	r2, r22
    1f72:	2c 01       	movw	r4, r24
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	a4 01       	movw	r20, r8
    1f7a:	93 01       	movw	r18, r6
    1f7c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1f80:	5b 01       	movw	r10, r22
    1f82:	6c 01       	movw	r12, r24
    1f84:	c8 01       	movw	r24, r16
    1f86:	b7 01       	movw	r22, r14
    1f88:	ad 96       	adiw	r28, 0x2d	; 45
    1f8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f90:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f92:	ad 97       	sbiw	r28, 0x2d	; 45
    1f94:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    1f98:	7b 01       	movw	r14, r22
    1f9a:	8c 01       	movw	r16, r24
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	95 01       	movw	r18, r10
    1fa0:	22 0d       	add	r18, r2
    1fa2:	33 1d       	adc	r19, r3
    1fa4:	44 1d       	adc	r20, r4
    1fa6:	55 1d       	adc	r21, r5
    1fa8:	a9 96       	adiw	r28, 0x29	; 41
    1faa:	6c ac       	ldd	r6, Y+60	; 0x3c
    1fac:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fae:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fb0:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fb2:	a9 97       	sbiw	r28, 0x29	; 41
    1fb4:	c4 01       	movw	r24, r8
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	bb 27       	eor	r27, r27
    1fba:	28 0f       	add	r18, r24
    1fbc:	39 1f       	adc	r19, r25
    1fbe:	4a 1f       	adc	r20, r26
    1fc0:	5b 1f       	adc	r21, r27
    1fc2:	2a 15       	cp	r18, r10
    1fc4:	3b 05       	cpc	r19, r11
    1fc6:	4c 05       	cpc	r20, r12
    1fc8:	5d 05       	cpc	r21, r13
    1fca:	48 f4       	brcc	.+18     	; 0x1fde <__moddi3+0xdfe>
    1fcc:	81 2c       	mov	r8, r1
    1fce:	91 2c       	mov	r9, r1
    1fd0:	e1 e0       	ldi	r30, 0x01	; 1
    1fd2:	ae 2e       	mov	r10, r30
    1fd4:	b1 2c       	mov	r11, r1
    1fd6:	e8 0c       	add	r14, r8
    1fd8:	f9 1c       	adc	r15, r9
    1fda:	0a 1d       	adc	r16, r10
    1fdc:	1b 1d       	adc	r17, r11
    1fde:	ca 01       	movw	r24, r20
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	57 01       	movw	r10, r14
    1fe6:	68 01       	movw	r12, r16
    1fe8:	a8 0e       	add	r10, r24
    1fea:	b9 1e       	adc	r11, r25
    1fec:	ca 1e       	adc	r12, r26
    1fee:	db 1e       	adc	r13, r27
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	33 27       	eor	r19, r19
    1ff4:	22 27       	eor	r18, r18
    1ff6:	a9 96       	adiw	r28, 0x29	; 41
    1ff8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ffa:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ffc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ffe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2000:	a9 97       	sbiw	r28, 0x29	; 41
    2002:	a0 70       	andi	r26, 0x00	; 0
    2004:	b0 70       	andi	r27, 0x00	; 0
    2006:	28 0f       	add	r18, r24
    2008:	39 1f       	adc	r19, r25
    200a:	4a 1f       	adc	r20, r26
    200c:	5b 1f       	adc	r21, r27
    200e:	e9 a8       	ldd	r14, Y+49	; 0x31
    2010:	fa a8       	ldd	r15, Y+50	; 0x32
    2012:	0b a9       	ldd	r16, Y+51	; 0x33
    2014:	1c a9       	ldd	r17, Y+52	; 0x34
    2016:	ea 14       	cp	r14, r10
    2018:	fb 04       	cpc	r15, r11
    201a:	0c 05       	cpc	r16, r12
    201c:	1d 05       	cpc	r17, r13
    201e:	70 f0       	brcs	.+28     	; 0x203c <__moddi3+0xe5c>
    2020:	ae 14       	cp	r10, r14
    2022:	bf 04       	cpc	r11, r15
    2024:	c0 06       	cpc	r12, r16
    2026:	d1 06       	cpc	r13, r17
    2028:	89 f5       	brne	.+98     	; 0x208c <__moddi3+0xeac>
    202a:	6d a9       	ldd	r22, Y+53	; 0x35
    202c:	7e a9       	ldd	r23, Y+54	; 0x36
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	62 17       	cp	r22, r18
    2034:	73 07       	cpc	r23, r19
    2036:	84 07       	cpc	r24, r20
    2038:	95 07       	cpc	r25, r21
    203a:	40 f5       	brcc	.+80     	; 0x208c <__moddi3+0xeac>
    203c:	da 01       	movw	r26, r20
    203e:	c9 01       	movw	r24, r18
    2040:	21 96       	adiw	r28, 0x01	; 1
    2042:	6c ac       	ldd	r6, Y+60	; 0x3c
    2044:	7d ac       	ldd	r7, Y+61	; 0x3d
    2046:	8e ac       	ldd	r8, Y+62	; 0x3e
    2048:	9f ac       	ldd	r9, Y+63	; 0x3f
    204a:	21 97       	sbiw	r28, 0x01	; 1
    204c:	86 19       	sub	r24, r6
    204e:	97 09       	sbc	r25, r7
    2050:	a8 09       	sbc	r26, r8
    2052:	b9 09       	sbc	r27, r9
    2054:	25 96       	adiw	r28, 0x05	; 5
    2056:	ec ac       	ldd	r14, Y+60	; 0x3c
    2058:	fd ac       	ldd	r15, Y+61	; 0x3d
    205a:	0e ad       	ldd	r16, Y+62	; 0x3e
    205c:	1f ad       	ldd	r17, Y+63	; 0x3f
    205e:	25 97       	sbiw	r28, 0x05	; 5
    2060:	ae 18       	sub	r10, r14
    2062:	bf 08       	sbc	r11, r15
    2064:	c0 0a       	sbc	r12, r16
    2066:	d1 0a       	sbc	r13, r17
    2068:	ee 24       	eor	r14, r14
    206a:	ff 24       	eor	r15, r15
    206c:	87 01       	movw	r16, r14
    206e:	28 17       	cp	r18, r24
    2070:	39 07       	cpc	r19, r25
    2072:	4a 07       	cpc	r20, r26
    2074:	5b 07       	cpc	r21, r27
    2076:	28 f4       	brcc	.+10     	; 0x2082 <__moddi3+0xea2>
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	e2 2e       	mov	r14, r18
    207c:	f1 2c       	mov	r15, r1
    207e:	01 2d       	mov	r16, r1
    2080:	11 2d       	mov	r17, r1
    2082:	ae 18       	sub	r10, r14
    2084:	bf 08       	sbc	r11, r15
    2086:	c0 0a       	sbc	r12, r16
    2088:	d1 0a       	sbc	r13, r17
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <__moddi3+0xeb0>
    208c:	da 01       	movw	r26, r20
    208e:	c9 01       	movw	r24, r18
    2090:	6d a8       	ldd	r6, Y+53	; 0x35
    2092:	7e a8       	ldd	r7, Y+54	; 0x36
    2094:	8f a8       	ldd	r8, Y+55	; 0x37
    2096:	98 ac       	ldd	r9, Y+56	; 0x38
    2098:	68 1a       	sub	r6, r24
    209a:	79 0a       	sbc	r7, r25
    209c:	8a 0a       	sbc	r8, r26
    209e:	9b 0a       	sbc	r9, r27
    20a0:	09 a9       	ldd	r16, Y+49	; 0x31
    20a2:	1a a9       	ldd	r17, Y+50	; 0x32
    20a4:	2b a9       	ldd	r18, Y+51	; 0x33
    20a6:	3c a9       	ldd	r19, Y+52	; 0x34
    20a8:	0a 19       	sub	r16, r10
    20aa:	1b 09       	sbc	r17, r11
    20ac:	2c 09       	sbc	r18, r12
    20ae:	3d 09       	sbc	r19, r13
    20b0:	58 01       	movw	r10, r16
    20b2:	69 01       	movw	r12, r18
    20b4:	22 24       	eor	r2, r2
    20b6:	33 24       	eor	r3, r3
    20b8:	21 01       	movw	r4, r2
    20ba:	2d a9       	ldd	r18, Y+53	; 0x35
    20bc:	3e a9       	ldd	r19, Y+54	; 0x36
    20be:	4f a9       	ldd	r20, Y+55	; 0x37
    20c0:	58 ad       	ldd	r21, Y+56	; 0x38
    20c2:	26 15       	cp	r18, r6
    20c4:	37 05       	cpc	r19, r7
    20c6:	48 05       	cpc	r20, r8
    20c8:	59 05       	cpc	r21, r9
    20ca:	28 f4       	brcc	.+10     	; 0x20d6 <__moddi3+0xef6>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	28 2e       	mov	r2, r24
    20d0:	31 2c       	mov	r3, r1
    20d2:	41 2c       	mov	r4, r1
    20d4:	51 2c       	mov	r5, r1
    20d6:	86 01       	movw	r16, r12
    20d8:	75 01       	movw	r14, r10
    20da:	e2 18       	sub	r14, r2
    20dc:	f3 08       	sbc	r15, r3
    20de:	04 09       	sbc	r16, r4
    20e0:	15 09       	sbc	r17, r5
    20e2:	a8 01       	movw	r20, r16
    20e4:	97 01       	movw	r18, r14
    20e6:	e2 96       	adiw	r28, 0x32	; 50
    20e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    20ea:	e2 97       	sbiw	r28, 0x32	; 50
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__moddi3+0xf16>
    20ee:	22 0f       	add	r18, r18
    20f0:	33 1f       	adc	r19, r19
    20f2:	44 1f       	adc	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	0a 94       	dec	r0
    20f8:	d2 f7       	brpl	.-12     	; 0x20ee <__moddi3+0xf0e>
    20fa:	d4 01       	movw	r26, r8
    20fc:	c3 01       	movw	r24, r6
    20fe:	e3 96       	adiw	r28, 0x33	; 51
    2100:	0f ac       	ldd	r0, Y+63	; 0x3f
    2102:	e3 97       	sbiw	r28, 0x33	; 51
    2104:	04 c0       	rjmp	.+8      	; 0x210e <__moddi3+0xf2e>
    2106:	b6 95       	lsr	r27
    2108:	a7 95       	ror	r26
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	0a 94       	dec	r0
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <__moddi3+0xf26>
    2112:	28 2b       	or	r18, r24
    2114:	39 2b       	or	r19, r25
    2116:	4a 2b       	or	r20, r26
    2118:	5b 2b       	or	r21, r27
    211a:	29 a7       	std	Y+41, r18	; 0x29
    211c:	3a a7       	std	Y+42, r19	; 0x2a
    211e:	4b a7       	std	Y+43, r20	; 0x2b
    2120:	5c a7       	std	Y+44, r21	; 0x2c
    2122:	e3 96       	adiw	r28, 0x33	; 51
    2124:	0f ac       	ldd	r0, Y+63	; 0x3f
    2126:	e3 97       	sbiw	r28, 0x33	; 51
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <__moddi3+0xf52>
    212a:	16 95       	lsr	r17
    212c:	07 95       	ror	r16
    212e:	f7 94       	ror	r15
    2130:	e7 94       	ror	r14
    2132:	0a 94       	dec	r0
    2134:	d2 f7       	brpl	.-12     	; 0x212a <__moddi3+0xf4a>
    2136:	ed a6       	std	Y+45, r14	; 0x2d
    2138:	fe a6       	std	Y+46, r15	; 0x2e
    213a:	0f a7       	std	Y+47, r16	; 0x2f
    213c:	18 ab       	std	Y+48, r17	; 0x30
    213e:	29 8b       	std	Y+17, r18	; 0x11
    2140:	8a a5       	ldd	r24, Y+42	; 0x2a
    2142:	8a 8b       	std	Y+18, r24	; 0x12
    2144:	8b a5       	ldd	r24, Y+43	; 0x2b
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	8c a5       	ldd	r24, Y+44	; 0x2c
    214a:	8c 8b       	std	Y+20, r24	; 0x14
    214c:	ed 8a       	std	Y+21, r14	; 0x15
    214e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2150:	8e 8b       	std	Y+22, r24	; 0x16
    2152:	8f a5       	ldd	r24, Y+47	; 0x2f
    2154:	8f 8b       	std	Y+23, r24	; 0x17
    2156:	88 a9       	ldd	r24, Y+48	; 0x30
    2158:	88 8f       	std	Y+24, r24	; 0x18
    215a:	e1 96       	adiw	r28, 0x31	; 49
    215c:	4c ad       	ldd	r20, Y+60	; 0x3c
    215e:	5d ad       	ldd	r21, Y+61	; 0x3d
    2160:	6e ad       	ldd	r22, Y+62	; 0x3e
    2162:	7f ad       	ldd	r23, Y+63	; 0x3f
    2164:	e1 97       	sbiw	r28, 0x31	; 49
    2166:	41 15       	cp	r20, r1
    2168:	51 05       	cpc	r21, r1
    216a:	61 05       	cpc	r22, r1
    216c:	71 05       	cpc	r23, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <__moddi3+0xf92>
    2170:	67 c0       	rjmp	.+206    	; 0x2240 <__moddi3+0x1060>
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	2a 89       	ldd	r18, Y+18	; 0x12
    2176:	3b 89       	ldd	r19, Y+19	; 0x13
    2178:	4c 89       	ldd	r20, Y+20	; 0x14
    217a:	5d 89       	ldd	r21, Y+21	; 0x15
    217c:	ae 89       	ldd	r26, Y+22	; 0x16
    217e:	bf 89       	ldd	r27, Y+23	; 0x17
    2180:	18 8d       	ldd	r17, Y+24	; 0x18
    2182:	f8 2f       	mov	r31, r24
    2184:	f1 95       	neg	r31
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	1f 16       	cp	r1, r31
    218a:	08 f0       	brcs	.+2      	; 0x218e <__moddi3+0xfae>
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	82 2f       	mov	r24, r18
    2190:	81 95       	neg	r24
    2192:	21 e0       	ldi	r18, 0x01	; 1
    2194:	18 16       	cp	r1, r24
    2196:	08 f0       	brcs	.+2      	; 0x219a <__moddi3+0xfba>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	e8 2f       	mov	r30, r24
    219c:	e9 1b       	sub	r30, r25
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	8e 17       	cp	r24, r30
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__moddi3+0xfc6>
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	29 2b       	or	r18, r25
    21a8:	83 2f       	mov	r24, r19
    21aa:	81 95       	neg	r24
    21ac:	31 e0       	ldi	r19, 0x01	; 1
    21ae:	18 16       	cp	r1, r24
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__moddi3+0xfd4>
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	78 2f       	mov	r23, r24
    21b6:	72 1b       	sub	r23, r18
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	87 17       	cp	r24, r23
    21bc:	08 f0       	brcs	.+2      	; 0x21c0 <__moddi3+0xfe0>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	39 2b       	or	r19, r25
    21c2:	84 2f       	mov	r24, r20
    21c4:	81 95       	neg	r24
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	18 16       	cp	r1, r24
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <__moddi3+0xfee>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	68 2f       	mov	r22, r24
    21d0:	63 1b       	sub	r22, r19
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	86 17       	cp	r24, r22
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__moddi3+0xffa>
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	29 2b       	or	r18, r25
    21dc:	85 2f       	mov	r24, r21
    21de:	81 95       	neg	r24
    21e0:	31 e0       	ldi	r19, 0x01	; 1
    21e2:	18 16       	cp	r1, r24
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <__moddi3+0x1008>
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	58 2f       	mov	r21, r24
    21ea:	52 1b       	sub	r21, r18
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	85 17       	cp	r24, r21
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <__moddi3+0x1014>
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	39 2b       	or	r19, r25
    21f6:	8a 2f       	mov	r24, r26
    21f8:	81 95       	neg	r24
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	18 16       	cp	r1, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__moddi3+0x1022>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	48 2f       	mov	r20, r24
    2204:	43 1b       	sub	r20, r19
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	84 17       	cp	r24, r20
    220a:	08 f0       	brcs	.+2      	; 0x220e <__moddi3+0x102e>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	29 2b       	or	r18, r25
    2210:	8b 2f       	mov	r24, r27
    2212:	81 95       	neg	r24
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	18 16       	cp	r1, r24
    2218:	08 f0       	brcs	.+2      	; 0x221c <__moddi3+0x103c>
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	38 2f       	mov	r19, r24
    221e:	32 1b       	sub	r19, r18
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	83 17       	cp	r24, r19
    2224:	08 f0       	brcs	.+2      	; 0x2228 <__moddi3+0x1048>
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	92 2b       	or	r25, r18
    222a:	81 2f       	mov	r24, r17
    222c:	81 95       	neg	r24
    222e:	89 1b       	sub	r24, r25
    2230:	f9 8b       	std	Y+17, r31	; 0x11
    2232:	ea 8b       	std	Y+18, r30	; 0x12
    2234:	7b 8b       	std	Y+19, r23	; 0x13
    2236:	6c 8b       	std	Y+20, r22	; 0x14
    2238:	5d 8b       	std	Y+21, r21	; 0x15
    223a:	4e 8b       	std	Y+22, r20	; 0x16
    223c:	3f 8b       	std	Y+23, r19	; 0x17
    223e:	88 8f       	std	Y+24, r24	; 0x18
    2240:	29 89       	ldd	r18, Y+17	; 0x11
    2242:	3a 89       	ldd	r19, Y+18	; 0x12
    2244:	4b 89       	ldd	r20, Y+19	; 0x13
    2246:	5c 89       	ldd	r21, Y+20	; 0x14
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	c9 58       	subi	r28, 0x89	; 137
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	e2 e1       	ldi	r30, 0x12	; 18
    2256:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__epilogue_restores__>

0000225a <__udivdi3>:
    225a:	ae e5       	ldi	r26, 0x5E	; 94
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e3       	ldi	r30, 0x33	; 51
    2260:	f1 e1       	ldi	r31, 0x11	; 17
    2262:	0c 94 0c 38 	jmp	0x7018	; 0x7018 <__prologue_saves__>
    2266:	a8 e0       	ldi	r26, 0x08	; 8
    2268:	4e 01       	movw	r8, r28
    226a:	08 94       	sec
    226c:	81 1c       	adc	r8, r1
    226e:	91 1c       	adc	r9, r1
    2270:	f4 01       	movw	r30, r8
    2272:	6a 2e       	mov	r6, r26
    2274:	11 92       	st	Z+, r1
    2276:	6a 94       	dec	r6
    2278:	e9 f7       	brne	.-6      	; 0x2274 <__udivdi3+0x1a>
    227a:	29 83       	std	Y+1, r18	; 0x01
    227c:	3a 83       	std	Y+2, r19	; 0x02
    227e:	4b 83       	std	Y+3, r20	; 0x03
    2280:	5c 83       	std	Y+4, r21	; 0x04
    2282:	6d 83       	std	Y+5, r22	; 0x05
    2284:	7e 83       	std	Y+6, r23	; 0x06
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	ce 01       	movw	r24, r28
    228c:	09 96       	adiw	r24, 0x09	; 9
    228e:	fc 01       	movw	r30, r24
    2290:	11 92       	st	Z+, r1
    2292:	aa 95       	dec	r26
    2294:	e9 f7       	brne	.-6      	; 0x2290 <__udivdi3+0x36>
    2296:	a9 86       	std	Y+9, r10	; 0x09
    2298:	ba 86       	std	Y+10, r11	; 0x0a
    229a:	cb 86       	std	Y+11, r12	; 0x0b
    229c:	dc 86       	std	Y+12, r13	; 0x0c
    229e:	ed 86       	std	Y+13, r14	; 0x0d
    22a0:	fe 86       	std	Y+14, r15	; 0x0e
    22a2:	0f 87       	std	Y+15, r16	; 0x0f
    22a4:	18 8b       	std	Y+16, r17	; 0x10
    22a6:	29 84       	ldd	r2, Y+9	; 0x09
    22a8:	3a 84       	ldd	r3, Y+10	; 0x0a
    22aa:	4b 84       	ldd	r4, Y+11	; 0x0b
    22ac:	5c 84       	ldd	r5, Y+12	; 0x0c
    22ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    22b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    22b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    22b4:	18 89       	ldd	r17, Y+16	; 0x10
    22b6:	69 80       	ldd	r6, Y+1	; 0x01
    22b8:	7a 80       	ldd	r7, Y+2	; 0x02
    22ba:	8b 80       	ldd	r8, Y+3	; 0x03
    22bc:	9c 80       	ldd	r9, Y+4	; 0x04
    22be:	6d a6       	std	Y+45, r6	; 0x2d
    22c0:	7e a6       	std	Y+46, r7	; 0x2e
    22c2:	8f a6       	std	Y+47, r8	; 0x2f
    22c4:	98 aa       	std	Y+48, r9	; 0x30
    22c6:	6d 80       	ldd	r6, Y+5	; 0x05
    22c8:	7e 80       	ldd	r7, Y+6	; 0x06
    22ca:	8f 80       	ldd	r8, Y+7	; 0x07
    22cc:	98 84       	ldd	r9, Y+8	; 0x08
    22ce:	e1 14       	cp	r14, r1
    22d0:	f1 04       	cpc	r15, r1
    22d2:	01 05       	cpc	r16, r1
    22d4:	11 05       	cpc	r17, r1
    22d6:	09 f0       	breq	.+2      	; 0x22da <__udivdi3+0x80>
    22d8:	b3 c3       	rjmp	.+1894   	; 0x2a40 <__udivdi3+0x7e6>
    22da:	62 14       	cp	r6, r2
    22dc:	73 04       	cpc	r7, r3
    22de:	84 04       	cpc	r8, r4
    22e0:	95 04       	cpc	r9, r5
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <__udivdi3+0x8c>
    22e4:	3d c1       	rjmp	.+634    	; 0x2560 <__udivdi3+0x306>
    22e6:	00 e0       	ldi	r16, 0x00	; 0
    22e8:	20 16       	cp	r2, r16
    22ea:	00 e0       	ldi	r16, 0x00	; 0
    22ec:	30 06       	cpc	r3, r16
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	40 06       	cpc	r4, r16
    22f2:	00 e0       	ldi	r16, 0x00	; 0
    22f4:	50 06       	cpc	r5, r16
    22f6:	88 f4       	brcc	.+34     	; 0x231a <__udivdi3+0xc0>
    22f8:	1f ef       	ldi	r17, 0xFF	; 255
    22fa:	21 16       	cp	r2, r17
    22fc:	31 04       	cpc	r3, r1
    22fe:	41 04       	cpc	r4, r1
    2300:	51 04       	cpc	r5, r1
    2302:	39 f0       	breq	.+14     	; 0x2312 <__udivdi3+0xb8>
    2304:	30 f0       	brcs	.+12     	; 0x2312 <__udivdi3+0xb8>
    2306:	48 e0       	ldi	r20, 0x08	; 8
    2308:	e4 2e       	mov	r14, r20
    230a:	f1 2c       	mov	r15, r1
    230c:	01 2d       	mov	r16, r1
    230e:	11 2d       	mov	r17, r1
    2310:	18 c0       	rjmp	.+48     	; 0x2342 <__udivdi3+0xe8>
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
    2316:	87 01       	movw	r16, r14
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <__udivdi3+0xe8>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	22 16       	cp	r2, r18
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	32 06       	cpc	r3, r18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	42 06       	cpc	r4, r18
    2326:	21 e0       	ldi	r18, 0x01	; 1
    2328:	52 06       	cpc	r5, r18
    232a:	30 f0       	brcs	.+12     	; 0x2338 <__udivdi3+0xde>
    232c:	38 e1       	ldi	r19, 0x18	; 24
    232e:	e3 2e       	mov	r14, r19
    2330:	f1 2c       	mov	r15, r1
    2332:	01 2d       	mov	r16, r1
    2334:	11 2d       	mov	r17, r1
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__udivdi3+0xe8>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	e2 2e       	mov	r14, r18
    233c:	f1 2c       	mov	r15, r1
    233e:	01 2d       	mov	r16, r1
    2340:	11 2d       	mov	r17, r1
    2342:	d2 01       	movw	r26, r4
    2344:	c1 01       	movw	r24, r2
    2346:	0e 2c       	mov	r0, r14
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <__udivdi3+0xf8>
    234a:	b6 95       	lsr	r27
    234c:	a7 95       	ror	r26
    234e:	97 95       	ror	r25
    2350:	87 95       	ror	r24
    2352:	0a 94       	dec	r0
    2354:	d2 f7       	brpl	.-12     	; 0x234a <__udivdi3+0xf0>
    2356:	8c 52       	subi	r24, 0x2C	; 44
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	dc 01       	movw	r26, r24
    235c:	2c 91       	ld	r18, X
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	8e 19       	sub	r24, r14
    2368:	9f 09       	sbc	r25, r15
    236a:	a0 0b       	sbc	r26, r16
    236c:	b1 0b       	sbc	r27, r17
    236e:	7c 01       	movw	r14, r24
    2370:	8d 01       	movw	r16, r26
    2372:	e2 1a       	sub	r14, r18
    2374:	f1 08       	sbc	r15, r1
    2376:	01 09       	sbc	r16, r1
    2378:	11 09       	sbc	r17, r1
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	01 05       	cpc	r16, r1
    2380:	11 05       	cpc	r17, r1
    2382:	a1 f1       	breq	.+104    	; 0x23ec <__udivdi3+0x192>
    2384:	0e 2c       	mov	r0, r14
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <__udivdi3+0x136>
    2388:	22 0c       	add	r2, r2
    238a:	33 1c       	adc	r3, r3
    238c:	44 1c       	adc	r4, r4
    238e:	55 1c       	adc	r5, r5
    2390:	0a 94       	dec	r0
    2392:	d2 f7       	brpl	.-12     	; 0x2388 <__udivdi3+0x12e>
    2394:	a4 01       	movw	r20, r8
    2396:	93 01       	movw	r18, r6
    2398:	0e 2c       	mov	r0, r14
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <__udivdi3+0x14a>
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	44 1f       	adc	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	0a 94       	dec	r0
    23a6:	d2 f7       	brpl	.-12     	; 0x239c <__udivdi3+0x142>
    23a8:	80 e2       	ldi	r24, 0x20	; 32
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	8e 19       	sub	r24, r14
    23ae:	9f 09       	sbc	r25, r15
    23b0:	6d a4       	ldd	r6, Y+45	; 0x2d
    23b2:	7e a4       	ldd	r7, Y+46	; 0x2e
    23b4:	8f a4       	ldd	r8, Y+47	; 0x2f
    23b6:	98 a8       	ldd	r9, Y+48	; 0x30
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__udivdi3+0x168>
    23ba:	96 94       	lsr	r9
    23bc:	87 94       	ror	r8
    23be:	77 94       	ror	r7
    23c0:	67 94       	ror	r6
    23c2:	8a 95       	dec	r24
    23c4:	d2 f7       	brpl	.-12     	; 0x23ba <__udivdi3+0x160>
    23c6:	62 2a       	or	r6, r18
    23c8:	73 2a       	or	r7, r19
    23ca:	84 2a       	or	r8, r20
    23cc:	95 2a       	or	r9, r21
    23ce:	ad a4       	ldd	r10, Y+45	; 0x2d
    23d0:	be a4       	ldd	r11, Y+46	; 0x2e
    23d2:	cf a4       	ldd	r12, Y+47	; 0x2f
    23d4:	d8 a8       	ldd	r13, Y+48	; 0x30
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <__udivdi3+0x186>
    23d8:	aa 0c       	add	r10, r10
    23da:	bb 1c       	adc	r11, r11
    23dc:	cc 1c       	adc	r12, r12
    23de:	dd 1c       	adc	r13, r13
    23e0:	ea 94       	dec	r14
    23e2:	d2 f7       	brpl	.-12     	; 0x23d8 <__udivdi3+0x17e>
    23e4:	ad a6       	std	Y+45, r10	; 0x2d
    23e6:	be a6       	std	Y+46, r11	; 0x2e
    23e8:	cf a6       	std	Y+47, r12	; 0x2f
    23ea:	d8 aa       	std	Y+48, r13	; 0x30
    23ec:	62 01       	movw	r12, r4
    23ee:	ee 24       	eor	r14, r14
    23f0:	ff 24       	eor	r15, r15
    23f2:	cd aa       	std	Y+53, r12	; 0x35
    23f4:	de aa       	std	Y+54, r13	; 0x36
    23f6:	ef aa       	std	Y+55, r14	; 0x37
    23f8:	f8 ae       	std	Y+56, r15	; 0x38
    23fa:	92 01       	movw	r18, r4
    23fc:	81 01       	movw	r16, r2
    23fe:	20 70       	andi	r18, 0x00	; 0
    2400:	30 70       	andi	r19, 0x00	; 0
    2402:	09 af       	std	Y+57, r16	; 0x39
    2404:	1a af       	std	Y+58, r17	; 0x3a
    2406:	2b af       	std	Y+59, r18	; 0x3b
    2408:	3c af       	std	Y+60, r19	; 0x3c
    240a:	c4 01       	movw	r24, r8
    240c:	b3 01       	movw	r22, r6
    240e:	a7 01       	movw	r20, r14
    2410:	96 01       	movw	r18, r12
    2412:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    2416:	7b 01       	movw	r14, r22
    2418:	8c 01       	movw	r16, r24
    241a:	c4 01       	movw	r24, r8
    241c:	b3 01       	movw	r22, r6
    241e:	2d a9       	ldd	r18, Y+53	; 0x35
    2420:	3e a9       	ldd	r19, Y+54	; 0x36
    2422:	4f a9       	ldd	r20, Y+55	; 0x37
    2424:	58 ad       	ldd	r21, Y+56	; 0x38
    2426:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    242a:	c9 01       	movw	r24, r18
    242c:	da 01       	movw	r26, r20
    242e:	3c 01       	movw	r6, r24
    2430:	4d 01       	movw	r8, r26
    2432:	c4 01       	movw	r24, r8
    2434:	b3 01       	movw	r22, r6
    2436:	29 ad       	ldd	r18, Y+57	; 0x39
    2438:	3a ad       	ldd	r19, Y+58	; 0x3a
    243a:	4b ad       	ldd	r20, Y+59	; 0x3b
    243c:	5c ad       	ldd	r21, Y+60	; 0x3c
    243e:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	87 01       	movw	r16, r14
    2448:	ff 24       	eor	r15, r15
    244a:	ee 24       	eor	r14, r14
    244c:	ad a4       	ldd	r10, Y+45	; 0x2d
    244e:	be a4       	ldd	r11, Y+46	; 0x2e
    2450:	cf a4       	ldd	r12, Y+47	; 0x2f
    2452:	d8 a8       	ldd	r13, Y+48	; 0x30
    2454:	c6 01       	movw	r24, r12
    2456:	aa 27       	eor	r26, r26
    2458:	bb 27       	eor	r27, r27
    245a:	57 01       	movw	r10, r14
    245c:	68 01       	movw	r12, r16
    245e:	a8 2a       	or	r10, r24
    2460:	b9 2a       	or	r11, r25
    2462:	ca 2a       	or	r12, r26
    2464:	db 2a       	or	r13, r27
    2466:	a2 16       	cp	r10, r18
    2468:	b3 06       	cpc	r11, r19
    246a:	c4 06       	cpc	r12, r20
    246c:	d5 06       	cpc	r13, r21
    246e:	e0 f4       	brcc	.+56     	; 0x24a8 <__udivdi3+0x24e>
    2470:	08 94       	sec
    2472:	61 08       	sbc	r6, r1
    2474:	71 08       	sbc	r7, r1
    2476:	81 08       	sbc	r8, r1
    2478:	91 08       	sbc	r9, r1
    247a:	a2 0c       	add	r10, r2
    247c:	b3 1c       	adc	r11, r3
    247e:	c4 1c       	adc	r12, r4
    2480:	d5 1c       	adc	r13, r5
    2482:	a2 14       	cp	r10, r2
    2484:	b3 04       	cpc	r11, r3
    2486:	c4 04       	cpc	r12, r4
    2488:	d5 04       	cpc	r13, r5
    248a:	70 f0       	brcs	.+28     	; 0x24a8 <__udivdi3+0x24e>
    248c:	a2 16       	cp	r10, r18
    248e:	b3 06       	cpc	r11, r19
    2490:	c4 06       	cpc	r12, r20
    2492:	d5 06       	cpc	r13, r21
    2494:	48 f4       	brcc	.+18     	; 0x24a8 <__udivdi3+0x24e>
    2496:	08 94       	sec
    2498:	61 08       	sbc	r6, r1
    249a:	71 08       	sbc	r7, r1
    249c:	81 08       	sbc	r8, r1
    249e:	91 08       	sbc	r9, r1
    24a0:	a2 0c       	add	r10, r2
    24a2:	b3 1c       	adc	r11, r3
    24a4:	c4 1c       	adc	r12, r4
    24a6:	d5 1c       	adc	r13, r5
    24a8:	a2 1a       	sub	r10, r18
    24aa:	b3 0a       	sbc	r11, r19
    24ac:	c4 0a       	sbc	r12, r20
    24ae:	d5 0a       	sbc	r13, r21
    24b0:	c6 01       	movw	r24, r12
    24b2:	b5 01       	movw	r22, r10
    24b4:	2d a9       	ldd	r18, Y+53	; 0x35
    24b6:	3e a9       	ldd	r19, Y+54	; 0x36
    24b8:	4f a9       	ldd	r20, Y+55	; 0x37
    24ba:	58 ad       	ldd	r21, Y+56	; 0x38
    24bc:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    24c0:	7b 01       	movw	r14, r22
    24c2:	8c 01       	movw	r16, r24
    24c4:	c6 01       	movw	r24, r12
    24c6:	b5 01       	movw	r22, r10
    24c8:	2d a9       	ldd	r18, Y+53	; 0x35
    24ca:	3e a9       	ldd	r19, Y+54	; 0x36
    24cc:	4f a9       	ldd	r20, Y+55	; 0x37
    24ce:	58 ad       	ldd	r21, Y+56	; 0x38
    24d0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    24d4:	c9 01       	movw	r24, r18
    24d6:	da 01       	movw	r26, r20
    24d8:	5c 01       	movw	r10, r24
    24da:	6d 01       	movw	r12, r26
    24dc:	c6 01       	movw	r24, r12
    24de:	b5 01       	movw	r22, r10
    24e0:	29 ad       	ldd	r18, Y+57	; 0x39
    24e2:	3a ad       	ldd	r19, Y+58	; 0x3a
    24e4:	4b ad       	ldd	r20, Y+59	; 0x3b
    24e6:	5c ad       	ldd	r21, Y+60	; 0x3c
    24e8:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	87 01       	movw	r16, r14
    24f2:	ff 24       	eor	r15, r15
    24f4:	ee 24       	eor	r14, r14
    24f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fa:	af a5       	ldd	r26, Y+47	; 0x2f
    24fc:	b8 a9       	ldd	r27, Y+48	; 0x30
    24fe:	a0 70       	andi	r26, 0x00	; 0
    2500:	b0 70       	andi	r27, 0x00	; 0
    2502:	e8 2a       	or	r14, r24
    2504:	f9 2a       	or	r15, r25
    2506:	0a 2b       	or	r16, r26
    2508:	1b 2b       	or	r17, r27
    250a:	e2 16       	cp	r14, r18
    250c:	f3 06       	cpc	r15, r19
    250e:	04 07       	cpc	r16, r20
    2510:	15 07       	cpc	r17, r21
    2512:	c0 f4       	brcc	.+48     	; 0x2544 <__udivdi3+0x2ea>
    2514:	08 94       	sec
    2516:	a1 08       	sbc	r10, r1
    2518:	b1 08       	sbc	r11, r1
    251a:	c1 08       	sbc	r12, r1
    251c:	d1 08       	sbc	r13, r1
    251e:	e2 0c       	add	r14, r2
    2520:	f3 1c       	adc	r15, r3
    2522:	04 1d       	adc	r16, r4
    2524:	15 1d       	adc	r17, r5
    2526:	e2 14       	cp	r14, r2
    2528:	f3 04       	cpc	r15, r3
    252a:	04 05       	cpc	r16, r4
    252c:	15 05       	cpc	r17, r5
    252e:	50 f0       	brcs	.+20     	; 0x2544 <__udivdi3+0x2ea>
    2530:	e2 16       	cp	r14, r18
    2532:	f3 06       	cpc	r15, r19
    2534:	04 07       	cpc	r16, r20
    2536:	15 07       	cpc	r17, r21
    2538:	28 f4       	brcc	.+10     	; 0x2544 <__udivdi3+0x2ea>
    253a:	08 94       	sec
    253c:	a1 08       	sbc	r10, r1
    253e:	b1 08       	sbc	r11, r1
    2540:	c1 08       	sbc	r12, r1
    2542:	d1 08       	sbc	r13, r1
    2544:	d3 01       	movw	r26, r6
    2546:	99 27       	eor	r25, r25
    2548:	88 27       	eor	r24, r24
    254a:	86 01       	movw	r16, r12
    254c:	75 01       	movw	r14, r10
    254e:	e8 2a       	or	r14, r24
    2550:	f9 2a       	or	r15, r25
    2552:	0a 2b       	or	r16, r26
    2554:	1b 2b       	or	r17, r27
    2556:	e9 aa       	std	Y+49, r14	; 0x31
    2558:	fa aa       	std	Y+50, r15	; 0x32
    255a:	0b ab       	std	Y+51, r16	; 0x33
    255c:	1c ab       	std	Y+52, r17	; 0x34
    255e:	cf c4       	rjmp	.+2462   	; 0x2efe <__udivdi3+0xca4>
    2560:	21 14       	cp	r2, r1
    2562:	31 04       	cpc	r3, r1
    2564:	41 04       	cpc	r4, r1
    2566:	51 04       	cpc	r5, r1
    2568:	71 f4       	brne	.+28     	; 0x2586 <__udivdi3+0x32c>
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    257e:	c9 01       	movw	r24, r18
    2580:	da 01       	movw	r26, r20
    2582:	1c 01       	movw	r2, r24
    2584:	2d 01       	movw	r4, r26
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	20 16       	cp	r2, r16
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	30 06       	cpc	r3, r16
    258e:	01 e0       	ldi	r16, 0x01	; 1
    2590:	40 06       	cpc	r4, r16
    2592:	00 e0       	ldi	r16, 0x00	; 0
    2594:	50 06       	cpc	r5, r16
    2596:	88 f4       	brcc	.+34     	; 0x25ba <__udivdi3+0x360>
    2598:	1f ef       	ldi	r17, 0xFF	; 255
    259a:	21 16       	cp	r2, r17
    259c:	31 04       	cpc	r3, r1
    259e:	41 04       	cpc	r4, r1
    25a0:	51 04       	cpc	r5, r1
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <__udivdi3+0x356>
    25a4:	28 f0       	brcs	.+10     	; 0x25b0 <__udivdi3+0x356>
    25a6:	48 e0       	ldi	r20, 0x08	; 8
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	17 c0       	rjmp	.+46     	; 0x25de <__udivdi3+0x384>
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <__udivdi3+0x384>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	22 16       	cp	r2, r18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	32 06       	cpc	r3, r18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	42 06       	cpc	r4, r18
    25c6:	21 e0       	ldi	r18, 0x01	; 1
    25c8:	52 06       	cpc	r5, r18
    25ca:	28 f0       	brcs	.+10     	; 0x25d6 <__udivdi3+0x37c>
    25cc:	48 e1       	ldi	r20, 0x18	; 24
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <__udivdi3+0x384>
    25d6:	40 e1       	ldi	r20, 0x10	; 16
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	d2 01       	movw	r26, r4
    25e0:	c1 01       	movw	r24, r2
    25e2:	04 2e       	mov	r0, r20
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <__udivdi3+0x394>
    25e6:	b6 95       	lsr	r27
    25e8:	a7 95       	ror	r26
    25ea:	97 95       	ror	r25
    25ec:	87 95       	ror	r24
    25ee:	0a 94       	dec	r0
    25f0:	d2 f7       	brpl	.-12     	; 0x25e6 <__udivdi3+0x38c>
    25f2:	8c 52       	subi	r24, 0x2C	; 44
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	dc 01       	movw	r26, r24
    25f8:	2c 91       	ld	r18, X
    25fa:	e0 e2       	ldi	r30, 0x20	; 32
    25fc:	ee 2e       	mov	r14, r30
    25fe:	f1 2c       	mov	r15, r1
    2600:	01 2d       	mov	r16, r1
    2602:	11 2d       	mov	r17, r1
    2604:	d8 01       	movw	r26, r16
    2606:	c7 01       	movw	r24, r14
    2608:	84 1b       	sub	r24, r20
    260a:	95 0b       	sbc	r25, r21
    260c:	a6 0b       	sbc	r26, r22
    260e:	b7 0b       	sbc	r27, r23
    2610:	82 1b       	sub	r24, r18
    2612:	91 09       	sbc	r25, r1
    2614:	a1 09       	sbc	r26, r1
    2616:	b1 09       	sbc	r27, r1
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	a1 05       	cpc	r26, r1
    261c:	b1 05       	cpc	r27, r1
    261e:	61 f4       	brne	.+24     	; 0x2638 <__udivdi3+0x3de>
    2620:	64 01       	movw	r12, r8
    2622:	53 01       	movw	r10, r6
    2624:	a2 18       	sub	r10, r2
    2626:	b3 08       	sbc	r11, r3
    2628:	c4 08       	sbc	r12, r4
    262a:	d5 08       	sbc	r13, r5
    262c:	31 e0       	ldi	r19, 0x01	; 1
    262e:	63 2e       	mov	r6, r19
    2630:	71 2c       	mov	r7, r1
    2632:	81 2c       	mov	r8, r1
    2634:	91 2c       	mov	r9, r1
    2636:	1e c1       	rjmp	.+572    	; 0x2874 <__udivdi3+0x61a>
    2638:	6f 96       	adiw	r28, 0x1f	; 31
    263a:	8f af       	std	Y+63, r24	; 0x3f
    263c:	6f 97       	sbiw	r28, 0x1f	; 31
    263e:	08 2e       	mov	r0, r24
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__udivdi3+0x3f0>
    2642:	22 0c       	add	r2, r2
    2644:	33 1c       	adc	r3, r3
    2646:	44 1c       	adc	r4, r4
    2648:	55 1c       	adc	r5, r5
    264a:	0a 94       	dec	r0
    264c:	d2 f7       	brpl	.-12     	; 0x2642 <__udivdi3+0x3e8>
    264e:	ee 2d       	mov	r30, r14
    2650:	e8 1b       	sub	r30, r24
    2652:	64 01       	movw	r12, r8
    2654:	53 01       	movw	r10, r6
    2656:	0e 2e       	mov	r0, r30
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <__udivdi3+0x408>
    265a:	d6 94       	lsr	r13
    265c:	c7 94       	ror	r12
    265e:	b7 94       	ror	r11
    2660:	a7 94       	ror	r10
    2662:	0a 94       	dec	r0
    2664:	d2 f7       	brpl	.-12     	; 0x265a <__udivdi3+0x400>
    2666:	a4 01       	movw	r20, r8
    2668:	93 01       	movw	r18, r6
    266a:	6f 96       	adiw	r28, 0x1f	; 31
    266c:	0f ac       	ldd	r0, Y+63	; 0x3f
    266e:	6f 97       	sbiw	r28, 0x1f	; 31
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__udivdi3+0x420>
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	44 1f       	adc	r20, r20
    2678:	55 1f       	adc	r21, r21
    267a:	0a 94       	dec	r0
    267c:	d2 f7       	brpl	.-12     	; 0x2672 <__udivdi3+0x418>
    267e:	6d a4       	ldd	r6, Y+45	; 0x2d
    2680:	7e a4       	ldd	r7, Y+46	; 0x2e
    2682:	8f a4       	ldd	r8, Y+47	; 0x2f
    2684:	98 a8       	ldd	r9, Y+48	; 0x30
    2686:	0e 2e       	mov	r0, r30
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <__udivdi3+0x438>
    268a:	96 94       	lsr	r9
    268c:	87 94       	ror	r8
    268e:	77 94       	ror	r7
    2690:	67 94       	ror	r6
    2692:	0a 94       	dec	r0
    2694:	d2 f7       	brpl	.-12     	; 0x268a <__udivdi3+0x430>
    2696:	84 01       	movw	r16, r8
    2698:	73 01       	movw	r14, r6
    269a:	e2 2a       	or	r14, r18
    269c:	f3 2a       	or	r15, r19
    269e:	04 2b       	or	r16, r20
    26a0:	15 2b       	or	r17, r21
    26a2:	e9 a6       	std	Y+41, r14	; 0x29
    26a4:	fa a6       	std	Y+42, r15	; 0x2a
    26a6:	0b a7       	std	Y+43, r16	; 0x2b
    26a8:	1c a7       	std	Y+44, r17	; 0x2c
    26aa:	32 01       	movw	r6, r4
    26ac:	88 24       	eor	r8, r8
    26ae:	99 24       	eor	r9, r9
    26b0:	92 01       	movw	r18, r4
    26b2:	81 01       	movw	r16, r2
    26b4:	20 70       	andi	r18, 0x00	; 0
    26b6:	30 70       	andi	r19, 0x00	; 0
    26b8:	21 96       	adiw	r28, 0x01	; 1
    26ba:	0c af       	std	Y+60, r16	; 0x3c
    26bc:	1d af       	std	Y+61, r17	; 0x3d
    26be:	2e af       	std	Y+62, r18	; 0x3e
    26c0:	3f af       	std	Y+63, r19	; 0x3f
    26c2:	21 97       	sbiw	r28, 0x01	; 1
    26c4:	c6 01       	movw	r24, r12
    26c6:	b5 01       	movw	r22, r10
    26c8:	a4 01       	movw	r20, r8
    26ca:	93 01       	movw	r18, r6
    26cc:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    26d0:	7b 01       	movw	r14, r22
    26d2:	8c 01       	movw	r16, r24
    26d4:	c6 01       	movw	r24, r12
    26d6:	b5 01       	movw	r22, r10
    26d8:	a4 01       	movw	r20, r8
    26da:	93 01       	movw	r18, r6
    26dc:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    26e0:	c9 01       	movw	r24, r18
    26e2:	da 01       	movw	r26, r20
    26e4:	25 96       	adiw	r28, 0x05	; 5
    26e6:	8c af       	std	Y+60, r24	; 0x3c
    26e8:	9d af       	std	Y+61, r25	; 0x3d
    26ea:	ae af       	std	Y+62, r26	; 0x3e
    26ec:	bf af       	std	Y+63, r27	; 0x3f
    26ee:	25 97       	sbiw	r28, 0x05	; 5
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	21 96       	adiw	r28, 0x01	; 1
    26f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    26f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    26fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    26fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    26fe:	21 97       	sbiw	r28, 0x01	; 1
    2700:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	87 01       	movw	r16, r14
    270a:	ff 24       	eor	r15, r15
    270c:	ee 24       	eor	r14, r14
    270e:	a9 a4       	ldd	r10, Y+41	; 0x29
    2710:	ba a4       	ldd	r11, Y+42	; 0x2a
    2712:	cb a4       	ldd	r12, Y+43	; 0x2b
    2714:	dc a4       	ldd	r13, Y+44	; 0x2c
    2716:	c6 01       	movw	r24, r12
    2718:	aa 27       	eor	r26, r26
    271a:	bb 27       	eor	r27, r27
    271c:	5c 01       	movw	r10, r24
    271e:	6d 01       	movw	r12, r26
    2720:	ae 28       	or	r10, r14
    2722:	bf 28       	or	r11, r15
    2724:	c0 2a       	or	r12, r16
    2726:	d1 2a       	or	r13, r17
    2728:	a2 16       	cp	r10, r18
    272a:	b3 06       	cpc	r11, r19
    272c:	c4 06       	cpc	r12, r20
    272e:	d5 06       	cpc	r13, r21
    2730:	60 f5       	brcc	.+88     	; 0x278a <__udivdi3+0x530>
    2732:	25 96       	adiw	r28, 0x05	; 5
    2734:	6c ad       	ldd	r22, Y+60	; 0x3c
    2736:	7d ad       	ldd	r23, Y+61	; 0x3d
    2738:	8e ad       	ldd	r24, Y+62	; 0x3e
    273a:	9f ad       	ldd	r25, Y+63	; 0x3f
    273c:	25 97       	sbiw	r28, 0x05	; 5
    273e:	61 50       	subi	r22, 0x01	; 1
    2740:	70 40       	sbci	r23, 0x00	; 0
    2742:	80 40       	sbci	r24, 0x00	; 0
    2744:	90 40       	sbci	r25, 0x00	; 0
    2746:	25 96       	adiw	r28, 0x05	; 5
    2748:	6c af       	std	Y+60, r22	; 0x3c
    274a:	7d af       	std	Y+61, r23	; 0x3d
    274c:	8e af       	std	Y+62, r24	; 0x3e
    274e:	9f af       	std	Y+63, r25	; 0x3f
    2750:	25 97       	sbiw	r28, 0x05	; 5
    2752:	a2 0c       	add	r10, r2
    2754:	b3 1c       	adc	r11, r3
    2756:	c4 1c       	adc	r12, r4
    2758:	d5 1c       	adc	r13, r5
    275a:	a2 14       	cp	r10, r2
    275c:	b3 04       	cpc	r11, r3
    275e:	c4 04       	cpc	r12, r4
    2760:	d5 04       	cpc	r13, r5
    2762:	98 f0       	brcs	.+38     	; 0x278a <__udivdi3+0x530>
    2764:	a2 16       	cp	r10, r18
    2766:	b3 06       	cpc	r11, r19
    2768:	c4 06       	cpc	r12, r20
    276a:	d5 06       	cpc	r13, r21
    276c:	70 f4       	brcc	.+28     	; 0x278a <__udivdi3+0x530>
    276e:	61 50       	subi	r22, 0x01	; 1
    2770:	70 40       	sbci	r23, 0x00	; 0
    2772:	80 40       	sbci	r24, 0x00	; 0
    2774:	90 40       	sbci	r25, 0x00	; 0
    2776:	25 96       	adiw	r28, 0x05	; 5
    2778:	6c af       	std	Y+60, r22	; 0x3c
    277a:	7d af       	std	Y+61, r23	; 0x3d
    277c:	8e af       	std	Y+62, r24	; 0x3e
    277e:	9f af       	std	Y+63, r25	; 0x3f
    2780:	25 97       	sbiw	r28, 0x05	; 5
    2782:	a2 0c       	add	r10, r2
    2784:	b3 1c       	adc	r11, r3
    2786:	c4 1c       	adc	r12, r4
    2788:	d5 1c       	adc	r13, r5
    278a:	a2 1a       	sub	r10, r18
    278c:	b3 0a       	sbc	r11, r19
    278e:	c4 0a       	sbc	r12, r20
    2790:	d5 0a       	sbc	r13, r21
    2792:	c6 01       	movw	r24, r12
    2794:	b5 01       	movw	r22, r10
    2796:	a4 01       	movw	r20, r8
    2798:	93 01       	movw	r18, r6
    279a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    279e:	7b 01       	movw	r14, r22
    27a0:	8c 01       	movw	r16, r24
    27a2:	c6 01       	movw	r24, r12
    27a4:	b5 01       	movw	r22, r10
    27a6:	a4 01       	movw	r20, r8
    27a8:	93 01       	movw	r18, r6
    27aa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    27ae:	c9 01       	movw	r24, r18
    27b0:	da 01       	movw	r26, r20
    27b2:	3c 01       	movw	r6, r24
    27b4:	4d 01       	movw	r8, r26
    27b6:	c4 01       	movw	r24, r8
    27b8:	b3 01       	movw	r22, r6
    27ba:	21 96       	adiw	r28, 0x01	; 1
    27bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    27be:	3d ad       	ldd	r19, Y+61	; 0x3d
    27c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    27c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    27c4:	21 97       	sbiw	r28, 0x01	; 1
    27c6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	87 01       	movw	r16, r14
    27d0:	ff 24       	eor	r15, r15
    27d2:	ee 24       	eor	r14, r14
    27d4:	89 a5       	ldd	r24, Y+41	; 0x29
    27d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d8:	ab a5       	ldd	r26, Y+43	; 0x2b
    27da:	bc a5       	ldd	r27, Y+44	; 0x2c
    27dc:	a0 70       	andi	r26, 0x00	; 0
    27de:	b0 70       	andi	r27, 0x00	; 0
    27e0:	57 01       	movw	r10, r14
    27e2:	68 01       	movw	r12, r16
    27e4:	a8 2a       	or	r10, r24
    27e6:	b9 2a       	or	r11, r25
    27e8:	ca 2a       	or	r12, r26
    27ea:	db 2a       	or	r13, r27
    27ec:	a2 16       	cp	r10, r18
    27ee:	b3 06       	cpc	r11, r19
    27f0:	c4 06       	cpc	r12, r20
    27f2:	d5 06       	cpc	r13, r21
    27f4:	e0 f4       	brcc	.+56     	; 0x282e <__udivdi3+0x5d4>
    27f6:	08 94       	sec
    27f8:	61 08       	sbc	r6, r1
    27fa:	71 08       	sbc	r7, r1
    27fc:	81 08       	sbc	r8, r1
    27fe:	91 08       	sbc	r9, r1
    2800:	a2 0c       	add	r10, r2
    2802:	b3 1c       	adc	r11, r3
    2804:	c4 1c       	adc	r12, r4
    2806:	d5 1c       	adc	r13, r5
    2808:	a2 14       	cp	r10, r2
    280a:	b3 04       	cpc	r11, r3
    280c:	c4 04       	cpc	r12, r4
    280e:	d5 04       	cpc	r13, r5
    2810:	70 f0       	brcs	.+28     	; 0x282e <__udivdi3+0x5d4>
    2812:	a2 16       	cp	r10, r18
    2814:	b3 06       	cpc	r11, r19
    2816:	c4 06       	cpc	r12, r20
    2818:	d5 06       	cpc	r13, r21
    281a:	48 f4       	brcc	.+18     	; 0x282e <__udivdi3+0x5d4>
    281c:	08 94       	sec
    281e:	61 08       	sbc	r6, r1
    2820:	71 08       	sbc	r7, r1
    2822:	81 08       	sbc	r8, r1
    2824:	91 08       	sbc	r9, r1
    2826:	a2 0c       	add	r10, r2
    2828:	b3 1c       	adc	r11, r3
    282a:	c4 1c       	adc	r12, r4
    282c:	d5 1c       	adc	r13, r5
    282e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2830:	9e a5       	ldd	r25, Y+46	; 0x2e
    2832:	af a5       	ldd	r26, Y+47	; 0x2f
    2834:	b8 a9       	ldd	r27, Y+48	; 0x30
    2836:	6f 96       	adiw	r28, 0x1f	; 31
    2838:	0f ac       	ldd	r0, Y+63	; 0x3f
    283a:	6f 97       	sbiw	r28, 0x1f	; 31
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__udivdi3+0x5ec>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	0a 94       	dec	r0
    2848:	d2 f7       	brpl	.-12     	; 0x283e <__udivdi3+0x5e4>
    284a:	8d a7       	std	Y+45, r24	; 0x2d
    284c:	9e a7       	std	Y+46, r25	; 0x2e
    284e:	af a7       	std	Y+47, r26	; 0x2f
    2850:	b8 ab       	std	Y+48, r27	; 0x30
    2852:	a2 1a       	sub	r10, r18
    2854:	b3 0a       	sbc	r11, r19
    2856:	c4 0a       	sbc	r12, r20
    2858:	d5 0a       	sbc	r13, r21
    285a:	25 96       	adiw	r28, 0x05	; 5
    285c:	ec ac       	ldd	r14, Y+60	; 0x3c
    285e:	fd ac       	ldd	r15, Y+61	; 0x3d
    2860:	0e ad       	ldd	r16, Y+62	; 0x3e
    2862:	1f ad       	ldd	r17, Y+63	; 0x3f
    2864:	25 97       	sbiw	r28, 0x05	; 5
    2866:	d7 01       	movw	r26, r14
    2868:	99 27       	eor	r25, r25
    286a:	88 27       	eor	r24, r24
    286c:	68 2a       	or	r6, r24
    286e:	79 2a       	or	r7, r25
    2870:	8a 2a       	or	r8, r26
    2872:	9b 2a       	or	r9, r27
    2874:	82 01       	movw	r16, r4
    2876:	22 27       	eor	r18, r18
    2878:	33 27       	eor	r19, r19
    287a:	29 96       	adiw	r28, 0x09	; 9
    287c:	0c af       	std	Y+60, r16	; 0x3c
    287e:	1d af       	std	Y+61, r17	; 0x3d
    2880:	2e af       	std	Y+62, r18	; 0x3e
    2882:	3f af       	std	Y+63, r19	; 0x3f
    2884:	29 97       	sbiw	r28, 0x09	; 9
    2886:	a2 01       	movw	r20, r4
    2888:	91 01       	movw	r18, r2
    288a:	40 70       	andi	r20, 0x00	; 0
    288c:	50 70       	andi	r21, 0x00	; 0
    288e:	2d 96       	adiw	r28, 0x0d	; 13
    2890:	2c af       	std	Y+60, r18	; 0x3c
    2892:	3d af       	std	Y+61, r19	; 0x3d
    2894:	4e af       	std	Y+62, r20	; 0x3e
    2896:	5f af       	std	Y+63, r21	; 0x3f
    2898:	2d 97       	sbiw	r28, 0x0d	; 13
    289a:	c6 01       	movw	r24, r12
    289c:	b5 01       	movw	r22, r10
    289e:	29 96       	adiw	r28, 0x09	; 9
    28a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    28a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    28a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    28a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    28a8:	29 97       	sbiw	r28, 0x09	; 9
    28aa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    28ae:	7b 01       	movw	r14, r22
    28b0:	8c 01       	movw	r16, r24
    28b2:	c6 01       	movw	r24, r12
    28b4:	b5 01       	movw	r22, r10
    28b6:	29 96       	adiw	r28, 0x09	; 9
    28b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    28bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28be:	5f ad       	ldd	r21, Y+63	; 0x3f
    28c0:	29 97       	sbiw	r28, 0x09	; 9
    28c2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    28c6:	c9 01       	movw	r24, r18
    28c8:	da 01       	movw	r26, r20
    28ca:	61 96       	adiw	r28, 0x11	; 17
    28cc:	8c af       	std	Y+60, r24	; 0x3c
    28ce:	9d af       	std	Y+61, r25	; 0x3d
    28d0:	ae af       	std	Y+62, r26	; 0x3e
    28d2:	bf af       	std	Y+63, r27	; 0x3f
    28d4:	61 97       	sbiw	r28, 0x11	; 17
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	2d 96       	adiw	r28, 0x0d	; 13
    28dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    28de:	3d ad       	ldd	r19, Y+61	; 0x3d
    28e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    28e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    28e4:	2d 97       	sbiw	r28, 0x0d	; 13
    28e6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	87 01       	movw	r16, r14
    28f0:	ff 24       	eor	r15, r15
    28f2:	ee 24       	eor	r14, r14
    28f4:	ad a4       	ldd	r10, Y+45	; 0x2d
    28f6:	be a4       	ldd	r11, Y+46	; 0x2e
    28f8:	cf a4       	ldd	r12, Y+47	; 0x2f
    28fa:	d8 a8       	ldd	r13, Y+48	; 0x30
    28fc:	c6 01       	movw	r24, r12
    28fe:	aa 27       	eor	r26, r26
    2900:	bb 27       	eor	r27, r27
    2902:	57 01       	movw	r10, r14
    2904:	68 01       	movw	r12, r16
    2906:	a8 2a       	or	r10, r24
    2908:	b9 2a       	or	r11, r25
    290a:	ca 2a       	or	r12, r26
    290c:	db 2a       	or	r13, r27
    290e:	a2 16       	cp	r10, r18
    2910:	b3 06       	cpc	r11, r19
    2912:	c4 06       	cpc	r12, r20
    2914:	d5 06       	cpc	r13, r21
    2916:	60 f5       	brcc	.+88     	; 0x2970 <__udivdi3+0x716>
    2918:	61 96       	adiw	r28, 0x11	; 17
    291a:	6c ad       	ldd	r22, Y+60	; 0x3c
    291c:	7d ad       	ldd	r23, Y+61	; 0x3d
    291e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2920:	9f ad       	ldd	r25, Y+63	; 0x3f
    2922:	61 97       	sbiw	r28, 0x11	; 17
    2924:	61 50       	subi	r22, 0x01	; 1
    2926:	70 40       	sbci	r23, 0x00	; 0
    2928:	80 40       	sbci	r24, 0x00	; 0
    292a:	90 40       	sbci	r25, 0x00	; 0
    292c:	61 96       	adiw	r28, 0x11	; 17
    292e:	6c af       	std	Y+60, r22	; 0x3c
    2930:	7d af       	std	Y+61, r23	; 0x3d
    2932:	8e af       	std	Y+62, r24	; 0x3e
    2934:	9f af       	std	Y+63, r25	; 0x3f
    2936:	61 97       	sbiw	r28, 0x11	; 17
    2938:	a2 0c       	add	r10, r2
    293a:	b3 1c       	adc	r11, r3
    293c:	c4 1c       	adc	r12, r4
    293e:	d5 1c       	adc	r13, r5
    2940:	a2 14       	cp	r10, r2
    2942:	b3 04       	cpc	r11, r3
    2944:	c4 04       	cpc	r12, r4
    2946:	d5 04       	cpc	r13, r5
    2948:	98 f0       	brcs	.+38     	; 0x2970 <__udivdi3+0x716>
    294a:	a2 16       	cp	r10, r18
    294c:	b3 06       	cpc	r11, r19
    294e:	c4 06       	cpc	r12, r20
    2950:	d5 06       	cpc	r13, r21
    2952:	70 f4       	brcc	.+28     	; 0x2970 <__udivdi3+0x716>
    2954:	61 50       	subi	r22, 0x01	; 1
    2956:	70 40       	sbci	r23, 0x00	; 0
    2958:	80 40       	sbci	r24, 0x00	; 0
    295a:	90 40       	sbci	r25, 0x00	; 0
    295c:	61 96       	adiw	r28, 0x11	; 17
    295e:	6c af       	std	Y+60, r22	; 0x3c
    2960:	7d af       	std	Y+61, r23	; 0x3d
    2962:	8e af       	std	Y+62, r24	; 0x3e
    2964:	9f af       	std	Y+63, r25	; 0x3f
    2966:	61 97       	sbiw	r28, 0x11	; 17
    2968:	a2 0c       	add	r10, r2
    296a:	b3 1c       	adc	r11, r3
    296c:	c4 1c       	adc	r12, r4
    296e:	d5 1c       	adc	r13, r5
    2970:	a2 1a       	sub	r10, r18
    2972:	b3 0a       	sbc	r11, r19
    2974:	c4 0a       	sbc	r12, r20
    2976:	d5 0a       	sbc	r13, r21
    2978:	c6 01       	movw	r24, r12
    297a:	b5 01       	movw	r22, r10
    297c:	29 96       	adiw	r28, 0x09	; 9
    297e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2980:	3d ad       	ldd	r19, Y+61	; 0x3d
    2982:	4e ad       	ldd	r20, Y+62	; 0x3e
    2984:	5f ad       	ldd	r21, Y+63	; 0x3f
    2986:	29 97       	sbiw	r28, 0x09	; 9
    2988:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    298c:	7b 01       	movw	r14, r22
    298e:	8c 01       	movw	r16, r24
    2990:	c6 01       	movw	r24, r12
    2992:	b5 01       	movw	r22, r10
    2994:	29 96       	adiw	r28, 0x09	; 9
    2996:	2c ad       	ldd	r18, Y+60	; 0x3c
    2998:	3d ad       	ldd	r19, Y+61	; 0x3d
    299a:	4e ad       	ldd	r20, Y+62	; 0x3e
    299c:	5f ad       	ldd	r21, Y+63	; 0x3f
    299e:	29 97       	sbiw	r28, 0x09	; 9
    29a0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    29a4:	c9 01       	movw	r24, r18
    29a6:	da 01       	movw	r26, r20
    29a8:	5c 01       	movw	r10, r24
    29aa:	6d 01       	movw	r12, r26
    29ac:	c6 01       	movw	r24, r12
    29ae:	b5 01       	movw	r22, r10
    29b0:	2d 96       	adiw	r28, 0x0d	; 13
    29b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    29b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    29b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    29b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    29ba:	2d 97       	sbiw	r28, 0x0d	; 13
    29bc:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	87 01       	movw	r16, r14
    29c6:	ff 24       	eor	r15, r15
    29c8:	ee 24       	eor	r14, r14
    29ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    29cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ce:	af a5       	ldd	r26, Y+47	; 0x2f
    29d0:	b8 a9       	ldd	r27, Y+48	; 0x30
    29d2:	a0 70       	andi	r26, 0x00	; 0
    29d4:	b0 70       	andi	r27, 0x00	; 0
    29d6:	e8 2a       	or	r14, r24
    29d8:	f9 2a       	or	r15, r25
    29da:	0a 2b       	or	r16, r26
    29dc:	1b 2b       	or	r17, r27
    29de:	e2 16       	cp	r14, r18
    29e0:	f3 06       	cpc	r15, r19
    29e2:	04 07       	cpc	r16, r20
    29e4:	15 07       	cpc	r17, r21
    29e6:	c0 f4       	brcc	.+48     	; 0x2a18 <__udivdi3+0x7be>
    29e8:	08 94       	sec
    29ea:	a1 08       	sbc	r10, r1
    29ec:	b1 08       	sbc	r11, r1
    29ee:	c1 08       	sbc	r12, r1
    29f0:	d1 08       	sbc	r13, r1
    29f2:	e2 0c       	add	r14, r2
    29f4:	f3 1c       	adc	r15, r3
    29f6:	04 1d       	adc	r16, r4
    29f8:	15 1d       	adc	r17, r5
    29fa:	e2 14       	cp	r14, r2
    29fc:	f3 04       	cpc	r15, r3
    29fe:	04 05       	cpc	r16, r4
    2a00:	15 05       	cpc	r17, r5
    2a02:	50 f0       	brcs	.+20     	; 0x2a18 <__udivdi3+0x7be>
    2a04:	e2 16       	cp	r14, r18
    2a06:	f3 06       	cpc	r15, r19
    2a08:	04 07       	cpc	r16, r20
    2a0a:	15 07       	cpc	r17, r21
    2a0c:	28 f4       	brcc	.+10     	; 0x2a18 <__udivdi3+0x7be>
    2a0e:	08 94       	sec
    2a10:	a1 08       	sbc	r10, r1
    2a12:	b1 08       	sbc	r11, r1
    2a14:	c1 08       	sbc	r12, r1
    2a16:	d1 08       	sbc	r13, r1
    2a18:	61 96       	adiw	r28, 0x11	; 17
    2a1a:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a1c:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a1e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a20:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a22:	61 97       	sbiw	r28, 0x11	; 17
    2a24:	d7 01       	movw	r26, r14
    2a26:	99 27       	eor	r25, r25
    2a28:	88 27       	eor	r24, r24
    2a2a:	96 01       	movw	r18, r12
    2a2c:	85 01       	movw	r16, r10
    2a2e:	08 2b       	or	r16, r24
    2a30:	19 2b       	or	r17, r25
    2a32:	2a 2b       	or	r18, r26
    2a34:	3b 2b       	or	r19, r27
    2a36:	09 ab       	std	Y+49, r16	; 0x31
    2a38:	1a ab       	std	Y+50, r17	; 0x32
    2a3a:	2b ab       	std	Y+51, r18	; 0x33
    2a3c:	3c ab       	std	Y+52, r19	; 0x34
    2a3e:	62 c2       	rjmp	.+1220   	; 0x2f04 <__udivdi3+0xcaa>
    2a40:	6e 14       	cp	r6, r14
    2a42:	7f 04       	cpc	r7, r15
    2a44:	80 06       	cpc	r8, r16
    2a46:	91 06       	cpc	r9, r17
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <__udivdi3+0x7f2>
    2a4a:	51 c2       	rjmp	.+1186   	; 0x2eee <__udivdi3+0xc94>
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	e2 16       	cp	r14, r18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	f2 06       	cpc	r15, r18
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	02 07       	cpc	r16, r18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	12 07       	cpc	r17, r18
    2a5c:	88 f4       	brcc	.+34     	; 0x2a80 <__udivdi3+0x826>
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	e3 16       	cp	r14, r19
    2a62:	f1 04       	cpc	r15, r1
    2a64:	01 05       	cpc	r16, r1
    2a66:	11 05       	cpc	r17, r1
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <__udivdi3+0x81c>
    2a6a:	28 f0       	brcs	.+10     	; 0x2a76 <__udivdi3+0x81c>
    2a6c:	48 e0       	ldi	r20, 0x08	; 8
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	17 c0       	rjmp	.+46     	; 0x2aa4 <__udivdi3+0x84a>
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <__udivdi3+0x84a>
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	e4 16       	cp	r14, r20
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	f4 06       	cpc	r15, r20
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	04 07       	cpc	r16, r20
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	14 07       	cpc	r17, r20
    2a90:	28 f0       	brcs	.+10     	; 0x2a9c <__udivdi3+0x842>
    2a92:	48 e1       	ldi	r20, 0x18	; 24
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <__udivdi3+0x84a>
    2a9c:	40 e1       	ldi	r20, 0x10	; 16
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	d8 01       	movw	r26, r16
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	04 2e       	mov	r0, r20
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <__udivdi3+0x85a>
    2aac:	b6 95       	lsr	r27
    2aae:	a7 95       	ror	r26
    2ab0:	97 95       	ror	r25
    2ab2:	87 95       	ror	r24
    2ab4:	0a 94       	dec	r0
    2ab6:	d2 f7       	brpl	.-12     	; 0x2aac <__udivdi3+0x852>
    2ab8:	8c 52       	subi	r24, 0x2C	; 44
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	dc 01       	movw	r26, r24
    2abe:	2c 91       	ld	r18, X
    2ac0:	30 e2       	ldi	r19, 0x20	; 32
    2ac2:	a3 2e       	mov	r10, r19
    2ac4:	b1 2c       	mov	r11, r1
    2ac6:	c1 2c       	mov	r12, r1
    2ac8:	d1 2c       	mov	r13, r1
    2aca:	d6 01       	movw	r26, r12
    2acc:	c5 01       	movw	r24, r10
    2ace:	84 1b       	sub	r24, r20
    2ad0:	95 0b       	sbc	r25, r21
    2ad2:	a6 0b       	sbc	r26, r22
    2ad4:	b7 0b       	sbc	r27, r23
    2ad6:	82 1b       	sub	r24, r18
    2ad8:	91 09       	sbc	r25, r1
    2ada:	a1 09       	sbc	r26, r1
    2adc:	b1 09       	sbc	r27, r1
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	89 f4       	brne	.+34     	; 0x2b08 <__udivdi3+0x8ae>
    2ae6:	e6 14       	cp	r14, r6
    2ae8:	f7 04       	cpc	r15, r7
    2aea:	08 05       	cpc	r16, r8
    2aec:	19 05       	cpc	r17, r9
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <__udivdi3+0x898>
    2af0:	f2 c1       	rjmp	.+996    	; 0x2ed6 <__udivdi3+0xc7c>
    2af2:	6d a4       	ldd	r6, Y+45	; 0x2d
    2af4:	7e a4       	ldd	r7, Y+46	; 0x2e
    2af6:	8f a4       	ldd	r8, Y+47	; 0x2f
    2af8:	98 a8       	ldd	r9, Y+48	; 0x30
    2afa:	62 14       	cp	r6, r2
    2afc:	73 04       	cpc	r7, r3
    2afe:	84 04       	cpc	r8, r4
    2b00:	95 04       	cpc	r9, r5
    2b02:	08 f0       	brcs	.+2      	; 0x2b06 <__udivdi3+0x8ac>
    2b04:	e8 c1       	rjmp	.+976    	; 0x2ed6 <__udivdi3+0xc7c>
    2b06:	f3 c1       	rjmp	.+998    	; 0x2eee <__udivdi3+0xc94>
    2b08:	6e 96       	adiw	r28, 0x1e	; 30
    2b0a:	8f af       	std	Y+63, r24	; 0x3f
    2b0c:	6e 97       	sbiw	r28, 0x1e	; 30
    2b0e:	08 2e       	mov	r0, r24
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <__udivdi3+0x8c0>
    2b12:	ee 0c       	add	r14, r14
    2b14:	ff 1c       	adc	r15, r15
    2b16:	00 1f       	adc	r16, r16
    2b18:	11 1f       	adc	r17, r17
    2b1a:	0a 94       	dec	r0
    2b1c:	d2 f7       	brpl	.-12     	; 0x2b12 <__udivdi3+0x8b8>
    2b1e:	6a 2d       	mov	r22, r10
    2b20:	68 1b       	sub	r22, r24
    2b22:	d2 01       	movw	r26, r4
    2b24:	c1 01       	movw	r24, r2
    2b26:	06 2e       	mov	r0, r22
    2b28:	04 c0       	rjmp	.+8      	; 0x2b32 <__udivdi3+0x8d8>
    2b2a:	b6 95       	lsr	r27
    2b2c:	a7 95       	ror	r26
    2b2e:	97 95       	ror	r25
    2b30:	87 95       	ror	r24
    2b32:	0a 94       	dec	r0
    2b34:	d2 f7       	brpl	.-12     	; 0x2b2a <__udivdi3+0x8d0>
    2b36:	5c 01       	movw	r10, r24
    2b38:	6d 01       	movw	r12, r26
    2b3a:	ae 28       	or	r10, r14
    2b3c:	bf 28       	or	r11, r15
    2b3e:	c0 2a       	or	r12, r16
    2b40:	d1 2a       	or	r13, r17
    2b42:	ad a2       	std	Y+37, r10	; 0x25
    2b44:	be a2       	std	Y+38, r11	; 0x26
    2b46:	cf a2       	std	Y+39, r12	; 0x27
    2b48:	d8 a6       	std	Y+40, r13	; 0x28
    2b4a:	72 01       	movw	r14, r4
    2b4c:	61 01       	movw	r12, r2
    2b4e:	6e 96       	adiw	r28, 0x1e	; 30
    2b50:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b52:	6e 97       	sbiw	r28, 0x1e	; 30
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <__udivdi3+0x904>
    2b56:	cc 0c       	add	r12, r12
    2b58:	dd 1c       	adc	r13, r13
    2b5a:	ee 1c       	adc	r14, r14
    2b5c:	ff 1c       	adc	r15, r15
    2b5e:	0a 94       	dec	r0
    2b60:	d2 f7       	brpl	.-12     	; 0x2b56 <__udivdi3+0x8fc>
    2b62:	c9 a2       	std	Y+33, r12	; 0x21
    2b64:	da a2       	std	Y+34, r13	; 0x22
    2b66:	eb a2       	std	Y+35, r14	; 0x23
    2b68:	fc a2       	std	Y+36, r15	; 0x24
    2b6a:	64 01       	movw	r12, r8
    2b6c:	53 01       	movw	r10, r6
    2b6e:	06 2e       	mov	r0, r22
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <__udivdi3+0x920>
    2b72:	d6 94       	lsr	r13
    2b74:	c7 94       	ror	r12
    2b76:	b7 94       	ror	r11
    2b78:	a7 94       	ror	r10
    2b7a:	0a 94       	dec	r0
    2b7c:	d2 f7       	brpl	.-12     	; 0x2b72 <__udivdi3+0x918>
    2b7e:	d4 01       	movw	r26, r8
    2b80:	c3 01       	movw	r24, r6
    2b82:	6e 96       	adiw	r28, 0x1e	; 30
    2b84:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b86:	6e 97       	sbiw	r28, 0x1e	; 30
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__udivdi3+0x938>
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	0a 94       	dec	r0
    2b94:	d2 f7       	brpl	.-12     	; 0x2b8a <__udivdi3+0x930>
    2b96:	ed a4       	ldd	r14, Y+45	; 0x2d
    2b98:	fe a4       	ldd	r15, Y+46	; 0x2e
    2b9a:	0f a5       	ldd	r16, Y+47	; 0x2f
    2b9c:	18 a9       	ldd	r17, Y+48	; 0x30
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <__udivdi3+0x94e>
    2ba0:	16 95       	lsr	r17
    2ba2:	07 95       	ror	r16
    2ba4:	f7 94       	ror	r15
    2ba6:	e7 94       	ror	r14
    2ba8:	6a 95       	dec	r22
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <__udivdi3+0x946>
    2bac:	37 01       	movw	r6, r14
    2bae:	48 01       	movw	r8, r16
    2bb0:	68 2a       	or	r6, r24
    2bb2:	79 2a       	or	r7, r25
    2bb4:	8a 2a       	or	r8, r26
    2bb6:	9b 2a       	or	r9, r27
    2bb8:	6d 8e       	std	Y+29, r6	; 0x1d
    2bba:	7e 8e       	std	Y+30, r7	; 0x1e
    2bbc:	8f 8e       	std	Y+31, r8	; 0x1f
    2bbe:	98 a2       	std	Y+32, r9	; 0x20
    2bc0:	ed a0       	ldd	r14, Y+37	; 0x25
    2bc2:	fe a0       	ldd	r15, Y+38	; 0x26
    2bc4:	0f a1       	ldd	r16, Y+39	; 0x27
    2bc6:	18 a5       	ldd	r17, Y+40	; 0x28
    2bc8:	38 01       	movw	r6, r16
    2bca:	88 24       	eor	r8, r8
    2bcc:	99 24       	eor	r9, r9
    2bce:	98 01       	movw	r18, r16
    2bd0:	87 01       	movw	r16, r14
    2bd2:	20 70       	andi	r18, 0x00	; 0
    2bd4:	30 70       	andi	r19, 0x00	; 0
    2bd6:	65 96       	adiw	r28, 0x15	; 21
    2bd8:	0c af       	std	Y+60, r16	; 0x3c
    2bda:	1d af       	std	Y+61, r17	; 0x3d
    2bdc:	2e af       	std	Y+62, r18	; 0x3e
    2bde:	3f af       	std	Y+63, r19	; 0x3f
    2be0:	65 97       	sbiw	r28, 0x15	; 21
    2be2:	c6 01       	movw	r24, r12
    2be4:	b5 01       	movw	r22, r10
    2be6:	a4 01       	movw	r20, r8
    2be8:	93 01       	movw	r18, r6
    2bea:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    2bee:	7b 01       	movw	r14, r22
    2bf0:	8c 01       	movw	r16, r24
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	a4 01       	movw	r20, r8
    2bf8:	93 01       	movw	r18, r6
    2bfa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    2bfe:	c9 01       	movw	r24, r18
    2c00:	da 01       	movw	r26, r20
    2c02:	1c 01       	movw	r2, r24
    2c04:	2d 01       	movw	r4, r26
    2c06:	c2 01       	movw	r24, r4
    2c08:	b1 01       	movw	r22, r2
    2c0a:	65 96       	adiw	r28, 0x15	; 21
    2c0c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c0e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c10:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c12:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c14:	65 97       	sbiw	r28, 0x15	; 21
    2c16:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2c1a:	9b 01       	movw	r18, r22
    2c1c:	ac 01       	movw	r20, r24
    2c1e:	87 01       	movw	r16, r14
    2c20:	ff 24       	eor	r15, r15
    2c22:	ee 24       	eor	r14, r14
    2c24:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2c26:	be 8c       	ldd	r11, Y+30	; 0x1e
    2c28:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2c2a:	d8 a0       	ldd	r13, Y+32	; 0x20
    2c2c:	c6 01       	movw	r24, r12
    2c2e:	aa 27       	eor	r26, r26
    2c30:	bb 27       	eor	r27, r27
    2c32:	57 01       	movw	r10, r14
    2c34:	68 01       	movw	r12, r16
    2c36:	a8 2a       	or	r10, r24
    2c38:	b9 2a       	or	r11, r25
    2c3a:	ca 2a       	or	r12, r26
    2c3c:	db 2a       	or	r13, r27
    2c3e:	a2 16       	cp	r10, r18
    2c40:	b3 06       	cpc	r11, r19
    2c42:	c4 06       	cpc	r12, r20
    2c44:	d5 06       	cpc	r13, r21
    2c46:	00 f5       	brcc	.+64     	; 0x2c88 <__udivdi3+0xa2e>
    2c48:	08 94       	sec
    2c4a:	21 08       	sbc	r2, r1
    2c4c:	31 08       	sbc	r3, r1
    2c4e:	41 08       	sbc	r4, r1
    2c50:	51 08       	sbc	r5, r1
    2c52:	ed a0       	ldd	r14, Y+37	; 0x25
    2c54:	fe a0       	ldd	r15, Y+38	; 0x26
    2c56:	0f a1       	ldd	r16, Y+39	; 0x27
    2c58:	18 a5       	ldd	r17, Y+40	; 0x28
    2c5a:	ae 0c       	add	r10, r14
    2c5c:	bf 1c       	adc	r11, r15
    2c5e:	c0 1e       	adc	r12, r16
    2c60:	d1 1e       	adc	r13, r17
    2c62:	ae 14       	cp	r10, r14
    2c64:	bf 04       	cpc	r11, r15
    2c66:	c0 06       	cpc	r12, r16
    2c68:	d1 06       	cpc	r13, r17
    2c6a:	70 f0       	brcs	.+28     	; 0x2c88 <__udivdi3+0xa2e>
    2c6c:	a2 16       	cp	r10, r18
    2c6e:	b3 06       	cpc	r11, r19
    2c70:	c4 06       	cpc	r12, r20
    2c72:	d5 06       	cpc	r13, r21
    2c74:	48 f4       	brcc	.+18     	; 0x2c88 <__udivdi3+0xa2e>
    2c76:	08 94       	sec
    2c78:	21 08       	sbc	r2, r1
    2c7a:	31 08       	sbc	r3, r1
    2c7c:	41 08       	sbc	r4, r1
    2c7e:	51 08       	sbc	r5, r1
    2c80:	ae 0c       	add	r10, r14
    2c82:	bf 1c       	adc	r11, r15
    2c84:	c0 1e       	adc	r12, r16
    2c86:	d1 1e       	adc	r13, r17
    2c88:	a2 1a       	sub	r10, r18
    2c8a:	b3 0a       	sbc	r11, r19
    2c8c:	c4 0a       	sbc	r12, r20
    2c8e:	d5 0a       	sbc	r13, r21
    2c90:	c6 01       	movw	r24, r12
    2c92:	b5 01       	movw	r22, r10
    2c94:	a4 01       	movw	r20, r8
    2c96:	93 01       	movw	r18, r6
    2c98:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    2c9c:	7b 01       	movw	r14, r22
    2c9e:	8c 01       	movw	r16, r24
    2ca0:	c6 01       	movw	r24, r12
    2ca2:	b5 01       	movw	r22, r10
    2ca4:	a4 01       	movw	r20, r8
    2ca6:	93 01       	movw	r18, r6
    2ca8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    2cac:	c9 01       	movw	r24, r18
    2cae:	da 01       	movw	r26, r20
    2cb0:	3c 01       	movw	r6, r24
    2cb2:	4d 01       	movw	r8, r26
    2cb4:	c4 01       	movw	r24, r8
    2cb6:	b3 01       	movw	r22, r6
    2cb8:	65 96       	adiw	r28, 0x15	; 21
    2cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cc2:	65 97       	sbiw	r28, 0x15	; 21
    2cc4:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	87 01       	movw	r16, r14
    2cce:	ff 24       	eor	r15, r15
    2cd0:	ee 24       	eor	r14, r14
    2cd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd6:	af 8d       	ldd	r26, Y+31	; 0x1f
    2cd8:	b8 a1       	ldd	r27, Y+32	; 0x20
    2cda:	a0 70       	andi	r26, 0x00	; 0
    2cdc:	b0 70       	andi	r27, 0x00	; 0
    2cde:	57 01       	movw	r10, r14
    2ce0:	68 01       	movw	r12, r16
    2ce2:	a8 2a       	or	r10, r24
    2ce4:	b9 2a       	or	r11, r25
    2ce6:	ca 2a       	or	r12, r26
    2ce8:	db 2a       	or	r13, r27
    2cea:	a2 16       	cp	r10, r18
    2cec:	b3 06       	cpc	r11, r19
    2cee:	c4 06       	cpc	r12, r20
    2cf0:	d5 06       	cpc	r13, r21
    2cf2:	00 f5       	brcc	.+64     	; 0x2d34 <__udivdi3+0xada>
    2cf4:	08 94       	sec
    2cf6:	61 08       	sbc	r6, r1
    2cf8:	71 08       	sbc	r7, r1
    2cfa:	81 08       	sbc	r8, r1
    2cfc:	91 08       	sbc	r9, r1
    2cfe:	6d a1       	ldd	r22, Y+37	; 0x25
    2d00:	7e a1       	ldd	r23, Y+38	; 0x26
    2d02:	8f a1       	ldd	r24, Y+39	; 0x27
    2d04:	98 a5       	ldd	r25, Y+40	; 0x28
    2d06:	a6 0e       	add	r10, r22
    2d08:	b7 1e       	adc	r11, r23
    2d0a:	c8 1e       	adc	r12, r24
    2d0c:	d9 1e       	adc	r13, r25
    2d0e:	a6 16       	cp	r10, r22
    2d10:	b7 06       	cpc	r11, r23
    2d12:	c8 06       	cpc	r12, r24
    2d14:	d9 06       	cpc	r13, r25
    2d16:	70 f0       	brcs	.+28     	; 0x2d34 <__udivdi3+0xada>
    2d18:	a2 16       	cp	r10, r18
    2d1a:	b3 06       	cpc	r11, r19
    2d1c:	c4 06       	cpc	r12, r20
    2d1e:	d5 06       	cpc	r13, r21
    2d20:	48 f4       	brcc	.+18     	; 0x2d34 <__udivdi3+0xada>
    2d22:	08 94       	sec
    2d24:	61 08       	sbc	r6, r1
    2d26:	71 08       	sbc	r7, r1
    2d28:	81 08       	sbc	r8, r1
    2d2a:	91 08       	sbc	r9, r1
    2d2c:	a6 0e       	add	r10, r22
    2d2e:	b7 1e       	adc	r11, r23
    2d30:	c8 1e       	adc	r12, r24
    2d32:	d9 1e       	adc	r13, r25
    2d34:	d6 01       	movw	r26, r12
    2d36:	c5 01       	movw	r24, r10
    2d38:	82 1b       	sub	r24, r18
    2d3a:	93 0b       	sbc	r25, r19
    2d3c:	a4 0b       	sbc	r26, r20
    2d3e:	b5 0b       	sbc	r27, r21
    2d40:	89 8f       	std	Y+25, r24	; 0x19
    2d42:	9a 8f       	std	Y+26, r25	; 0x1a
    2d44:	ab 8f       	std	Y+27, r26	; 0x1b
    2d46:	bc 8f       	std	Y+28, r27	; 0x1c
    2d48:	d1 01       	movw	r26, r2
    2d4a:	99 27       	eor	r25, r25
    2d4c:	88 27       	eor	r24, r24
    2d4e:	64 01       	movw	r12, r8
    2d50:	53 01       	movw	r10, r6
    2d52:	a8 2a       	or	r10, r24
    2d54:	b9 2a       	or	r11, r25
    2d56:	ca 2a       	or	r12, r26
    2d58:	db 2a       	or	r13, r27
    2d5a:	a9 aa       	std	Y+49, r10	; 0x31
    2d5c:	ba aa       	std	Y+50, r11	; 0x32
    2d5e:	cb aa       	std	Y+51, r12	; 0x33
    2d60:	dc aa       	std	Y+52, r13	; 0x34
    2d62:	86 01       	movw	r16, r12
    2d64:	75 01       	movw	r14, r10
    2d66:	2f ef       	ldi	r18, 0xFF	; 255
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	e2 22       	and	r14, r18
    2d70:	f3 22       	and	r15, r19
    2d72:	04 23       	and	r16, r20
    2d74:	15 23       	and	r17, r21
    2d76:	a6 01       	movw	r20, r12
    2d78:	66 27       	eor	r22, r22
    2d7a:	77 27       	eor	r23, r23
    2d7c:	6d 96       	adiw	r28, 0x1d	; 29
    2d7e:	4c af       	std	Y+60, r20	; 0x3c
    2d80:	5d af       	std	Y+61, r21	; 0x3d
    2d82:	6e af       	std	Y+62, r22	; 0x3e
    2d84:	7f af       	std	Y+63, r23	; 0x3f
    2d86:	6d 97       	sbiw	r28, 0x1d	; 29
    2d88:	a9 a0       	ldd	r10, Y+33	; 0x21
    2d8a:	ba a0       	ldd	r11, Y+34	; 0x22
    2d8c:	cb a0       	ldd	r12, Y+35	; 0x23
    2d8e:	dc a0       	ldd	r13, Y+36	; 0x24
    2d90:	6f ef       	ldi	r22, 0xFF	; 255
    2d92:	7f ef       	ldi	r23, 0xFF	; 255
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a6 22       	and	r10, r22
    2d9a:	b7 22       	and	r11, r23
    2d9c:	c8 22       	and	r12, r24
    2d9e:	d9 22       	and	r13, r25
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	ab a1       	ldd	r26, Y+35	; 0x23
    2da6:	bc a1       	ldd	r27, Y+36	; 0x24
    2da8:	1d 01       	movw	r2, r26
    2daa:	44 24       	eor	r4, r4
    2dac:	55 24       	eor	r5, r5
    2dae:	c8 01       	movw	r24, r16
    2db0:	b7 01       	movw	r22, r14
    2db2:	a6 01       	movw	r20, r12
    2db4:	95 01       	movw	r18, r10
    2db6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2dba:	69 96       	adiw	r28, 0x19	; 25
    2dbc:	6c af       	std	Y+60, r22	; 0x3c
    2dbe:	7d af       	std	Y+61, r23	; 0x3d
    2dc0:	8e af       	std	Y+62, r24	; 0x3e
    2dc2:	9f af       	std	Y+63, r25	; 0x3f
    2dc4:	69 97       	sbiw	r28, 0x19	; 25
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	b7 01       	movw	r22, r14
    2dca:	a2 01       	movw	r20, r4
    2dcc:	91 01       	movw	r18, r2
    2dce:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2dd2:	3b 01       	movw	r6, r22
    2dd4:	4c 01       	movw	r8, r24
    2dd6:	6d 96       	adiw	r28, 0x1d	; 29
    2dd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dda:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ddc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dde:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de0:	6d 97       	sbiw	r28, 0x1d	; 29
    2de2:	a6 01       	movw	r20, r12
    2de4:	95 01       	movw	r18, r10
    2de6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2dea:	7b 01       	movw	r14, r22
    2dec:	8c 01       	movw	r16, r24
    2dee:	6d 96       	adiw	r28, 0x1d	; 29
    2df0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2df2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2df4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2df6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2df8:	6d 97       	sbiw	r28, 0x1d	; 29
    2dfa:	a2 01       	movw	r20, r4
    2dfc:	91 01       	movw	r18, r2
    2dfe:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    2e02:	5b 01       	movw	r10, r22
    2e04:	6c 01       	movw	r12, r24
    2e06:	a8 01       	movw	r20, r16
    2e08:	97 01       	movw	r18, r14
    2e0a:	26 0d       	add	r18, r6
    2e0c:	37 1d       	adc	r19, r7
    2e0e:	48 1d       	adc	r20, r8
    2e10:	59 1d       	adc	r21, r9
    2e12:	69 96       	adiw	r28, 0x19	; 25
    2e14:	6c ac       	ldd	r6, Y+60	; 0x3c
    2e16:	7d ac       	ldd	r7, Y+61	; 0x3d
    2e18:	8e ac       	ldd	r8, Y+62	; 0x3e
    2e1a:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e1c:	69 97       	sbiw	r28, 0x19	; 25
    2e1e:	c4 01       	movw	r24, r8
    2e20:	aa 27       	eor	r26, r26
    2e22:	bb 27       	eor	r27, r27
    2e24:	28 0f       	add	r18, r24
    2e26:	39 1f       	adc	r19, r25
    2e28:	4a 1f       	adc	r20, r26
    2e2a:	5b 1f       	adc	r21, r27
    2e2c:	2e 15       	cp	r18, r14
    2e2e:	3f 05       	cpc	r19, r15
    2e30:	40 07       	cpc	r20, r16
    2e32:	51 07       	cpc	r21, r17
    2e34:	48 f4       	brcc	.+18     	; 0x2e48 <__udivdi3+0xbee>
    2e36:	e1 2c       	mov	r14, r1
    2e38:	f1 2c       	mov	r15, r1
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	06 2f       	mov	r16, r22
    2e3e:	11 2d       	mov	r17, r1
    2e40:	ae 0c       	add	r10, r14
    2e42:	bf 1c       	adc	r11, r15
    2e44:	c0 1e       	adc	r12, r16
    2e46:	d1 1e       	adc	r13, r17
    2e48:	ca 01       	movw	r24, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	bb 27       	eor	r27, r27
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	6a 0d       	add	r22, r10
    2e54:	7b 1d       	adc	r23, r11
    2e56:	8c 1d       	adc	r24, r12
    2e58:	9d 1d       	adc	r25, r13
    2e5a:	69 8c       	ldd	r6, Y+25	; 0x19
    2e5c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    2e5e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2e60:	9c 8c       	ldd	r9, Y+28	; 0x1c
    2e62:	66 16       	cp	r6, r22
    2e64:	77 06       	cpc	r7, r23
    2e66:	88 06       	cpc	r8, r24
    2e68:	99 06       	cpc	r9, r25
    2e6a:	40 f1       	brcs	.+80     	; 0x2ebc <__udivdi3+0xc62>
    2e6c:	66 15       	cp	r22, r6
    2e6e:	77 05       	cpc	r23, r7
    2e70:	88 05       	cpc	r24, r8
    2e72:	99 05       	cpc	r25, r9
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <__udivdi3+0xc1e>
    2e76:	43 c0       	rjmp	.+134    	; 0x2efe <__udivdi3+0xca4>
    2e78:	d9 01       	movw	r26, r18
    2e7a:	99 27       	eor	r25, r25
    2e7c:	88 27       	eor	r24, r24
    2e7e:	69 96       	adiw	r28, 0x19	; 25
    2e80:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e82:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e84:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e86:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e88:	69 97       	sbiw	r28, 0x19	; 25
    2e8a:	40 70       	andi	r20, 0x00	; 0
    2e8c:	50 70       	andi	r21, 0x00	; 0
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	a4 1f       	adc	r26, r20
    2e94:	b5 1f       	adc	r27, r21
    2e96:	2d a5       	ldd	r18, Y+45	; 0x2d
    2e98:	3e a5       	ldd	r19, Y+46	; 0x2e
    2e9a:	4f a5       	ldd	r20, Y+47	; 0x2f
    2e9c:	58 a9       	ldd	r21, Y+48	; 0x30
    2e9e:	6e 96       	adiw	r28, 0x1e	; 30
    2ea0:	0f ac       	ldd	r0, Y+63	; 0x3f
    2ea2:	6e 97       	sbiw	r28, 0x1e	; 30
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <__udivdi3+0xc54>
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	44 1f       	adc	r20, r20
    2eac:	55 1f       	adc	r21, r21
    2eae:	0a 94       	dec	r0
    2eb0:	d2 f7       	brpl	.-12     	; 0x2ea6 <__udivdi3+0xc4c>
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	4a 07       	cpc	r20, r26
    2eb8:	5b 07       	cpc	r21, r27
    2eba:	08 f5       	brcc	.+66     	; 0x2efe <__udivdi3+0xca4>
    2ebc:	09 a9       	ldd	r16, Y+49	; 0x31
    2ebe:	1a a9       	ldd	r17, Y+50	; 0x32
    2ec0:	2b a9       	ldd	r18, Y+51	; 0x33
    2ec2:	3c a9       	ldd	r19, Y+52	; 0x34
    2ec4:	01 50       	subi	r16, 0x01	; 1
    2ec6:	10 40       	sbci	r17, 0x00	; 0
    2ec8:	20 40       	sbci	r18, 0x00	; 0
    2eca:	30 40       	sbci	r19, 0x00	; 0
    2ecc:	09 ab       	std	Y+49, r16	; 0x31
    2ece:	1a ab       	std	Y+50, r17	; 0x32
    2ed0:	2b ab       	std	Y+51, r18	; 0x33
    2ed2:	3c ab       	std	Y+52, r19	; 0x34
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <__udivdi3+0xca4>
    2ed6:	66 24       	eor	r6, r6
    2ed8:	77 24       	eor	r7, r7
    2eda:	43 01       	movw	r8, r6
    2edc:	21 e0       	ldi	r18, 0x01	; 1
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	29 ab       	std	Y+49, r18	; 0x31
    2ee6:	3a ab       	std	Y+50, r19	; 0x32
    2ee8:	4b ab       	std	Y+51, r20	; 0x33
    2eea:	5c ab       	std	Y+52, r21	; 0x34
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <__udivdi3+0xcaa>
    2eee:	66 24       	eor	r6, r6
    2ef0:	77 24       	eor	r7, r7
    2ef2:	43 01       	movw	r8, r6
    2ef4:	19 aa       	std	Y+49, r1	; 0x31
    2ef6:	1a aa       	std	Y+50, r1	; 0x32
    2ef8:	1b aa       	std	Y+51, r1	; 0x33
    2efa:	1c aa       	std	Y+52, r1	; 0x34
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <__udivdi3+0xcaa>
    2efe:	66 24       	eor	r6, r6
    2f00:	77 24       	eor	r7, r7
    2f02:	43 01       	movw	r8, r6
    2f04:	fe 01       	movw	r30, r28
    2f06:	71 96       	adiw	r30, 0x11	; 17
    2f08:	88 e0       	ldi	r24, 0x08	; 8
    2f0a:	df 01       	movw	r26, r30
    2f0c:	1d 92       	st	X+, r1
    2f0e:	8a 95       	dec	r24
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <__udivdi3+0xcb2>
    2f12:	a9 a8       	ldd	r10, Y+49	; 0x31
    2f14:	ba a8       	ldd	r11, Y+50	; 0x32
    2f16:	cb a8       	ldd	r12, Y+51	; 0x33
    2f18:	dc a8       	ldd	r13, Y+52	; 0x34
    2f1a:	a9 8a       	std	Y+17, r10	; 0x11
    2f1c:	ba 8a       	std	Y+18, r11	; 0x12
    2f1e:	cb 8a       	std	Y+19, r12	; 0x13
    2f20:	dc 8a       	std	Y+20, r13	; 0x14
    2f22:	6d 8a       	std	Y+21, r6	; 0x15
    2f24:	7e 8a       	std	Y+22, r7	; 0x16
    2f26:	8f 8a       	std	Y+23, r8	; 0x17
    2f28:	98 8e       	std	Y+24, r9	; 0x18
    2f2a:	29 a9       	ldd	r18, Y+49	; 0x31
    2f2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f2e:	4b 89       	ldd	r20, Y+19	; 0x13
    2f30:	5c 89       	ldd	r21, Y+20	; 0x14
    2f32:	66 2d       	mov	r22, r6
    2f34:	7e 89       	ldd	r23, Y+22	; 0x16
    2f36:	8f 89       	ldd	r24, Y+23	; 0x17
    2f38:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3a:	c2 5a       	subi	r28, 0xA2	; 162
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	e2 e1       	ldi	r30, 0x12	; 18
    2f40:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__epilogue_restores__>

00002f44 <__umoddi3>:
    2f44:	ab e5       	ldi	r26, 0x5B	; 91
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 ea       	ldi	r30, 0xA8	; 168
    2f4a:	f7 e1       	ldi	r31, 0x17	; 23
    2f4c:	0c 94 0c 38 	jmp	0x7018	; 0x7018 <__prologue_saves__>
    2f50:	a8 e0       	ldi	r26, 0x08	; 8
    2f52:	4e 01       	movw	r8, r28
    2f54:	08 94       	sec
    2f56:	81 1c       	adc	r8, r1
    2f58:	91 1c       	adc	r9, r1
    2f5a:	f4 01       	movw	r30, r8
    2f5c:	6a 2e       	mov	r6, r26
    2f5e:	11 92       	st	Z+, r1
    2f60:	6a 94       	dec	r6
    2f62:	e9 f7       	brne	.-6      	; 0x2f5e <__umoddi3+0x1a>
    2f64:	29 83       	std	Y+1, r18	; 0x01
    2f66:	3a 83       	std	Y+2, r19	; 0x02
    2f68:	4b 83       	std	Y+3, r20	; 0x03
    2f6a:	5c 83       	std	Y+4, r21	; 0x04
    2f6c:	6d 83       	std	Y+5, r22	; 0x05
    2f6e:	7e 83       	std	Y+6, r23	; 0x06
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	ce 01       	movw	r24, r28
    2f76:	09 96       	adiw	r24, 0x09	; 9
    2f78:	fc 01       	movw	r30, r24
    2f7a:	11 92       	st	Z+, r1
    2f7c:	aa 95       	dec	r26
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <__umoddi3+0x36>
    2f80:	a9 86       	std	Y+9, r10	; 0x09
    2f82:	ba 86       	std	Y+10, r11	; 0x0a
    2f84:	cb 86       	std	Y+11, r12	; 0x0b
    2f86:	dc 86       	std	Y+12, r13	; 0x0c
    2f88:	ed 86       	std	Y+13, r14	; 0x0d
    2f8a:	fe 86       	std	Y+14, r15	; 0x0e
    2f8c:	0f 87       	std	Y+15, r16	; 0x0f
    2f8e:	18 8b       	std	Y+16, r17	; 0x10
    2f90:	29 84       	ldd	r2, Y+9	; 0x09
    2f92:	3a 84       	ldd	r3, Y+10	; 0x0a
    2f94:	4b 84       	ldd	r4, Y+11	; 0x0b
    2f96:	5c 84       	ldd	r5, Y+12	; 0x0c
    2f98:	ad 84       	ldd	r10, Y+13	; 0x0d
    2f9a:	be 84       	ldd	r11, Y+14	; 0x0e
    2f9c:	cf 84       	ldd	r12, Y+15	; 0x0f
    2f9e:	d8 88       	ldd	r13, Y+16	; 0x10
    2fa0:	29 81       	ldd	r18, Y+1	; 0x01
    2fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa4:	4b 81       	ldd	r20, Y+3	; 0x03
    2fa6:	5c 81       	ldd	r21, Y+4	; 0x04
    2fa8:	69 96       	adiw	r28, 0x19	; 25
    2faa:	2f af       	std	Y+63, r18	; 0x3f
    2fac:	69 97       	sbiw	r28, 0x19	; 25
    2fae:	6a 96       	adiw	r28, 0x1a	; 26
    2fb0:	3f af       	std	Y+63, r19	; 0x3f
    2fb2:	6a 97       	sbiw	r28, 0x1a	; 26
    2fb4:	6b 96       	adiw	r28, 0x1b	; 27
    2fb6:	4f af       	std	Y+63, r20	; 0x3f
    2fb8:	6b 97       	sbiw	r28, 0x1b	; 27
    2fba:	6c 96       	adiw	r28, 0x1c	; 28
    2fbc:	5f af       	std	Y+63, r21	; 0x3f
    2fbe:	6c 97       	sbiw	r28, 0x1c	; 28
    2fc0:	6c 96       	adiw	r28, 0x1c	; 28
    2fc2:	6c ac       	ldd	r6, Y+60	; 0x3c
    2fc4:	7d ac       	ldd	r7, Y+61	; 0x3d
    2fc6:	8e ac       	ldd	r8, Y+62	; 0x3e
    2fc8:	9f ac       	ldd	r9, Y+63	; 0x3f
    2fca:	6c 97       	sbiw	r28, 0x1c	; 28
    2fcc:	69 aa       	std	Y+49, r6	; 0x31
    2fce:	7a aa       	std	Y+50, r7	; 0x32
    2fd0:	8b aa       	std	Y+51, r8	; 0x33
    2fd2:	9c aa       	std	Y+52, r9	; 0x34
    2fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd6:	7e 81       	ldd	r23, Y+6	; 0x06
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	3b 01       	movw	r6, r22
    2fde:	4c 01       	movw	r8, r24
    2fe0:	6d aa       	std	Y+53, r6	; 0x35
    2fe2:	7e aa       	std	Y+54, r7	; 0x36
    2fe4:	8f aa       	std	Y+55, r8	; 0x37
    2fe6:	98 ae       	std	Y+56, r9	; 0x38
    2fe8:	a1 14       	cp	r10, r1
    2fea:	b1 04       	cpc	r11, r1
    2fec:	c1 04       	cpc	r12, r1
    2fee:	d1 04       	cpc	r13, r1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <__umoddi3+0xb0>
    2ff2:	04 c3       	rjmp	.+1544   	; 0x35fc <__umoddi3+0x6b8>
    2ff4:	62 14       	cp	r6, r2
    2ff6:	73 04       	cpc	r7, r3
    2ff8:	84 04       	cpc	r8, r4
    2ffa:	95 04       	cpc	r9, r5
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <__umoddi3+0xbc>
    2ffe:	00 c1       	rjmp	.+512    	; 0x3200 <__umoddi3+0x2bc>
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	20 16       	cp	r2, r16
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	30 06       	cpc	r3, r16
    3008:	01 e0       	ldi	r16, 0x01	; 1
    300a:	40 06       	cpc	r4, r16
    300c:	00 e0       	ldi	r16, 0x00	; 0
    300e:	50 06       	cpc	r5, r16
    3010:	88 f4       	brcc	.+34     	; 0x3034 <__umoddi3+0xf0>
    3012:	1f ef       	ldi	r17, 0xFF	; 255
    3014:	21 16       	cp	r2, r17
    3016:	31 04       	cpc	r3, r1
    3018:	41 04       	cpc	r4, r1
    301a:	51 04       	cpc	r5, r1
    301c:	39 f0       	breq	.+14     	; 0x302c <__umoddi3+0xe8>
    301e:	30 f0       	brcs	.+12     	; 0x302c <__umoddi3+0xe8>
    3020:	88 e0       	ldi	r24, 0x08	; 8
    3022:	e8 2e       	mov	r14, r24
    3024:	f1 2c       	mov	r15, r1
    3026:	01 2d       	mov	r16, r1
    3028:	11 2d       	mov	r17, r1
    302a:	18 c0       	rjmp	.+48     	; 0x305c <__umoddi3+0x118>
    302c:	ee 24       	eor	r14, r14
    302e:	ff 24       	eor	r15, r15
    3030:	87 01       	movw	r16, r14
    3032:	14 c0       	rjmp	.+40     	; 0x305c <__umoddi3+0x118>
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	24 16       	cp	r2, r20
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	34 06       	cpc	r3, r20
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	44 06       	cpc	r4, r20
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	54 06       	cpc	r5, r20
    3044:	30 f0       	brcs	.+12     	; 0x3052 <__umoddi3+0x10e>
    3046:	b8 e1       	ldi	r27, 0x18	; 24
    3048:	eb 2e       	mov	r14, r27
    304a:	f1 2c       	mov	r15, r1
    304c:	01 2d       	mov	r16, r1
    304e:	11 2d       	mov	r17, r1
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__umoddi3+0x118>
    3052:	a0 e1       	ldi	r26, 0x10	; 16
    3054:	ea 2e       	mov	r14, r26
    3056:	f1 2c       	mov	r15, r1
    3058:	01 2d       	mov	r16, r1
    305a:	11 2d       	mov	r17, r1
    305c:	d2 01       	movw	r26, r4
    305e:	c1 01       	movw	r24, r2
    3060:	0e 2c       	mov	r0, r14
    3062:	04 c0       	rjmp	.+8      	; 0x306c <__umoddi3+0x128>
    3064:	b6 95       	lsr	r27
    3066:	a7 95       	ror	r26
    3068:	97 95       	ror	r25
    306a:	87 95       	ror	r24
    306c:	0a 94       	dec	r0
    306e:	d2 f7       	brpl	.-12     	; 0x3064 <__umoddi3+0x120>
    3070:	8c 52       	subi	r24, 0x2C	; 44
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	dc 01       	movw	r26, r24
    3076:	2c 91       	ld	r18, X
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 e0       	ldi	r26, 0x00	; 0
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	8e 19       	sub	r24, r14
    3082:	9f 09       	sbc	r25, r15
    3084:	a0 0b       	sbc	r26, r16
    3086:	b1 0b       	sbc	r27, r17
    3088:	5c 01       	movw	r10, r24
    308a:	6d 01       	movw	r12, r26
    308c:	a2 1a       	sub	r10, r18
    308e:	b1 08       	sbc	r11, r1
    3090:	c1 08       	sbc	r12, r1
    3092:	d1 08       	sbc	r13, r1
    3094:	a9 ae       	std	Y+57, r10	; 0x39
    3096:	ba ae       	std	Y+58, r11	; 0x3a
    3098:	cb ae       	std	Y+59, r12	; 0x3b
    309a:	dc ae       	std	Y+60, r13	; 0x3c
    309c:	a1 14       	cp	r10, r1
    309e:	b1 04       	cpc	r11, r1
    30a0:	c1 04       	cpc	r12, r1
    30a2:	d1 04       	cpc	r13, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <__umoddi3+0x164>
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <__umoddi3+0x1e2>
    30a8:	69 ad       	ldd	r22, Y+57	; 0x39
    30aa:	06 2e       	mov	r0, r22
    30ac:	04 c0       	rjmp	.+8      	; 0x30b6 <__umoddi3+0x172>
    30ae:	22 0c       	add	r2, r2
    30b0:	33 1c       	adc	r3, r3
    30b2:	44 1c       	adc	r4, r4
    30b4:	55 1c       	adc	r5, r5
    30b6:	0a 94       	dec	r0
    30b8:	d2 f7       	brpl	.-12     	; 0x30ae <__umoddi3+0x16a>
    30ba:	a4 01       	movw	r20, r8
    30bc:	93 01       	movw	r18, r6
    30be:	06 2e       	mov	r0, r22
    30c0:	04 c0       	rjmp	.+8      	; 0x30ca <__umoddi3+0x186>
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	44 1f       	adc	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	0a 94       	dec	r0
    30cc:	d2 f7       	brpl	.-12     	; 0x30c2 <__umoddi3+0x17e>
    30ce:	80 e2       	ldi	r24, 0x20	; 32
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	8a 19       	sub	r24, r10
    30d4:	9b 09       	sbc	r25, r11
    30d6:	6c 96       	adiw	r28, 0x1c	; 28
    30d8:	cc ac       	ldd	r12, Y+60	; 0x3c
    30da:	dd ac       	ldd	r13, Y+61	; 0x3d
    30dc:	ee ac       	ldd	r14, Y+62	; 0x3e
    30de:	ff ac       	ldd	r15, Y+63	; 0x3f
    30e0:	6c 97       	sbiw	r28, 0x1c	; 28
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <__umoddi3+0x1a8>
    30e4:	f6 94       	lsr	r15
    30e6:	e7 94       	ror	r14
    30e8:	d7 94       	ror	r13
    30ea:	c7 94       	ror	r12
    30ec:	8a 95       	dec	r24
    30ee:	d2 f7       	brpl	.-12     	; 0x30e4 <__umoddi3+0x1a0>
    30f0:	87 01       	movw	r16, r14
    30f2:	76 01       	movw	r14, r12
    30f4:	e2 2a       	or	r14, r18
    30f6:	f3 2a       	or	r15, r19
    30f8:	04 2b       	or	r16, r20
    30fa:	15 2b       	or	r17, r21
    30fc:	ed aa       	std	Y+53, r14	; 0x35
    30fe:	fe aa       	std	Y+54, r15	; 0x36
    3100:	0f ab       	std	Y+55, r16	; 0x37
    3102:	18 af       	std	Y+56, r17	; 0x38
    3104:	6c 96       	adiw	r28, 0x1c	; 28
    3106:	8c ad       	ldd	r24, Y+60	; 0x3c
    3108:	9d ad       	ldd	r25, Y+61	; 0x3d
    310a:	ae ad       	ldd	r26, Y+62	; 0x3e
    310c:	bf ad       	ldd	r27, Y+63	; 0x3f
    310e:	6c 97       	sbiw	r28, 0x1c	; 28
    3110:	04 c0       	rjmp	.+8      	; 0x311a <__umoddi3+0x1d6>
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	6a 95       	dec	r22
    311c:	d2 f7       	brpl	.-12     	; 0x3112 <__umoddi3+0x1ce>
    311e:	89 ab       	std	Y+49, r24	; 0x31
    3120:	9a ab       	std	Y+50, r25	; 0x32
    3122:	ab ab       	std	Y+51, r26	; 0x33
    3124:	bc ab       	std	Y+52, r27	; 0x34
    3126:	32 01       	movw	r6, r4
    3128:	88 24       	eor	r8, r8
    312a:	99 24       	eor	r9, r9
    312c:	b2 01       	movw	r22, r4
    312e:	a1 01       	movw	r20, r2
    3130:	60 70       	andi	r22, 0x00	; 0
    3132:	70 70       	andi	r23, 0x00	; 0
    3134:	21 96       	adiw	r28, 0x01	; 1
    3136:	4c af       	std	Y+60, r20	; 0x3c
    3138:	5d af       	std	Y+61, r21	; 0x3d
    313a:	6e af       	std	Y+62, r22	; 0x3e
    313c:	7f af       	std	Y+63, r23	; 0x3f
    313e:	21 97       	sbiw	r28, 0x01	; 1
    3140:	6d a9       	ldd	r22, Y+53	; 0x35
    3142:	7e a9       	ldd	r23, Y+54	; 0x36
    3144:	8f a9       	ldd	r24, Y+55	; 0x37
    3146:	98 ad       	ldd	r25, Y+56	; 0x38
    3148:	a4 01       	movw	r20, r8
    314a:	93 01       	movw	r18, r6
    314c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3150:	7b 01       	movw	r14, r22
    3152:	8c 01       	movw	r16, r24
    3154:	6d a9       	ldd	r22, Y+53	; 0x35
    3156:	7e a9       	ldd	r23, Y+54	; 0x36
    3158:	8f a9       	ldd	r24, Y+55	; 0x37
    315a:	98 ad       	ldd	r25, Y+56	; 0x38
    315c:	a4 01       	movw	r20, r8
    315e:	93 01       	movw	r18, r6
    3160:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3164:	ca 01       	movw	r24, r20
    3166:	b9 01       	movw	r22, r18
    3168:	21 96       	adiw	r28, 0x01	; 1
    316a:	2c ad       	ldd	r18, Y+60	; 0x3c
    316c:	3d ad       	ldd	r19, Y+61	; 0x3d
    316e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3170:	5f ad       	ldd	r21, Y+63	; 0x3f
    3172:	21 97       	sbiw	r28, 0x01	; 1
    3174:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3178:	9b 01       	movw	r18, r22
    317a:	ac 01       	movw	r20, r24
    317c:	87 01       	movw	r16, r14
    317e:	ff 24       	eor	r15, r15
    3180:	ee 24       	eor	r14, r14
    3182:	a9 a8       	ldd	r10, Y+49	; 0x31
    3184:	ba a8       	ldd	r11, Y+50	; 0x32
    3186:	cb a8       	ldd	r12, Y+51	; 0x33
    3188:	dc a8       	ldd	r13, Y+52	; 0x34
    318a:	c6 01       	movw	r24, r12
    318c:	aa 27       	eor	r26, r26
    318e:	bb 27       	eor	r27, r27
    3190:	57 01       	movw	r10, r14
    3192:	68 01       	movw	r12, r16
    3194:	a8 2a       	or	r10, r24
    3196:	b9 2a       	or	r11, r25
    3198:	ca 2a       	or	r12, r26
    319a:	db 2a       	or	r13, r27
    319c:	a2 16       	cp	r10, r18
    319e:	b3 06       	cpc	r11, r19
    31a0:	c4 06       	cpc	r12, r20
    31a2:	d5 06       	cpc	r13, r21
    31a4:	90 f4       	brcc	.+36     	; 0x31ca <__umoddi3+0x286>
    31a6:	a2 0c       	add	r10, r2
    31a8:	b3 1c       	adc	r11, r3
    31aa:	c4 1c       	adc	r12, r4
    31ac:	d5 1c       	adc	r13, r5
    31ae:	a2 14       	cp	r10, r2
    31b0:	b3 04       	cpc	r11, r3
    31b2:	c4 04       	cpc	r12, r4
    31b4:	d5 04       	cpc	r13, r5
    31b6:	48 f0       	brcs	.+18     	; 0x31ca <__umoddi3+0x286>
    31b8:	a2 16       	cp	r10, r18
    31ba:	b3 06       	cpc	r11, r19
    31bc:	c4 06       	cpc	r12, r20
    31be:	d5 06       	cpc	r13, r21
    31c0:	20 f4       	brcc	.+8      	; 0x31ca <__umoddi3+0x286>
    31c2:	a2 0c       	add	r10, r2
    31c4:	b3 1c       	adc	r11, r3
    31c6:	c4 1c       	adc	r12, r4
    31c8:	d5 1c       	adc	r13, r5
    31ca:	a2 1a       	sub	r10, r18
    31cc:	b3 0a       	sbc	r11, r19
    31ce:	c4 0a       	sbc	r12, r20
    31d0:	d5 0a       	sbc	r13, r21
    31d2:	c6 01       	movw	r24, r12
    31d4:	b5 01       	movw	r22, r10
    31d6:	a4 01       	movw	r20, r8
    31d8:	93 01       	movw	r18, r6
    31da:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    31de:	7b 01       	movw	r14, r22
    31e0:	8c 01       	movw	r16, r24
    31e2:	c6 01       	movw	r24, r12
    31e4:	b5 01       	movw	r22, r10
    31e6:	a4 01       	movw	r20, r8
    31e8:	93 01       	movw	r18, r6
    31ea:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    31ee:	ca 01       	movw	r24, r20
    31f0:	b9 01       	movw	r22, r18
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    31f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    31f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    31fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    31fc:	21 97       	sbiw	r28, 0x01	; 1
    31fe:	ba c1       	rjmp	.+884    	; 0x3574 <__umoddi3+0x630>
    3200:	21 14       	cp	r2, r1
    3202:	31 04       	cpc	r3, r1
    3204:	41 04       	cpc	r4, r1
    3206:	51 04       	cpc	r5, r1
    3208:	71 f4       	brne	.+28     	; 0x3226 <__umoddi3+0x2e2>
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    321e:	c9 01       	movw	r24, r18
    3220:	da 01       	movw	r26, r20
    3222:	1c 01       	movw	r2, r24
    3224:	2d 01       	movw	r4, r26
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	20 16       	cp	r2, r16
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	30 06       	cpc	r3, r16
    322e:	01 e0       	ldi	r16, 0x01	; 1
    3230:	40 06       	cpc	r4, r16
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	50 06       	cpc	r5, r16
    3236:	88 f4       	brcc	.+34     	; 0x325a <__umoddi3+0x316>
    3238:	1f ef       	ldi	r17, 0xFF	; 255
    323a:	21 16       	cp	r2, r17
    323c:	31 04       	cpc	r3, r1
    323e:	41 04       	cpc	r4, r1
    3240:	51 04       	cpc	r5, r1
    3242:	39 f0       	breq	.+14     	; 0x3252 <__umoddi3+0x30e>
    3244:	30 f0       	brcs	.+12     	; 0x3252 <__umoddi3+0x30e>
    3246:	68 e0       	ldi	r22, 0x08	; 8
    3248:	e6 2e       	mov	r14, r22
    324a:	f1 2c       	mov	r15, r1
    324c:	01 2d       	mov	r16, r1
    324e:	11 2d       	mov	r17, r1
    3250:	18 c0       	rjmp	.+48     	; 0x3282 <__umoddi3+0x33e>
    3252:	ee 24       	eor	r14, r14
    3254:	ff 24       	eor	r15, r15
    3256:	87 01       	movw	r16, r14
    3258:	14 c0       	rjmp	.+40     	; 0x3282 <__umoddi3+0x33e>
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	24 16       	cp	r2, r20
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	34 06       	cpc	r3, r20
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	44 06       	cpc	r4, r20
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	54 06       	cpc	r5, r20
    326a:	30 f0       	brcs	.+12     	; 0x3278 <__umoddi3+0x334>
    326c:	58 e1       	ldi	r21, 0x18	; 24
    326e:	e5 2e       	mov	r14, r21
    3270:	f1 2c       	mov	r15, r1
    3272:	01 2d       	mov	r16, r1
    3274:	11 2d       	mov	r17, r1
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__umoddi3+0x33e>
    3278:	40 e1       	ldi	r20, 0x10	; 16
    327a:	e4 2e       	mov	r14, r20
    327c:	f1 2c       	mov	r15, r1
    327e:	01 2d       	mov	r16, r1
    3280:	11 2d       	mov	r17, r1
    3282:	d2 01       	movw	r26, r4
    3284:	c1 01       	movw	r24, r2
    3286:	0e 2c       	mov	r0, r14
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <__umoddi3+0x34e>
    328a:	b6 95       	lsr	r27
    328c:	a7 95       	ror	r26
    328e:	97 95       	ror	r25
    3290:	87 95       	ror	r24
    3292:	0a 94       	dec	r0
    3294:	d2 f7       	brpl	.-12     	; 0x328a <__umoddi3+0x346>
    3296:	8c 52       	subi	r24, 0x2C	; 44
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	dc 01       	movw	r26, r24
    329c:	2c 91       	ld	r18, X
    329e:	30 e2       	ldi	r19, 0x20	; 32
    32a0:	a3 2e       	mov	r10, r19
    32a2:	b1 2c       	mov	r11, r1
    32a4:	c1 2c       	mov	r12, r1
    32a6:	d1 2c       	mov	r13, r1
    32a8:	d6 01       	movw	r26, r12
    32aa:	c5 01       	movw	r24, r10
    32ac:	8e 19       	sub	r24, r14
    32ae:	9f 09       	sbc	r25, r15
    32b0:	a0 0b       	sbc	r26, r16
    32b2:	b1 0b       	sbc	r27, r17
    32b4:	7c 01       	movw	r14, r24
    32b6:	8d 01       	movw	r16, r26
    32b8:	e2 1a       	sub	r14, r18
    32ba:	f1 08       	sbc	r15, r1
    32bc:	01 09       	sbc	r16, r1
    32be:	11 09       	sbc	r17, r1
    32c0:	e9 ae       	std	Y+57, r14	; 0x39
    32c2:	fa ae       	std	Y+58, r15	; 0x3a
    32c4:	0b af       	std	Y+59, r16	; 0x3b
    32c6:	1c af       	std	Y+60, r17	; 0x3c
    32c8:	e1 14       	cp	r14, r1
    32ca:	f1 04       	cpc	r15, r1
    32cc:	01 05       	cpc	r16, r1
    32ce:	11 05       	cpc	r17, r1
    32d0:	39 f4       	brne	.+14     	; 0x32e0 <__umoddi3+0x39c>
    32d2:	64 01       	movw	r12, r8
    32d4:	53 01       	movw	r10, r6
    32d6:	a2 18       	sub	r10, r2
    32d8:	b3 08       	sbc	r11, r3
    32da:	c4 08       	sbc	r12, r4
    32dc:	d5 08       	sbc	r13, r5
    32de:	e2 c0       	rjmp	.+452    	; 0x34a4 <__umoddi3+0x560>
    32e0:	f9 ac       	ldd	r15, Y+57	; 0x39
    32e2:	68 96       	adiw	r28, 0x18	; 24
    32e4:	ff ae       	std	Y+63, r15	; 0x3f
    32e6:	68 97       	sbiw	r28, 0x18	; 24
    32e8:	0f 2c       	mov	r0, r15
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <__umoddi3+0x3b0>
    32ec:	22 0c       	add	r2, r2
    32ee:	33 1c       	adc	r3, r3
    32f0:	44 1c       	adc	r4, r4
    32f2:	55 1c       	adc	r5, r5
    32f4:	0a 94       	dec	r0
    32f6:	d2 f7       	brpl	.-12     	; 0x32ec <__umoddi3+0x3a8>
    32f8:	8a 2d       	mov	r24, r10
    32fa:	8f 19       	sub	r24, r15
    32fc:	64 01       	movw	r12, r8
    32fe:	53 01       	movw	r10, r6
    3300:	08 2e       	mov	r0, r24
    3302:	04 c0       	rjmp	.+8      	; 0x330c <__umoddi3+0x3c8>
    3304:	d6 94       	lsr	r13
    3306:	c7 94       	ror	r12
    3308:	b7 94       	ror	r11
    330a:	a7 94       	ror	r10
    330c:	0a 94       	dec	r0
    330e:	d2 f7       	brpl	.-12     	; 0x3304 <__umoddi3+0x3c0>
    3310:	a4 01       	movw	r20, r8
    3312:	93 01       	movw	r18, r6
    3314:	04 c0       	rjmp	.+8      	; 0x331e <__umoddi3+0x3da>
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	44 1f       	adc	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	fa 94       	dec	r15
    3320:	d2 f7       	brpl	.-12     	; 0x3316 <__umoddi3+0x3d2>
    3322:	6c 96       	adiw	r28, 0x1c	; 28
    3324:	6c ac       	ldd	r6, Y+60	; 0x3c
    3326:	7d ac       	ldd	r7, Y+61	; 0x3d
    3328:	8e ac       	ldd	r8, Y+62	; 0x3e
    332a:	9f ac       	ldd	r9, Y+63	; 0x3f
    332c:	6c 97       	sbiw	r28, 0x1c	; 28
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <__umoddi3+0x3f4>
    3330:	96 94       	lsr	r9
    3332:	87 94       	ror	r8
    3334:	77 94       	ror	r7
    3336:	67 94       	ror	r6
    3338:	8a 95       	dec	r24
    333a:	d2 f7       	brpl	.-12     	; 0x3330 <__umoddi3+0x3ec>
    333c:	84 01       	movw	r16, r8
    333e:	73 01       	movw	r14, r6
    3340:	e2 2a       	or	r14, r18
    3342:	f3 2a       	or	r15, r19
    3344:	04 2b       	or	r16, r20
    3346:	15 2b       	or	r17, r21
    3348:	ed a6       	std	Y+45, r14	; 0x2d
    334a:	fe a6       	std	Y+46, r15	; 0x2e
    334c:	0f a7       	std	Y+47, r16	; 0x2f
    334e:	18 ab       	std	Y+48, r17	; 0x30
    3350:	32 01       	movw	r6, r4
    3352:	88 24       	eor	r8, r8
    3354:	99 24       	eor	r9, r9
    3356:	b2 01       	movw	r22, r4
    3358:	a1 01       	movw	r20, r2
    335a:	60 70       	andi	r22, 0x00	; 0
    335c:	70 70       	andi	r23, 0x00	; 0
    335e:	25 96       	adiw	r28, 0x05	; 5
    3360:	4c af       	std	Y+60, r20	; 0x3c
    3362:	5d af       	std	Y+61, r21	; 0x3d
    3364:	6e af       	std	Y+62, r22	; 0x3e
    3366:	7f af       	std	Y+63, r23	; 0x3f
    3368:	25 97       	sbiw	r28, 0x05	; 5
    336a:	c6 01       	movw	r24, r12
    336c:	b5 01       	movw	r22, r10
    336e:	a4 01       	movw	r20, r8
    3370:	93 01       	movw	r18, r6
    3372:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3376:	7b 01       	movw	r14, r22
    3378:	8c 01       	movw	r16, r24
    337a:	c6 01       	movw	r24, r12
    337c:	b5 01       	movw	r22, r10
    337e:	a4 01       	movw	r20, r8
    3380:	93 01       	movw	r18, r6
    3382:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3386:	ca 01       	movw	r24, r20
    3388:	b9 01       	movw	r22, r18
    338a:	25 96       	adiw	r28, 0x05	; 5
    338c:	2c ad       	ldd	r18, Y+60	; 0x3c
    338e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3390:	4e ad       	ldd	r20, Y+62	; 0x3e
    3392:	5f ad       	ldd	r21, Y+63	; 0x3f
    3394:	25 97       	sbiw	r28, 0x05	; 5
    3396:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    339a:	9b 01       	movw	r18, r22
    339c:	ac 01       	movw	r20, r24
    339e:	87 01       	movw	r16, r14
    33a0:	ff 24       	eor	r15, r15
    33a2:	ee 24       	eor	r14, r14
    33a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    33a6:	be a4       	ldd	r11, Y+46	; 0x2e
    33a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    33aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    33ac:	c6 01       	movw	r24, r12
    33ae:	aa 27       	eor	r26, r26
    33b0:	bb 27       	eor	r27, r27
    33b2:	5c 01       	movw	r10, r24
    33b4:	6d 01       	movw	r12, r26
    33b6:	ae 28       	or	r10, r14
    33b8:	bf 28       	or	r11, r15
    33ba:	c0 2a       	or	r12, r16
    33bc:	d1 2a       	or	r13, r17
    33be:	a2 16       	cp	r10, r18
    33c0:	b3 06       	cpc	r11, r19
    33c2:	c4 06       	cpc	r12, r20
    33c4:	d5 06       	cpc	r13, r21
    33c6:	90 f4       	brcc	.+36     	; 0x33ec <__umoddi3+0x4a8>
    33c8:	a2 0c       	add	r10, r2
    33ca:	b3 1c       	adc	r11, r3
    33cc:	c4 1c       	adc	r12, r4
    33ce:	d5 1c       	adc	r13, r5
    33d0:	a2 14       	cp	r10, r2
    33d2:	b3 04       	cpc	r11, r3
    33d4:	c4 04       	cpc	r12, r4
    33d6:	d5 04       	cpc	r13, r5
    33d8:	48 f0       	brcs	.+18     	; 0x33ec <__umoddi3+0x4a8>
    33da:	a2 16       	cp	r10, r18
    33dc:	b3 06       	cpc	r11, r19
    33de:	c4 06       	cpc	r12, r20
    33e0:	d5 06       	cpc	r13, r21
    33e2:	20 f4       	brcc	.+8      	; 0x33ec <__umoddi3+0x4a8>
    33e4:	a2 0c       	add	r10, r2
    33e6:	b3 1c       	adc	r11, r3
    33e8:	c4 1c       	adc	r12, r4
    33ea:	d5 1c       	adc	r13, r5
    33ec:	a2 1a       	sub	r10, r18
    33ee:	b3 0a       	sbc	r11, r19
    33f0:	c4 0a       	sbc	r12, r20
    33f2:	d5 0a       	sbc	r13, r21
    33f4:	c6 01       	movw	r24, r12
    33f6:	b5 01       	movw	r22, r10
    33f8:	a4 01       	movw	r20, r8
    33fa:	93 01       	movw	r18, r6
    33fc:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3400:	7b 01       	movw	r14, r22
    3402:	8c 01       	movw	r16, r24
    3404:	c6 01       	movw	r24, r12
    3406:	b5 01       	movw	r22, r10
    3408:	a4 01       	movw	r20, r8
    340a:	93 01       	movw	r18, r6
    340c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3410:	ca 01       	movw	r24, r20
    3412:	b9 01       	movw	r22, r18
    3414:	25 96       	adiw	r28, 0x05	; 5
    3416:	2c ad       	ldd	r18, Y+60	; 0x3c
    3418:	3d ad       	ldd	r19, Y+61	; 0x3d
    341a:	4e ad       	ldd	r20, Y+62	; 0x3e
    341c:	5f ad       	ldd	r21, Y+63	; 0x3f
    341e:	25 97       	sbiw	r28, 0x05	; 5
    3420:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3424:	9b 01       	movw	r18, r22
    3426:	ac 01       	movw	r20, r24
    3428:	87 01       	movw	r16, r14
    342a:	ff 24       	eor	r15, r15
    342c:	ee 24       	eor	r14, r14
    342e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3430:	9e a5       	ldd	r25, Y+46	; 0x2e
    3432:	af a5       	ldd	r26, Y+47	; 0x2f
    3434:	b8 a9       	ldd	r27, Y+48	; 0x30
    3436:	a0 70       	andi	r26, 0x00	; 0
    3438:	b0 70       	andi	r27, 0x00	; 0
    343a:	57 01       	movw	r10, r14
    343c:	68 01       	movw	r12, r16
    343e:	a8 2a       	or	r10, r24
    3440:	b9 2a       	or	r11, r25
    3442:	ca 2a       	or	r12, r26
    3444:	db 2a       	or	r13, r27
    3446:	a2 16       	cp	r10, r18
    3448:	b3 06       	cpc	r11, r19
    344a:	c4 06       	cpc	r12, r20
    344c:	d5 06       	cpc	r13, r21
    344e:	90 f4       	brcc	.+36     	; 0x3474 <__umoddi3+0x530>
    3450:	a2 0c       	add	r10, r2
    3452:	b3 1c       	adc	r11, r3
    3454:	c4 1c       	adc	r12, r4
    3456:	d5 1c       	adc	r13, r5
    3458:	a2 14       	cp	r10, r2
    345a:	b3 04       	cpc	r11, r3
    345c:	c4 04       	cpc	r12, r4
    345e:	d5 04       	cpc	r13, r5
    3460:	48 f0       	brcs	.+18     	; 0x3474 <__umoddi3+0x530>
    3462:	a2 16       	cp	r10, r18
    3464:	b3 06       	cpc	r11, r19
    3466:	c4 06       	cpc	r12, r20
    3468:	d5 06       	cpc	r13, r21
    346a:	20 f4       	brcc	.+8      	; 0x3474 <__umoddi3+0x530>
    346c:	a2 0c       	add	r10, r2
    346e:	b3 1c       	adc	r11, r3
    3470:	c4 1c       	adc	r12, r4
    3472:	d5 1c       	adc	r13, r5
    3474:	6c 96       	adiw	r28, 0x1c	; 28
    3476:	ec ac       	ldd	r14, Y+60	; 0x3c
    3478:	fd ac       	ldd	r15, Y+61	; 0x3d
    347a:	0e ad       	ldd	r16, Y+62	; 0x3e
    347c:	1f ad       	ldd	r17, Y+63	; 0x3f
    347e:	6c 97       	sbiw	r28, 0x1c	; 28
    3480:	68 96       	adiw	r28, 0x18	; 24
    3482:	0f ac       	ldd	r0, Y+63	; 0x3f
    3484:	68 97       	sbiw	r28, 0x18	; 24
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <__umoddi3+0x54c>
    3488:	ee 0c       	add	r14, r14
    348a:	ff 1c       	adc	r15, r15
    348c:	00 1f       	adc	r16, r16
    348e:	11 1f       	adc	r17, r17
    3490:	0a 94       	dec	r0
    3492:	d2 f7       	brpl	.-12     	; 0x3488 <__umoddi3+0x544>
    3494:	e9 aa       	std	Y+49, r14	; 0x31
    3496:	fa aa       	std	Y+50, r15	; 0x32
    3498:	0b ab       	std	Y+51, r16	; 0x33
    349a:	1c ab       	std	Y+52, r17	; 0x34
    349c:	a2 1a       	sub	r10, r18
    349e:	b3 0a       	sbc	r11, r19
    34a0:	c4 0a       	sbc	r12, r20
    34a2:	d5 0a       	sbc	r13, r21
    34a4:	32 01       	movw	r6, r4
    34a6:	88 24       	eor	r8, r8
    34a8:	99 24       	eor	r9, r9
    34aa:	b2 01       	movw	r22, r4
    34ac:	a1 01       	movw	r20, r2
    34ae:	60 70       	andi	r22, 0x00	; 0
    34b0:	70 70       	andi	r23, 0x00	; 0
    34b2:	29 96       	adiw	r28, 0x09	; 9
    34b4:	4c af       	std	Y+60, r20	; 0x3c
    34b6:	5d af       	std	Y+61, r21	; 0x3d
    34b8:	6e af       	std	Y+62, r22	; 0x3e
    34ba:	7f af       	std	Y+63, r23	; 0x3f
    34bc:	29 97       	sbiw	r28, 0x09	; 9
    34be:	c6 01       	movw	r24, r12
    34c0:	b5 01       	movw	r22, r10
    34c2:	a4 01       	movw	r20, r8
    34c4:	93 01       	movw	r18, r6
    34c6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    34ca:	7b 01       	movw	r14, r22
    34cc:	8c 01       	movw	r16, r24
    34ce:	c6 01       	movw	r24, r12
    34d0:	b5 01       	movw	r22, r10
    34d2:	a4 01       	movw	r20, r8
    34d4:	93 01       	movw	r18, r6
    34d6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    34da:	ca 01       	movw	r24, r20
    34dc:	b9 01       	movw	r22, r18
    34de:	29 96       	adiw	r28, 0x09	; 9
    34e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    34e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    34e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    34e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    34e8:	29 97       	sbiw	r28, 0x09	; 9
    34ea:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	87 01       	movw	r16, r14
    34f4:	ff 24       	eor	r15, r15
    34f6:	ee 24       	eor	r14, r14
    34f8:	a9 a8       	ldd	r10, Y+49	; 0x31
    34fa:	ba a8       	ldd	r11, Y+50	; 0x32
    34fc:	cb a8       	ldd	r12, Y+51	; 0x33
    34fe:	dc a8       	ldd	r13, Y+52	; 0x34
    3500:	c6 01       	movw	r24, r12
    3502:	aa 27       	eor	r26, r26
    3504:	bb 27       	eor	r27, r27
    3506:	57 01       	movw	r10, r14
    3508:	68 01       	movw	r12, r16
    350a:	a8 2a       	or	r10, r24
    350c:	b9 2a       	or	r11, r25
    350e:	ca 2a       	or	r12, r26
    3510:	db 2a       	or	r13, r27
    3512:	a2 16       	cp	r10, r18
    3514:	b3 06       	cpc	r11, r19
    3516:	c4 06       	cpc	r12, r20
    3518:	d5 06       	cpc	r13, r21
    351a:	90 f4       	brcc	.+36     	; 0x3540 <__umoddi3+0x5fc>
    351c:	a2 0c       	add	r10, r2
    351e:	b3 1c       	adc	r11, r3
    3520:	c4 1c       	adc	r12, r4
    3522:	d5 1c       	adc	r13, r5
    3524:	a2 14       	cp	r10, r2
    3526:	b3 04       	cpc	r11, r3
    3528:	c4 04       	cpc	r12, r4
    352a:	d5 04       	cpc	r13, r5
    352c:	48 f0       	brcs	.+18     	; 0x3540 <__umoddi3+0x5fc>
    352e:	a2 16       	cp	r10, r18
    3530:	b3 06       	cpc	r11, r19
    3532:	c4 06       	cpc	r12, r20
    3534:	d5 06       	cpc	r13, r21
    3536:	20 f4       	brcc	.+8      	; 0x3540 <__umoddi3+0x5fc>
    3538:	a2 0c       	add	r10, r2
    353a:	b3 1c       	adc	r11, r3
    353c:	c4 1c       	adc	r12, r4
    353e:	d5 1c       	adc	r13, r5
    3540:	a2 1a       	sub	r10, r18
    3542:	b3 0a       	sbc	r11, r19
    3544:	c4 0a       	sbc	r12, r20
    3546:	d5 0a       	sbc	r13, r21
    3548:	c6 01       	movw	r24, r12
    354a:	b5 01       	movw	r22, r10
    354c:	a4 01       	movw	r20, r8
    354e:	93 01       	movw	r18, r6
    3550:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3554:	7b 01       	movw	r14, r22
    3556:	8c 01       	movw	r16, r24
    3558:	c6 01       	movw	r24, r12
    355a:	b5 01       	movw	r22, r10
    355c:	a4 01       	movw	r20, r8
    355e:	93 01       	movw	r18, r6
    3560:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3564:	ca 01       	movw	r24, r20
    3566:	b9 01       	movw	r22, r18
    3568:	29 96       	adiw	r28, 0x09	; 9
    356a:	2c ad       	ldd	r18, Y+60	; 0x3c
    356c:	3d ad       	ldd	r19, Y+61	; 0x3d
    356e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3570:	5f ad       	ldd	r21, Y+63	; 0x3f
    3572:	29 97       	sbiw	r28, 0x09	; 9
    3574:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3578:	9b 01       	movw	r18, r22
    357a:	ac 01       	movw	r20, r24
    357c:	87 01       	movw	r16, r14
    357e:	ff 24       	eor	r15, r15
    3580:	ee 24       	eor	r14, r14
    3582:	89 a9       	ldd	r24, Y+49	; 0x31
    3584:	9a a9       	ldd	r25, Y+50	; 0x32
    3586:	ab a9       	ldd	r26, Y+51	; 0x33
    3588:	bc a9       	ldd	r27, Y+52	; 0x34
    358a:	a0 70       	andi	r26, 0x00	; 0
    358c:	b0 70       	andi	r27, 0x00	; 0
    358e:	e8 2a       	or	r14, r24
    3590:	f9 2a       	or	r15, r25
    3592:	0a 2b       	or	r16, r26
    3594:	1b 2b       	or	r17, r27
    3596:	e2 16       	cp	r14, r18
    3598:	f3 06       	cpc	r15, r19
    359a:	04 07       	cpc	r16, r20
    359c:	15 07       	cpc	r17, r21
    359e:	90 f4       	brcc	.+36     	; 0x35c4 <__umoddi3+0x680>
    35a0:	e2 0c       	add	r14, r2
    35a2:	f3 1c       	adc	r15, r3
    35a4:	04 1d       	adc	r16, r4
    35a6:	15 1d       	adc	r17, r5
    35a8:	e2 14       	cp	r14, r2
    35aa:	f3 04       	cpc	r15, r3
    35ac:	04 05       	cpc	r16, r4
    35ae:	15 05       	cpc	r17, r5
    35b0:	48 f0       	brcs	.+18     	; 0x35c4 <__umoddi3+0x680>
    35b2:	e2 16       	cp	r14, r18
    35b4:	f3 06       	cpc	r15, r19
    35b6:	04 07       	cpc	r16, r20
    35b8:	15 07       	cpc	r17, r21
    35ba:	20 f4       	brcc	.+8      	; 0x35c4 <__umoddi3+0x680>
    35bc:	e2 0c       	add	r14, r2
    35be:	f3 1c       	adc	r15, r3
    35c0:	04 1d       	adc	r16, r4
    35c2:	15 1d       	adc	r17, r5
    35c4:	e2 1a       	sub	r14, r18
    35c6:	f3 0a       	sbc	r15, r19
    35c8:	04 0b       	sbc	r16, r20
    35ca:	15 0b       	sbc	r17, r21
    35cc:	d8 01       	movw	r26, r16
    35ce:	c7 01       	movw	r24, r14
    35d0:	09 ac       	ldd	r0, Y+57	; 0x39
    35d2:	04 c0       	rjmp	.+8      	; 0x35dc <__umoddi3+0x698>
    35d4:	b6 95       	lsr	r27
    35d6:	a7 95       	ror	r26
    35d8:	97 95       	ror	r25
    35da:	87 95       	ror	r24
    35dc:	0a 94       	dec	r0
    35de:	d2 f7       	brpl	.-12     	; 0x35d4 <__umoddi3+0x690>
    35e0:	89 8b       	std	Y+17, r24	; 0x11
    35e2:	9a 8b       	std	Y+18, r25	; 0x12
    35e4:	ab 8b       	std	Y+19, r26	; 0x13
    35e6:	bc 8b       	std	Y+20, r27	; 0x14
    35e8:	1d 8a       	std	Y+21, r1	; 0x15
    35ea:	1e 8a       	std	Y+22, r1	; 0x16
    35ec:	1f 8a       	std	Y+23, r1	; 0x17
    35ee:	18 8e       	std	Y+24, r1	; 0x18
    35f0:	28 2f       	mov	r18, r24
    35f2:	3a 89       	ldd	r19, Y+18	; 0x12
    35f4:	4b 89       	ldd	r20, Y+19	; 0x13
    35f6:	5c 89       	ldd	r21, Y+20	; 0x14
    35f8:	6d 89       	ldd	r22, Y+21	; 0x15
    35fa:	0c c3       	rjmp	.+1560   	; 0x3c14 <__umoddi3+0xcd0>
    35fc:	6a 14       	cp	r6, r10
    35fe:	7b 04       	cpc	r7, r11
    3600:	8c 04       	cpc	r8, r12
    3602:	9d 04       	cpc	r9, r13
    3604:	08 f4       	brcc	.+2      	; 0x3608 <__umoddi3+0x6c4>
    3606:	09 c3       	rjmp	.+1554   	; 0x3c1a <__umoddi3+0xcd6>
    3608:	00 e0       	ldi	r16, 0x00	; 0
    360a:	a0 16       	cp	r10, r16
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	b0 06       	cpc	r11, r16
    3610:	01 e0       	ldi	r16, 0x01	; 1
    3612:	c0 06       	cpc	r12, r16
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	d0 06       	cpc	r13, r16
    3618:	88 f4       	brcc	.+34     	; 0x363c <__umoddi3+0x6f8>
    361a:	1f ef       	ldi	r17, 0xFF	; 255
    361c:	a1 16       	cp	r10, r17
    361e:	b1 04       	cpc	r11, r1
    3620:	c1 04       	cpc	r12, r1
    3622:	d1 04       	cpc	r13, r1
    3624:	39 f0       	breq	.+14     	; 0x3634 <__umoddi3+0x6f0>
    3626:	30 f0       	brcs	.+12     	; 0x3634 <__umoddi3+0x6f0>
    3628:	28 e0       	ldi	r18, 0x08	; 8
    362a:	e2 2e       	mov	r14, r18
    362c:	f1 2c       	mov	r15, r1
    362e:	01 2d       	mov	r16, r1
    3630:	11 2d       	mov	r17, r1
    3632:	18 c0       	rjmp	.+48     	; 0x3664 <__umoddi3+0x720>
    3634:	ee 24       	eor	r14, r14
    3636:	ff 24       	eor	r15, r15
    3638:	87 01       	movw	r16, r14
    363a:	14 c0       	rjmp	.+40     	; 0x3664 <__umoddi3+0x720>
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	a4 16       	cp	r10, r20
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	b4 06       	cpc	r11, r20
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	c4 06       	cpc	r12, r20
    3648:	41 e0       	ldi	r20, 0x01	; 1
    364a:	d4 06       	cpc	r13, r20
    364c:	30 f0       	brcs	.+12     	; 0x365a <__umoddi3+0x716>
    364e:	98 e1       	ldi	r25, 0x18	; 24
    3650:	e9 2e       	mov	r14, r25
    3652:	f1 2c       	mov	r15, r1
    3654:	01 2d       	mov	r16, r1
    3656:	11 2d       	mov	r17, r1
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <__umoddi3+0x720>
    365a:	80 e1       	ldi	r24, 0x10	; 16
    365c:	e8 2e       	mov	r14, r24
    365e:	f1 2c       	mov	r15, r1
    3660:	01 2d       	mov	r16, r1
    3662:	11 2d       	mov	r17, r1
    3664:	d6 01       	movw	r26, r12
    3666:	c5 01       	movw	r24, r10
    3668:	0e 2c       	mov	r0, r14
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <__umoddi3+0x730>
    366c:	b6 95       	lsr	r27
    366e:	a7 95       	ror	r26
    3670:	97 95       	ror	r25
    3672:	87 95       	ror	r24
    3674:	0a 94       	dec	r0
    3676:	d2 f7       	brpl	.-12     	; 0x366c <__umoddi3+0x728>
    3678:	8c 52       	subi	r24, 0x2C	; 44
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	dc 01       	movw	r26, r24
    367e:	2c 91       	ld	r18, X
    3680:	80 e2       	ldi	r24, 0x20	; 32
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	8e 19       	sub	r24, r14
    368a:	9f 09       	sbc	r25, r15
    368c:	a0 0b       	sbc	r26, r16
    368e:	b1 0b       	sbc	r27, r17
    3690:	82 1b       	sub	r24, r18
    3692:	91 09       	sbc	r25, r1
    3694:	a1 09       	sbc	r26, r1
    3696:	b1 09       	sbc	r27, r1
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	a1 05       	cpc	r26, r1
    369c:	b1 05       	cpc	r27, r1
    369e:	09 f0       	breq	.+2      	; 0x36a2 <__umoddi3+0x75e>
    36a0:	4f c0       	rjmp	.+158    	; 0x3740 <__umoddi3+0x7fc>
    36a2:	a6 14       	cp	r10, r6
    36a4:	b7 04       	cpc	r11, r7
    36a6:	c8 04       	cpc	r12, r8
    36a8:	d9 04       	cpc	r13, r9
    36aa:	58 f0       	brcs	.+22     	; 0x36c2 <__umoddi3+0x77e>
    36ac:	6c 96       	adiw	r28, 0x1c	; 28
    36ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    36b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    36b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    36b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    36b6:	6c 97       	sbiw	r28, 0x1c	; 28
    36b8:	e2 14       	cp	r14, r2
    36ba:	f3 04       	cpc	r15, r3
    36bc:	04 05       	cpc	r16, r4
    36be:	15 05       	cpc	r17, r5
    36c0:	68 f1       	brcs	.+90     	; 0x371c <__umoddi3+0x7d8>
    36c2:	6c 96       	adiw	r28, 0x1c	; 28
    36c4:	ec ac       	ldd	r14, Y+60	; 0x3c
    36c6:	fd ac       	ldd	r15, Y+61	; 0x3d
    36c8:	0e ad       	ldd	r16, Y+62	; 0x3e
    36ca:	1f ad       	ldd	r17, Y+63	; 0x3f
    36cc:	6c 97       	sbiw	r28, 0x1c	; 28
    36ce:	e2 18       	sub	r14, r2
    36d0:	f3 08       	sbc	r15, r3
    36d2:	04 09       	sbc	r16, r4
    36d4:	15 09       	sbc	r17, r5
    36d6:	a4 01       	movw	r20, r8
    36d8:	93 01       	movw	r18, r6
    36da:	2a 19       	sub	r18, r10
    36dc:	3b 09       	sbc	r19, r11
    36de:	4c 09       	sbc	r20, r12
    36e0:	5d 09       	sbc	r21, r13
    36e2:	aa 24       	eor	r10, r10
    36e4:	bb 24       	eor	r11, r11
    36e6:	65 01       	movw	r12, r10
    36e8:	6c 96       	adiw	r28, 0x1c	; 28
    36ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    36ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    36ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    36f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f2:	6c 97       	sbiw	r28, 0x1c	; 28
    36f4:	6e 15       	cp	r22, r14
    36f6:	7f 05       	cpc	r23, r15
    36f8:	80 07       	cpc	r24, r16
    36fa:	91 07       	cpc	r25, r17
    36fc:	28 f4       	brcc	.+10     	; 0x3708 <__umoddi3+0x7c4>
    36fe:	b1 e0       	ldi	r27, 0x01	; 1
    3700:	ab 2e       	mov	r10, r27
    3702:	b1 2c       	mov	r11, r1
    3704:	c1 2c       	mov	r12, r1
    3706:	d1 2c       	mov	r13, r1
    3708:	da 01       	movw	r26, r20
    370a:	c9 01       	movw	r24, r18
    370c:	8a 19       	sub	r24, r10
    370e:	9b 09       	sbc	r25, r11
    3710:	ac 09       	sbc	r26, r12
    3712:	bd 09       	sbc	r27, r13
    3714:	8d ab       	std	Y+53, r24	; 0x35
    3716:	9e ab       	std	Y+54, r25	; 0x36
    3718:	af ab       	std	Y+55, r26	; 0x37
    371a:	b8 af       	std	Y+56, r27	; 0x38
    371c:	e9 8a       	std	Y+17, r14	; 0x11
    371e:	fa 8a       	std	Y+18, r15	; 0x12
    3720:	0b 8b       	std	Y+19, r16	; 0x13
    3722:	1c 8b       	std	Y+20, r17	; 0x14
    3724:	6d a8       	ldd	r6, Y+53	; 0x35
    3726:	7e a8       	ldd	r7, Y+54	; 0x36
    3728:	8f a8       	ldd	r8, Y+55	; 0x37
    372a:	98 ac       	ldd	r9, Y+56	; 0x38
    372c:	6d 8a       	std	Y+21, r6	; 0x15
    372e:	7e 8a       	std	Y+22, r7	; 0x16
    3730:	8f 8a       	std	Y+23, r8	; 0x17
    3732:	98 8e       	std	Y+24, r9	; 0x18
    3734:	2e 2d       	mov	r18, r14
    3736:	3a 89       	ldd	r19, Y+18	; 0x12
    3738:	4b 89       	ldd	r20, Y+19	; 0x13
    373a:	5c 89       	ldd	r21, Y+20	; 0x14
    373c:	6d a9       	ldd	r22, Y+53	; 0x35
    373e:	6a c2       	rjmp	.+1236   	; 0x3c14 <__umoddi3+0xcd0>
    3740:	67 96       	adiw	r28, 0x17	; 23
    3742:	8f af       	std	Y+63, r24	; 0x3f
    3744:	67 97       	sbiw	r28, 0x17	; 23
    3746:	a6 01       	movw	r20, r12
    3748:	95 01       	movw	r18, r10
    374a:	08 2e       	mov	r0, r24
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <__umoddi3+0x812>
    374e:	22 0f       	add	r18, r18
    3750:	33 1f       	adc	r19, r19
    3752:	44 1f       	adc	r20, r20
    3754:	55 1f       	adc	r21, r21
    3756:	0a 94       	dec	r0
    3758:	d2 f7       	brpl	.-12     	; 0x374e <__umoddi3+0x80a>
    375a:	a0 e2       	ldi	r26, 0x20	; 32
    375c:	aa 2e       	mov	r10, r26
    375e:	a8 1a       	sub	r10, r24
    3760:	66 96       	adiw	r28, 0x16	; 22
    3762:	af ae       	std	Y+63, r10	; 0x3f
    3764:	66 97       	sbiw	r28, 0x16	; 22
    3766:	d2 01       	movw	r26, r4
    3768:	c1 01       	movw	r24, r2
    376a:	04 c0       	rjmp	.+8      	; 0x3774 <__umoddi3+0x830>
    376c:	b6 95       	lsr	r27
    376e:	a7 95       	ror	r26
    3770:	97 95       	ror	r25
    3772:	87 95       	ror	r24
    3774:	aa 94       	dec	r10
    3776:	d2 f7       	brpl	.-12     	; 0x376c <__umoddi3+0x828>
    3778:	6c 01       	movw	r12, r24
    377a:	7d 01       	movw	r14, r26
    377c:	c2 2a       	or	r12, r18
    377e:	d3 2a       	or	r13, r19
    3780:	e4 2a       	or	r14, r20
    3782:	f5 2a       	or	r15, r21
    3784:	c9 a6       	std	Y+41, r12	; 0x29
    3786:	da a6       	std	Y+42, r13	; 0x2a
    3788:	eb a6       	std	Y+43, r14	; 0x2b
    378a:	fc a6       	std	Y+44, r15	; 0x2c
    378c:	82 01       	movw	r16, r4
    378e:	71 01       	movw	r14, r2
    3790:	67 96       	adiw	r28, 0x17	; 23
    3792:	0f ac       	ldd	r0, Y+63	; 0x3f
    3794:	67 97       	sbiw	r28, 0x17	; 23
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <__umoddi3+0x85c>
    3798:	ee 0c       	add	r14, r14
    379a:	ff 1c       	adc	r15, r15
    379c:	00 1f       	adc	r16, r16
    379e:	11 1f       	adc	r17, r17
    37a0:	0a 94       	dec	r0
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <__umoddi3+0x854>
    37a4:	ed a2       	std	Y+37, r14	; 0x25
    37a6:	fe a2       	std	Y+38, r15	; 0x26
    37a8:	0f a3       	std	Y+39, r16	; 0x27
    37aa:	18 a7       	std	Y+40, r17	; 0x28
    37ac:	64 01       	movw	r12, r8
    37ae:	53 01       	movw	r10, r6
    37b0:	66 96       	adiw	r28, 0x16	; 22
    37b2:	0f ac       	ldd	r0, Y+63	; 0x3f
    37b4:	66 97       	sbiw	r28, 0x16	; 22
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <__umoddi3+0x87c>
    37b8:	d6 94       	lsr	r13
    37ba:	c7 94       	ror	r12
    37bc:	b7 94       	ror	r11
    37be:	a7 94       	ror	r10
    37c0:	0a 94       	dec	r0
    37c2:	d2 f7       	brpl	.-12     	; 0x37b8 <__umoddi3+0x874>
    37c4:	a4 01       	movw	r20, r8
    37c6:	93 01       	movw	r18, r6
    37c8:	67 96       	adiw	r28, 0x17	; 23
    37ca:	0f ac       	ldd	r0, Y+63	; 0x3f
    37cc:	67 97       	sbiw	r28, 0x17	; 23
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <__umoddi3+0x894>
    37d0:	22 0f       	add	r18, r18
    37d2:	33 1f       	adc	r19, r19
    37d4:	44 1f       	adc	r20, r20
    37d6:	55 1f       	adc	r21, r21
    37d8:	0a 94       	dec	r0
    37da:	d2 f7       	brpl	.-12     	; 0x37d0 <__umoddi3+0x88c>
    37dc:	6c 96       	adiw	r28, 0x1c	; 28
    37de:	8c ad       	ldd	r24, Y+60	; 0x3c
    37e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    37e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    37e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    37e6:	6c 97       	sbiw	r28, 0x1c	; 28
    37e8:	66 96       	adiw	r28, 0x16	; 22
    37ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    37ec:	66 97       	sbiw	r28, 0x16	; 22
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__umoddi3+0x8b4>
    37f0:	b6 95       	lsr	r27
    37f2:	a7 95       	ror	r26
    37f4:	97 95       	ror	r25
    37f6:	87 95       	ror	r24
    37f8:	0a 94       	dec	r0
    37fa:	d2 f7       	brpl	.-12     	; 0x37f0 <__umoddi3+0x8ac>
    37fc:	3c 01       	movw	r6, r24
    37fe:	4d 01       	movw	r8, r26
    3800:	62 2a       	or	r6, r18
    3802:	73 2a       	or	r7, r19
    3804:	84 2a       	or	r8, r20
    3806:	95 2a       	or	r9, r21
    3808:	69 a2       	std	Y+33, r6	; 0x21
    380a:	7a a2       	std	Y+34, r7	; 0x22
    380c:	8b a2       	std	Y+35, r8	; 0x23
    380e:	9c a2       	std	Y+36, r9	; 0x24
    3810:	6c 96       	adiw	r28, 0x1c	; 28
    3812:	ec ac       	ldd	r14, Y+60	; 0x3c
    3814:	fd ac       	ldd	r15, Y+61	; 0x3d
    3816:	0e ad       	ldd	r16, Y+62	; 0x3e
    3818:	1f ad       	ldd	r17, Y+63	; 0x3f
    381a:	6c 97       	sbiw	r28, 0x1c	; 28
    381c:	67 96       	adiw	r28, 0x17	; 23
    381e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3820:	67 97       	sbiw	r28, 0x17	; 23
    3822:	04 c0       	rjmp	.+8      	; 0x382c <__umoddi3+0x8e8>
    3824:	ee 0c       	add	r14, r14
    3826:	ff 1c       	adc	r15, r15
    3828:	00 1f       	adc	r16, r16
    382a:	11 1f       	adc	r17, r17
    382c:	0a 94       	dec	r0
    382e:	d2 f7       	brpl	.-12     	; 0x3824 <__umoddi3+0x8e0>
    3830:	ed 8e       	std	Y+29, r14	; 0x1d
    3832:	fe 8e       	std	Y+30, r15	; 0x1e
    3834:	0f 8f       	std	Y+31, r16	; 0x1f
    3836:	18 a3       	std	Y+32, r17	; 0x20
    3838:	49 a5       	ldd	r20, Y+41	; 0x29
    383a:	5a a5       	ldd	r21, Y+42	; 0x2a
    383c:	6b a5       	ldd	r22, Y+43	; 0x2b
    383e:	7c a5       	ldd	r23, Y+44	; 0x2c
    3840:	3b 01       	movw	r6, r22
    3842:	88 24       	eor	r8, r8
    3844:	99 24       	eor	r9, r9
    3846:	60 70       	andi	r22, 0x00	; 0
    3848:	70 70       	andi	r23, 0x00	; 0
    384a:	2d 96       	adiw	r28, 0x0d	; 13
    384c:	4c af       	std	Y+60, r20	; 0x3c
    384e:	5d af       	std	Y+61, r21	; 0x3d
    3850:	6e af       	std	Y+62, r22	; 0x3e
    3852:	7f af       	std	Y+63, r23	; 0x3f
    3854:	2d 97       	sbiw	r28, 0x0d	; 13
    3856:	c6 01       	movw	r24, r12
    3858:	b5 01       	movw	r22, r10
    385a:	a4 01       	movw	r20, r8
    385c:	93 01       	movw	r18, r6
    385e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3862:	7b 01       	movw	r14, r22
    3864:	8c 01       	movw	r16, r24
    3866:	c6 01       	movw	r24, r12
    3868:	b5 01       	movw	r22, r10
    386a:	a4 01       	movw	r20, r8
    386c:	93 01       	movw	r18, r6
    386e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3872:	c9 01       	movw	r24, r18
    3874:	da 01       	movw	r26, r20
    3876:	1c 01       	movw	r2, r24
    3878:	2d 01       	movw	r4, r26
    387a:	c2 01       	movw	r24, r4
    387c:	b1 01       	movw	r22, r2
    387e:	2d 96       	adiw	r28, 0x0d	; 13
    3880:	2c ad       	ldd	r18, Y+60	; 0x3c
    3882:	3d ad       	ldd	r19, Y+61	; 0x3d
    3884:	4e ad       	ldd	r20, Y+62	; 0x3e
    3886:	5f ad       	ldd	r21, Y+63	; 0x3f
    3888:	2d 97       	sbiw	r28, 0x0d	; 13
    388a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    388e:	9b 01       	movw	r18, r22
    3890:	ac 01       	movw	r20, r24
    3892:	87 01       	movw	r16, r14
    3894:	ff 24       	eor	r15, r15
    3896:	ee 24       	eor	r14, r14
    3898:	a9 a0       	ldd	r10, Y+33	; 0x21
    389a:	ba a0       	ldd	r11, Y+34	; 0x22
    389c:	cb a0       	ldd	r12, Y+35	; 0x23
    389e:	dc a0       	ldd	r13, Y+36	; 0x24
    38a0:	c6 01       	movw	r24, r12
    38a2:	aa 27       	eor	r26, r26
    38a4:	bb 27       	eor	r27, r27
    38a6:	57 01       	movw	r10, r14
    38a8:	68 01       	movw	r12, r16
    38aa:	a8 2a       	or	r10, r24
    38ac:	b9 2a       	or	r11, r25
    38ae:	ca 2a       	or	r12, r26
    38b0:	db 2a       	or	r13, r27
    38b2:	a2 16       	cp	r10, r18
    38b4:	b3 06       	cpc	r11, r19
    38b6:	c4 06       	cpc	r12, r20
    38b8:	d5 06       	cpc	r13, r21
    38ba:	00 f5       	brcc	.+64     	; 0x38fc <__umoddi3+0x9b8>
    38bc:	08 94       	sec
    38be:	21 08       	sbc	r2, r1
    38c0:	31 08       	sbc	r3, r1
    38c2:	41 08       	sbc	r4, r1
    38c4:	51 08       	sbc	r5, r1
    38c6:	e9 a4       	ldd	r14, Y+41	; 0x29
    38c8:	fa a4       	ldd	r15, Y+42	; 0x2a
    38ca:	0b a5       	ldd	r16, Y+43	; 0x2b
    38cc:	1c a5       	ldd	r17, Y+44	; 0x2c
    38ce:	ae 0c       	add	r10, r14
    38d0:	bf 1c       	adc	r11, r15
    38d2:	c0 1e       	adc	r12, r16
    38d4:	d1 1e       	adc	r13, r17
    38d6:	ae 14       	cp	r10, r14
    38d8:	bf 04       	cpc	r11, r15
    38da:	c0 06       	cpc	r12, r16
    38dc:	d1 06       	cpc	r13, r17
    38de:	70 f0       	brcs	.+28     	; 0x38fc <__umoddi3+0x9b8>
    38e0:	a2 16       	cp	r10, r18
    38e2:	b3 06       	cpc	r11, r19
    38e4:	c4 06       	cpc	r12, r20
    38e6:	d5 06       	cpc	r13, r21
    38e8:	48 f4       	brcc	.+18     	; 0x38fc <__umoddi3+0x9b8>
    38ea:	08 94       	sec
    38ec:	21 08       	sbc	r2, r1
    38ee:	31 08       	sbc	r3, r1
    38f0:	41 08       	sbc	r4, r1
    38f2:	51 08       	sbc	r5, r1
    38f4:	ae 0c       	add	r10, r14
    38f6:	bf 1c       	adc	r11, r15
    38f8:	c0 1e       	adc	r12, r16
    38fa:	d1 1e       	adc	r13, r17
    38fc:	a2 1a       	sub	r10, r18
    38fe:	b3 0a       	sbc	r11, r19
    3900:	c4 0a       	sbc	r12, r20
    3902:	d5 0a       	sbc	r13, r21
    3904:	c6 01       	movw	r24, r12
    3906:	b5 01       	movw	r22, r10
    3908:	a4 01       	movw	r20, r8
    390a:	93 01       	movw	r18, r6
    390c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3910:	7b 01       	movw	r14, r22
    3912:	8c 01       	movw	r16, r24
    3914:	c6 01       	movw	r24, r12
    3916:	b5 01       	movw	r22, r10
    3918:	a4 01       	movw	r20, r8
    391a:	93 01       	movw	r18, r6
    391c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__udivmodsi4>
    3920:	c9 01       	movw	r24, r18
    3922:	da 01       	movw	r26, r20
    3924:	3c 01       	movw	r6, r24
    3926:	4d 01       	movw	r8, r26
    3928:	c4 01       	movw	r24, r8
    392a:	b3 01       	movw	r22, r6
    392c:	2d 96       	adiw	r28, 0x0d	; 13
    392e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3930:	3d ad       	ldd	r19, Y+61	; 0x3d
    3932:	4e ad       	ldd	r20, Y+62	; 0x3e
    3934:	5f ad       	ldd	r21, Y+63	; 0x3f
    3936:	2d 97       	sbiw	r28, 0x0d	; 13
    3938:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    393c:	9b 01       	movw	r18, r22
    393e:	ac 01       	movw	r20, r24
    3940:	87 01       	movw	r16, r14
    3942:	ff 24       	eor	r15, r15
    3944:	ee 24       	eor	r14, r14
    3946:	89 a1       	ldd	r24, Y+33	; 0x21
    3948:	9a a1       	ldd	r25, Y+34	; 0x22
    394a:	ab a1       	ldd	r26, Y+35	; 0x23
    394c:	bc a1       	ldd	r27, Y+36	; 0x24
    394e:	a0 70       	andi	r26, 0x00	; 0
    3950:	b0 70       	andi	r27, 0x00	; 0
    3952:	57 01       	movw	r10, r14
    3954:	68 01       	movw	r12, r16
    3956:	a8 2a       	or	r10, r24
    3958:	b9 2a       	or	r11, r25
    395a:	ca 2a       	or	r12, r26
    395c:	db 2a       	or	r13, r27
    395e:	a2 16       	cp	r10, r18
    3960:	b3 06       	cpc	r11, r19
    3962:	c4 06       	cpc	r12, r20
    3964:	d5 06       	cpc	r13, r21
    3966:	00 f5       	brcc	.+64     	; 0x39a8 <__umoddi3+0xa64>
    3968:	08 94       	sec
    396a:	61 08       	sbc	r6, r1
    396c:	71 08       	sbc	r7, r1
    396e:	81 08       	sbc	r8, r1
    3970:	91 08       	sbc	r9, r1
    3972:	69 a5       	ldd	r22, Y+41	; 0x29
    3974:	7a a5       	ldd	r23, Y+42	; 0x2a
    3976:	8b a5       	ldd	r24, Y+43	; 0x2b
    3978:	9c a5       	ldd	r25, Y+44	; 0x2c
    397a:	a6 0e       	add	r10, r22
    397c:	b7 1e       	adc	r11, r23
    397e:	c8 1e       	adc	r12, r24
    3980:	d9 1e       	adc	r13, r25
    3982:	a6 16       	cp	r10, r22
    3984:	b7 06       	cpc	r11, r23
    3986:	c8 06       	cpc	r12, r24
    3988:	d9 06       	cpc	r13, r25
    398a:	70 f0       	brcs	.+28     	; 0x39a8 <__umoddi3+0xa64>
    398c:	a2 16       	cp	r10, r18
    398e:	b3 06       	cpc	r11, r19
    3990:	c4 06       	cpc	r12, r20
    3992:	d5 06       	cpc	r13, r21
    3994:	48 f4       	brcc	.+18     	; 0x39a8 <__umoddi3+0xa64>
    3996:	08 94       	sec
    3998:	61 08       	sbc	r6, r1
    399a:	71 08       	sbc	r7, r1
    399c:	81 08       	sbc	r8, r1
    399e:	91 08       	sbc	r9, r1
    39a0:	a6 0e       	add	r10, r22
    39a2:	b7 1e       	adc	r11, r23
    39a4:	c8 1e       	adc	r12, r24
    39a6:	d9 1e       	adc	r13, r25
    39a8:	d6 01       	movw	r26, r12
    39aa:	c5 01       	movw	r24, r10
    39ac:	82 1b       	sub	r24, r18
    39ae:	93 0b       	sbc	r25, r19
    39b0:	a4 0b       	sbc	r26, r20
    39b2:	b5 0b       	sbc	r27, r21
    39b4:	89 8f       	std	Y+25, r24	; 0x19
    39b6:	9a 8f       	std	Y+26, r25	; 0x1a
    39b8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ba:	bc 8f       	std	Y+28, r27	; 0x1c
    39bc:	d1 01       	movw	r26, r2
    39be:	99 27       	eor	r25, r25
    39c0:	88 27       	eor	r24, r24
    39c2:	84 01       	movw	r16, r8
    39c4:	73 01       	movw	r14, r6
    39c6:	e8 2a       	or	r14, r24
    39c8:	f9 2a       	or	r15, r25
    39ca:	0a 2b       	or	r16, r26
    39cc:	1b 2b       	or	r17, r27
    39ce:	4f ef       	ldi	r20, 0xFF	; 255
    39d0:	a4 2e       	mov	r10, r20
    39d2:	4f ef       	ldi	r20, 0xFF	; 255
    39d4:	b4 2e       	mov	r11, r20
    39d6:	c1 2c       	mov	r12, r1
    39d8:	d1 2c       	mov	r13, r1
    39da:	ae 20       	and	r10, r14
    39dc:	bf 20       	and	r11, r15
    39de:	c0 22       	and	r12, r16
    39e0:	d1 22       	and	r13, r17
    39e2:	78 01       	movw	r14, r16
    39e4:	00 27       	eor	r16, r16
    39e6:	11 27       	eor	r17, r17
    39e8:	6d a0       	ldd	r6, Y+37	; 0x25
    39ea:	7e a0       	ldd	r7, Y+38	; 0x26
    39ec:	8f a0       	ldd	r8, Y+39	; 0x27
    39ee:	98 a4       	ldd	r9, Y+40	; 0x28
    39f0:	4f ef       	ldi	r20, 0xFF	; 255
    39f2:	5f ef       	ldi	r21, 0xFF	; 255
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	64 22       	and	r6, r20
    39fa:	75 22       	and	r7, r21
    39fc:	86 22       	and	r8, r22
    39fe:	97 22       	and	r9, r23
    3a00:	8d a1       	ldd	r24, Y+37	; 0x25
    3a02:	9e a1       	ldd	r25, Y+38	; 0x26
    3a04:	af a1       	ldd	r26, Y+39	; 0x27
    3a06:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a08:	bd 01       	movw	r22, r26
    3a0a:	88 27       	eor	r24, r24
    3a0c:	99 27       	eor	r25, r25
    3a0e:	65 96       	adiw	r28, 0x15	; 21
    3a10:	6c af       	std	Y+60, r22	; 0x3c
    3a12:	7d af       	std	Y+61, r23	; 0x3d
    3a14:	8e af       	std	Y+62, r24	; 0x3e
    3a16:	9f af       	std	Y+63, r25	; 0x3f
    3a18:	65 97       	sbiw	r28, 0x15	; 21
    3a1a:	c6 01       	movw	r24, r12
    3a1c:	b5 01       	movw	r22, r10
    3a1e:	a4 01       	movw	r20, r8
    3a20:	93 01       	movw	r18, r6
    3a22:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3a26:	61 96       	adiw	r28, 0x11	; 17
    3a28:	6c af       	std	Y+60, r22	; 0x3c
    3a2a:	7d af       	std	Y+61, r23	; 0x3d
    3a2c:	8e af       	std	Y+62, r24	; 0x3e
    3a2e:	9f af       	std	Y+63, r25	; 0x3f
    3a30:	61 97       	sbiw	r28, 0x11	; 17
    3a32:	c6 01       	movw	r24, r12
    3a34:	b5 01       	movw	r22, r10
    3a36:	65 96       	adiw	r28, 0x15	; 21
    3a38:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a40:	65 97       	sbiw	r28, 0x15	; 21
    3a42:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3a46:	1b 01       	movw	r2, r22
    3a48:	2c 01       	movw	r4, r24
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	b7 01       	movw	r22, r14
    3a4e:	a4 01       	movw	r20, r8
    3a50:	93 01       	movw	r18, r6
    3a52:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3a56:	5b 01       	movw	r10, r22
    3a58:	6c 01       	movw	r12, r24
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	65 96       	adiw	r28, 0x15	; 21
    3a60:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a62:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a64:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a66:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a68:	65 97       	sbiw	r28, 0x15	; 21
    3a6a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <__mulsi3>
    3a6e:	7b 01       	movw	r14, r22
    3a70:	8c 01       	movw	r16, r24
    3a72:	a6 01       	movw	r20, r12
    3a74:	95 01       	movw	r18, r10
    3a76:	22 0d       	add	r18, r2
    3a78:	33 1d       	adc	r19, r3
    3a7a:	44 1d       	adc	r20, r4
    3a7c:	55 1d       	adc	r21, r5
    3a7e:	61 96       	adiw	r28, 0x11	; 17
    3a80:	6c ac       	ldd	r6, Y+60	; 0x3c
    3a82:	7d ac       	ldd	r7, Y+61	; 0x3d
    3a84:	8e ac       	ldd	r8, Y+62	; 0x3e
    3a86:	9f ac       	ldd	r9, Y+63	; 0x3f
    3a88:	61 97       	sbiw	r28, 0x11	; 17
    3a8a:	c4 01       	movw	r24, r8
    3a8c:	aa 27       	eor	r26, r26
    3a8e:	bb 27       	eor	r27, r27
    3a90:	28 0f       	add	r18, r24
    3a92:	39 1f       	adc	r19, r25
    3a94:	4a 1f       	adc	r20, r26
    3a96:	5b 1f       	adc	r21, r27
    3a98:	2a 15       	cp	r18, r10
    3a9a:	3b 05       	cpc	r19, r11
    3a9c:	4c 05       	cpc	r20, r12
    3a9e:	5d 05       	cpc	r21, r13
    3aa0:	48 f4       	brcc	.+18     	; 0x3ab4 <__umoddi3+0xb70>
    3aa2:	81 2c       	mov	r8, r1
    3aa4:	91 2c       	mov	r9, r1
    3aa6:	e1 e0       	ldi	r30, 0x01	; 1
    3aa8:	ae 2e       	mov	r10, r30
    3aaa:	b1 2c       	mov	r11, r1
    3aac:	e8 0c       	add	r14, r8
    3aae:	f9 1c       	adc	r15, r9
    3ab0:	0a 1d       	adc	r16, r10
    3ab2:	1b 1d       	adc	r17, r11
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	bb 27       	eor	r27, r27
    3aba:	57 01       	movw	r10, r14
    3abc:	68 01       	movw	r12, r16
    3abe:	a8 0e       	add	r10, r24
    3ac0:	b9 1e       	adc	r11, r25
    3ac2:	ca 1e       	adc	r12, r26
    3ac4:	db 1e       	adc	r13, r27
    3ac6:	a9 01       	movw	r20, r18
    3ac8:	33 27       	eor	r19, r19
    3aca:	22 27       	eor	r18, r18
    3acc:	61 96       	adiw	r28, 0x11	; 17
    3ace:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ad6:	61 97       	sbiw	r28, 0x11	; 17
    3ad8:	a0 70       	andi	r26, 0x00	; 0
    3ada:	b0 70       	andi	r27, 0x00	; 0
    3adc:	28 0f       	add	r18, r24
    3ade:	39 1f       	adc	r19, r25
    3ae0:	4a 1f       	adc	r20, r26
    3ae2:	5b 1f       	adc	r21, r27
    3ae4:	e9 8c       	ldd	r14, Y+25	; 0x19
    3ae6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3ae8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3aea:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3aec:	ea 14       	cp	r14, r10
    3aee:	fb 04       	cpc	r15, r11
    3af0:	0c 05       	cpc	r16, r12
    3af2:	1d 05       	cpc	r17, r13
    3af4:	70 f0       	brcs	.+28     	; 0x3b12 <__umoddi3+0xbce>
    3af6:	ae 14       	cp	r10, r14
    3af8:	bf 04       	cpc	r11, r15
    3afa:	c0 06       	cpc	r12, r16
    3afc:	d1 06       	cpc	r13, r17
    3afe:	69 f5       	brne	.+90     	; 0x3b5a <__umoddi3+0xc16>
    3b00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b06:	98 a1       	ldd	r25, Y+32	; 0x20
    3b08:	62 17       	cp	r22, r18
    3b0a:	73 07       	cpc	r23, r19
    3b0c:	84 07       	cpc	r24, r20
    3b0e:	95 07       	cpc	r25, r21
    3b10:	20 f5       	brcc	.+72     	; 0x3b5a <__umoddi3+0xc16>
    3b12:	da 01       	movw	r26, r20
    3b14:	c9 01       	movw	r24, r18
    3b16:	6d a0       	ldd	r6, Y+37	; 0x25
    3b18:	7e a0       	ldd	r7, Y+38	; 0x26
    3b1a:	8f a0       	ldd	r8, Y+39	; 0x27
    3b1c:	98 a4       	ldd	r9, Y+40	; 0x28
    3b1e:	86 19       	sub	r24, r6
    3b20:	97 09       	sbc	r25, r7
    3b22:	a8 09       	sbc	r26, r8
    3b24:	b9 09       	sbc	r27, r9
    3b26:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b28:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b2a:	0b a5       	ldd	r16, Y+43	; 0x2b
    3b2c:	1c a5       	ldd	r17, Y+44	; 0x2c
    3b2e:	ae 18       	sub	r10, r14
    3b30:	bf 08       	sbc	r11, r15
    3b32:	c0 0a       	sbc	r12, r16
    3b34:	d1 0a       	sbc	r13, r17
    3b36:	ee 24       	eor	r14, r14
    3b38:	ff 24       	eor	r15, r15
    3b3a:	87 01       	movw	r16, r14
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	4a 07       	cpc	r20, r26
    3b42:	5b 07       	cpc	r21, r27
    3b44:	28 f4       	brcc	.+10     	; 0x3b50 <__umoddi3+0xc0c>
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	e2 2e       	mov	r14, r18
    3b4a:	f1 2c       	mov	r15, r1
    3b4c:	01 2d       	mov	r16, r1
    3b4e:	11 2d       	mov	r17, r1
    3b50:	ae 18       	sub	r10, r14
    3b52:	bf 08       	sbc	r11, r15
    3b54:	c0 0a       	sbc	r12, r16
    3b56:	d1 0a       	sbc	r13, r17
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <__umoddi3+0xc1a>
    3b5a:	da 01       	movw	r26, r20
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3b60:	7e 8c       	ldd	r7, Y+30	; 0x1e
    3b62:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3b64:	98 a0       	ldd	r9, Y+32	; 0x20
    3b66:	68 1a       	sub	r6, r24
    3b68:	79 0a       	sbc	r7, r25
    3b6a:	8a 0a       	sbc	r8, r26
    3b6c:	9b 0a       	sbc	r9, r27
    3b6e:	49 8d       	ldd	r20, Y+25	; 0x19
    3b70:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b72:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3b74:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3b76:	4a 19       	sub	r20, r10
    3b78:	5b 09       	sbc	r21, r11
    3b7a:	6c 09       	sbc	r22, r12
    3b7c:	7d 09       	sbc	r23, r13
    3b7e:	5a 01       	movw	r10, r20
    3b80:	6b 01       	movw	r12, r22
    3b82:	22 24       	eor	r2, r2
    3b84:	33 24       	eor	r3, r3
    3b86:	21 01       	movw	r4, r2
    3b88:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b8a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b90:	66 15       	cp	r22, r6
    3b92:	77 05       	cpc	r23, r7
    3b94:	88 05       	cpc	r24, r8
    3b96:	99 05       	cpc	r25, r9
    3b98:	28 f4       	brcc	.+10     	; 0x3ba4 <__umoddi3+0xc60>
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	28 2e       	mov	r2, r24
    3b9e:	31 2c       	mov	r3, r1
    3ba0:	41 2c       	mov	r4, r1
    3ba2:	51 2c       	mov	r5, r1
    3ba4:	86 01       	movw	r16, r12
    3ba6:	75 01       	movw	r14, r10
    3ba8:	e2 18       	sub	r14, r2
    3baa:	f3 08       	sbc	r15, r3
    3bac:	04 09       	sbc	r16, r4
    3bae:	15 09       	sbc	r17, r5
    3bb0:	a8 01       	movw	r20, r16
    3bb2:	97 01       	movw	r18, r14
    3bb4:	66 96       	adiw	r28, 0x16	; 22
    3bb6:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bb8:	66 97       	sbiw	r28, 0x16	; 22
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <__umoddi3+0xc80>
    3bbc:	22 0f       	add	r18, r18
    3bbe:	33 1f       	adc	r19, r19
    3bc0:	44 1f       	adc	r20, r20
    3bc2:	55 1f       	adc	r21, r21
    3bc4:	0a 94       	dec	r0
    3bc6:	d2 f7       	brpl	.-12     	; 0x3bbc <__umoddi3+0xc78>
    3bc8:	d4 01       	movw	r26, r8
    3bca:	c3 01       	movw	r24, r6
    3bcc:	67 96       	adiw	r28, 0x17	; 23
    3bce:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bd0:	67 97       	sbiw	r28, 0x17	; 23
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <__umoddi3+0xc98>
    3bd4:	b6 95       	lsr	r27
    3bd6:	a7 95       	ror	r26
    3bd8:	97 95       	ror	r25
    3bda:	87 95       	ror	r24
    3bdc:	0a 94       	dec	r0
    3bde:	d2 f7       	brpl	.-12     	; 0x3bd4 <__umoddi3+0xc90>
    3be0:	28 2b       	or	r18, r24
    3be2:	39 2b       	or	r19, r25
    3be4:	4a 2b       	or	r20, r26
    3be6:	5b 2b       	or	r21, r27
    3be8:	29 8b       	std	Y+17, r18	; 0x11
    3bea:	3a 8b       	std	Y+18, r19	; 0x12
    3bec:	4b 8b       	std	Y+19, r20	; 0x13
    3bee:	5c 8b       	std	Y+20, r21	; 0x14
    3bf0:	67 96       	adiw	r28, 0x17	; 23
    3bf2:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bf4:	67 97       	sbiw	r28, 0x17	; 23
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__umoddi3+0xcbc>
    3bf8:	16 95       	lsr	r17
    3bfa:	07 95       	ror	r16
    3bfc:	f7 94       	ror	r15
    3bfe:	e7 94       	ror	r14
    3c00:	0a 94       	dec	r0
    3c02:	d2 f7       	brpl	.-12     	; 0x3bf8 <__umoddi3+0xcb4>
    3c04:	ed 8a       	std	Y+21, r14	; 0x15
    3c06:	fe 8a       	std	Y+22, r15	; 0x16
    3c08:	0f 8b       	std	Y+23, r16	; 0x17
    3c0a:	18 8f       	std	Y+24, r17	; 0x18
    3c0c:	3a 89       	ldd	r19, Y+18	; 0x12
    3c0e:	4b 89       	ldd	r20, Y+19	; 0x13
    3c10:	5c 89       	ldd	r21, Y+20	; 0x14
    3c12:	6e 2d       	mov	r22, r14
    3c14:	7e 89       	ldd	r23, Y+22	; 0x16
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1a:	c5 5a       	subi	r28, 0xA5	; 165
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	e2 e1       	ldi	r30, 0x12	; 18
    3c20:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__epilogue_restores__>

00003c24 <FAN>:
		}
	}
}

void FAN(void *ptr)
{
    3c24:	1f 93       	push	r17
	static u8 Local_u8Temp2Received=0;

	while(1)
	{

		xSemaphoreTake(Fan_Semaphore,MAX_TIME);
    3c26:	80 91 c3 07 	lds	r24, 0x07C3
    3c2a:	90 91 c4 07 	lds	r25, 0x07C4
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	4f ef       	ldi	r20, 0xFF	; 255
    3c34:	5f ef       	ldi	r21, 0xFF	; 255
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>

		if(Global_u8Operation_Flag == HOME_ENTERED)
    3c3c:	10 91 db 01 	lds	r17, 0x01DB
    3c40:	11 30       	cpi	r17, 0x01	; 1
    3c42:	89 f7       	brne	.-30     	; 0x3c26 <FAN+0x2>
		{

			xQueueReceive(Temp_Queue,(void*)&Local_u8Received,MAX_TIME);
    3c44:	80 91 c1 07 	lds	r24, 0x07C1
    3c48:	90 91 c2 07 	lds	r25, 0x07C2
    3c4c:	61 ee       	ldi	r22, 0xE1	; 225
    3c4e:	71 e0       	ldi	r23, 0x01	; 1
    3c50:	4f ef       	ldi	r20, 0xFF	; 255
    3c52:	5f ef       	ldi	r21, 0xFF	; 255
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
			LCD_voidClearScreen();
    3c5a:	0e 94 34 2a 	call	0x5468	; 0x5468 <LCD_voidClearScreen>
			xSemaphoreTake(LCD_xMutex,MAX_TIME);
    3c5e:	80 91 c7 07 	lds	r24, 0x07C7
    3c62:	90 91 c8 07 	lds	r25, 0x07C8
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	70 e0       	ldi	r23, 0x00	; 0
    3c6a:	4f ef       	ldi	r20, 0xFF	; 255
    3c6c:	5f ef       	ldi	r21, 0xFF	; 255
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>

			if(Local_u8Received == 4 )
    3c74:	80 91 e1 01 	lds	r24, 0x01E1
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <FAN+0x5a>
    3c7c:	50 c0       	rjmp	.+160    	; 0x3d1e <FAN+0xfa>
			{
				if( Global_u8RepEnter1 == SINGLE_ENTER)
    3c7e:	80 91 d5 01 	lds	r24, 0x01D5
    3c82:	88 23       	and	r24, r24
    3c84:	09 f0       	breq	.+2      	; 0x3c88 <FAN+0x64>
    3c86:	9e c0       	rjmp	.+316    	; 0x3dc4 <FAN+0x1a0>
				{
					xQueueReceive(Temp_Queue,(void*)&Local_u8Temp1Received,MAX_TIME);
    3c88:	80 91 c1 07 	lds	r24, 0x07C1
    3c8c:	90 91 c2 07 	lds	r25, 0x07C2
    3c90:	60 ee       	ldi	r22, 0xE0	; 224
    3c92:	71 e0       	ldi	r23, 0x01	; 1
    3c94:	4f ef       	ldi	r20, 0xFF	; 255
    3c96:	5f ef       	ldi	r21, 0xFF	; 255
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>

					LCD_voidSetPosition(LCD_ROW0,LCD_COLUMN0);
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
					LCD_voidSendString((u8*)"Fan 1");
    3ca6:	80 e6       	ldi	r24, 0x60	; 96
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>

					if((Local_u8Temp1Received >= 14) && (Local_u8Temp1Received < 20) )
    3cae:	90 91 e0 01 	lds	r25, 0x01E0
    3cb2:	89 2f       	mov	r24, r25
    3cb4:	8e 50       	subi	r24, 0x0E	; 14
    3cb6:	86 30       	cpi	r24, 0x06	; 6
    3cb8:	50 f4       	brcc	.+20     	; 0x3cce <FAN+0xaa>
					{
						TIMER0_voidSetFastPWM(64);
    3cba:	80 e4       	ldi	r24, 0x40	; 64
    3cbc:	0e 94 b5 21 	call	0x436a	; 0x436a <TIMER0_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: LOW   ");
    3cc8:	86 e6       	ldi	r24, 0x66	; 102
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	23 c0       	rjmp	.+70     	; 0x3d14 <FAN+0xf0>
						Global_u8RepEnter1 = MULTIPLE_ENTER;
					}
					else if((Local_u8Temp1Received >= 20) && (Local_u8Temp1Received < 30) )
    3cce:	89 2f       	mov	r24, r25
    3cd0:	84 51       	subi	r24, 0x14	; 20
    3cd2:	8a 30       	cpi	r24, 0x0A	; 10
    3cd4:	50 f4       	brcc	.+20     	; 0x3cea <FAN+0xc6>
					{
						TIMER0_voidSetFastPWM(128);
    3cd6:	80 e8       	ldi	r24, 0x80	; 128
    3cd8:	0e 94 b5 21 	call	0x436a	; 0x436a <TIMER0_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: MEDIUM");
    3ce4:	84 e7       	ldi	r24, 0x74	; 116
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	15 c0       	rjmp	.+42     	; 0x3d14 <FAN+0xf0>
						Global_u8RepEnter1 = MULTIPLE_ENTER;
					}
					else if((Local_u8Temp1Received >= 30)  )
    3cea:	9e 31       	cpi	r25, 0x1E	; 30
    3cec:	50 f0       	brcs	.+20     	; 0x3d02 <FAN+0xde>
					{
						TIMER0_voidSetFastPWM(255);
    3cee:	8f ef       	ldi	r24, 0xFF	; 255
    3cf0:	0e 94 b5 21 	call	0x436a	; 0x436a <TIMER0_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: HIGH  ");
    3cfc:	82 e8       	ldi	r24, 0x82	; 130
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	09 c0       	rjmp	.+18     	; 0x3d14 <FAN+0xf0>
						Global_u8RepEnter1 = MULTIPLE_ENTER;

					}
					else
					{
						TIMER0_voidSetFastPWM(0);
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	0e 94 b5 21 	call	0x436a	; 0x436a <TIMER0_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Stopped      ");
    3d10:	80 e9       	ldi	r24, 0x90	; 144
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
						Global_u8RepEnter1 = MULTIPLE_ENTER;
    3d18:	10 93 d5 01 	sts	0x01D5, r17
    3d1c:	53 c0       	rjmp	.+166    	; 0x3dc4 <FAN+0x1a0>
					}
				}

			}
			else if(Local_u8Received == 5 )
    3d1e:	85 30       	cpi	r24, 0x05	; 5
    3d20:	09 f0       	breq	.+2      	; 0x3d24 <FAN+0x100>
    3d22:	50 c0       	rjmp	.+160    	; 0x3dc4 <FAN+0x1a0>
			{
				if(Global_u8RepEnter2 == SINGLE_ENTER)
    3d24:	80 91 d6 01 	lds	r24, 0x01D6
    3d28:	88 23       	and	r24, r24
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <FAN+0x10a>
    3d2c:	4b c0       	rjmp	.+150    	; 0x3dc4 <FAN+0x1a0>
				{
					xQueueReceive(Temp_Queue,(void*)&Local_u8Temp2Received,MAX_TIME);
    3d2e:	80 91 c1 07 	lds	r24, 0x07C1
    3d32:	90 91 c2 07 	lds	r25, 0x07C2
    3d36:	6f ed       	ldi	r22, 0xDF	; 223
    3d38:	71 e0       	ldi	r23, 0x01	; 1
    3d3a:	4f ef       	ldi	r20, 0xFF	; 255
    3d3c:	5f ef       	ldi	r21, 0xFF	; 255
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
					LCD_voidSetPosition(LCD_ROW0,LCD_COLUMN0);
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	60 e0       	ldi	r22, 0x00	; 0
    3d48:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
					LCD_voidSendString((u8*)"Fan 2");
    3d4c:	8e e9       	ldi	r24, 0x9E	; 158
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>

					if((Local_u8Temp2Received >= 14) && (Local_u8Temp2Received < 20) )
    3d54:	90 91 df 01 	lds	r25, 0x01DF
    3d58:	89 2f       	mov	r24, r25
    3d5a:	8e 50       	subi	r24, 0x0E	; 14
    3d5c:	86 30       	cpi	r24, 0x06	; 6
    3d5e:	50 f4       	brcc	.+20     	; 0x3d74 <FAN+0x150>
					{
						TIMER2_voidSetFastPWM(64);
    3d60:	80 e4       	ldi	r24, 0x40	; 64
    3d62:	0e 94 24 22 	call	0x4448	; 0x4448 <TIMER2_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	60 e0       	ldi	r22, 0x00	; 0
    3d6a:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: LOW  ");
    3d6e:	84 ea       	ldi	r24, 0xA4	; 164
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	24 c0       	rjmp	.+72     	; 0x3dbc <FAN+0x198>
						Global_u8RepEnter2 = MULTIPLE_ENTER;
					}
					else if((Local_u8Temp2Received >= 20) && (Local_u8Temp2Received < 30) )
    3d74:	89 2f       	mov	r24, r25
    3d76:	84 51       	subi	r24, 0x14	; 20
    3d78:	8a 30       	cpi	r24, 0x0A	; 10
    3d7a:	50 f4       	brcc	.+20     	; 0x3d90 <FAN+0x16c>
					{
						TIMER2_voidSetFastPWM(128);
    3d7c:	80 e8       	ldi	r24, 0x80	; 128
    3d7e:	0e 94 24 22 	call	0x4448	; 0x4448 <TIMER2_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: MEDIUM");
    3d8a:	84 e7       	ldi	r24, 0x74	; 116
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	16 c0       	rjmp	.+44     	; 0x3dbc <FAN+0x198>
						Global_u8RepEnter2 = MULTIPLE_ENTER;
					}
					else if((Local_u8Temp2Received >= 30) && (Local_u8Temp2Received < 50) )
    3d90:	9e 51       	subi	r25, 0x1E	; 30
    3d92:	94 31       	cpi	r25, 0x14	; 20
    3d94:	50 f4       	brcc	.+20     	; 0x3daa <FAN+0x186>
					{
						TIMER2_voidSetFastPWM(255);
    3d96:	8f ef       	ldi	r24, 0xFF	; 255
    3d98:	0e 94 24 22 	call	0x4448	; 0x4448 <TIMER2_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Speed: HIGH  ");
    3da4:	82 e8       	ldi	r24, 0x82	; 130
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	09 c0       	rjmp	.+18     	; 0x3dbc <FAN+0x198>

						Global_u8RepEnter2 = MULTIPLE_ENTER;
					}
					else
					{
						TIMER2_voidSetFastPWM(0);
    3daa:	80 e0       	ldi	r24, 0x00	; 0
    3dac:	0e 94 24 22 	call	0x4448	; 0x4448 <TIMER2_voidSetFastPWM>
						LCD_voidSetPosition(LCD_ROW1,LCD_COLUMN0);
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
						LCD_voidSendString((u8*)"Stopped      ");
    3db8:	80 e9       	ldi	r24, 0x90	; 144
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
						Global_u8RepEnter2 = MULTIPLE_ENTER;
    3dc0:	10 93 d6 01 	sts	0x01D6, r17
			}
			else
			{
				/*DO NOTHING*/
		}
		xSemaphoreGive(LCD_xMutex);
    3dc4:	80 91 c7 07 	lds	r24, 0x07C7
    3dc8:	90 91 c8 07 	lds	r25, 0x07C8
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	70 e0       	ldi	r23, 0x00	; 0
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
    3dda:	25 cf       	rjmp	.-438    	; 0x3c26 <FAN+0x2>

00003ddc <UART_TASK>:
void UART_TASK(void *ptr)
{

	while(1)
	{
		USART_u8RecevieData(&Global_u8CommunicationFlag);
    3ddc:	8c ed       	ldi	r24, 0xDC	; 220
    3dde:	91 e0       	ldi	r25, 0x01	; 1
    3de0:	0e 94 94 20 	call	0x4128	; 0x4128 <USART_u8RecevieData>

		if(Global_u8CommunicationFlag == THIEF_ENTER)
    3de4:	80 91 dc 01 	lds	r24, 0x01DC
    3de8:	82 30       	cpi	r24, 0x02	; 2
    3dea:	79 f4       	brne	.+30     	; 0x3e0a <UART_TASK+0x2e>
		{
			Global_u8Operation_Flag = HOME_UNENTERED;
    3dec:	80 93 db 01 	sts	0x01DB, r24
			DIO_u8TogglePinValue(DIO_PORTA,BUZZER_PIN);
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	0e 94 25 28 	call	0x504a	; 0x504a <DIO_u8TogglePinValue>
			DIO_u8TogglePinValue(DIO_PORTA,ALERT_LED_PIN);
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	0e 94 25 28 	call	0x504a	; 0x504a <DIO_u8TogglePinValue>
			vTaskDelay(500);
    3e00:	84 ef       	ldi	r24, 0xF4	; 244
    3e02:	91 e0       	ldi	r25, 0x01	; 1
    3e04:	0e 94 ae 34 	call	0x695c	; 0x695c <vTaskDelay>
    3e08:	e9 cf       	rjmp	.-46     	; 0x3ddc <UART_TASK>
		}
		else if(Global_u8CommunicationFlag == SAFE_ENTER)
    3e0a:	81 30       	cpi	r24, 0x01	; 1
    3e0c:	39 f4       	brne	.+14     	; 0x3e1c <UART_TASK+0x40>
		{
			Global_u8Operation_Flag = HOME_ENTERED;
    3e0e:	80 93 db 01 	sts	0x01DB, r24
			vTaskDelete(NULL);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	0e 94 11 35 	call	0x6a22	; 0x6a22 <vTaskDelete>
    3e1a:	e0 cf       	rjmp	.-64     	; 0x3ddc <UART_TASK>
		}
		else
		{
			Global_u8Operation_Flag = HOME_EMPTY;
    3e1c:	10 92 db 01 	sts	0x01DB, r1
    3e20:	dd cf       	rjmp	.-70     	; 0x3ddc <UART_TASK>

00003e22 <ROOM_2>:
	}
}

void ROOM_2(void *ptr)
{
	xSemaphoreTake(BTN2_Semaphore,0);
    3e22:	80 91 c5 07 	lds	r24, 0x07C5
    3e26:	90 91 c6 07 	lds	r25, 0x07C6
    3e2a:	60 e0       	ldi	r22, 0x00	; 0
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	40 e0       	ldi	r20, 0x00	; 0
    3e30:	50 e0       	ldi	r21, 0x00	; 0
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
	static u8 Local_u8TempValue2 = 0;
	xSemaphoreGive(LCD_xMutex);
    3e38:	80 91 c7 07 	lds	r24, 0x07C7
    3e3c:	90 91 c8 07 	lds	r25, 0x07C8
    3e40:	60 e0       	ldi	r22, 0x00	; 0
    3e42:	70 e0       	ldi	r23, 0x00	; 0
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>

	while(1)
	{

		xSemaphoreTake(BTN2_Semaphore,MAX_TIME);
    3e4e:	80 91 c5 07 	lds	r24, 0x07C5
    3e52:	90 91 c6 07 	lds	r25, 0x07C6
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	4f ef       	ldi	r20, 0xFF	; 255
    3e5c:	5f ef       	ldi	r21, 0xFF	; 255
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
		SPI_u8Tranceive(BUTTON2_PRESSED,&Global_u8DummyReceived);
    3e64:	82 e0       	ldi	r24, 0x02	; 2
    3e66:	6a ed       	ldi	r22, 0xDA	; 218
    3e68:	71 e0       	ldi	r23, 0x01	; 1
    3e6a:	0e 94 14 24 	call	0x4828	; 0x4828 <SPI_u8Tranceive>

		if(Global_u8Operation_Flag == HOME_ENTERED)
    3e6e:	80 91 db 01 	lds	r24, 0x01DB
    3e72:	81 30       	cpi	r24, 0x01	; 1
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <ROOM_2+0x56>
    3e76:	68 c0       	rjmp	.+208    	; 0x3f48 <ROOM_2+0x126>
		{
			xSemaphoreTake(LCD_xMutex,MAX_TIME);
    3e78:	80 91 c7 07 	lds	r24, 0x07C7
    3e7c:	90 91 c8 07 	lds	r25, 0x07C8
    3e80:	60 e0       	ldi	r22, 0x00	; 0
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	4f ef       	ldi	r20, 0xFF	; 255
    3e86:	5f ef       	ldi	r21, 0xFF	; 255
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
			LCD_voidClearScreen();
    3e8e:	0e 94 34 2a 	call	0x5468	; 0x5468 <LCD_voidClearScreen>
			LCD_voidSetPosition(0,0);
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"ROOM 2");
    3e9a:	81 eb       	ldi	r24, 0xB1	; 177
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
			LCD_voidSetPosition(1,0);
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	60 e0       	ldi	r22, 0x00	; 0
    3ea6:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"Temperature: ");
    3eaa:	88 eb       	ldi	r24, 0xB8	; 184
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
			LCD_voidSetPosition(1,12);
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	6c e0       	ldi	r22, 0x0C	; 12
    3eb6:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>

			SPI_u8Tranceive(Global_u8DummySent,&Local_u8TempValue2);
    3eba:	80 91 d4 01 	lds	r24, 0x01D4
    3ebe:	62 ee       	ldi	r22, 0xE2	; 226
    3ec0:	71 e0       	ldi	r23, 0x01	; 1
    3ec2:	0e 94 14 24 	call	0x4828	; 0x4828 <SPI_u8Tranceive>

			xQueueSend(Temp_Queue,(void*) (5),0);
    3ec6:	80 91 c1 07 	lds	r24, 0x07C1
    3eca:	90 91 c2 07 	lds	r25, 0x07C2
    3ece:	65 e0       	ldi	r22, 0x05	; 5
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	40 e0       	ldi	r20, 0x00	; 0
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
			xQueueSend(Temp_Queue,(void*)&Local_u8TempValue2,0);
    3edc:	80 91 c1 07 	lds	r24, 0x07C1
    3ee0:	90 91 c2 07 	lds	r25, 0x07C2
    3ee4:	62 ee       	ldi	r22, 0xE2	; 226
    3ee6:	71 e0       	ldi	r23, 0x01	; 1
    3ee8:	40 e0       	ldi	r20, 0x00	; 0
    3eea:	50 e0       	ldi	r21, 0x00	; 0
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>




			if(Local_u8TempValue2<10)
    3ef2:	80 91 e2 01 	lds	r24, 0x01E2
    3ef6:	8a 30       	cpi	r24, 0x0A	; 10
    3ef8:	48 f4       	brcc	.+18     	; 0x3f0c <ROOM_2+0xea>
			{
				LCD_voidSetPosition(1,12);
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	6c e0       	ldi	r22, 0x0C	; 12
    3efe:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
				LCD_voidSendString((u8*)" ");
    3f02:	86 ec       	ldi	r24, 0xC6	; 198
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
    3f0a:	04 c0       	rjmp	.+8      	; 0x3f14 <ROOM_2+0xf2>
				LCD_voidSendNumber(Local_u8TempValue2);
			}

			else
			{
				LCD_voidSetPosition(1,12);
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	6c e0       	ldi	r22, 0x0C	; 12
    3f10:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
				LCD_voidSendNumber(Local_u8TempValue2);
    3f14:	20 91 e2 01 	lds	r18, 0x01E2
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	50 e0       	ldi	r21, 0x00	; 0
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 7f 28 	call	0x50fe	; 0x50fe <LCD_voidSendNumber>
			}

			xSemaphoreGive(LCD_xMutex);
    3f2a:	80 91 c7 07 	lds	r24, 0x07C7
    3f2e:	90 91 c8 07 	lds	r25, 0x07C8
    3f32:	60 e0       	ldi	r22, 0x00	; 0
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
			vTaskDelay(500);
    3f40:	84 ef       	ldi	r24, 0xF4	; 244
    3f42:	91 e0       	ldi	r25, 0x01	; 1
    3f44:	0e 94 ae 34 	call	0x695c	; 0x695c <vTaskDelay>
		}
		xSemaphoreGive(Fan_Semaphore);
    3f48:	80 91 c3 07 	lds	r24, 0x07C3
    3f4c:	90 91 c4 07 	lds	r25, 0x07C4
    3f50:	77 cf       	rjmp	.-274    	; 0x3e40 <ROOM_2+0x1e>

00003f52 <ROOM_1>:
}


void ROOM_1(void *ptr)
{
	xSemaphoreTake(BTN1_Semaphore,0);
    3f52:	80 91 c9 07 	lds	r24, 0x07C9
    3f56:	90 91 ca 07 	lds	r25, 0x07CA
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	70 e0       	ldi	r23, 0x00	; 0
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
	static u8 Local_u8TempValue1 = 0;
	xSemaphoreGive(LCD_xMutex);
    3f68:	80 91 c7 07 	lds	r24, 0x07C7
    3f6c:	90 91 c8 07 	lds	r25, 0x07C8
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	40 e0       	ldi	r20, 0x00	; 0
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>

	while(1)
	{
		xSemaphoreTake(BTN1_Semaphore,MAX_TIME);
    3f7e:	80 91 c9 07 	lds	r24, 0x07C9
    3f82:	90 91 ca 07 	lds	r25, 0x07CA
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	4f ef       	ldi	r20, 0xFF	; 255
    3f8c:	5f ef       	ldi	r21, 0xFF	; 255
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>
		SPI_u8Tranceive(BUTTON1_PRESSED,&Global_u8DummyReceived);
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	6a ed       	ldi	r22, 0xDA	; 218
    3f98:	71 e0       	ldi	r23, 0x01	; 1
    3f9a:	0e 94 14 24 	call	0x4828	; 0x4828 <SPI_u8Tranceive>

		if(Global_u8Operation_Flag == HOME_ENTERED)
    3f9e:	80 91 db 01 	lds	r24, 0x01DB
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <ROOM_1+0x56>
    3fa6:	68 c0       	rjmp	.+208    	; 0x4078 <ROOM_1+0x126>
		{
			xSemaphoreTake(LCD_xMutex,0xff);
    3fa8:	80 91 c7 07 	lds	r24, 0x07C7
    3fac:	90 91 c8 07 	lds	r25, 0x07C8
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	4f ef       	ldi	r20, 0xFF	; 255
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <xQueueGenericReceive>

			LCD_voidClearScreen();
    3fbe:	0e 94 34 2a 	call	0x5468	; 0x5468 <LCD_voidClearScreen>
			LCD_voidSetPosition(0,0);
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"ROOM 1");
    3fca:	88 ec       	ldi	r24, 0xC8	; 200
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
			LCD_voidSetPosition(1,0);
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"Temperature: ");
    3fda:	88 eb       	ldi	r24, 0xB8	; 184
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
			LCD_voidSetPosition(1,12);
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	6c e0       	ldi	r22, 0x0C	; 12
    3fe6:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>

			SPI_u8Tranceive(Global_u8DummySent,&Local_u8TempValue1);
    3fea:	80 91 d4 01 	lds	r24, 0x01D4
    3fee:	63 ee       	ldi	r22, 0xE3	; 227
    3ff0:	71 e0       	ldi	r23, 0x01	; 1
    3ff2:	0e 94 14 24 	call	0x4828	; 0x4828 <SPI_u8Tranceive>

			xQueueSend(Temp_Queue,(void*) (4),0);
    3ff6:	80 91 c1 07 	lds	r24, 0x07C1
    3ffa:	90 91 c2 07 	lds	r25, 0x07C2
    3ffe:	64 e0       	ldi	r22, 0x04	; 4
    4000:	70 e0       	ldi	r23, 0x00	; 0
    4002:	40 e0       	ldi	r20, 0x00	; 0
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
			xQueueSend(Temp_Queue,(void*)&Local_u8TempValue1,0);
    400c:	80 91 c1 07 	lds	r24, 0x07C1
    4010:	90 91 c2 07 	lds	r25, 0x07C2
    4014:	63 ee       	ldi	r22, 0xE3	; 227
    4016:	71 e0       	ldi	r23, 0x01	; 1
    4018:	40 e0       	ldi	r20, 0x00	; 0
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>

			if(Local_u8TempValue1<10)
    4022:	80 91 e3 01 	lds	r24, 0x01E3
    4026:	8a 30       	cpi	r24, 0x0A	; 10
    4028:	48 f4       	brcc	.+18     	; 0x403c <ROOM_1+0xea>
			{
				LCD_voidSetPosition(1,12);
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	6c e0       	ldi	r22, 0x0C	; 12
    402e:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
				LCD_voidSendString((u8*)" ");
    4032:	86 ec       	ldi	r24, 0xC6	; 198
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 01 2a 	call	0x5402	; 0x5402 <LCD_voidSendString>
    403a:	04 c0       	rjmp	.+8      	; 0x4044 <ROOM_1+0xf2>
				LCD_voidSendNumber(Local_u8TempValue1);
			}

			else
			{
				LCD_voidSetPosition(1,12);
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	6c e0       	ldi	r22, 0x0C	; 12
    4040:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>
				LCD_voidSendNumber(Local_u8TempValue1);
    4044:	20 91 e3 01 	lds	r18, 0x01E3
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e0       	ldi	r20, 0x00	; 0
    404c:	50 e0       	ldi	r21, 0x00	; 0
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	70 e0       	ldi	r23, 0x00	; 0
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 7f 28 	call	0x50fe	; 0x50fe <LCD_voidSendNumber>
			}


			xSemaphoreGive(LCD_xMutex);
    405a:	80 91 c7 07 	lds	r24, 0x07C7
    405e:	90 91 c8 07 	lds	r25, 0x07C8
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	70 e0       	ldi	r23, 0x00	; 0
    4066:	40 e0       	ldi	r20, 0x00	; 0
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
			vTaskDelay(500);
    4070:	84 ef       	ldi	r24, 0xF4	; 244
    4072:	91 e0       	ldi	r25, 0x01	; 1
    4074:	0e 94 ae 34 	call	0x695c	; 0x695c <vTaskDelay>
		}
		xSemaphoreGive(Fan_Semaphore);
    4078:	80 91 c3 07 	lds	r24, 0x07C3
    407c:	90 91 c4 07 	lds	r25, 0x07C4
    4080:	77 cf       	rjmp	.-274    	; 0x3f70 <ROOM_1+0x1e>

00004082 <Button_2>:
	if(pxHigherPriorityTaskWoken==pdTRUE)
		taskYIELD();
}
void Button_2(void)
{
	Global_u8RepEnter2 = SINGLE_ENTER;
    4082:	10 92 d6 01 	sts	0x01D6, r1
	xSemaphoreGiveFromISR(BTN2_Semaphore,pxHigherPriorityTaskWoken2);
    4086:	40 91 de 01 	lds	r20, 0x01DE
    408a:	80 91 c5 07 	lds	r24, 0x07C5
    408e:	90 91 c6 07 	lds	r25, 0x07C6
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	50 e0       	ldi	r21, 0x00	; 0
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <xQueueGenericSendFromISR>
	if(pxHigherPriorityTaskWoken==pdTRUE)
    409e:	80 91 dd 01 	lds	r24, 0x01DD
    40a2:	81 30       	cpi	r24, 0x01	; 1
    40a4:	11 f4       	brne	.+4      	; 0x40aa <Button_2+0x28>
		taskYIELD();
    40a6:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    40aa:	08 95       	ret

000040ac <Button_1>:

extern xQueueHandle Temp_Queue;

void Button_1(void)
{
	Global_u8RepEnter1 = SINGLE_ENTER;
    40ac:	10 92 d5 01 	sts	0x01D5, r1
	xSemaphoreGiveFromISR(BTN1_Semaphore,pxHigherPriorityTaskWoken);
    40b0:	40 91 dd 01 	lds	r20, 0x01DD
    40b4:	80 91 c9 07 	lds	r24, 0x07C9
    40b8:	90 91 ca 07 	lds	r25, 0x07CA
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	70 e0       	ldi	r23, 0x00	; 0
    40c0:	50 e0       	ldi	r21, 0x00	; 0
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <xQueueGenericSendFromISR>
	if(pxHigherPriorityTaskWoken==pdTRUE)
    40c8:	80 91 dd 01 	lds	r24, 0x01DD
    40cc:	81 30       	cpi	r24, 0x01	; 1
    40ce:	11 f4       	brne	.+4      	; 0x40d4 <Button_1+0x28>
		taskYIELD();
    40d0:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    40d4:	08 95       	ret

000040d6 <USART_voidInit>:
	/* Calculate the baud rate from the equation*/
	u16 Local_u16UBR= (u16)(SYSTEM_FREQUENCY / (16*USART_BAUD_RATE) - 1);

	/* Set Baud Rate */
	/* Write in UBRRH then UBRRL */
	UBRRH = (u8)(Local_u16UBR>>8);
    40d6:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)(Local_u16UBR);
    40d8:	83 e3       	ldi	r24, 0x33	; 51
    40da:	89 b9       	out	0x09, r24	; 9

	/************* Check 3 Modes ***************/
	#if ( (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1))
		CLR_BIT(UCSRA,UCSRA_U2X);
    40dc:	59 98       	cbi	0x0b, 1	; 11
	#endif


	/* Multi_processor Mode */
	#if USART_MPCM	== DISABLE
			CLR_BIT(UCSRA,UCSRA_MPCM);
    40de:	58 98       	cbi	0x0b, 0	; 11

	/*Set Data Size*/
	#if	UART_DATA_SIZE == DATA_SIZE_5_BIT
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
			CLR_BIT(UCSRB,UCSRB_UCSZ2);
    40e0:	52 98       	cbi	0x0a, 2	; 10
	#else
		#error "WRONG USART_CLOCK_POLARITY configuration parameters"
	#endif

	/* Store the local variable in UCSRC Register*/
	UCSRC = Local_u8UCSRC;
    40e2:	10 bc       	out	0x20, r1	; 32

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXCIE);
	#elif USART_TX_COMPLETE_INTERRUPT == ENABLE
			SET_BIT(UCSRB,UCSRB_TXCIE);
    40e4:	56 9a       	sbi	0x0a, 6	; 10
	#else
		#error "WRONG USART_TX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    40e6:	57 98       	cbi	0x0a, 7	; 10
	#else
		#error "WRONG USART_RX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    40e8:	55 98       	cbi	0x0a, 5	; 10
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXEN);
	#elif USART_RECEIVER_ENABLE == ENABLE
			SET_BIT(UCSRB,UCSRB_RXEN);
    40ea:	54 9a       	sbi	0x0a, 4	; 10
	#else
		#error "WRONG USART_RECEIVER_ENABLE configuration parameters"
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXEN);
    40ec:	53 98       	cbi	0x0a, 3	; 10
			SET_BIT(UCSRB,UCSRB_TXEN);
	#else
		#error "WRONG USART_TRANSMITTER_ENABLE configuration parameters"
	#endif

}
    40ee:	08 95       	ret

000040f0 <USART_u8SendData>:

u8 USART_u8SendData(u8 copy_u8Data)
{
    40f0:	28 2f       	mov	r18, r24
	u8 Local_u8ErrorState = E_OK;
	u32 Local_u32TimeoutCounter = 0;

	if(USART_u8State == IDLE )
    40f2:	80 91 e6 01 	lds	r24, 0x01E6
    40f6:	88 23       	and	r24, r24
    40f8:	11 f0       	breq	.+4      	; 0x40fe <USART_u8SendData+0xe>
    40fa:	84 e0       	ldi	r24, 0x04	; 4
    40fc:	08 95       	ret
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	07 c0       	rjmp	.+14     	; 0x4112 <USART_u8SendData+0x22>
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
		{
			Local_u32TimeoutCounter++;
    4104:	01 96       	adiw	r24, 0x01	; 1

	if(USART_u8State == IDLE )
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
    4106:	37 e2       	ldi	r19, 0x27	; 39
    4108:	80 31       	cpi	r24, 0x10	; 16
    410a:	93 07       	cpc	r25, r19
    410c:	11 f4       	brne	.+4      	; 0x4112 <USART_u8SendData+0x22>
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	06 c0       	rjmp	.+12     	; 0x411e <USART_u8SendData+0x2e>
    4112:	5d 9b       	sbis	0x0b, 5	; 11
    4114:	f7 cf       	rjmp	.-18     	; 0x4104 <USART_u8SendData+0x14>
    4116:	06 c0       	rjmp	.+12     	; 0x4124 <USART_u8SendData+0x34>
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
			while(GET_BIT(UCSRA,UCSRA_TXC) == 0);
    4118:	5e 9b       	sbis	0x0b, 6	; 11
    411a:	fe cf       	rjmp	.-4      	; 0x4118 <USART_u8SendData+0x28>
    411c:	80 e0       	ldi	r24, 0x00	; 0
		}

		USART_u8State = IDLE;
    411e:	10 92 e6 01 	sts	0x01E6, r1
		Local_u8ErrorState = E_NOK_BUSY;
	}

	return Local_u8ErrorState;

}
    4122:	08 95       	ret
		{
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
    4124:	2c b9       	out	0x0c, r18	; 12
    4126:	f8 cf       	rjmp	.-16     	; 0x4118 <USART_u8SendData+0x28>

00004128 <USART_u8RecevieData>:
	return Local_u8ErrorState;

}

u8 USART_u8RecevieData(u8 * Copy_u8ReceviedData)
{
    4128:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK;
		u32 Local_u32TimeoutCounter = 0;

		if(USART_u8State == IDLE )
    412a:	80 91 e6 01 	lds	r24, 0x01E6
    412e:	88 23       	and	r24, r24
    4130:	11 f0       	breq	.+4      	; 0x4136 <USART_u8RecevieData+0xe>
    4132:	84 e0       	ldi	r24, 0x04	; 4
    4134:	08 95       	ret
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	05 c0       	rjmp	.+10     	; 0x4146 <USART_u8RecevieData+0x1e>
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
			{
				Local_u32TimeoutCounter++;
    413c:	01 96       	adiw	r24, 0x01	; 1

		if(USART_u8State == IDLE )
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
    413e:	27 e2       	ldi	r18, 0x27	; 39
    4140:	80 31       	cpi	r24, 0x10	; 16
    4142:	92 07       	cpc	r25, r18
    4144:	19 f0       	breq	.+6      	; 0x414c <USART_u8RecevieData+0x24>
    4146:	5f 9b       	sbis	0x0b, 7	; 11
    4148:	f9 cf       	rjmp	.-14     	; 0x413c <USART_u8RecevieData+0x14>
    414a:	04 c0       	rjmp	.+8      	; 0x4154 <USART_u8RecevieData+0x2c>
    414c:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				*Copy_u8ReceviedData = UDR;
			}

			USART_u8State = IDLE;
    414e:	10 92 e6 01 	sts	0x01E6, r1
			Local_u8ErrorState = E_NOK_BUSY;
		}

		return Local_u8ErrorState;

}
    4152:	08 95       	ret
			{
				Local_u8ErrorState= E_NOK;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
    4154:	8c b1       	in	r24, 0x0c	; 12
    4156:	80 83       	st	Z, r24
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	f9 cf       	rjmp	.-14     	; 0x414e <USART_u8RecevieData+0x26>

0000415c <USART_u8SendStringSynch>:

		return Local_u8ErrorState;

}
u8 USART_u8SendStringSynch(const u8 * Copy_pchString)
{
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	11 f4       	brne	.+4      	; 0x4168 <USART_u8SendStringSynch+0xc>
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	0a c0       	rjmp	.+20     	; 0x417c <USART_u8SendStringSynch+0x20>
    4168:	ec 01       	movw	r28, r24
    416a:	05 c0       	rjmp	.+10     	; 0x4176 <USART_u8SendStringSynch+0x1a>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    416c:	0e 94 78 20 	call	0x40f0	; 0x40f0 <USART_u8SendData>
    4170:	21 96       	adiw	r28, 0x01	; 1
			Local_u32Index++ ;
			if (Local_u8ErrorState != E_OK)
    4172:	88 23       	and	r24, r24
    4174:	19 f4       	brne	.+6      	; 0x417c <USART_u8SendStringSynch+0x20>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    4176:	88 81       	ld	r24, Y
    4178:	88 23       	and	r24, r24
    417a:	c1 f7       	brne	.-16     	; 0x416c <USART_u8SendStringSynch+0x10>
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    417c:	df 91       	pop	r29
    417e:	cf 91       	pop	r28
    4180:	08 95       	ret

00004182 <USART_u8SendStringAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendStringAsynch(const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    4182:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    4184:	80 91 e6 01 	lds	r24, 0x01E6
    4188:	88 23       	and	r24, r24
    418a:	11 f0       	breq	.+4      	; 0x4190 <USART_u8SendStringAsynch+0xe>
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4190:	30 97       	sbiw	r30, 0x00	; 0
    4192:	a9 f0       	breq	.+42     	; 0x41be <USART_u8SendStringAsynch+0x3c>
    4194:	61 15       	cp	r22, r1
    4196:	71 05       	cpc	r23, r1
    4198:	91 f0       	breq	.+36     	; 0x41be <USART_u8SendStringAsynch+0x3c>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	80 93 e6 01 	sts	0x01E6, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString ;
    41a0:	f0 93 e5 01 	sts	0x01E5, r31
    41a4:	e0 93 e4 01 	sts	0x01E4, r30
			USART_pvNotificationFunc = NotificationFunc ;
    41a8:	70 93 e8 01 	sts	0x01E8, r23
    41ac:	60 93 e7 01 	sts	0x01E7, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    41b0:	10 92 ec 01 	sts	0x01EC, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index] ;
    41b4:	80 81       	ld	r24, Z
    41b6:	8c b9       	out	0x0c, r24	; 12

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    41b8:	56 9a       	sbi	0x0a, 6	; 10
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    41be:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    41c0:	08 95       	ret

000041c2 <USART_u8ReceiveBufferSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferSynch(u8 * Copy_pchString , u32 Copy_u32BufferSize)
{
    41c2:	ef 92       	push	r14
    41c4:	ff 92       	push	r15
    41c6:	0f 93       	push	r16
    41c8:	1f 93       	push	r17
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	8c 01       	movw	r16, r24
    41d0:	7b 01       	movw	r14, r22
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	11 f4       	brne	.+4      	; 0x41da <USART_u8ReceiveBufferSynch+0x18>
    41d6:	82 e0       	ldi	r24, 0x02	; 2
    41d8:	0f c0       	rjmp	.+30     	; 0x41f8 <USART_u8ReceiveBufferSynch+0x36>
    41da:	c0 e0       	ldi	r28, 0x00	; 0
    41dc:	d0 e0       	ldi	r29, 0x00	; 0
    41de:	08 c0       	rjmp	.+16     	; 0x41f0 <USART_u8ReceiveBufferSynch+0x2e>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    41e0:	c8 01       	movw	r24, r16
    41e2:	8c 0f       	add	r24, r28
    41e4:	9d 1f       	adc	r25, r29
    41e6:	0e 94 94 20 	call	0x4128	; 0x4128 <USART_u8RecevieData>
			Local_u32Index++ ;

			if (Local_u8ErrorState != E_OK)
    41ea:	88 23       	and	r24, r24
    41ec:	29 f4       	brne	.+10     	; 0x41f8 <USART_u8ReceiveBufferSynch+0x36>
	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
			Local_u32Index++ ;
    41ee:	21 96       	adiw	r28, 0x01	; 1

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    41f0:	ce 15       	cp	r28, r14
    41f2:	df 05       	cpc	r29, r15
    41f4:	a8 f3       	brcs	.-22     	; 0x41e0 <USART_u8ReceiveBufferSynch+0x1e>
    41f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	ff 90       	pop	r15
    4202:	ef 90       	pop	r14
    4204:	08 95       	ret

00004206 <USART_u8ReceiveBufferAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferAsynch(u8 * Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    4206:	9c 01       	movw	r18, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    4208:	80 91 e6 01 	lds	r24, 0x01E6
    420c:	88 23       	and	r24, r24
    420e:	11 f0       	breq	.+4      	; 0x4214 <USART_u8ReceiveBufferAsynch+0xe>
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4214:	21 15       	cp	r18, r1
    4216:	31 05       	cpc	r19, r1
    4218:	a9 f0       	breq	.+42     	; 0x4244 <USART_u8ReceiveBufferAsynch+0x3e>
    421a:	41 15       	cp	r20, r1
    421c:	51 05       	cpc	r21, r1
    421e:	91 f0       	breq	.+36     	; 0x4244 <USART_u8ReceiveBufferAsynch+0x3e>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	80 93 e6 01 	sts	0x01E6, r24

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString ;
    4226:	30 93 ea 01 	sts	0x01EA, r19
    422a:	20 93 e9 01 	sts	0x01E9, r18
			USART_pvNotificationFunc = NotificationFunc ;
    422e:	50 93 e8 01 	sts	0x01E8, r21
    4232:	40 93 e7 01 	sts	0x01E7, r20
			USART_u8BufferSize = Copy_u32BufferSize;
    4236:	60 93 eb 01 	sts	0x01EB, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    423a:	10 92 ec 01 	sts	0x01EC, r1

			/*USART Recieve Interrupt Enable */
			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    423e:	57 9a       	sbi	0x0a, 7	; 10
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4244:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4246:	08 95       	ret

00004248 <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    4248:	1f 92       	push	r1
    424a:	0f 92       	push	r0
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	0f 92       	push	r0
    4250:	11 24       	eor	r1, r1
    4252:	2f 93       	push	r18
    4254:	3f 93       	push	r19
    4256:	4f 93       	push	r20
    4258:	5f 93       	push	r21
    425a:	6f 93       	push	r22
    425c:	7f 93       	push	r23
    425e:	8f 93       	push	r24
    4260:	9f 93       	push	r25
    4262:	af 93       	push	r26
    4264:	bf 93       	push	r27
    4266:	ef 93       	push	r30
    4268:	ff 93       	push	r31
		/*Receive next Data*/
		USART_pu8ReceiveData[USART_u8Index] = UDR ;
    426a:	90 91 ec 01 	lds	r25, 0x01EC
    426e:	8c b1       	in	r24, 0x0c	; 12
    4270:	e0 91 e9 01 	lds	r30, 0x01E9
    4274:	f0 91 ea 01 	lds	r31, 0x01EA
    4278:	e9 0f       	add	r30, r25
    427a:	f1 1d       	adc	r31, r1
    427c:	80 83       	st	Z, r24

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    427e:	9f 5f       	subi	r25, 0xFF	; 255
    4280:	90 93 ec 01 	sts	0x01EC, r25

		if (USART_u8Index == USART_u8BufferSize)
    4284:	80 91 eb 01 	lds	r24, 0x01EB
    4288:	98 17       	cp	r25, r24
    428a:	51 f4       	brne	.+20     	; 0x42a0 <__vector_13+0x58>
		{
			/*Send Data Complete*/

			USART_u8Index=0;
    428c:	10 92 ec 01 	sts	0x01EC, r1
			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    4290:	10 92 e6 01 	sts	0x01E6, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    4294:	e0 91 e7 01 	lds	r30, 0x01E7
    4298:	f0 91 e8 01 	lds	r31, 0x01E8
    429c:	09 95       	icall

			/*USART Recieve Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    429e:	57 98       	cbi	0x0a, 7	; 10
		else
		{
			/*Do Noting*/
		}

}
    42a0:	ff 91       	pop	r31
    42a2:	ef 91       	pop	r30
    42a4:	bf 91       	pop	r27
    42a6:	af 91       	pop	r26
    42a8:	9f 91       	pop	r25
    42aa:	8f 91       	pop	r24
    42ac:	7f 91       	pop	r23
    42ae:	6f 91       	pop	r22
    42b0:	5f 91       	pop	r21
    42b2:	4f 91       	pop	r20
    42b4:	3f 91       	pop	r19
    42b6:	2f 91       	pop	r18
    42b8:	0f 90       	pop	r0
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	0f 90       	pop	r0
    42be:	1f 90       	pop	r1
    42c0:	18 95       	reti

000042c2 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    42c2:	1f 92       	push	r1
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	2f 93       	push	r18
    42ce:	3f 93       	push	r19
    42d0:	4f 93       	push	r20
    42d2:	5f 93       	push	r21
    42d4:	6f 93       	push	r22
    42d6:	7f 93       	push	r23
    42d8:	8f 93       	push	r24
    42da:	9f 93       	push	r25
    42dc:	af 93       	push	r26
    42de:	bf 93       	push	r27
    42e0:	ef 93       	push	r30
    42e2:	ff 93       	push	r31

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    42e4:	80 91 ec 01 	lds	r24, 0x01EC
    42e8:	8f 5f       	subi	r24, 0xFF	; 255
    42ea:	80 93 ec 01 	sts	0x01EC, r24

		if (USART_pu8SendData[USART_u8Index] == '\0')
    42ee:	e0 91 e4 01 	lds	r30, 0x01E4
    42f2:	f0 91 e5 01 	lds	r31, 0x01E5
    42f6:	e8 0f       	add	r30, r24
    42f8:	f1 1d       	adc	r31, r1
    42fa:	e0 81       	ld	r30, Z
    42fc:	ee 23       	and	r30, r30
    42fe:	59 f4       	brne	.+22     	; 0x4316 <__vector_15+0x54>
		{
			/*Receive Data Complete*/
			USART_u8Index=0;
    4300:	10 92 ec 01 	sts	0x01EC, r1

			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    4304:	10 92 e6 01 	sts	0x01E6, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    4308:	e0 91 e7 01 	lds	r30, 0x01E7
    430c:	f0 91 e8 01 	lds	r31, 0x01E8
    4310:	09 95       	icall

			/*USART Transmit Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    4312:	56 98       	cbi	0x0a, 6	; 10
    4314:	01 c0       	rjmp	.+2      	; 0x4318 <__vector_15+0x56>
		}
		else
		{
			/*Send Data not Complete*/
			/*Send next Data*/
			UDR = USART_pu8SendData[USART_u8Index] ;
    4316:	ec b9       	out	0x0c, r30	; 12
		}

}
    4318:	ff 91       	pop	r31
    431a:	ef 91       	pop	r30
    431c:	bf 91       	pop	r27
    431e:	af 91       	pop	r26
    4320:	9f 91       	pop	r25
    4322:	8f 91       	pop	r24
    4324:	7f 91       	pop	r23
    4326:	6f 91       	pop	r22
    4328:	5f 91       	pop	r21
    432a:	4f 91       	pop	r20
    432c:	3f 91       	pop	r19
    432e:	2f 91       	pop	r18
    4330:	0f 90       	pop	r0
    4332:	0f be       	out	0x3f, r0	; 63
    4334:	0f 90       	pop	r0
    4336:	1f 90       	pop	r1
    4338:	18 95       	reti

0000433a <TIMER0_voidInit>:
		#endif

	#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

		/*Initialize Waveform Generation Mode as Fast PWM Mode*/
		SET_BIT(TCCR0 , TCCR0_WGM00) ;
    433a:	83 b7       	in	r24, 0x33	; 51
    433c:	80 64       	ori	r24, 0x40	; 64
    433e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0 , TCCR0_WGM01) ;
    4340:	83 b7       	in	r24, 0x33	; 51
    4342:	88 60       	ori	r24, 0x08	; 8
    4344:	83 bf       	out	0x33, r24	; 51
		/*Set CTC Fast PWM MODE*/
		#if TIMER0_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
			CLR_BIT(TCCR0 , TCCR0_COM00) ;
			CLR_BIT(TCCR0 , TCCR0_COM01) ;
		#elif TIMER0_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
			CLR_BIT(TCCR0 , TCCR0_COM00) ;
    4346:	83 b7       	in	r24, 0x33	; 51
    4348:	8f 7e       	andi	r24, 0xEF	; 239
    434a:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , TCCR0_COM01) ;
    434c:	83 b7       	in	r24, 0x33	; 51
    434e:	80 62       	ori	r24, 0x20	; 32
    4350:	83 bf       	out	0x33, r24	; 51
		#else
		#error "Wrong TIMER0_CTC_PWM_MODE Config"
		#endif

		/*Set the Required CTC Value*/
		OCR0 = TIMER0_CTC_VAL ;
    4352:	1c be       	out	0x3c, r1	; 60
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

	#endif

		/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    4354:	83 b7       	in	r24, 0x33	; 51
    4356:	88 7f       	andi	r24, 0xF8	; 248
    4358:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    435a:	83 b7       	in	r24, 0x33	; 51
    435c:	84 60       	ori	r24, 0x04	; 4
    435e:	83 bf       	out	0x33, r24	; 51
}
    4360:	08 95       	ret

00004362 <TIMER0_voidSetPreload>:

void TIMER0_voidSetPreload(u8 copy_u8Preload)
{
	TCNT0 = copy_u8Preload ;
    4362:	82 bf       	out	0x32, r24	; 50
}
    4364:	08 95       	ret

00004366 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC(u8 copy_u8CTC)
{
	OCR0 = copy_u8CTC ;
    4366:	8c bf       	out	0x3c, r24	; 60
}
    4368:	08 95       	ret

0000436a <TIMER0_voidSetFastPWM>:

void TIMER0_voidSetFastPWM(u8 copy_u8PWM)
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
    436a:	8c bf       	out	0x3c, r24	; 60
	#endif
}
    436c:	08 95       	ret

0000436e <TIMER0_voidSetPhaseCorrectPWM>:
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
	#endif
}
    436e:	08 95       	ret

00004370 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue(void)
{

	return TCNT0 ;
    4370:	82 b7       	in	r24, 0x32	; 50
}
    4372:	08 95       	ret

00004374 <TIMER1_voidInit>:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
		SET_BIT(TCCR1A,TCCR1A_WGM11);
		SET_BIT(TCCR1B,TCCR1B_WGM12);
		SET_BIT(TCCR1B,TCCR1B_WGM13);
	#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4374:	8f b5       	in	r24, 0x2f	; 47
    4376:	8e 7f       	andi	r24, 0xFE	; 254
    4378:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    437a:	8f b5       	in	r24, 0x2f	; 47
    437c:	82 60       	ori	r24, 0x02	; 2
    437e:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    4380:	8e b5       	in	r24, 0x2e	; 46
    4382:	88 60       	ori	r24, 0x08	; 8
    4384:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    4386:	8e b5       	in	r24, 0x2e	; 46
    4388:	80 61       	ori	r24, 0x10	; 16
    438a:	8e bd       	out	0x2e, r24	; 46
	#else
	#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
	#endif

	/*Set the require CTC Values*/
	OCR1AL = (u8)TIMER1_CTCA_VAL ;
    438c:	84 ef       	ldi	r24, 0xF4	; 244
    438e:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (TIMER1_CTCA_VAL>>8) ;
    4390:	8b b5       	in	r24, 0x2b	; 43
    4392:	81 60       	ori	r24, 0x01	; 1
    4394:	8b bd       	out	0x2b, r24	; 43

	OCR1BL = TIMER1_CTCB_VAL ;
    4396:	18 bc       	out	0x28, r1	; 40
	OCR1BH |= (TIMER1_CTCB_VAL>>8) ;
    4398:	89 b5       	in	r24, 0x29	; 41
    439a:	89 bd       	out	0x29, r24	; 41
		/*Set ICR1*/
	#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		ICR1L = (u8)TIMER1_ICR1_VAL ;
    439c:	80 e2       	ldi	r24, 0x20	; 32
    439e:	86 bd       	out	0x26, r24	; 38
		ICR1H = (TIMER1_ICR1_VAL>>8) ;
    43a0:	8e e4       	ldi	r24, 0x4E	; 78
    43a2:	87 bd       	out	0x27, r24	; 39
		#if TIMER1_ICR_EDGE == RISING_EDGE
			SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    43a4:	8e b5       	in	r24, 0x2e	; 46
    43a6:	80 64       	ori	r24, 0x40	; 64
    43a8:	8e bd       	out	0x2e, r24	; 46
		/*Set OCR1A mode*/
	#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
	#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    43aa:	8f b5       	in	r24, 0x2f	; 47
    43ac:	8f 7b       	andi	r24, 0xBF	; 191
    43ae:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    43b0:	8f b5       	in	r24, 0x2f	; 47
    43b2:	80 68       	ori	r24, 0x80	; 128
    43b4:	8f bd       	out	0x2f, r24	; 47
		/*Set OCR1B mode*/
	#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
	#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    43b6:	8f b5       	in	r24, 0x2f	; 47
    43b8:	8f 7e       	andi	r24, 0xEF	; 239
    43ba:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    43bc:	8f b5       	in	r24, 0x2f	; 47
    43be:	80 62       	ori	r24, 0x20	; 32
    43c0:	8f bd       	out	0x2f, r24	; 47
	#error "Wrong TIMER1_OCR1B_MODE Config"
	#endif

		/*Timer1 PWM Interrupt Enable*/
	#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    43c2:	89 b7       	in	r24, 0x39	; 57
    43c4:	8b 7f       	andi	r24, 0xFB	; 251
    43c6:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
	#endif

	#if TIMER1_CTCA_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    43c8:	89 b7       	in	r24, 0x39	; 57
    43ca:	8f 7e       	andi	r24, 0xEF	; 239
    43cc:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCA_INTERRUPT Config"
	#endif

	#if TIMER1_CTCB_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    43ce:	89 b7       	in	r24, 0x39	; 57
    43d0:	87 7f       	andi	r24, 0xF7	; 247
    43d2:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCB_INTERRUPT Config"
	#endif

	#if TIMER1_ICR_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    43d4:	89 b7       	in	r24, 0x39	; 57
    43d6:	8f 7d       	andi	r24, 0xDF	; 223
    43d8:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    43da:	8e b5       	in	r24, 0x2e	; 46
    43dc:	88 7f       	andi	r24, 0xF8	; 248
    43de:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    43e0:	8e b5       	in	r24, 0x2e	; 46
    43e2:	82 60       	ori	r24, 0x02	; 2
    43e4:	8e bd       	out	0x2e, r24	; 46
}
    43e6:	08 95       	ret

000043e8 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload(u16 copy_u8Preload)
{
	TCNT1L = copy_u8Preload ;
    43e8:	8c bd       	out	0x2c, r24	; 44
	TCNT1H |= (copy_u8Preload>>8) ;
    43ea:	8d b5       	in	r24, 0x2d	; 45
    43ec:	89 2b       	or	r24, r25
    43ee:	8d bd       	out	0x2d, r24	; 45
}
    43f0:	08 95       	ret

000043f2 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA(u16 copy_u8CTCA)
{
	OCR1AL = copy_u8CTCA ;
    43f2:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (copy_u8CTCA>>8) ;
    43f4:	8b b5       	in	r24, 0x2b	; 43
    43f6:	89 2b       	or	r24, r25
    43f8:	8b bd       	out	0x2b, r24	; 43
}
    43fa:	08 95       	ret

000043fc <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB(u16 copy_u8CTCB)
{
	OCR1BL = copy_u8CTCB ;
    43fc:	88 bd       	out	0x28, r24	; 40
	OCR1BH |= (copy_u8CTCB>>8) ;
    43fe:	89 b5       	in	r24, 0x29	; 41
    4400:	89 2b       	or	r24, r25
    4402:	89 bd       	out	0x29, r24	; 41
}
    4404:	08 95       	ret

00004406 <TIMER1_u8GetTimerCounterValue>:

u16 TIMER1_u8GetTimerCounterValue(void)
{
	u16 Local_Var;
	Local_Var = TCNT1L;
    4406:	2c b5       	in	r18, 0x2c	; 44
    4408:	30 e0       	ldi	r19, 0x00	; 0
	Local_Var |= (TCNT1H<<8);
    440a:	4d b5       	in	r20, 0x2d	; 45
    440c:	94 2f       	mov	r25, r20
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	28 2b       	or	r18, r24
    4412:	39 2b       	or	r19, r25

	return Local_Var;
}
    4414:	c9 01       	movw	r24, r18
    4416:	08 95       	ret

00004418 <TIMER2_voidInit>:
	#endif

#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE

	/*Initialize Waveform Generation Mode as Fast PWM Mode*/
	SET_BIT(TCCR2 , TCCR2_WGM20) ;
    4418:	85 b5       	in	r24, 0x25	; 37
    441a:	80 64       	ori	r24, 0x40	; 64
    441c:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2 , TCCR2_WGM21) ;
    441e:	85 b5       	in	r24, 0x25	; 37
    4420:	88 60       	ori	r24, 0x08	; 8
    4422:	85 bd       	out	0x25, r24	; 37
		/*Set CTC Fast PWM MODE*/
	#if TIMER2_CTC_PWM_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR2 , TCCR2_COM20) ;
		CLR_BIT(TCCR2 , TCCR2_COM21) ;
	#elif TIMER2_CTC_PWM_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR2 , TCCR2_COM20) ;
    4424:	85 b5       	in	r24, 0x25	; 37
    4426:	8f 7e       	andi	r24, 0xEF	; 239
    4428:	85 bd       	out	0x25, r24	; 37
		SET_BIT(TCCR2 , TCCR2_COM21) ;
    442a:	85 b5       	in	r24, 0x25	; 37
    442c:	80 62       	ori	r24, 0x20	; 32
    442e:	85 bd       	out	0x25, r24	; 37
	#else
	#error "Wrong TIMER2_CTC_PWM_MODE Config"
	#endif

	/*Set the Required CTC Value*/
	OCR2 = TIMER2_CTC_VAL ;
    4430:	13 bc       	out	0x23, r1	; 35
#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    4432:	85 b5       	in	r24, 0x25	; 37
    4434:	88 7f       	andi	r24, 0xF8	; 248
    4436:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    4438:	85 b5       	in	r24, 0x25	; 37
    443a:	84 60       	ori	r24, 0x04	; 4
    443c:	85 bd       	out	0x25, r24	; 37
}
    443e:	08 95       	ret

00004440 <TIMER2_voidSetPreload>:

void TIMER2_voidSetPreload(u8 copy_u8Preload)
{
	TCNT2 = copy_u8Preload ;
    4440:	84 bd       	out	0x24, r24	; 36
}
    4442:	08 95       	ret

00004444 <TIMER2_voidSetCTC>:
void TIMER2_voidSetCTC(u8 copy_u8CTC)
{
	OCR2 = copy_u8CTC ;
    4444:	83 bd       	out	0x23, r24	; 35
}
    4446:	08 95       	ret

00004448 <TIMER2_voidSetFastPWM>:

void TIMER2_voidSetFastPWM(u8 copy_u8PWM)
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
    4448:	83 bd       	out	0x23, r24	; 35
#endif
}
    444a:	08 95       	ret

0000444c <TIMER2_voidSetPhaseCorrectPWM>:
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    444c:	08 95       	ret

0000444e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue(void)
{
	return TCNT2 ;
    444e:	84 b5       	in	r24, 0x24	; 36
}
    4450:	08 95       	ret

00004452 <TIMER_voidICUInitEnable>:


void TIMER_voidICUInitEnable(void)
{
	#if TIMER_ICP_INIT_STATE == TIMER_ICP_RISING_EDGE
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4452:	8e b5       	in	r24, 0x2e	; 46
    4454:	80 64       	ori	r24, 0x40	; 64
    4456:	8e bd       	out	0x2e, r24	; 46
	#else
		#error "Wrong TIMER_ICP_INIT_STATE Config"
	#endif

	/* Enable interrupt of ICU*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4458:	89 b7       	in	r24, 0x39	; 57
    445a:	80 62       	ori	r24, 0x20	; 32
    445c:	89 bf       	out	0x39, r24	; 57

}
    445e:	08 95       	ret

00004460 <TIMER_voidICUSetTriggerEdge>:

u8 TIMER_voidICUSetTriggerEdge(u8 copy_u8Edge)
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    4460:	81 30       	cpi	r24, 0x01	; 1
    4462:	11 f0       	breq	.+4      	; 0x4468 <TIMER_voidICUSetTriggerEdge+0x8>
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	08 95       	ret
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4468:	8e b5       	in	r24, 0x2e	; 46
    446a:	80 64       	ori	r24, 0x40	; 64
    446c:	8e bd       	out	0x2e, r24	; 46
    446e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;

}
    4470:	08 95       	ret

00004472 <TIMER_voidICUEnableInterrupt>:

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4472:	89 b7       	in	r24, 0x39	; 57
    4474:	80 62       	ori	r24, 0x20	; 32
    4476:	89 bf       	out	0x39, r24	; 57
}
    4478:	08 95       	ret

0000447a <TIMER_voidICUDisableInterrupt>:

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    447a:	89 b7       	in	r24, 0x39	; 57
    447c:	8f 7d       	andi	r24, 0xDF	; 223
    447e:	89 bf       	out	0x39, r24	; 57
}
    4480:	08 95       	ret

00004482 <TIMER_u16GetICR>:

u16 TIMER_u16GetICR(void)
{
	u16 Local_u16ICRValue;
	Local_u16ICRValue = ICR1L;
    4482:	26 b5       	in	r18, 0x26	; 38
    4484:	30 e0       	ldi	r19, 0x00	; 0
	Local_u16ICRValue |= (ICR1H<<8);
    4486:	47 b5       	in	r20, 0x27	; 39
    4488:	94 2f       	mov	r25, r20
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	28 2b       	or	r18, r24
    448e:	39 2b       	or	r19, r25


	return Local_u16ICRValue;

}
    4490:	c9 01       	movw	r24, r18
    4492:	08 95       	ret

00004494 <TIMER_voidWDTSleep>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    4494:	81 b5       	in	r24, 0x21	; 33
    4496:	88 7f       	andi	r24, 0xF8	; 248
    4498:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    449a:	81 b5       	in	r24, 0x21	; 33
    449c:	86 60       	ori	r24, 0x06	; 6
    449e:	81 bd       	out	0x21, r24	; 33
}
    44a0:	08 95       	ret

000044a2 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    44a2:	81 b5       	in	r24, 0x21	; 33
    44a4:	88 60       	ori	r24, 0x08	; 8
    44a6:	81 bd       	out	0x21, r24	; 33
}
    44a8:	08 95       	ret

000044aa <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    44aa:	81 b5       	in	r24, 0x21	; 33
    44ac:	88 61       	ori	r24, 0x18	; 24
    44ae:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    44b0:	11 bc       	out	0x21, r1	; 33
}
    44b2:	08 95       	ret

000044b4 <TIMER_u8SetCallBack>:

/*****************************************************************************************************/
u8 TIMER_u8SetCallBack(void(*copy_ptfCallBackFunc)(void),u8 copy_u8VectorID)
{
	u8 Local_u8ErrorState = E_OK;
	if((copy_u8VectorID<=TIMER0_OVF_VECTOR_ID) && (copy_u8VectorID>=TIMER2_CTC_VECTOR_ID))
    44b4:	64 50       	subi	r22, 0x04	; 4
    44b6:	68 30       	cpi	r22, 0x08	; 8
    44b8:	10 f0       	brcs	.+4      	; 0x44be <TIMER_u8SetCallBack+0xa>
    44ba:	83 e0       	ldi	r24, 0x03	; 3
    44bc:	08 95       	ret
	{
		u8 Local_u8ArrayIndex = copy_u8VectorID - CBF_OFFSET ;
		if(copy_ptfCallBackFunc!= NULL)
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	11 f4       	brne	.+4      	; 0x44c6 <TIMER_u8SetCallBack+0x12>
    44c2:	82 e0       	ldi	r24, 0x02	; 2
    44c4:	08 95       	ret
		{
			TIMERS_ptfCallBackFuncArr[Local_u8ArrayIndex]= copy_ptfCallBackFunc;
    44c6:	e6 2f       	mov	r30, r22
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	ee 0f       	add	r30, r30
    44cc:	ff 1f       	adc	r31, r31
    44ce:	e3 51       	subi	r30, 0x13	; 19
    44d0:	fe 4f       	sbci	r31, 0xFE	; 254
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	80 83       	st	Z, r24
    44d6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_OUT_OF_RANGE;
	}

	return Local_u8ErrorState;
}
    44d8:	08 95       	ret

000044da <__vector_11>:


/***************TIMER0 OVF************************/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    44da:	1f 92       	push	r1
    44dc:	0f 92       	push	r0
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	0f 92       	push	r0
    44e2:	11 24       	eor	r1, r1
    44e4:	2f 93       	push	r18
    44e6:	3f 93       	push	r19
    44e8:	4f 93       	push	r20
    44ea:	5f 93       	push	r21
    44ec:	6f 93       	push	r22
    44ee:	7f 93       	push	r23
    44f0:	8f 93       	push	r24
    44f2:	9f 93       	push	r25
    44f4:	af 93       	push	r26
    44f6:	bf 93       	push	r27
    44f8:	ef 93       	push	r30
    44fa:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    44fc:	e0 91 fb 01 	lds	r30, 0x01FB
    4500:	f0 91 fc 01 	lds	r31, 0x01FC
    4504:	30 97       	sbiw	r30, 0x00	; 0
    4506:	09 f0       	breq	.+2      	; 0x450a <__vector_11+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET]();
    4508:	09 95       	icall
	}
}
    450a:	ff 91       	pop	r31
    450c:	ef 91       	pop	r30
    450e:	bf 91       	pop	r27
    4510:	af 91       	pop	r26
    4512:	9f 91       	pop	r25
    4514:	8f 91       	pop	r24
    4516:	7f 91       	pop	r23
    4518:	6f 91       	pop	r22
    451a:	5f 91       	pop	r21
    451c:	4f 91       	pop	r20
    451e:	3f 91       	pop	r19
    4520:	2f 91       	pop	r18
    4522:	0f 90       	pop	r0
    4524:	0f be       	out	0x3f, r0	; 63
    4526:	0f 90       	pop	r0
    4528:	1f 90       	pop	r1
    452a:	18 95       	reti

0000452c <__vector_10>:


/***************TIMER0 CTC************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    452c:	1f 92       	push	r1
    452e:	0f 92       	push	r0
    4530:	0f b6       	in	r0, 0x3f	; 63
    4532:	0f 92       	push	r0
    4534:	11 24       	eor	r1, r1
    4536:	2f 93       	push	r18
    4538:	3f 93       	push	r19
    453a:	4f 93       	push	r20
    453c:	5f 93       	push	r21
    453e:	6f 93       	push	r22
    4540:	7f 93       	push	r23
    4542:	8f 93       	push	r24
    4544:	9f 93       	push	r25
    4546:	af 93       	push	r26
    4548:	bf 93       	push	r27
    454a:	ef 93       	push	r30
    454c:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    454e:	e0 91 f9 01 	lds	r30, 0x01F9
    4552:	f0 91 fa 01 	lds	r31, 0x01FA
    4556:	30 97       	sbiw	r30, 0x00	; 0
    4558:	09 f0       	breq	.+2      	; 0x455c <__vector_10+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET]();
    455a:	09 95       	icall
	}
}
    455c:	ff 91       	pop	r31
    455e:	ef 91       	pop	r30
    4560:	bf 91       	pop	r27
    4562:	af 91       	pop	r26
    4564:	9f 91       	pop	r25
    4566:	8f 91       	pop	r24
    4568:	7f 91       	pop	r23
    456a:	6f 91       	pop	r22
    456c:	5f 91       	pop	r21
    456e:	4f 91       	pop	r20
    4570:	3f 91       	pop	r19
    4572:	2f 91       	pop	r18
    4574:	0f 90       	pop	r0
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	0f 90       	pop	r0
    457a:	1f 90       	pop	r1
    457c:	18 95       	reti

0000457e <__vector_9>:


/***************TIMER1 OVF************************/
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    457e:	1f 92       	push	r1
    4580:	0f 92       	push	r0
    4582:	0f b6       	in	r0, 0x3f	; 63
    4584:	0f 92       	push	r0
    4586:	11 24       	eor	r1, r1
    4588:	2f 93       	push	r18
    458a:	3f 93       	push	r19
    458c:	4f 93       	push	r20
    458e:	5f 93       	push	r21
    4590:	6f 93       	push	r22
    4592:	7f 93       	push	r23
    4594:	8f 93       	push	r24
    4596:	9f 93       	push	r25
    4598:	af 93       	push	r26
    459a:	bf 93       	push	r27
    459c:	ef 93       	push	r30
    459e:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    45a0:	e0 91 f7 01 	lds	r30, 0x01F7
    45a4:	f0 91 f8 01 	lds	r31, 0x01F8
    45a8:	30 97       	sbiw	r30, 0x00	; 0
    45aa:	09 f0       	breq	.+2      	; 0x45ae <__vector_9+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET]();
    45ac:	09 95       	icall
	}
}
    45ae:	ff 91       	pop	r31
    45b0:	ef 91       	pop	r30
    45b2:	bf 91       	pop	r27
    45b4:	af 91       	pop	r26
    45b6:	9f 91       	pop	r25
    45b8:	8f 91       	pop	r24
    45ba:	7f 91       	pop	r23
    45bc:	6f 91       	pop	r22
    45be:	5f 91       	pop	r21
    45c0:	4f 91       	pop	r20
    45c2:	3f 91       	pop	r19
    45c4:	2f 91       	pop	r18
    45c6:	0f 90       	pop	r0
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	0f 90       	pop	r0
    45cc:	1f 90       	pop	r1
    45ce:	18 95       	reti

000045d0 <__vector_8>:


/***************TIMER1 CTCB***********************/
void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    45d0:	1f 92       	push	r1
    45d2:	0f 92       	push	r0
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	0f 92       	push	r0
    45d8:	11 24       	eor	r1, r1
    45da:	2f 93       	push	r18
    45dc:	3f 93       	push	r19
    45de:	4f 93       	push	r20
    45e0:	5f 93       	push	r21
    45e2:	6f 93       	push	r22
    45e4:	7f 93       	push	r23
    45e6:	8f 93       	push	r24
    45e8:	9f 93       	push	r25
    45ea:	af 93       	push	r26
    45ec:	bf 93       	push	r27
    45ee:	ef 93       	push	r30
    45f0:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET] != NULL)
    45f2:	e0 91 f5 01 	lds	r30, 0x01F5
    45f6:	f0 91 f6 01 	lds	r31, 0x01F6
    45fa:	30 97       	sbiw	r30, 0x00	; 0
    45fc:	09 f0       	breq	.+2      	; 0x4600 <__vector_8+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET]();
    45fe:	09 95       	icall
	}
}
    4600:	ff 91       	pop	r31
    4602:	ef 91       	pop	r30
    4604:	bf 91       	pop	r27
    4606:	af 91       	pop	r26
    4608:	9f 91       	pop	r25
    460a:	8f 91       	pop	r24
    460c:	7f 91       	pop	r23
    460e:	6f 91       	pop	r22
    4610:	5f 91       	pop	r21
    4612:	4f 91       	pop	r20
    4614:	3f 91       	pop	r19
    4616:	2f 91       	pop	r18
    4618:	0f 90       	pop	r0
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	0f 90       	pop	r0
    461e:	1f 90       	pop	r1
    4620:	18 95       	reti

00004622 <__vector_6>:
/***************TIMER1 CTCA**********************/

/***************TIMER1 ICU************************/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	11 24       	eor	r1, r1
    462c:	2f 93       	push	r18
    462e:	3f 93       	push	r19
    4630:	4f 93       	push	r20
    4632:	5f 93       	push	r21
    4634:	6f 93       	push	r22
    4636:	7f 93       	push	r23
    4638:	8f 93       	push	r24
    463a:	9f 93       	push	r25
    463c:	af 93       	push	r26
    463e:	bf 93       	push	r27
    4640:	ef 93       	push	r30
    4642:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET] != NULL)
    4644:	e0 91 f1 01 	lds	r30, 0x01F1
    4648:	f0 91 f2 01 	lds	r31, 0x01F2
    464c:	30 97       	sbiw	r30, 0x00	; 0
    464e:	09 f0       	breq	.+2      	; 0x4652 <__vector_6+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET]();
    4650:	09 95       	icall
	}
}
    4652:	ff 91       	pop	r31
    4654:	ef 91       	pop	r30
    4656:	bf 91       	pop	r27
    4658:	af 91       	pop	r26
    465a:	9f 91       	pop	r25
    465c:	8f 91       	pop	r24
    465e:	7f 91       	pop	r23
    4660:	6f 91       	pop	r22
    4662:	5f 91       	pop	r21
    4664:	4f 91       	pop	r20
    4666:	3f 91       	pop	r19
    4668:	2f 91       	pop	r18
    466a:	0f 90       	pop	r0
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	0f 90       	pop	r0
    4670:	1f 90       	pop	r1
    4672:	18 95       	reti

00004674 <__vector_5>:

/***************TIMER2 OVF************************/
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    4674:	1f 92       	push	r1
    4676:	0f 92       	push	r0
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
    467e:	2f 93       	push	r18
    4680:	3f 93       	push	r19
    4682:	4f 93       	push	r20
    4684:	5f 93       	push	r21
    4686:	6f 93       	push	r22
    4688:	7f 93       	push	r23
    468a:	8f 93       	push	r24
    468c:	9f 93       	push	r25
    468e:	af 93       	push	r26
    4690:	bf 93       	push	r27
    4692:	ef 93       	push	r30
    4694:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4696:	e0 91 ef 01 	lds	r30, 0x01EF
    469a:	f0 91 f0 01 	lds	r31, 0x01F0
    469e:	30 97       	sbiw	r30, 0x00	; 0
    46a0:	09 f0       	breq	.+2      	; 0x46a4 <__vector_5+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET]();
    46a2:	09 95       	icall
	}
}
    46a4:	ff 91       	pop	r31
    46a6:	ef 91       	pop	r30
    46a8:	bf 91       	pop	r27
    46aa:	af 91       	pop	r26
    46ac:	9f 91       	pop	r25
    46ae:	8f 91       	pop	r24
    46b0:	7f 91       	pop	r23
    46b2:	6f 91       	pop	r22
    46b4:	5f 91       	pop	r21
    46b6:	4f 91       	pop	r20
    46b8:	3f 91       	pop	r19
    46ba:	2f 91       	pop	r18
    46bc:	0f 90       	pop	r0
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	0f 90       	pop	r0
    46c2:	1f 90       	pop	r1
    46c4:	18 95       	reti

000046c6 <__vector_4>:


/***************TIMER2 CTC************************/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    46c6:	1f 92       	push	r1
    46c8:	0f 92       	push	r0
    46ca:	0f b6       	in	r0, 0x3f	; 63
    46cc:	0f 92       	push	r0
    46ce:	11 24       	eor	r1, r1
    46d0:	2f 93       	push	r18
    46d2:	3f 93       	push	r19
    46d4:	4f 93       	push	r20
    46d6:	5f 93       	push	r21
    46d8:	6f 93       	push	r22
    46da:	7f 93       	push	r23
    46dc:	8f 93       	push	r24
    46de:	9f 93       	push	r25
    46e0:	af 93       	push	r26
    46e2:	bf 93       	push	r27
    46e4:	ef 93       	push	r30
    46e6:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    46e8:	e0 91 ed 01 	lds	r30, 0x01ED
    46ec:	f0 91 ee 01 	lds	r31, 0x01EE
    46f0:	30 97       	sbiw	r30, 0x00	; 0
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <__vector_4+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET]();
    46f4:	09 95       	icall
	}
}
    46f6:	ff 91       	pop	r31
    46f8:	ef 91       	pop	r30
    46fa:	bf 91       	pop	r27
    46fc:	af 91       	pop	r26
    46fe:	9f 91       	pop	r25
    4700:	8f 91       	pop	r24
    4702:	7f 91       	pop	r23
    4704:	6f 91       	pop	r22
    4706:	5f 91       	pop	r21
    4708:	4f 91       	pop	r20
    470a:	3f 91       	pop	r19
    470c:	2f 91       	pop	r18
    470e:	0f 90       	pop	r0
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	0f 90       	pop	r0
    4714:	1f 90       	pop	r1
    4716:	18 95       	reti

00004718 <SPI_VoidInit>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
    4718:	6d 98       	cbi	0x0d, 5	; 13
		#error "wrong SPI_DATA_ORDER config"
	#endif

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
    471a:	6c 9a       	sbi	0x0d, 4	; 13
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
    471c:	6b 98       	cbi	0x0d, 3	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
    471e:	6a 98       	cbi	0x0d, 2	; 13
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
    4720:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
    4722:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
    4724:	70 98       	cbi	0x0e, 0	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
    4726:	6f 98       	cbi	0x0d, 7	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
    4728:	6e 9a       	sbi	0x0d, 6	; 13
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
    472a:	08 95       	ret

0000472c <SPI_u8InitConfig>:


*/

u8 SPI_u8InitConfig (SPI_CONFIG * spi)
{
    472c:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if ((spi != NULL) && (spi->SPI_u8ClockPhase != 0) && (spi->SPI_u8ClockPolarity != 0) && (spi->SPI_u8ClockRate != 0) && (spi->SPI_u8DataOrder != 0) && (spi->SPI_u8InterruptEnable != 0) && (spi->SPI_u8MasterSlaveSelect != 0) && (spi->SPI_u8SPIEnable != 0))
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	09 f4       	brne	.+2      	; 0x4734 <SPI_u8InitConfig+0x8>
    4732:	78 c0       	rjmp	.+240    	; 0x4824 <SPI_u8InitConfig+0xf8>
    4734:	35 81       	ldd	r19, Z+5	; 0x05
    4736:	33 23       	and	r19, r19
    4738:	09 f4       	brne	.+2      	; 0x473c <SPI_u8InitConfig+0x10>
    473a:	74 c0       	rjmp	.+232    	; 0x4824 <SPI_u8InitConfig+0xf8>
    473c:	44 81       	ldd	r20, Z+4	; 0x04
    473e:	44 23       	and	r20, r20
    4740:	09 f4       	brne	.+2      	; 0x4744 <SPI_u8InitConfig+0x18>
    4742:	70 c0       	rjmp	.+224    	; 0x4824 <SPI_u8InitConfig+0xf8>
    4744:	26 81       	ldd	r18, Z+6	; 0x06
    4746:	22 23       	and	r18, r18
    4748:	09 f4       	brne	.+2      	; 0x474c <SPI_u8InitConfig+0x20>
    474a:	6c c0       	rjmp	.+216    	; 0x4824 <SPI_u8InitConfig+0xf8>
    474c:	52 81       	ldd	r21, Z+2	; 0x02
    474e:	55 23       	and	r21, r21
    4750:	09 f4       	brne	.+2      	; 0x4754 <SPI_u8InitConfig+0x28>
    4752:	68 c0       	rjmp	.+208    	; 0x4824 <SPI_u8InitConfig+0xf8>
    4754:	70 81       	ld	r23, Z
    4756:	77 23       	and	r23, r23
    4758:	09 f4       	brne	.+2      	; 0x475c <SPI_u8InitConfig+0x30>
    475a:	64 c0       	rjmp	.+200    	; 0x4824 <SPI_u8InitConfig+0xf8>
    475c:	63 81       	ldd	r22, Z+3	; 0x03
    475e:	66 23       	and	r22, r22
    4760:	09 f4       	brne	.+2      	; 0x4764 <SPI_u8InitConfig+0x38>
    4762:	60 c0       	rjmp	.+192    	; 0x4824 <SPI_u8InitConfig+0xf8>
    4764:	91 81       	ldd	r25, Z+1	; 0x01
    4766:	99 23       	and	r25, r25
    4768:	09 f4       	brne	.+2      	; 0x476c <SPI_u8InitConfig+0x40>
    476a:	5c c0       	rjmp	.+184    	; 0x4824 <SPI_u8InitConfig+0xf8>
	{
		switch (spi->SPI_u8ClockPhase)
    476c:	31 30       	cpi	r19, 0x01	; 1
    476e:	21 f0       	breq	.+8      	; 0x4778 <SPI_u8InitConfig+0x4c>
    4770:	32 30       	cpi	r19, 0x02	; 2
    4772:	21 f0       	breq	.+8      	; 0x477c <SPI_u8InitConfig+0x50>
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	04 c0       	rjmp	.+8      	; 0x4780 <SPI_u8InitConfig+0x54>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING: CLR_BIT(SPCR,SPCR_CPHA) ; break ;
    4778:	6a 98       	cbi	0x0d, 2	; 13
    477a:	01 c0       	rjmp	.+2      	; 0x477e <SPI_u8InitConfig+0x52>
		case SPI_SETUP_LEADING_SAMPLE_TRAILING: SET_BIT(SPCR,SPCR_CPHA) ; break ;
    477c:	6a 9a       	sbi	0x0d, 2	; 13
    477e:	80 e0       	ldi	r24, 0x00	; 0
		default: 								Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockPolarity)
    4780:	41 30       	cpi	r20, 0x01	; 1
    4782:	21 f0       	breq	.+8      	; 0x478c <SPI_u8InitConfig+0x60>
    4784:	42 30       	cpi	r20, 0x02	; 2
    4786:	21 f0       	breq	.+8      	; 0x4790 <SPI_u8InitConfig+0x64>
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	03 c0       	rjmp	.+6      	; 0x4792 <SPI_u8InitConfig+0x66>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING: CLR_BIT(SPCR , SPCR_CPOL) ; break ;
    478c:	6b 98       	cbi	0x0d, 3	; 13
    478e:	01 c0       	rjmp	.+2      	; 0x4792 <SPI_u8InitConfig+0x66>
		case SPI_FALLING_LEADING_RISING_TRAILING: SET_BIT(SPCR , SPCR_CPOL) ; break ;
    4790:	6b 9a       	sbi	0x0d, 3	; 13
		default:								  Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockRate)
    4792:	23 30       	cpi	r18, 0x03	; 3
    4794:	b9 f0       	breq	.+46     	; 0x47c4 <SPI_u8InitConfig+0x98>
    4796:	24 30       	cpi	r18, 0x04	; 4
    4798:	28 f4       	brcc	.+10     	; 0x47a4 <SPI_u8InitConfig+0x78>
    479a:	21 30       	cpi	r18, 0x01	; 1
    479c:	69 f0       	breq	.+26     	; 0x47b8 <SPI_u8InitConfig+0x8c>
    479e:	22 30       	cpi	r18, 0x02	; 2
    47a0:	68 f4       	brcc	.+26     	; 0x47bc <SPI_u8InitConfig+0x90>
    47a2:	08 c0       	rjmp	.+16     	; 0x47b4 <SPI_u8InitConfig+0x88>
    47a4:	25 30       	cpi	r18, 0x05	; 5
    47a6:	a1 f0       	breq	.+40     	; 0x47d0 <SPI_u8InitConfig+0xa4>
    47a8:	25 30       	cpi	r18, 0x05	; 5
    47aa:	78 f0       	brcs	.+30     	; 0x47ca <SPI_u8InitConfig+0x9e>
    47ac:	26 30       	cpi	r18, 0x06	; 6
    47ae:	91 f0       	breq	.+36     	; 0x47d4 <SPI_u8InitConfig+0xa8>
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	13 c0       	rjmp	.+38     	; 0x47da <SPI_u8InitConfig+0xae>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    47b4:	68 98       	cbi	0x0d, 0	; 13
    47b6:	03 c0       	rjmp	.+6      	; 0x47be <SPI_u8InitConfig+0x92>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    47b8:	68 98       	cbi	0x0d, 0	; 13
    47ba:	05 c0       	rjmp	.+10     	; 0x47c6 <SPI_u8InitConfig+0x9a>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR , SPCR_SPR0) ;
    47bc:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    47be:	69 98       	cbi	0x0d, 1	; 13
			SET_BIT(SPSR , SPSR_SPI2X) ;
    47c0:	70 9a       	sbi	0x0e, 0	; 14
    47c2:	0b c0       	rjmp	.+22     	; 0x47da <SPI_u8InitConfig+0xae>
			break ;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR , SPCR_SPR0) ;
    47c4:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    47c6:	69 98       	cbi	0x0d, 1	; 13
    47c8:	07 c0       	rjmp	.+14     	; 0x47d8 <SPI_u8InitConfig+0xac>
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    47ca:	68 98       	cbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    47cc:	69 9a       	sbi	0x0d, 1	; 13
    47ce:	f8 cf       	rjmp	.-16     	; 0x47c0 <SPI_u8InitConfig+0x94>
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    47d0:	68 98       	cbi	0x0d, 0	; 13
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <SPI_u8InitConfig+0xaa>
			SET_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR , SPCR_SPR0) ;
    47d4:	68 9a       	sbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    47d6:	69 9a       	sbi	0x0d, 1	; 13
			CLR_BIT(SPSR , SPSR_SPI2X) ;
    47d8:	70 98       	cbi	0x0e, 0	; 14
			break ;
		default:
			Local_u8ErrorState = E_NOK ;
			break ;
		}
		switch (spi->SPI_u8DataOrder)
    47da:	51 30       	cpi	r21, 0x01	; 1
    47dc:	31 f0       	breq	.+12     	; 0x47ea <SPI_u8InitConfig+0xbe>
    47de:	52 30       	cpi	r21, 0x02	; 2
    47e0:	11 f0       	breq	.+4      	; 0x47e6 <SPI_u8InitConfig+0xba>
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	03 c0       	rjmp	.+6      	; 0x47ec <SPI_u8InitConfig+0xc0>
		{
		case SPI_DATA_MSP_FIRST: CLR_BIT(SPCR , SPCR_DORD) ; break ;
    47e6:	6d 98       	cbi	0x0d, 5	; 13
    47e8:	01 c0       	rjmp	.+2      	; 0x47ec <SPI_u8InitConfig+0xc0>
		case SPI_DATA_LSB_FIRST: SET_BIT(SPCR , SPCR_DORD) ; break ;
    47ea:	6d 9a       	sbi	0x0d, 5	; 13
		default:				 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    47ec:	61 30       	cpi	r22, 0x01	; 1
    47ee:	21 f0       	breq	.+8      	; 0x47f8 <SPI_u8InitConfig+0xcc>
    47f0:	62 30       	cpi	r22, 0x02	; 2
    47f2:	21 f0       	breq	.+8      	; 0x47fc <SPI_u8InitConfig+0xd0>
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	03 c0       	rjmp	.+6      	; 0x47fe <SPI_u8InitConfig+0xd2>
		{
		case SPI_MASTER: SET_BIT(SPCR , SPCR_MSTR) ; break ;
    47f8:	6c 9a       	sbi	0x0d, 4	; 13
    47fa:	01 c0       	rjmp	.+2      	; 0x47fe <SPI_u8InitConfig+0xd2>
		case SPI_SLAVE:  CLR_BIT(SPCR , SPCR_MSTR) ; break ;
    47fc:	6c 98       	cbi	0x0d, 4	; 13
		default:		 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8InterruptEnable)
    47fe:	71 30       	cpi	r23, 0x01	; 1
    4800:	21 f0       	breq	.+8      	; 0x480a <SPI_u8InitConfig+0xde>
    4802:	72 30       	cpi	r23, 0x02	; 2
    4804:	21 f0       	breq	.+8      	; 0x480e <SPI_u8InitConfig+0xe2>
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	03 c0       	rjmp	.+6      	; 0x4810 <SPI_u8InitConfig+0xe4>
		{
		case SPI_INTERRUPT_DISABLE: CLR_BIT(SPCR , SPCR_SPIE) ; break ;
    480a:	6f 98       	cbi	0x0d, 7	; 13
    480c:	01 c0       	rjmp	.+2      	; 0x4810 <SPI_u8InitConfig+0xe4>
		case SPI_INTERRUPT_ENABLE:  SET_BIT(SPCR , SPCR_SPIE) ; break ;
    480e:	6f 9a       	sbi	0x0d, 7	; 13
		default:		 			Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8SPIEnable)
    4810:	91 30       	cpi	r25, 0x01	; 1
    4812:	21 f0       	breq	.+8      	; 0x481c <SPI_u8InitConfig+0xf0>
    4814:	92 30       	cpi	r25, 0x02	; 2
    4816:	21 f0       	breq	.+8      	; 0x4820 <SPI_u8InitConfig+0xf4>
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	08 95       	ret
		{
		case SPI_DISABLE: CLR_BIT(SPCR , SPCR_SPE) ; break ;
    481c:	6e 98       	cbi	0x0d, 6	; 13
    481e:	08 95       	ret
		case SPI_ENABLE:  SET_BIT(SPCR , SPCR_SPE) ; break ;
    4820:	6e 9a       	sbi	0x0d, 6	; 13
    4822:	08 95       	ret
    4824:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    4826:	08 95       	ret

00004828 <SPI_u8Tranceive>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8Tranceive (u8 Copy_u8TData , u8 * Copy_u8RData)
{
    4828:	98 2f       	mov	r25, r24
    482a:	fb 01       	movw	r30, r22
	u8 Local_u8ErrorState = E_OK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
    482c:	80 91 ff 01 	lds	r24, 0x01FF
    4830:	88 23       	and	r24, r24
    4832:	11 f0       	breq	.+4      	; 0x4838 <SPI_u8Tranceive+0x10>
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	08 95       	ret
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8TData ;
    4838:	9f b9       	out	0x0f, r25	; 15

		while (((GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT))
    483a:	77 9b       	sbis	0x0e, 7	; 14
    483c:	fe cf       	rjmp	.-4      	; 0x483a <SPI_u8Tranceive+0x12>
		{
			Local_u8ErrorState = E_NOK ;
		}
		else
		{
			* Copy_u8RData = SPDR ;
    483e:	8f b1       	in	r24, 0x0f	; 15
    4840:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE ;
    4842:	10 92 ff 01 	sts	0x01FF, r1
    4846:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4848:	08 95       	ret

0000484a <SPI_u8BufferTranceiverSynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverSynch (u8 * Copy_u8TData , u8 * Copy_u8RData , u8 Copy_u8BufferSize)
{
    484a:	df 92       	push	r13
    484c:	ef 92       	push	r14
    484e:	ff 92       	push	r15
    4850:	0f 93       	push	r16
    4852:	1f 93       	push	r17
    4854:	cf 93       	push	r28
    4856:	df 93       	push	r29
    4858:	7b 01       	movw	r14, r22
    485a:	d4 2e       	mov	r13, r20
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	a1 f0       	breq	.+40     	; 0x4888 <SPI_u8BufferTranceiverSynch+0x3e>
    4860:	61 15       	cp	r22, r1
    4862:	71 05       	cpc	r23, r1
    4864:	89 f0       	breq	.+34     	; 0x4888 <SPI_u8BufferTranceiverSynch+0x3e>
    4866:	8c 01       	movw	r16, r24
    4868:	c0 e0       	ldi	r28, 0x00	; 0
    486a:	d0 e0       	ldi	r29, 0x00	; 0
    486c:	09 c0       	rjmp	.+18     	; 0x4880 <SPI_u8BufferTranceiverSynch+0x36>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter] , &Copy_u8RData[Local_u8Counter]) ;
    486e:	b7 01       	movw	r22, r14
    4870:	6c 0f       	add	r22, r28
    4872:	7d 1f       	adc	r23, r29
    4874:	f8 01       	movw	r30, r16
    4876:	81 91       	ld	r24, Z+
    4878:	8f 01       	movw	r16, r30
    487a:	0e 94 14 24 	call	0x4828	; 0x4828 <SPI_u8Tranceive>
    487e:	21 96       	adiw	r28, 0x01	; 1
{
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    4880:	cd 15       	cp	r28, r13
    4882:	a8 f3       	brcs	.-22     	; 0x486e <SPI_u8BufferTranceiverSynch+0x24>
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	01 c0       	rjmp	.+2      	; 0x488a <SPI_u8BufferTranceiverSynch+0x40>
    4888:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	1f 91       	pop	r17
    4890:	0f 91       	pop	r16
    4892:	ff 90       	pop	r15
    4894:	ef 90       	pop	r14
    4896:	df 90       	pop	r13
    4898:	08 95       	ret

0000489a <SPI_u8BufferTranceiverAsynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverAsynch (SPI_BUFFER * spi_buffer)
{
    489a:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
    489c:	80 91 ff 01 	lds	r24, 0x01FF
    48a0:	88 23       	and	r24, r24
    48a2:	11 f0       	breq	.+4      	; 0x48a8 <SPI_u8BufferTranceiverAsynch+0xe>
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	08 95       	ret
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    48a8:	30 97       	sbiw	r30, 0x00	; 0
    48aa:	39 f1       	breq	.+78     	; 0x48fa <SPI_u8BufferTranceiverAsynch+0x60>
    48ac:	a0 81       	ld	r26, Z
    48ae:	b1 81       	ldd	r27, Z+1	; 0x01
    48b0:	10 97       	sbiw	r26, 0x00	; 0
    48b2:	19 f1       	breq	.+70     	; 0x48fa <SPI_u8BufferTranceiverAsynch+0x60>
    48b4:	42 81       	ldd	r20, Z+2	; 0x02
    48b6:	53 81       	ldd	r21, Z+3	; 0x03
    48b8:	41 15       	cp	r20, r1
    48ba:	51 05       	cpc	r21, r1
    48bc:	f1 f0       	breq	.+60     	; 0x48fa <SPI_u8BufferTranceiverAsynch+0x60>
    48be:	25 81       	ldd	r18, Z+5	; 0x05
    48c0:	36 81       	ldd	r19, Z+6	; 0x06
    48c2:	21 15       	cp	r18, r1
    48c4:	31 05       	cpc	r19, r1
    48c6:	c9 f0       	breq	.+50     	; 0x48fa <SPI_u8BufferTranceiverAsynch+0x60>
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY ;
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	80 93 ff 01 	sts	0x01FF, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData = spi_buffer->Copy_u8TData ;
    48ce:	b0 93 03 02 	sts	0x0203, r27
    48d2:	a0 93 02 02 	sts	0x0202, r26
			SPI_pu8RData = spi_buffer->Copy_u8RData ;
    48d6:	50 93 fe 01 	sts	0x01FE, r21
    48da:	40 93 fd 01 	sts	0x01FD, r20
			SPI_u8BufferSize = spi_buffer->Copy_u8BufferSize ;
    48de:	84 81       	ldd	r24, Z+4	; 0x04
    48e0:	80 93 04 02 	sts	0x0204, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn ;
    48e4:	30 93 01 02 	sts	0x0201, r19
    48e8:	20 93 00 02 	sts	0x0200, r18

			/*Set Index to first element*/
			SPI_u8Index = 0 ;
    48ec:	10 92 05 02 	sts	0x0205, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index] ;
    48f0:	8c 91       	ld	r24, X
    48f2:	8f b9       	out	0x0f, r24	; 15

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR , SPCR_SPIE) ;
    48f4:	6f 9a       	sbi	0x0d, 7	; 13
    48f6:	80 e0       	ldi	r24, 0x00	; 0
    48f8:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    48fa:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK ;
	}
	return Local_u8ErrorState ;
}
    48fc:	08 95       	ret

000048fe <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12 (void)		__attribute__ ((signal)) ;
void __vector_12 (void)
{
    48fe:	1f 92       	push	r1
    4900:	0f 92       	push	r0
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	0f 92       	push	r0
    4906:	11 24       	eor	r1, r1
    4908:	2f 93       	push	r18
    490a:	3f 93       	push	r19
    490c:	4f 93       	push	r20
    490e:	5f 93       	push	r21
    4910:	6f 93       	push	r22
    4912:	7f 93       	push	r23
    4914:	8f 93       	push	r24
    4916:	9f 93       	push	r25
    4918:	af 93       	push	r26
    491a:	bf 93       	push	r27
    491c:	ef 93       	push	r30
    491e:	ff 93       	push	r31
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR ;
    4920:	90 91 05 02 	lds	r25, 0x0205
    4924:	8f b1       	in	r24, 0x0f	; 15
    4926:	e0 91 fd 01 	lds	r30, 0x01FD
    492a:	f0 91 fe 01 	lds	r31, 0x01FE
    492e:	e9 0f       	add	r30, r25
    4930:	f1 1d       	adc	r31, r1
    4932:	80 83       	st	Z, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++ ;
    4934:	9f 5f       	subi	r25, 0xFF	; 255
    4936:	90 93 05 02 	sts	0x0205, r25

	if (SPI_u8Index == SPI_u8BufferSize)
    493a:	80 91 04 02 	lds	r24, 0x0204
    493e:	98 17       	cp	r25, r24
    4940:	49 f4       	brne	.+18     	; 0x4954 <__vector_12+0x56>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE ;
    4942:	10 92 ff 01 	sts	0x01FF, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR , SPCR_SPIE) ;
    4946:	6f 98       	cbi	0x0d, 7	; 13

		/*Call Notification Function*/
		SPI_pvNotificationFunc() ;
    4948:	e0 91 00 02 	lds	r30, 0x0200
    494c:	f0 91 01 02 	lds	r31, 0x0201
    4950:	09 95       	icall
    4952:	08 c0       	rjmp	.+16     	; 0x4964 <__vector_12+0x66>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index] ;
    4954:	e0 91 02 02 	lds	r30, 0x0202
    4958:	f0 91 03 02 	lds	r31, 0x0203
    495c:	e9 0f       	add	r30, r25
    495e:	f1 1d       	adc	r31, r1
    4960:	80 81       	ld	r24, Z
    4962:	8f b9       	out	0x0f, r24	; 15
	}
}
    4964:	ff 91       	pop	r31
    4966:	ef 91       	pop	r30
    4968:	bf 91       	pop	r27
    496a:	af 91       	pop	r26
    496c:	9f 91       	pop	r25
    496e:	8f 91       	pop	r24
    4970:	7f 91       	pop	r23
    4972:	6f 91       	pop	r22
    4974:	5f 91       	pop	r21
    4976:	4f 91       	pop	r20
    4978:	3f 91       	pop	r19
    497a:	2f 91       	pop	r18
    497c:	0f 90       	pop	r0
    497e:	0f be       	out	0x3f, r0	; 63
    4980:	0f 90       	pop	r0
    4982:	1f 90       	pop	r1
    4984:	18 95       	reti

00004986 <Set_SleepMode>:
			CLR_BIT(MCUCR,SM0);
			SET_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);

	#elif POWER_MANAGEMENT_MODE == PWR_SAVE_MODE
			SET_BIT(MCUCR,SM0);
    4986:	85 b7       	in	r24, 0x35	; 53
    4988:	80 61       	ori	r24, 0x10	; 16
    498a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    498c:	85 b7       	in	r24, 0x35	; 53
    498e:	80 62       	ori	r24, 0x20	; 32
    4990:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    4992:	85 b7       	in	r24, 0x35	; 53
    4994:	8f 7b       	andi	r24, 0xBF	; 191
    4996:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
	#else
		#error "wrong POWER_MANAGEMENT_MODE Configuration Parameter"
	#endif

}
    4998:	08 95       	ret

0000499a <Change_SleepMode>:


void Change_SleepMode(u8 SleepMode)
{
	switch(SleepMode)
    499a:	83 30       	cpi	r24, 0x03	; 3
    499c:	e9 f0       	breq	.+58     	; 0x49d8 <Change_SleepMode+0x3e>
    499e:	84 30       	cpi	r24, 0x04	; 4
    49a0:	28 f4       	brcc	.+10     	; 0x49ac <Change_SleepMode+0x12>
    49a2:	81 30       	cpi	r24, 0x01	; 1
    49a4:	69 f0       	breq	.+26     	; 0x49c0 <Change_SleepMode+0x26>
    49a6:	82 30       	cpi	r24, 0x02	; 2
    49a8:	a0 f4       	brcc	.+40     	; 0x49d2 <Change_SleepMode+0x38>
    49aa:	07 c0       	rjmp	.+14     	; 0x49ba <Change_SleepMode+0x20>
    49ac:	85 30       	cpi	r24, 0x05	; 5
    49ae:	01 f1       	breq	.+64     	; 0x49f0 <Change_SleepMode+0x56>
    49b0:	85 30       	cpi	r24, 0x05	; 5
    49b2:	c0 f0       	brcs	.+48     	; 0x49e4 <Change_SleepMode+0x4a>
    49b4:	86 30       	cpi	r24, 0x06	; 6
    49b6:	79 f5       	brne	.+94     	; 0x4a16 <Change_SleepMode+0x7c>
    49b8:	25 c0       	rjmp	.+74     	; 0x4a04 <Change_SleepMode+0x6a>
		{
			case IDLE_MODE:
			CLR_BIT(MCUCR,SM0);
    49ba:	85 b7       	in	r24, 0x35	; 53
    49bc:	8f 7e       	andi	r24, 0xEF	; 239
    49be:	02 c0       	rjmp	.+4      	; 0x49c4 <Change_SleepMode+0x2a>
			CLR_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case ADC_NR_MODE:
			SET_BIT(MCUCR,SM0);
    49c0:	85 b7       	in	r24, 0x35	; 53
    49c2:	80 61       	ori	r24, 0x10	; 16
    49c4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    49c6:	85 b7       	in	r24, 0x35	; 53
    49c8:	8f 7d       	andi	r24, 0xDF	; 223
    49ca:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    49cc:	85 b7       	in	r24, 0x35	; 53
    49ce:	8f 7b       	andi	r24, 0xBF	; 191
    49d0:	17 c0       	rjmp	.+46     	; 0x4a00 <Change_SleepMode+0x66>
			break;
			case PWR_DOWN_MODE:
			CLR_BIT(MCUCR,SM0);
    49d2:	85 b7       	in	r24, 0x35	; 53
    49d4:	8f 7e       	andi	r24, 0xEF	; 239
    49d6:	02 c0       	rjmp	.+4      	; 0x49dc <Change_SleepMode+0x42>
			SET_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case PWR_SAVE_MODE:
			SET_BIT(MCUCR,SM0);
    49d8:	85 b7       	in	r24, 0x35	; 53
    49da:	80 61       	ori	r24, 0x10	; 16
    49dc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    49de:	85 b7       	in	r24, 0x35	; 53
    49e0:	80 62       	ori	r24, 0x20	; 32
    49e2:	f3 cf       	rjmp	.-26     	; 0x49ca <Change_SleepMode+0x30>
			CLR_BIT(MCUCR,SM2);
			break;
			case RESERVED_MODE:
			CLR_BIT(MCUCR,SM0);
    49e4:	85 b7       	in	r24, 0x35	; 53
    49e6:	8f 7e       	andi	r24, 0xEF	; 239
    49e8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    49ea:	85 b7       	in	r24, 0x35	; 53
    49ec:	8f 7d       	andi	r24, 0xDF	; 223
    49ee:	05 c0       	rjmp	.+10     	; 0x49fa <Change_SleepMode+0x60>
			SET_BIT(MCUCR,SM2);
			break;
			case STANDBY_MODE:
			CLR_BIT(MCUCR,SM0);
    49f0:	85 b7       	in	r24, 0x35	; 53
    49f2:	8f 7e       	andi	r24, 0xEF	; 239
    49f4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    49f6:	85 b7       	in	r24, 0x35	; 53
    49f8:	80 62       	ori	r24, 0x20	; 32
    49fa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    49fc:	85 b7       	in	r24, 0x35	; 53
    49fe:	80 64       	ori	r24, 0x40	; 64
    4a00:	85 bf       	out	0x35, r24	; 53
    4a02:	08 95       	ret
			break;
			case EXT_STANDBY_MODE:
			SET_BIT(MCUCR,SM0);
    4a04:	85 b7       	in	r24, 0x35	; 53
    4a06:	80 61       	ori	r24, 0x10	; 16
    4a08:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    4a0a:	85 b7       	in	r24, 0x35	; 53
    4a0c:	80 62       	ori	r24, 0x20	; 32
    4a0e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    4a10:	85 b7       	in	r24, 0x35	; 53
    4a12:	80 64       	ori	r24, 0x40	; 64
    4a14:	85 bf       	out	0x35, r24	; 53
    4a16:	08 95       	ret

00004a18 <CPU_SleepEnable>:
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    4a18:	85 b7       	in	r24, 0x35	; 53
    4a1a:	80 68       	ori	r24, 0x80	; 128
    4a1c:	85 bf       	out	0x35, r24	; 53
}
    4a1e:	08 95       	ret

00004a20 <CPU_SleepDisable>:

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    4a20:	85 b7       	in	r24, 0x35	; 53
    4a22:	8f 77       	andi	r24, 0x7F	; 127
    4a24:	85 bf       	out	0x35, r24	; 53
}
    4a26:	08 95       	ret

00004a28 <Sleep_CPU>:

void Sleep_CPU(void)
{
	do
	{
		sleep();
    4a28:	88 95       	sleep
	} while (0);
}
    4a2a:	08 95       	ret

00004a2c <CPU_Sleep>:

void CPU_Sleep(void)
{
	Set_SleepMode();
    4a2c:	0e 94 c3 24 	call	0x4986	; 0x4986 <Set_SleepMode>
	cli();
    4a30:	f8 94       	cli
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    4a32:	85 b7       	in	r24, 0x35	; 53
    4a34:	80 68       	ori	r24, 0x80	; 128
    4a36:	85 bf       	out	0x35, r24	; 53
void CPU_Sleep(void)
{
	Set_SleepMode();
	cli();
	CPU_SleepEnable();
	sei();
    4a38:	78 94       	sei

void Sleep_CPU(void)
{
	do
	{
		sleep();
    4a3a:	88 95       	sleep
	SET_BIT(MCUCR,SE);
}

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    4a3c:	85 b7       	in	r24, 0x35	; 53
    4a3e:	8f 77       	andi	r24, 0x7F	; 127
    4a40:	85 bf       	out	0x35, r24	; 53
	cli();
	CPU_SleepEnable();
	sei();
	Sleep_CPU();
	CPU_SleepDisable();
}
    4a42:	08 95       	ret

00004a44 <GIE_voidEnable>:
#include "GIE_Interface.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I_BIT);
    4a44:	8f b7       	in	r24, 0x3f	; 63
    4a46:	80 68       	ori	r24, 0x80	; 128
    4a48:	8f bf       	out	0x3f, r24	; 63
}
    4a4a:	08 95       	ret

00004a4c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
	CLR_BIT(SREG,SREG_I_BIT);
    4a4c:	8f b7       	in	r24, 0x3f	; 63
    4a4e:	8f 77       	andi	r24, 0x7F	; 127
    4a50:	8f bf       	out	0x3f, r24	; 63
}
    4a52:	08 95       	ret

00004a54 <EXTI_voidInit>:
void EXTI_voidInit(void)
{
/***************** EXTI 0 *******************/
	#if	EXTI_INT0_ENABLE == ENABLE

		SET_BIT(GICR,GICR_INT0);
    4a54:	8b b7       	in	r24, 0x3b	; 59
    4a56:	80 64       	ori	r24, 0x40	; 64
    4a58:	8b bf       	out	0x3b, r24	; 59

		#if EXTI_INT0_SC == FALLING_EDGE
			CLR_BIT(MCUCR,MCUCR_ISC00);
    4a5a:	85 b7       	in	r24, 0x35	; 53
    4a5c:	8e 7f       	andi	r24, 0xFE	; 254
    4a5e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
    4a60:	85 b7       	in	r24, 0x35	; 53
    4a62:	82 60       	ori	r24, 0x02	; 2
    4a64:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT0_ENABLE Error Configuration Parameter"
	#endif

/***************** EXTI 1 *******************/
	#if	EXTI_INT1_ENABLE == ENABLE
		SET_BIT(GICR,GICR_INT1);
    4a66:	8b b7       	in	r24, 0x3b	; 59
    4a68:	80 68       	ori	r24, 0x80	; 128
    4a6a:	8b bf       	out	0x3b, r24	; 59
		#if EXTI_INT1_SC == FALLING_EDGE
			CLR_BIT(MCUCR,MCUCR_ISC10);
    4a6c:	85 b7       	in	r24, 0x35	; 53
    4a6e:	8b 7f       	andi	r24, 0xFB	; 251
    4a70:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
    4a72:	85 b7       	in	r24, 0x35	; 53
    4a74:	88 60       	ori	r24, 0x08	; 8
    4a76:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT1_ENABLE Error Configuration Parameter"
	#endif

/***************** EXTI 2 *******************/
	#if	EXTI_INT2_ENABLE == ENABLE
		SET_BIT(GICR,GICR_INT2);
    4a78:	8b b7       	in	r24, 0x3b	; 59
    4a7a:	80 62       	ori	r24, 0x20	; 32
    4a7c:	8b bf       	out	0x3b, r24	; 59
		#if EXTI_INT2_SC == FALLING_EDGE
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    4a7e:	84 b7       	in	r24, 0x34	; 52
    4a80:	8f 7b       	andi	r24, 0xBF	; 191
    4a82:	84 bf       	out	0x34, r24	; 52
			CLR_BIT(GICR,GICR_INT2);
	#else
		#error "EXTI_INT2_ENABLE Error Configuration Parameter"
	#endif

}
    4a84:	08 95       	ret

00004a86 <EXTI_u8SetInt0SC>:

u8 EXTI_u8SetInt0SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    4a86:	82 30       	cpi	r24, 0x02	; 2
    4a88:	71 f0       	breq	.+28     	; 0x4aa6 <EXTI_u8SetInt0SC+0x20>
    4a8a:	83 30       	cpi	r24, 0x03	; 3
    4a8c:	18 f4       	brcc	.+6      	; 0x4a94 <EXTI_u8SetInt0SC+0xe>
    4a8e:	81 30       	cpi	r24, 0x01	; 1
    4a90:	29 f4       	brne	.+10     	; 0x4a9c <EXTI_u8SetInt0SC+0x16>
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0 <EXTI_u8SetInt0SC+0x1a>
    4a94:	83 30       	cpi	r24, 0x03	; 3
    4a96:	81 f0       	breq	.+32     	; 0x4ab8 <EXTI_u8SetInt0SC+0x32>
    4a98:	84 30       	cpi	r24, 0x04	; 4
    4a9a:	59 f0       	breq	.+22     	; 0x4ab2 <EXTI_u8SetInt0SC+0x2c>
    4a9c:	91 e0       	ldi	r25, 0x01	; 1
    4a9e:	13 c0       	rjmp	.+38     	; 0x4ac6 <EXTI_u8SetInt0SC+0x40>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    4aa0:	85 b7       	in	r24, 0x35	; 53
    4aa2:	8e 7f       	andi	r24, 0xFE	; 254
    4aa4:	02 c0       	rjmp	.+4      	; 0x4aaa <EXTI_u8SetInt0SC+0x24>
			SET_BIT(MCUCR,MCUCR_ISC01);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    4aa6:	85 b7       	in	r24, 0x35	; 53
    4aa8:	81 60       	ori	r24, 0x01	; 1
    4aaa:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
    4aac:	85 b7       	in	r24, 0x35	; 53
    4aae:	82 60       	ori	r24, 0x02	; 2
    4ab0:	08 c0       	rjmp	.+16     	; 0x4ac2 <EXTI_u8SetInt0SC+0x3c>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    4ab2:	85 b7       	in	r24, 0x35	; 53
    4ab4:	81 60       	ori	r24, 0x01	; 1
    4ab6:	02 c0       	rjmp	.+4      	; 0x4abc <EXTI_u8SetInt0SC+0x36>
			CLR_BIT(MCUCR,MCUCR_ISC01);
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    4ab8:	85 b7       	in	r24, 0x35	; 53
    4aba:	8e 7f       	andi	r24, 0xFE	; 254
    4abc:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC01);
    4abe:	85 b7       	in	r24, 0x35	; 53
    4ac0:	8d 7f       	andi	r24, 0xFD	; 253
    4ac2:	85 bf       	out	0x35, r24	; 53
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT0);
    4ac6:	8b b7       	in	r24, 0x3b	; 59
    4ac8:	80 64       	ori	r24, 0x40	; 64
    4aca:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;
}
    4acc:	89 2f       	mov	r24, r25
    4ace:	08 95       	ret

00004ad0 <EXTI_u8SetInt1SC>:

u8 EXTI_u8SetInt1SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    4ad0:	82 30       	cpi	r24, 0x02	; 2
    4ad2:	71 f0       	breq	.+28     	; 0x4af0 <EXTI_u8SetInt1SC+0x20>
    4ad4:	83 30       	cpi	r24, 0x03	; 3
    4ad6:	18 f4       	brcc	.+6      	; 0x4ade <EXTI_u8SetInt1SC+0xe>
    4ad8:	81 30       	cpi	r24, 0x01	; 1
    4ada:	29 f4       	brne	.+10     	; 0x4ae6 <EXTI_u8SetInt1SC+0x16>
    4adc:	06 c0       	rjmp	.+12     	; 0x4aea <EXTI_u8SetInt1SC+0x1a>
    4ade:	83 30       	cpi	r24, 0x03	; 3
    4ae0:	81 f0       	breq	.+32     	; 0x4b02 <EXTI_u8SetInt1SC+0x32>
    4ae2:	84 30       	cpi	r24, 0x04	; 4
    4ae4:	59 f0       	breq	.+22     	; 0x4afc <EXTI_u8SetInt1SC+0x2c>
    4ae6:	91 e0       	ldi	r25, 0x01	; 1
    4ae8:	13 c0       	rjmp	.+38     	; 0x4b10 <EXTI_u8SetInt1SC+0x40>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    4aea:	85 b7       	in	r24, 0x35	; 53
    4aec:	8b 7f       	andi	r24, 0xFB	; 251
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <EXTI_u8SetInt1SC+0x24>
			SET_BIT(MCUCR,MCUCR_ISC11);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    4af0:	85 b7       	in	r24, 0x35	; 53
    4af2:	84 60       	ori	r24, 0x04	; 4
    4af4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
    4af6:	85 b7       	in	r24, 0x35	; 53
    4af8:	88 60       	ori	r24, 0x08	; 8
    4afa:	08 c0       	rjmp	.+16     	; 0x4b0c <EXTI_u8SetInt1SC+0x3c>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    4afc:	85 b7       	in	r24, 0x35	; 53
    4afe:	84 60       	ori	r24, 0x04	; 4
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <EXTI_u8SetInt1SC+0x36>
			CLR_BIT(MCUCR,MCUCR_ISC11);
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    4b02:	85 b7       	in	r24, 0x35	; 53
    4b04:	8b 7f       	andi	r24, 0xFB	; 251
    4b06:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC11);
    4b08:	85 b7       	in	r24, 0x35	; 53
    4b0a:	87 7f       	andi	r24, 0xF7	; 247
    4b0c:	85 bf       	out	0x35, r24	; 53
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT1);
    4b10:	8b b7       	in	r24, 0x3b	; 59
    4b12:	80 68       	ori	r24, 0x80	; 128
    4b14:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;


}
    4b16:	89 2f       	mov	r24, r25
    4b18:	08 95       	ret

00004b1a <EXTI_u8SetInt2SC>:

u8 EXTI_u8SetInt2SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    4b1a:	81 30       	cpi	r24, 0x01	; 1
    4b1c:	21 f0       	breq	.+8      	; 0x4b26 <EXTI_u8SetInt2SC+0xc>
    4b1e:	82 30       	cpi	r24, 0x02	; 2
    4b20:	29 f0       	breq	.+10     	; 0x4b2c <EXTI_u8SetInt2SC+0x12>
    4b22:	91 e0       	ldi	r25, 0x01	; 1
    4b24:	07 c0       	rjmp	.+14     	; 0x4b34 <EXTI_u8SetInt2SC+0x1a>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    4b26:	84 b7       	in	r24, 0x34	; 52
    4b28:	8f 7b       	andi	r24, 0xBF	; 191
    4b2a:	02 c0       	rjmp	.+4      	; 0x4b30 <EXTI_u8SetInt2SC+0x16>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    4b2c:	84 b7       	in	r24, 0x34	; 52
    4b2e:	80 64       	ori	r24, 0x40	; 64
    4b30:	84 bf       	out	0x34, r24	; 52
    4b32:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT2);
    4b34:	8b b7       	in	r24, 0x3b	; 59
    4b36:	80 62       	ori	r24, 0x20	; 32
    4b38:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;
}
    4b3a:	89 2f       	mov	r24, r25
    4b3c:	08 95       	ret

00004b3e <EXTI_u8INT0SetCallBack>:

u8 EXTI_u8INT0SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	11 f4       	brne	.+4      	; 0x4b46 <EXTI_u8INT0SetCallBack+0x8>
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI0 = copy_ptrToFunction;
    4b46:	90 93 0b 02 	sts	0x020B, r25
    4b4a:	80 93 0a 02 	sts	0x020A, r24
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    4b50:	08 95       	ret

00004b52 <EXTI_voidClearInt0Flag>:

void EXTI_voidClearInt0Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF0);
    4b52:	8a b7       	in	r24, 0x3a	; 58
    4b54:	80 64       	ori	r24, 0x40	; 64
    4b56:	8a bf       	out	0x3a, r24	; 58

}
    4b58:	08 95       	ret

00004b5a <EXTI_voidClearInt1Flag>:
void EXTI_voidClearInt1Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF1);
    4b5a:	8a b7       	in	r24, 0x3a	; 58
    4b5c:	80 68       	ori	r24, 0x80	; 128
    4b5e:	8a bf       	out	0x3a, r24	; 58
}
    4b60:	08 95       	ret

00004b62 <EXTI_voidClearInt2Flag>:
void EXTI_voidClearInt2Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF2);
    4b62:	8a b7       	in	r24, 0x3a	; 58
    4b64:	80 62       	ori	r24, 0x20	; 32
    4b66:	8a bf       	out	0x3a, r24	; 58
}
    4b68:	08 95       	ret

00004b6a <EXTI_u8INT1SetCallBack>:

u8 EXTI_u8INT1SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	11 f4       	brne	.+4      	; 0x4b72 <EXTI_u8INT1SetCallBack+0x8>
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI1 = copy_ptrToFunction;
    4b72:	90 93 09 02 	sts	0x0209, r25
    4b76:	80 93 08 02 	sts	0x0208, r24
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    4b7c:	08 95       	ret

00004b7e <EXTI_u8INT2SetCallBack>:

u8 EXTI_u8INT2SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    4b7e:	00 97       	sbiw	r24, 0x00	; 0
    4b80:	11 f4       	brne	.+4      	; 0x4b86 <EXTI_u8INT2SetCallBack+0x8>
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI2 = copy_ptrToFunction;
    4b86:	90 93 07 02 	sts	0x0207, r25
    4b8a:	80 93 06 02 	sts	0x0206, r24
    4b8e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    4b90:	08 95       	ret

00004b92 <__vector_1>:

/*********** ISR **************************/
/****ISR EXTI0*****/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    4b92:	1f 92       	push	r1
    4b94:	0f 92       	push	r0
    4b96:	0f b6       	in	r0, 0x3f	; 63
    4b98:	0f 92       	push	r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	2f 93       	push	r18
    4b9e:	3f 93       	push	r19
    4ba0:	4f 93       	push	r20
    4ba2:	5f 93       	push	r21
    4ba4:	6f 93       	push	r22
    4ba6:	7f 93       	push	r23
    4ba8:	8f 93       	push	r24
    4baa:	9f 93       	push	r25
    4bac:	af 93       	push	r26
    4bae:	bf 93       	push	r27
    4bb0:	ef 93       	push	r30
    4bb2:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI0 != NULL)
    4bb4:	e0 91 0a 02 	lds	r30, 0x020A
    4bb8:	f0 91 0b 02 	lds	r31, 0x020B
    4bbc:	30 97       	sbiw	r30, 0x00	; 0
    4bbe:	09 f0       	breq	.+2      	; 0x4bc2 <__vector_1+0x30>
	{
		GLOBAL_ptrToFuncEXTI0();
    4bc0:	09 95       	icall
	else
	{

	}

}
    4bc2:	ff 91       	pop	r31
    4bc4:	ef 91       	pop	r30
    4bc6:	bf 91       	pop	r27
    4bc8:	af 91       	pop	r26
    4bca:	9f 91       	pop	r25
    4bcc:	8f 91       	pop	r24
    4bce:	7f 91       	pop	r23
    4bd0:	6f 91       	pop	r22
    4bd2:	5f 91       	pop	r21
    4bd4:	4f 91       	pop	r20
    4bd6:	3f 91       	pop	r19
    4bd8:	2f 91       	pop	r18
    4bda:	0f 90       	pop	r0
    4bdc:	0f be       	out	0x3f, r0	; 63
    4bde:	0f 90       	pop	r0
    4be0:	1f 90       	pop	r1
    4be2:	18 95       	reti

00004be4 <__vector_2>:

/****ISR EXTI1*****/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    4be4:	1f 92       	push	r1
    4be6:	0f 92       	push	r0
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	0f 92       	push	r0
    4bec:	11 24       	eor	r1, r1
    4bee:	2f 93       	push	r18
    4bf0:	3f 93       	push	r19
    4bf2:	4f 93       	push	r20
    4bf4:	5f 93       	push	r21
    4bf6:	6f 93       	push	r22
    4bf8:	7f 93       	push	r23
    4bfa:	8f 93       	push	r24
    4bfc:	9f 93       	push	r25
    4bfe:	af 93       	push	r26
    4c00:	bf 93       	push	r27
    4c02:	ef 93       	push	r30
    4c04:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI1 != NULL)
    4c06:	e0 91 08 02 	lds	r30, 0x0208
    4c0a:	f0 91 09 02 	lds	r31, 0x0209
    4c0e:	30 97       	sbiw	r30, 0x00	; 0
    4c10:	09 f0       	breq	.+2      	; 0x4c14 <__vector_2+0x30>
	{
		GLOBAL_ptrToFuncEXTI1();
    4c12:	09 95       	icall
	else
	{

	}

}
    4c14:	ff 91       	pop	r31
    4c16:	ef 91       	pop	r30
    4c18:	bf 91       	pop	r27
    4c1a:	af 91       	pop	r26
    4c1c:	9f 91       	pop	r25
    4c1e:	8f 91       	pop	r24
    4c20:	7f 91       	pop	r23
    4c22:	6f 91       	pop	r22
    4c24:	5f 91       	pop	r21
    4c26:	4f 91       	pop	r20
    4c28:	3f 91       	pop	r19
    4c2a:	2f 91       	pop	r18
    4c2c:	0f 90       	pop	r0
    4c2e:	0f be       	out	0x3f, r0	; 63
    4c30:	0f 90       	pop	r0
    4c32:	1f 90       	pop	r1
    4c34:	18 95       	reti

00004c36 <__vector_3>:

/****ISR EXTI2*****/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    4c36:	1f 92       	push	r1
    4c38:	0f 92       	push	r0
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	0f 92       	push	r0
    4c3e:	11 24       	eor	r1, r1
    4c40:	2f 93       	push	r18
    4c42:	3f 93       	push	r19
    4c44:	4f 93       	push	r20
    4c46:	5f 93       	push	r21
    4c48:	6f 93       	push	r22
    4c4a:	7f 93       	push	r23
    4c4c:	8f 93       	push	r24
    4c4e:	9f 93       	push	r25
    4c50:	af 93       	push	r26
    4c52:	bf 93       	push	r27
    4c54:	ef 93       	push	r30
    4c56:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI2 != NULL)
    4c58:	e0 91 06 02 	lds	r30, 0x0206
    4c5c:	f0 91 07 02 	lds	r31, 0x0207
    4c60:	30 97       	sbiw	r30, 0x00	; 0
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <__vector_3+0x30>
	{
		GLOBAL_ptrToFuncEXTI2();
    4c64:	09 95       	icall
	else
	{

	}

}
    4c66:	ff 91       	pop	r31
    4c68:	ef 91       	pop	r30
    4c6a:	bf 91       	pop	r27
    4c6c:	af 91       	pop	r26
    4c6e:	9f 91       	pop	r25
    4c70:	8f 91       	pop	r24
    4c72:	7f 91       	pop	r23
    4c74:	6f 91       	pop	r22
    4c76:	5f 91       	pop	r21
    4c78:	4f 91       	pop	r20
    4c7a:	3f 91       	pop	r19
    4c7c:	2f 91       	pop	r18
    4c7e:	0f 90       	pop	r0
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	0f 90       	pop	r0
    4c84:	1f 90       	pop	r1
    4c86:	18 95       	reti

00004c88 <DIO_u8SetPortValue>:

/********************************** FUNCTION Implementation ****************************************/
ReturnType_State_t DIO_u8SetPortValue(u8 copy_u8Port , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    4c88:	81 30       	cpi	r24, 0x01	; 1
    4c8a:	51 f0       	breq	.+20     	; 0x4ca0 <DIO_u8SetPortValue+0x18>
    4c8c:	81 30       	cpi	r24, 0x01	; 1
    4c8e:	30 f0       	brcs	.+12     	; 0x4c9c <DIO_u8SetPortValue+0x14>
    4c90:	82 30       	cpi	r24, 0x02	; 2
    4c92:	41 f0       	breq	.+16     	; 0x4ca4 <DIO_u8SetPortValue+0x1c>
    4c94:	83 30       	cpi	r24, 0x03	; 3
    4c96:	49 f0       	breq	.+18     	; 0x4caa <DIO_u8SetPortValue+0x22>
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	08 95       	ret
	case DIO_PORTA:
		PORTA = copy_u8Value;
    4c9c:	6b bb       	out	0x1b, r22	; 27
    4c9e:	03 c0       	rjmp	.+6      	; 0x4ca6 <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTB:
		PORTB = copy_u8Value;
    4ca0:	68 bb       	out	0x18, r22	; 24
    4ca2:	01 c0       	rjmp	.+2      	; 0x4ca6 <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTC:
		PORTC = copy_u8Value;
    4ca4:	65 bb       	out	0x15, r22	; 21
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	08 95       	ret
	break;
	case DIO_PORTD:
		PORTD = copy_u8Value;
    4caa:	62 bb       	out	0x12, r22	; 18
    4cac:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    4cae:	08 95       	ret

00004cb0 <DIO_u8SetPortDirection>:

ReturnType_State_t DIO_u8SetPortDirection(u8 copy_u8Port , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    4cb0:	81 30       	cpi	r24, 0x01	; 1
    4cb2:	51 f0       	breq	.+20     	; 0x4cc8 <DIO_u8SetPortDirection+0x18>
    4cb4:	81 30       	cpi	r24, 0x01	; 1
    4cb6:	30 f0       	brcs	.+12     	; 0x4cc4 <DIO_u8SetPortDirection+0x14>
    4cb8:	82 30       	cpi	r24, 0x02	; 2
    4cba:	41 f0       	breq	.+16     	; 0x4ccc <DIO_u8SetPortDirection+0x1c>
    4cbc:	83 30       	cpi	r24, 0x03	; 3
    4cbe:	49 f0       	breq	.+18     	; 0x4cd2 <DIO_u8SetPortDirection+0x22>
    4cc0:	81 e0       	ldi	r24, 0x01	; 1
    4cc2:	08 95       	ret
	case DIO_PORTA:
		DDRA = copy_u8Direction;
    4cc4:	6a bb       	out	0x1a, r22	; 26
    4cc6:	03 c0       	rjmp	.+6      	; 0x4cce <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTB:
		DDRB = copy_u8Direction;
    4cc8:	67 bb       	out	0x17, r22	; 23
    4cca:	01 c0       	rjmp	.+2      	; 0x4cce <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTC:
		DDRC = copy_u8Direction;
    4ccc:	64 bb       	out	0x14, r22	; 20
    4cce:	80 e0       	ldi	r24, 0x00	; 0
    4cd0:	08 95       	ret
	break;
	case DIO_PORTD:
		DDRD = copy_u8Direction;
    4cd2:	61 bb       	out	0x11, r22	; 17
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    4cd6:	08 95       	ret

00004cd8 <DIO_u8GetPortValue>:

ReturnType_State_t DIO_u8GetPortValue(u8 copy_u8Port , u8 *copy_u8Variable)
{
    4cd8:	fb 01       	movw	r30, r22
	ReturnType_State_t Local_u8State = E_OK;
	if(copy_u8Variable != NULL)
    4cda:	61 15       	cp	r22, r1
    4cdc:	71 05       	cpc	r23, r1
    4cde:	11 f4       	brne	.+4      	; 0x4ce4 <DIO_u8GetPortValue+0xc>
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	08 95       	ret
	{
		switch(copy_u8Port){
    4ce4:	81 30       	cpi	r24, 0x01	; 1
    4ce6:	51 f0       	breq	.+20     	; 0x4cfc <DIO_u8GetPortValue+0x24>
    4ce8:	81 30       	cpi	r24, 0x01	; 1
    4cea:	30 f0       	brcs	.+12     	; 0x4cf8 <DIO_u8GetPortValue+0x20>
    4cec:	82 30       	cpi	r24, 0x02	; 2
    4cee:	41 f0       	breq	.+16     	; 0x4d00 <DIO_u8GetPortValue+0x28>
    4cf0:	83 30       	cpi	r24, 0x03	; 3
    4cf2:	51 f0       	breq	.+20     	; 0x4d08 <DIO_u8GetPortValue+0x30>
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	08 95       	ret
		case DIO_PORTA:
			*copy_u8Variable = PINA;
    4cf8:	89 b3       	in	r24, 0x19	; 25
    4cfa:	03 c0       	rjmp	.+6      	; 0x4d02 <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTB:
			*copy_u8Variable = PINB;
    4cfc:	86 b3       	in	r24, 0x16	; 22
    4cfe:	01 c0       	rjmp	.+2      	; 0x4d02 <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTC:
			*copy_u8Variable = PINC;
    4d00:	83 b3       	in	r24, 0x13	; 19
    4d02:	80 83       	st	Z, r24
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	08 95       	ret
		break;
		case DIO_PORTD:
			*copy_u8Variable = PIND;
    4d08:	80 b3       	in	r24, 0x10	; 16
    4d0a:	80 83       	st	Z, r24
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8State = E_NOK_NULL_PTR;
	}
	return Local_u8State;
}
    4d0e:	08 95       	ret

00004d10 <DIO_u8SetPinValue>:

ReturnType_State_t DIO_u8SetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4d10:	68 30       	cpi	r22, 0x08	; 8
    4d12:	08 f0       	brcs	.+2      	; 0x4d16 <DIO_u8SetPinValue+0x6>
    4d14:	74 c0       	rjmp	.+232    	; 0x4dfe <DIO_u8SetPinValue+0xee>
	{
		if(copy_u8Value == DIO_PIN_LOW)
    4d16:	44 23       	and	r20, r20
    4d18:	d1 f5       	brne	.+116    	; 0x4d8e <DIO_u8SetPinValue+0x7e>
		{
			switch(copy_u8Port)
    4d1a:	81 30       	cpi	r24, 0x01	; 1
    4d1c:	a1 f0       	breq	.+40     	; 0x4d46 <DIO_u8SetPinValue+0x36>
    4d1e:	81 30       	cpi	r24, 0x01	; 1
    4d20:	30 f0       	brcs	.+12     	; 0x4d2e <DIO_u8SetPinValue+0x1e>
    4d22:	82 30       	cpi	r24, 0x02	; 2
    4d24:	e1 f0       	breq	.+56     	; 0x4d5e <DIO_u8SetPinValue+0x4e>
    4d26:	83 30       	cpi	r24, 0x03	; 3
    4d28:	09 f0       	breq	.+2      	; 0x4d2c <DIO_u8SetPinValue+0x1c>
    4d2a:	69 c0       	rjmp	.+210    	; 0x4dfe <DIO_u8SetPinValue+0xee>
    4d2c:	24 c0       	rjmp	.+72     	; 0x4d76 <DIO_u8SetPinValue+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA,copy_u8Pin);
    4d2e:	2b b3       	in	r18, 0x1b	; 27
    4d30:	81 e0       	ldi	r24, 0x01	; 1
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <DIO_u8SetPinValue+0x2a>
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	6a 95       	dec	r22
    4d3c:	e2 f7       	brpl	.-8      	; 0x4d36 <DIO_u8SetPinValue+0x26>
    4d3e:	80 95       	com	r24
    4d40:	82 23       	and	r24, r18
    4d42:	8b bb       	out	0x1b, r24	; 27
    4d44:	5a c0       	rjmp	.+180    	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(PORTB,copy_u8Pin);
    4d46:	28 b3       	in	r18, 0x18	; 24
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	02 c0       	rjmp	.+4      	; 0x4d52 <DIO_u8SetPinValue+0x42>
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	6a 95       	dec	r22
    4d54:	e2 f7       	brpl	.-8      	; 0x4d4e <DIO_u8SetPinValue+0x3e>
    4d56:	80 95       	com	r24
    4d58:	82 23       	and	r24, r18
    4d5a:	88 bb       	out	0x18, r24	; 24
    4d5c:	4e c0       	rjmp	.+156    	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(PORTC,copy_u8Pin);
    4d5e:	25 b3       	in	r18, 0x15	; 21
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	02 c0       	rjmp	.+4      	; 0x4d6a <DIO_u8SetPinValue+0x5a>
    4d66:	88 0f       	add	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	6a 95       	dec	r22
    4d6c:	e2 f7       	brpl	.-8      	; 0x4d66 <DIO_u8SetPinValue+0x56>
    4d6e:	80 95       	com	r24
    4d70:	82 23       	and	r24, r18
    4d72:	85 bb       	out	0x15, r24	; 21
    4d74:	42 c0       	rjmp	.+132    	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(PORTD,copy_u8Pin);
    4d76:	22 b3       	in	r18, 0x12	; 18
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	02 c0       	rjmp	.+4      	; 0x4d82 <DIO_u8SetPinValue+0x72>
    4d7e:	88 0f       	add	r24, r24
    4d80:	99 1f       	adc	r25, r25
    4d82:	6a 95       	dec	r22
    4d84:	e2 f7       	brpl	.-8      	; 0x4d7e <DIO_u8SetPinValue+0x6e>
    4d86:	80 95       	com	r24
    4d88:	82 23       	and	r24, r18
    4d8a:	82 bb       	out	0x12, r24	; 18
    4d8c:	36 c0       	rjmp	.+108    	; 0x4dfa <DIO_u8SetPinValue+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Value == DIO_PIN_HIGH)
    4d8e:	41 30       	cpi	r20, 0x01	; 1
    4d90:	a1 f5       	brne	.+104    	; 0x4dfa <DIO_u8SetPinValue+0xea>
		{
			switch(copy_u8Port)
    4d92:	81 30       	cpi	r24, 0x01	; 1
    4d94:	91 f0       	breq	.+36     	; 0x4dba <DIO_u8SetPinValue+0xaa>
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	28 f0       	brcs	.+10     	; 0x4da4 <DIO_u8SetPinValue+0x94>
    4d9a:	82 30       	cpi	r24, 0x02	; 2
    4d9c:	c9 f0       	breq	.+50     	; 0x4dd0 <DIO_u8SetPinValue+0xc0>
    4d9e:	83 30       	cpi	r24, 0x03	; 3
    4da0:	71 f5       	brne	.+92     	; 0x4dfe <DIO_u8SetPinValue+0xee>
    4da2:	21 c0       	rjmp	.+66     	; 0x4de6 <DIO_u8SetPinValue+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(PORTA,copy_u8Pin);
    4da4:	2b b3       	in	r18, 0x1b	; 27
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <DIO_u8SetPinValue+0xa0>
    4dac:	88 0f       	add	r24, r24
    4dae:	99 1f       	adc	r25, r25
    4db0:	6a 95       	dec	r22
    4db2:	e2 f7       	brpl	.-8      	; 0x4dac <DIO_u8SetPinValue+0x9c>
    4db4:	28 2b       	or	r18, r24
    4db6:	2b bb       	out	0x1b, r18	; 27
    4db8:	20 c0       	rjmp	.+64     	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(PORTB,copy_u8Pin);
    4dba:	28 b3       	in	r18, 0x18	; 24
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	02 c0       	rjmp	.+4      	; 0x4dc6 <DIO_u8SetPinValue+0xb6>
    4dc2:	88 0f       	add	r24, r24
    4dc4:	99 1f       	adc	r25, r25
    4dc6:	6a 95       	dec	r22
    4dc8:	e2 f7       	brpl	.-8      	; 0x4dc2 <DIO_u8SetPinValue+0xb2>
    4dca:	28 2b       	or	r18, r24
    4dcc:	28 bb       	out	0x18, r18	; 24
    4dce:	15 c0       	rjmp	.+42     	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(PORTC,copy_u8Pin);
    4dd0:	25 b3       	in	r18, 0x15	; 21
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	02 c0       	rjmp	.+4      	; 0x4ddc <DIO_u8SetPinValue+0xcc>
    4dd8:	88 0f       	add	r24, r24
    4dda:	99 1f       	adc	r25, r25
    4ddc:	6a 95       	dec	r22
    4dde:	e2 f7       	brpl	.-8      	; 0x4dd8 <DIO_u8SetPinValue+0xc8>
    4de0:	28 2b       	or	r18, r24
    4de2:	25 bb       	out	0x15, r18	; 21
    4de4:	0a c0       	rjmp	.+20     	; 0x4dfa <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(PORTD,copy_u8Pin);
    4de6:	22 b3       	in	r18, 0x12	; 18
    4de8:	81 e0       	ldi	r24, 0x01	; 1
    4dea:	90 e0       	ldi	r25, 0x00	; 0
    4dec:	02 c0       	rjmp	.+4      	; 0x4df2 <DIO_u8SetPinValue+0xe2>
    4dee:	88 0f       	add	r24, r24
    4df0:	99 1f       	adc	r25, r25
    4df2:	6a 95       	dec	r22
    4df4:	e2 f7       	brpl	.-8      	; 0x4dee <DIO_u8SetPinValue+0xde>
    4df6:	28 2b       	or	r18, r24
    4df8:	22 bb       	out	0x12, r18	; 18
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	08 95       	ret
			break;
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    4e00:	08 95       	ret

00004e02 <DIO_u8SetPinDirection>:

ReturnType_State_t DIO_u8SetPinDirection(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4e02:	68 30       	cpi	r22, 0x08	; 8
    4e04:	08 f0       	brcs	.+2      	; 0x4e08 <DIO_u8SetPinDirection+0x6>
    4e06:	74 c0       	rjmp	.+232    	; 0x4ef0 <DIO_u8SetPinDirection+0xee>
	{
		if(copy_u8Direction == DIO_PIN_INPUT)
    4e08:	44 23       	and	r20, r20
    4e0a:	d1 f5       	brne	.+116    	; 0x4e80 <DIO_u8SetPinDirection+0x7e>
		{
			switch(copy_u8Port)
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	a1 f0       	breq	.+40     	; 0x4e38 <DIO_u8SetPinDirection+0x36>
    4e10:	81 30       	cpi	r24, 0x01	; 1
    4e12:	30 f0       	brcs	.+12     	; 0x4e20 <DIO_u8SetPinDirection+0x1e>
    4e14:	82 30       	cpi	r24, 0x02	; 2
    4e16:	e1 f0       	breq	.+56     	; 0x4e50 <DIO_u8SetPinDirection+0x4e>
    4e18:	83 30       	cpi	r24, 0x03	; 3
    4e1a:	09 f0       	breq	.+2      	; 0x4e1e <DIO_u8SetPinDirection+0x1c>
    4e1c:	69 c0       	rjmp	.+210    	; 0x4ef0 <DIO_u8SetPinDirection+0xee>
    4e1e:	24 c0       	rjmp	.+72     	; 0x4e68 <DIO_u8SetPinDirection+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,copy_u8Pin);
    4e20:	2a b3       	in	r18, 0x1a	; 26
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <DIO_u8SetPinDirection+0x2a>
    4e28:	88 0f       	add	r24, r24
    4e2a:	99 1f       	adc	r25, r25
    4e2c:	6a 95       	dec	r22
    4e2e:	e2 f7       	brpl	.-8      	; 0x4e28 <DIO_u8SetPinDirection+0x26>
    4e30:	80 95       	com	r24
    4e32:	82 23       	and	r24, r18
    4e34:	8a bb       	out	0x1a, r24	; 26
    4e36:	5a c0       	rjmp	.+180    	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(DDRB,copy_u8Pin);
    4e38:	27 b3       	in	r18, 0x17	; 23
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <DIO_u8SetPinDirection+0x42>
    4e40:	88 0f       	add	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	6a 95       	dec	r22
    4e46:	e2 f7       	brpl	.-8      	; 0x4e40 <DIO_u8SetPinDirection+0x3e>
    4e48:	80 95       	com	r24
    4e4a:	82 23       	and	r24, r18
    4e4c:	87 bb       	out	0x17, r24	; 23
    4e4e:	4e c0       	rjmp	.+156    	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(DDRC,copy_u8Pin);
    4e50:	24 b3       	in	r18, 0x14	; 20
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	02 c0       	rjmp	.+4      	; 0x4e5c <DIO_u8SetPinDirection+0x5a>
    4e58:	88 0f       	add	r24, r24
    4e5a:	99 1f       	adc	r25, r25
    4e5c:	6a 95       	dec	r22
    4e5e:	e2 f7       	brpl	.-8      	; 0x4e58 <DIO_u8SetPinDirection+0x56>
    4e60:	80 95       	com	r24
    4e62:	82 23       	and	r24, r18
    4e64:	84 bb       	out	0x14, r24	; 20
    4e66:	42 c0       	rjmp	.+132    	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(DDRD,copy_u8Pin);
    4e68:	21 b3       	in	r18, 0x11	; 17
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	02 c0       	rjmp	.+4      	; 0x4e74 <DIO_u8SetPinDirection+0x72>
    4e70:	88 0f       	add	r24, r24
    4e72:	99 1f       	adc	r25, r25
    4e74:	6a 95       	dec	r22
    4e76:	e2 f7       	brpl	.-8      	; 0x4e70 <DIO_u8SetPinDirection+0x6e>
    4e78:	80 95       	com	r24
    4e7a:	82 23       	and	r24, r18
    4e7c:	81 bb       	out	0x11, r24	; 17
    4e7e:	36 c0       	rjmp	.+108    	; 0x4eec <DIO_u8SetPinDirection+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Direction == DIO_PIN_OUTPUT)
    4e80:	41 30       	cpi	r20, 0x01	; 1
    4e82:	a1 f5       	brne	.+104    	; 0x4eec <DIO_u8SetPinDirection+0xea>
		{
			switch(copy_u8Port)
    4e84:	81 30       	cpi	r24, 0x01	; 1
    4e86:	91 f0       	breq	.+36     	; 0x4eac <DIO_u8SetPinDirection+0xaa>
    4e88:	81 30       	cpi	r24, 0x01	; 1
    4e8a:	28 f0       	brcs	.+10     	; 0x4e96 <DIO_u8SetPinDirection+0x94>
    4e8c:	82 30       	cpi	r24, 0x02	; 2
    4e8e:	c9 f0       	breq	.+50     	; 0x4ec2 <DIO_u8SetPinDirection+0xc0>
    4e90:	83 30       	cpi	r24, 0x03	; 3
    4e92:	71 f5       	brne	.+92     	; 0x4ef0 <DIO_u8SetPinDirection+0xee>
    4e94:	21 c0       	rjmp	.+66     	; 0x4ed8 <DIO_u8SetPinDirection+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,copy_u8Pin);
    4e96:	2a b3       	in	r18, 0x1a	; 26
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	02 c0       	rjmp	.+4      	; 0x4ea2 <DIO_u8SetPinDirection+0xa0>
    4e9e:	88 0f       	add	r24, r24
    4ea0:	99 1f       	adc	r25, r25
    4ea2:	6a 95       	dec	r22
    4ea4:	e2 f7       	brpl	.-8      	; 0x4e9e <DIO_u8SetPinDirection+0x9c>
    4ea6:	28 2b       	or	r18, r24
    4ea8:	2a bb       	out	0x1a, r18	; 26
    4eaa:	20 c0       	rjmp	.+64     	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(DDRB,copy_u8Pin);
    4eac:	27 b3       	in	r18, 0x17	; 23
    4eae:	81 e0       	ldi	r24, 0x01	; 1
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	02 c0       	rjmp	.+4      	; 0x4eb8 <DIO_u8SetPinDirection+0xb6>
    4eb4:	88 0f       	add	r24, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	6a 95       	dec	r22
    4eba:	e2 f7       	brpl	.-8      	; 0x4eb4 <DIO_u8SetPinDirection+0xb2>
    4ebc:	28 2b       	or	r18, r24
    4ebe:	27 bb       	out	0x17, r18	; 23
    4ec0:	15 c0       	rjmp	.+42     	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(DDRC,copy_u8Pin);
    4ec2:	24 b3       	in	r18, 0x14	; 20
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	02 c0       	rjmp	.+4      	; 0x4ece <DIO_u8SetPinDirection+0xcc>
    4eca:	88 0f       	add	r24, r24
    4ecc:	99 1f       	adc	r25, r25
    4ece:	6a 95       	dec	r22
    4ed0:	e2 f7       	brpl	.-8      	; 0x4eca <DIO_u8SetPinDirection+0xc8>
    4ed2:	28 2b       	or	r18, r24
    4ed4:	24 bb       	out	0x14, r18	; 20
    4ed6:	0a c0       	rjmp	.+20     	; 0x4eec <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(DDRD,copy_u8Pin);
    4ed8:	21 b3       	in	r18, 0x11	; 17
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	02 c0       	rjmp	.+4      	; 0x4ee4 <DIO_u8SetPinDirection+0xe2>
    4ee0:	88 0f       	add	r24, r24
    4ee2:	99 1f       	adc	r25, r25
    4ee4:	6a 95       	dec	r22
    4ee6:	e2 f7       	brpl	.-8      	; 0x4ee0 <DIO_u8SetPinDirection+0xde>
    4ee8:	28 2b       	or	r18, r24
    4eea:	21 bb       	out	0x11, r18	; 17
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	08 95       	ret
			break;
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    4ef2:	08 95       	ret

00004ef4 <DIO_u8GetPinValue>:

ReturnType_State_t DIO_u8GetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 *copy_u8Variable)
{
    4ef4:	fa 01       	movw	r30, r20
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4ef6:	68 30       	cpi	r22, 0x08	; 8
    4ef8:	d0 f4       	brcc	.+52     	; 0x4f2e <DIO_u8GetPinValue+0x3a>
	{
			switch(copy_u8Port)
    4efa:	81 30       	cpi	r24, 0x01	; 1
    4efc:	49 f0       	breq	.+18     	; 0x4f10 <DIO_u8GetPinValue+0x1c>
    4efe:	81 30       	cpi	r24, 0x01	; 1
    4f00:	28 f0       	brcs	.+10     	; 0x4f0c <DIO_u8GetPinValue+0x18>
    4f02:	82 30       	cpi	r24, 0x02	; 2
    4f04:	39 f0       	breq	.+14     	; 0x4f14 <DIO_u8GetPinValue+0x20>
    4f06:	83 30       	cpi	r24, 0x03	; 3
    4f08:	91 f4       	brne	.+36     	; 0x4f2e <DIO_u8GetPinValue+0x3a>
    4f0a:	06 c0       	rjmp	.+12     	; 0x4f18 <DIO_u8GetPinValue+0x24>
			{
			case DIO_PORTA:
				*copy_u8Variable = GET_BIT(PINA,copy_u8Pin);
    4f0c:	89 b3       	in	r24, 0x19	; 25
    4f0e:	05 c0       	rjmp	.+10     	; 0x4f1a <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTB:
				*copy_u8Variable = GET_BIT(PINB,copy_u8Pin);
    4f10:	86 b3       	in	r24, 0x16	; 22
    4f12:	03 c0       	rjmp	.+6      	; 0x4f1a <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTC:
				*copy_u8Variable = GET_BIT(PINC,copy_u8Pin);
    4f14:	83 b3       	in	r24, 0x13	; 19
    4f16:	01 c0       	rjmp	.+2      	; 0x4f1a <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTD:
				*copy_u8Variable = GET_BIT(PIND,copy_u8Pin);
    4f18:	80 b3       	in	r24, 0x10	; 16
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <DIO_u8GetPinValue+0x2e>
    4f1e:	95 95       	asr	r25
    4f20:	87 95       	ror	r24
    4f22:	6a 95       	dec	r22
    4f24:	e2 f7       	brpl	.-8      	; 0x4f1e <DIO_u8GetPinValue+0x2a>
    4f26:	81 70       	andi	r24, 0x01	; 1
    4f28:	80 83       	st	Z, r24
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	08 95       	ret
			break;
    4f2e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    4f30:	08 95       	ret

00004f32 <DIO_u8ConnectPullUP>:

ReturnType_State_t DIO_u8ConnectPullUP(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8ConnectPullUp)
{
    4f32:	98 2f       	mov	r25, r24
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Port <= DIO_PORTD) && (copy_u8Pin <= DIO_PIN7) )
    4f34:	84 30       	cpi	r24, 0x04	; 4
    4f36:	08 f0       	brcs	.+2      	; 0x4f3a <DIO_u8ConnectPullUP+0x8>
    4f38:	86 c0       	rjmp	.+268    	; 0x5046 <DIO_u8ConnectPullUP+0x114>
    4f3a:	68 30       	cpi	r22, 0x08	; 8
    4f3c:	08 f0       	brcs	.+2      	; 0x4f40 <DIO_u8ConnectPullUP+0xe>
    4f3e:	83 c0       	rjmp	.+262    	; 0x5046 <DIO_u8ConnectPullUP+0x114>
	{
		CLR_BIT(SFIOR,PUD);
    4f40:	80 b7       	in	r24, 0x30	; 48
    4f42:	8b 7f       	andi	r24, 0xFB	; 251
    4f44:	80 bf       	out	0x30, r24	; 48
		switch(copy_u8Port)
    4f46:	91 30       	cpi	r25, 0x01	; 1
    4f48:	31 f1       	breq	.+76     	; 0x4f96 <DIO_u8ConnectPullUP+0x64>
    4f4a:	91 30       	cpi	r25, 0x01	; 1
    4f4c:	38 f0       	brcs	.+14     	; 0x4f5c <DIO_u8ConnectPullUP+0x2a>
    4f4e:	92 30       	cpi	r25, 0x02	; 2
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <DIO_u8ConnectPullUP+0x22>
    4f52:	3e c0       	rjmp	.+124    	; 0x4fd0 <DIO_u8ConnectPullUP+0x9e>
    4f54:	93 30       	cpi	r25, 0x03	; 3
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <DIO_u8ConnectPullUP+0x28>
    4f58:	74 c0       	rjmp	.+232    	; 0x5042 <DIO_u8ConnectPullUP+0x110>
    4f5a:	57 c0       	rjmp	.+174    	; 0x500a <DIO_u8ConnectPullUP+0xd8>
		{
		case DIO_PORTA:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4f5c:	41 30       	cpi	r20, 0x01	; 1
    4f5e:	79 f4       	brne	.+30     	; 0x4f7e <DIO_u8ConnectPullUP+0x4c>
			{
				CLR_BIT(DDRA,copy_u8Pin);
    4f60:	3a b3       	in	r19, 0x1a	; 26
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	02 c0       	rjmp	.+4      	; 0x4f6c <DIO_u8ConnectPullUP+0x3a>
    4f68:	88 0f       	add	r24, r24
    4f6a:	99 1f       	adc	r25, r25
    4f6c:	6a 95       	dec	r22
    4f6e:	e2 f7       	brpl	.-8      	; 0x4f68 <DIO_u8ConnectPullUP+0x36>
    4f70:	28 2f       	mov	r18, r24
    4f72:	20 95       	com	r18
    4f74:	23 23       	and	r18, r19
    4f76:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA,copy_u8Pin);
    4f78:	2b b3       	in	r18, 0x1b	; 27
    4f7a:	82 2b       	or	r24, r18
    4f7c:	0a c0       	rjmp	.+20     	; 0x4f92 <DIO_u8ConnectPullUP+0x60>
			}
			else
			{
				CLR_BIT(PORTA,copy_u8Pin);
    4f7e:	2b b3       	in	r18, 0x1b	; 27
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	02 c0       	rjmp	.+4      	; 0x4f8a <DIO_u8ConnectPullUP+0x58>
    4f86:	88 0f       	add	r24, r24
    4f88:	99 1f       	adc	r25, r25
    4f8a:	6a 95       	dec	r22
    4f8c:	e2 f7       	brpl	.-8      	; 0x4f86 <DIO_u8ConnectPullUP+0x54>
    4f8e:	80 95       	com	r24
    4f90:	82 23       	and	r24, r18
    4f92:	8b bb       	out	0x1b, r24	; 27
    4f94:	56 c0       	rjmp	.+172    	; 0x5042 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTB:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4f96:	41 30       	cpi	r20, 0x01	; 1
    4f98:	79 f4       	brne	.+30     	; 0x4fb8 <DIO_u8ConnectPullUP+0x86>
			{
				CLR_BIT(DDRB,copy_u8Pin);
    4f9a:	37 b3       	in	r19, 0x17	; 23
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <DIO_u8ConnectPullUP+0x74>
    4fa2:	88 0f       	add	r24, r24
    4fa4:	99 1f       	adc	r25, r25
    4fa6:	6a 95       	dec	r22
    4fa8:	e2 f7       	brpl	.-8      	; 0x4fa2 <DIO_u8ConnectPullUP+0x70>
    4faa:	28 2f       	mov	r18, r24
    4fac:	20 95       	com	r18
    4fae:	23 23       	and	r18, r19
    4fb0:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB,copy_u8Pin);
    4fb2:	28 b3       	in	r18, 0x18	; 24
    4fb4:	82 2b       	or	r24, r18
    4fb6:	0a c0       	rjmp	.+20     	; 0x4fcc <DIO_u8ConnectPullUP+0x9a>
			}
			else
			{
				CLR_BIT(PORTB,copy_u8Pin);
    4fb8:	28 b3       	in	r18, 0x18	; 24
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	02 c0       	rjmp	.+4      	; 0x4fc4 <DIO_u8ConnectPullUP+0x92>
    4fc0:	88 0f       	add	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	6a 95       	dec	r22
    4fc6:	e2 f7       	brpl	.-8      	; 0x4fc0 <DIO_u8ConnectPullUP+0x8e>
    4fc8:	80 95       	com	r24
    4fca:	82 23       	and	r24, r18
    4fcc:	88 bb       	out	0x18, r24	; 24
    4fce:	39 c0       	rjmp	.+114    	; 0x5042 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTC:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4fd0:	41 30       	cpi	r20, 0x01	; 1
    4fd2:	79 f4       	brne	.+30     	; 0x4ff2 <DIO_u8ConnectPullUP+0xc0>
			{
				CLR_BIT(DDRC,copy_u8Pin);
    4fd4:	34 b3       	in	r19, 0x14	; 20
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	02 c0       	rjmp	.+4      	; 0x4fe0 <DIO_u8ConnectPullUP+0xae>
    4fdc:	88 0f       	add	r24, r24
    4fde:	99 1f       	adc	r25, r25
    4fe0:	6a 95       	dec	r22
    4fe2:	e2 f7       	brpl	.-8      	; 0x4fdc <DIO_u8ConnectPullUP+0xaa>
    4fe4:	28 2f       	mov	r18, r24
    4fe6:	20 95       	com	r18
    4fe8:	23 23       	and	r18, r19
    4fea:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC,copy_u8Pin);
    4fec:	25 b3       	in	r18, 0x15	; 21
    4fee:	82 2b       	or	r24, r18
    4ff0:	0a c0       	rjmp	.+20     	; 0x5006 <DIO_u8ConnectPullUP+0xd4>
			}
			else
			{
				CLR_BIT(PORTC,copy_u8Pin);
    4ff2:	25 b3       	in	r18, 0x15	; 21
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	02 c0       	rjmp	.+4      	; 0x4ffe <DIO_u8ConnectPullUP+0xcc>
    4ffa:	88 0f       	add	r24, r24
    4ffc:	99 1f       	adc	r25, r25
    4ffe:	6a 95       	dec	r22
    5000:	e2 f7       	brpl	.-8      	; 0x4ffa <DIO_u8ConnectPullUP+0xc8>
    5002:	80 95       	com	r24
    5004:	82 23       	and	r24, r18
    5006:	85 bb       	out	0x15, r24	; 21
    5008:	1c c0       	rjmp	.+56     	; 0x5042 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTD:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    500a:	41 30       	cpi	r20, 0x01	; 1
    500c:	79 f4       	brne	.+30     	; 0x502c <DIO_u8ConnectPullUP+0xfa>
			{
				CLR_BIT(DDRD,copy_u8Pin);
    500e:	31 b3       	in	r19, 0x11	; 17
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	02 c0       	rjmp	.+4      	; 0x501a <DIO_u8ConnectPullUP+0xe8>
    5016:	88 0f       	add	r24, r24
    5018:	99 1f       	adc	r25, r25
    501a:	6a 95       	dec	r22
    501c:	e2 f7       	brpl	.-8      	; 0x5016 <DIO_u8ConnectPullUP+0xe4>
    501e:	28 2f       	mov	r18, r24
    5020:	20 95       	com	r18
    5022:	23 23       	and	r18, r19
    5024:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD,copy_u8Pin);
    5026:	22 b3       	in	r18, 0x12	; 18
    5028:	82 2b       	or	r24, r18
    502a:	0a c0       	rjmp	.+20     	; 0x5040 <DIO_u8ConnectPullUP+0x10e>
			}
			else
			{
				CLR_BIT(PORTD,copy_u8Pin);
    502c:	22 b3       	in	r18, 0x12	; 18
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	02 c0       	rjmp	.+4      	; 0x5038 <DIO_u8ConnectPullUP+0x106>
    5034:	88 0f       	add	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	6a 95       	dec	r22
    503a:	e2 f7       	brpl	.-8      	; 0x5034 <DIO_u8ConnectPullUP+0x102>
    503c:	80 95       	com	r24
    503e:	82 23       	and	r24, r18
    5040:	82 bb       	out	0x12, r24	; 18
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	08 95       	ret
    5046:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8State = E_NOK;
	}

	return Local_u8State;
}
    5048:	08 95       	ret

0000504a <DIO_u8TogglePinValue>:

ReturnType_State_t DIO_u8TogglePinValue(u8 copy_u8Port , u8 copy_u8Pin)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    504a:	68 30       	cpi	r22, 0x08	; 8
    504c:	b0 f5       	brcc	.+108    	; 0x50ba <DIO_u8TogglePinValue+0x70>
	{
			switch(copy_u8Port)
    504e:	81 30       	cpi	r24, 0x01	; 1
    5050:	91 f0       	breq	.+36     	; 0x5076 <DIO_u8TogglePinValue+0x2c>
    5052:	81 30       	cpi	r24, 0x01	; 1
    5054:	28 f0       	brcs	.+10     	; 0x5060 <DIO_u8TogglePinValue+0x16>
    5056:	82 30       	cpi	r24, 0x02	; 2
    5058:	c9 f0       	breq	.+50     	; 0x508c <DIO_u8TogglePinValue+0x42>
    505a:	83 30       	cpi	r24, 0x03	; 3
    505c:	71 f5       	brne	.+92     	; 0x50ba <DIO_u8TogglePinValue+0x70>
    505e:	21 c0       	rjmp	.+66     	; 0x50a2 <DIO_u8TogglePinValue+0x58>
			{
			case DIO_PORTA:
				TOG_BIT(PORTA,copy_u8Pin);
    5060:	2b b3       	in	r18, 0x1b	; 27
    5062:	81 e0       	ldi	r24, 0x01	; 1
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	02 c0       	rjmp	.+4      	; 0x506c <DIO_u8TogglePinValue+0x22>
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	6a 95       	dec	r22
    506e:	e2 f7       	brpl	.-8      	; 0x5068 <DIO_u8TogglePinValue+0x1e>
    5070:	28 27       	eor	r18, r24
    5072:	2b bb       	out	0x1b, r18	; 27
    5074:	20 c0       	rjmp	.+64     	; 0x50b6 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTB:
				TOG_BIT(PORTB,copy_u8Pin);
    5076:	28 b3       	in	r18, 0x18	; 24
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	02 c0       	rjmp	.+4      	; 0x5082 <DIO_u8TogglePinValue+0x38>
    507e:	88 0f       	add	r24, r24
    5080:	99 1f       	adc	r25, r25
    5082:	6a 95       	dec	r22
    5084:	e2 f7       	brpl	.-8      	; 0x507e <DIO_u8TogglePinValue+0x34>
    5086:	28 27       	eor	r18, r24
    5088:	28 bb       	out	0x18, r18	; 24
    508a:	15 c0       	rjmp	.+42     	; 0x50b6 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTC:
				TOG_BIT(PORTC,copy_u8Pin);
    508c:	25 b3       	in	r18, 0x15	; 21
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	02 c0       	rjmp	.+4      	; 0x5098 <DIO_u8TogglePinValue+0x4e>
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	6a 95       	dec	r22
    509a:	e2 f7       	brpl	.-8      	; 0x5094 <DIO_u8TogglePinValue+0x4a>
    509c:	28 27       	eor	r18, r24
    509e:	25 bb       	out	0x15, r18	; 21
    50a0:	0a c0       	rjmp	.+20     	; 0x50b6 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTD:
				TOG_BIT(PORTD,copy_u8Pin);
    50a2:	22 b3       	in	r18, 0x12	; 18
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	02 c0       	rjmp	.+4      	; 0x50ae <DIO_u8TogglePinValue+0x64>
    50aa:	88 0f       	add	r24, r24
    50ac:	99 1f       	adc	r25, r25
    50ae:	6a 95       	dec	r22
    50b0:	e2 f7       	brpl	.-8      	; 0x50aa <DIO_u8TogglePinValue+0x60>
    50b2:	28 27       	eor	r18, r24
    50b4:	22 bb       	out	0x12, r18	; 18
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	08 95       	ret
			break;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			Local_u8State = E_NOK;
		}
		return Local_u8State;
}
    50bc:	08 95       	ret

000050be <LCD_voidSendData>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendData(u8 copy_u8Data)
{
    50be:	1f 93       	push	r17
    50c0:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    50c2:	83 e0       	ldi	r24, 0x03	; 3
    50c4:	66 e0       	ldi	r22, 0x06	; 6
    50c6:	41 e0       	ldi	r20, 0x01	; 1
    50c8:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    50cc:	83 e0       	ldi	r24, 0x03	; 3
    50ce:	65 e0       	ldi	r22, 0x05	; 5
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    50d6:	82 e0       	ldi	r24, 0x02	; 2
    50d8:	61 2f       	mov	r22, r17
    50da:	0e 94 44 26 	call	0x4c88	; 0x4c88 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    50de:	83 e0       	ldi	r24, 0x03	; 3
    50e0:	64 e0       	ldi	r22, 0x04	; 4
    50e2:	41 e0       	ldi	r20, 0x01	; 1
    50e4:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    50e8:	80 ea       	ldi	r24, 0xA0	; 160
    50ea:	9f e0       	ldi	r25, 0x0F	; 15
    50ec:	01 97       	sbiw	r24, 0x01	; 1
    50ee:	f1 f7       	brne	.-4      	; 0x50ec <LCD_voidSendData+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    50f0:	83 e0       	ldi	r24, 0x03	; 3
    50f2:	64 e0       	ldi	r22, 0x04	; 4
    50f4:	40 e0       	ldi	r20, 0x00	; 0
    50f6:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

}
    50fa:	1f 91       	pop	r17
    50fc:	08 95       	ret

000050fe <LCD_voidSendNumber>:
	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
}

void LCD_voidSendNumber(s64 copy_s32Number)
{
    50fe:	2f 92       	push	r2
    5100:	3f 92       	push	r3
    5102:	4f 92       	push	r4
    5104:	5f 92       	push	r5
    5106:	6f 92       	push	r6
    5108:	7f 92       	push	r7
    510a:	8f 92       	push	r8
    510c:	9f 92       	push	r9
    510e:	af 92       	push	r10
    5110:	bf 92       	push	r11
    5112:	cf 92       	push	r12
    5114:	df 92       	push	r13
    5116:	ef 92       	push	r14
    5118:	ff 92       	push	r15
    511a:	0f 93       	push	r16
    511c:	1f 93       	push	r17
    511e:	df 93       	push	r29
    5120:	cf 93       	push	r28
    5122:	cd b7       	in	r28, 0x3d	; 61
    5124:	de b7       	in	r29, 0x3e	; 62
    5126:	29 97       	sbiw	r28, 0x09	; 9
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	f8 94       	cli
    512c:	de bf       	out	0x3e, r29	; 62
    512e:	0f be       	out	0x3f, r0	; 63
    5130:	cd bf       	out	0x3d, r28	; 61
    5132:	2a 83       	std	Y+2, r18	; 0x02
    5134:	3b 83       	std	Y+3, r19	; 0x03
    5136:	4c 83       	std	Y+4, r20	; 0x04
    5138:	5d 83       	std	Y+5, r21	; 0x05
    513a:	6e 83       	std	Y+6, r22	; 0x06
    513c:	7f 83       	std	Y+7, r23	; 0x07
    513e:	88 87       	std	Y+8, r24	; 0x08
    5140:	99 87       	std	Y+9, r25	; 0x09
	u64 reversed = 1;
	if (copy_s32Number == 0)
    5142:	82 2f       	mov	r24, r18
    5144:	83 2b       	or	r24, r19
    5146:	84 2b       	or	r24, r20
    5148:	85 2b       	or	r24, r21
    514a:	86 2b       	or	r24, r22
    514c:	87 2b       	or	r24, r23
    514e:	98 85       	ldd	r25, Y+8	; 0x08
    5150:	89 2b       	or	r24, r25
    5152:	e9 85       	ldd	r30, Y+9	; 0x09
    5154:	8e 2b       	or	r24, r30
    5156:	11 f4       	brne	.+4      	; 0x515c <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendData('0');
    5158:	80 e3       	ldi	r24, 0x30	; 48
    515a:	0e c0       	rjmp	.+28     	; 0x5178 <LCD_voidSendNumber+0x7a>
	}
	else
	{
		if(copy_s32Number <0)
    515c:	f9 85       	ldd	r31, Y+9	; 0x09
    515e:	f7 fd       	sbrc	r31, 7
    5160:	0a c0       	rjmp	.+20     	; 0x5176 <LCD_voidSendNumber+0x78>
		{
			LCD_voidSendData('-');
    5162:	22 24       	eor	r2, r2
    5164:	23 94       	inc	r2
    5166:	33 24       	eor	r3, r3
    5168:	44 24       	eor	r4, r4
    516a:	55 24       	eor	r5, r5
    516c:	66 24       	eor	r6, r6
    516e:	77 24       	eor	r7, r7
    5170:	88 24       	eor	r8, r8
    5172:	99 24       	eor	r9, r9
    5174:	04 c0       	rjmp	.+8      	; 0x517e <LCD_voidSendNumber+0x80>
    5176:	8d e2       	ldi	r24, 0x2D	; 45
    5178:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_voidSendData>
    517c:	29 c1       	rjmp	.+594    	; 0x53d0 <LCD_voidSendNumber+0x2d2>
		}
		else
		{
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
    517e:	91 01       	movw	r18, r2
    5180:	a2 01       	movw	r20, r4
    5182:	b3 01       	movw	r22, r6
    5184:	c4 01       	movw	r24, r8
    5186:	01 e0       	ldi	r16, 0x01	; 1
    5188:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    518c:	12 2f       	mov	r17, r18
    518e:	f3 2e       	mov	r15, r19
    5190:	e4 2e       	mov	r14, r20
    5192:	d5 2e       	mov	r13, r21
    5194:	c6 2e       	mov	r12, r22
    5196:	b7 2e       	mov	r11, r23
    5198:	a8 2e       	mov	r10, r24
    519a:	89 2e       	mov	r8, r25
    519c:	02 e0       	ldi	r16, 0x02	; 2
    519e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    51a2:	92 2e       	mov	r9, r18
    51a4:	91 0e       	add	r9, r17
    51a6:	21 e0       	ldi	r18, 0x01	; 1
    51a8:	91 16       	cp	r9, r17
    51aa:	08 f0       	brcs	.+2      	; 0x51ae <LCD_voidSendNumber+0xb0>
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	3f 0d       	add	r19, r15
    51b0:	e1 e0       	ldi	r30, 0x01	; 1
    51b2:	3f 15       	cp	r19, r15
    51b4:	08 f0       	brcs	.+2      	; 0x51b8 <LCD_voidSendNumber+0xba>
    51b6:	e0 e0       	ldi	r30, 0x00	; 0
    51b8:	72 2e       	mov	r7, r18
    51ba:	73 0e       	add	r7, r19
    51bc:	21 e0       	ldi	r18, 0x01	; 1
    51be:	73 16       	cp	r7, r19
    51c0:	08 f0       	brcs	.+2      	; 0x51c4 <LCD_voidSendNumber+0xc6>
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	e2 2b       	or	r30, r18
    51c6:	4e 0d       	add	r20, r14
    51c8:	31 e0       	ldi	r19, 0x01	; 1
    51ca:	4e 15       	cp	r20, r14
    51cc:	08 f0       	brcs	.+2      	; 0x51d0 <LCD_voidSendNumber+0xd2>
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	6e 2e       	mov	r6, r30
    51d2:	64 0e       	add	r6, r20
    51d4:	21 e0       	ldi	r18, 0x01	; 1
    51d6:	64 16       	cp	r6, r20
    51d8:	08 f0       	brcs	.+2      	; 0x51dc <LCD_voidSendNumber+0xde>
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	32 2b       	or	r19, r18
    51de:	5d 0d       	add	r21, r13
    51e0:	41 e0       	ldi	r20, 0x01	; 1
    51e2:	5d 15       	cp	r21, r13
    51e4:	08 f0       	brcs	.+2      	; 0x51e8 <LCD_voidSendNumber+0xea>
    51e6:	40 e0       	ldi	r20, 0x00	; 0
    51e8:	53 2e       	mov	r5, r19
    51ea:	55 0e       	add	r5, r21
    51ec:	21 e0       	ldi	r18, 0x01	; 1
    51ee:	55 16       	cp	r5, r21
    51f0:	08 f0       	brcs	.+2      	; 0x51f4 <LCD_voidSendNumber+0xf6>
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	42 2b       	or	r20, r18
    51f6:	6c 0d       	add	r22, r12
    51f8:	31 e0       	ldi	r19, 0x01	; 1
    51fa:	6c 15       	cp	r22, r12
    51fc:	08 f0       	brcs	.+2      	; 0x5200 <LCD_voidSendNumber+0x102>
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	44 2e       	mov	r4, r20
    5202:	46 0e       	add	r4, r22
    5204:	21 e0       	ldi	r18, 0x01	; 1
    5206:	46 16       	cp	r4, r22
    5208:	08 f0       	brcs	.+2      	; 0x520c <LCD_voidSendNumber+0x10e>
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	32 2b       	or	r19, r18
    520e:	7b 0d       	add	r23, r11
    5210:	41 e0       	ldi	r20, 0x01	; 1
    5212:	7b 15       	cp	r23, r11
    5214:	08 f0       	brcs	.+2      	; 0x5218 <LCD_voidSendNumber+0x11a>
    5216:	40 e0       	ldi	r20, 0x00	; 0
    5218:	33 2e       	mov	r3, r19
    521a:	37 0e       	add	r3, r23
    521c:	21 e0       	ldi	r18, 0x01	; 1
    521e:	37 16       	cp	r3, r23
    5220:	08 f0       	brcs	.+2      	; 0x5224 <LCD_voidSendNumber+0x126>
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	42 2b       	or	r20, r18
    5226:	8a 0d       	add	r24, r10
    5228:	31 e0       	ldi	r19, 0x01	; 1
    522a:	8a 15       	cp	r24, r10
    522c:	08 f0       	brcs	.+2      	; 0x5230 <LCD_voidSendNumber+0x132>
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	24 2e       	mov	r2, r20
    5232:	28 0e       	add	r2, r24
    5234:	21 e0       	ldi	r18, 0x01	; 1
    5236:	28 16       	cp	r2, r24
    5238:	08 f0       	brcs	.+2      	; 0x523c <LCD_voidSendNumber+0x13e>
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	32 2b       	or	r19, r18
    523e:	98 0d       	add	r25, r8
    5240:	83 2f       	mov	r24, r19
    5242:	89 0f       	add	r24, r25
    5244:	89 83       	std	Y+1, r24	; 0x01
    5246:	2a 81       	ldd	r18, Y+2	; 0x02
    5248:	3b 81       	ldd	r19, Y+3	; 0x03
    524a:	4c 81       	ldd	r20, Y+4	; 0x04
    524c:	5d 81       	ldd	r21, Y+5	; 0x05
    524e:	6e 81       	ldd	r22, Y+6	; 0x06
    5250:	7f 81       	ldd	r23, Y+7	; 0x07
    5252:	88 85       	ldd	r24, Y+8	; 0x08
    5254:	99 85       	ldd	r25, Y+9	; 0x09
    5256:	aa e0       	ldi	r26, 0x0A	; 10
    5258:	aa 2e       	mov	r10, r26
    525a:	bb 24       	eor	r11, r11
    525c:	cc 24       	eor	r12, r12
    525e:	dd 24       	eor	r13, r13
    5260:	ee 24       	eor	r14, r14
    5262:	ff 24       	eor	r15, r15
    5264:	00 e0       	ldi	r16, 0x00	; 0
    5266:	10 e0       	ldi	r17, 0x00	; 0
    5268:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    526c:	12 2f       	mov	r17, r18
    526e:	19 0d       	add	r17, r9
    5270:	f1 e0       	ldi	r31, 0x01	; 1
    5272:	12 17       	cp	r17, r18
    5274:	08 f0       	brcs	.+2      	; 0x5278 <LCD_voidSendNumber+0x17a>
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	23 2f       	mov	r18, r19
    527a:	27 0d       	add	r18, r7
    527c:	e1 e0       	ldi	r30, 0x01	; 1
    527e:	23 17       	cp	r18, r19
    5280:	08 f0       	brcs	.+2      	; 0x5284 <LCD_voidSendNumber+0x186>
    5282:	e0 e0       	ldi	r30, 0x00	; 0
    5284:	bf 2f       	mov	r27, r31
    5286:	b2 0f       	add	r27, r18
    5288:	31 e0       	ldi	r19, 0x01	; 1
    528a:	b2 17       	cp	r27, r18
    528c:	08 f0       	brcs	.+2      	; 0x5290 <LCD_voidSendNumber+0x192>
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	e3 2b       	or	r30, r19
    5292:	24 2f       	mov	r18, r20
    5294:	26 0d       	add	r18, r6
    5296:	f1 e0       	ldi	r31, 0x01	; 1
    5298:	24 17       	cp	r18, r20
    529a:	08 f0       	brcs	.+2      	; 0x529e <LCD_voidSendNumber+0x1a0>
    529c:	f0 e0       	ldi	r31, 0x00	; 0
    529e:	ae 2f       	mov	r26, r30
    52a0:	a2 0f       	add	r26, r18
    52a2:	31 e0       	ldi	r19, 0x01	; 1
    52a4:	a2 17       	cp	r26, r18
    52a6:	08 f0       	brcs	.+2      	; 0x52aa <LCD_voidSendNumber+0x1ac>
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	f3 2b       	or	r31, r19
    52ac:	25 2f       	mov	r18, r21
    52ae:	25 0d       	add	r18, r5
    52b0:	41 e0       	ldi	r20, 0x01	; 1
    52b2:	25 17       	cp	r18, r21
    52b4:	08 f0       	brcs	.+2      	; 0x52b8 <LCD_voidSendNumber+0x1ba>
    52b6:	40 e0       	ldi	r20, 0x00	; 0
    52b8:	0f 2f       	mov	r16, r31
    52ba:	02 0f       	add	r16, r18
    52bc:	31 e0       	ldi	r19, 0x01	; 1
    52be:	02 17       	cp	r16, r18
    52c0:	08 f0       	brcs	.+2      	; 0x52c4 <LCD_voidSendNumber+0x1c6>
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	43 2b       	or	r20, r19
    52c6:	26 2f       	mov	r18, r22
    52c8:	24 0d       	add	r18, r4
    52ca:	51 e0       	ldi	r21, 0x01	; 1
    52cc:	26 17       	cp	r18, r22
    52ce:	08 f0       	brcs	.+2      	; 0x52d2 <LCD_voidSendNumber+0x1d4>
    52d0:	50 e0       	ldi	r21, 0x00	; 0
    52d2:	64 2f       	mov	r22, r20
    52d4:	62 0f       	add	r22, r18
    52d6:	31 e0       	ldi	r19, 0x01	; 1
    52d8:	62 17       	cp	r22, r18
    52da:	08 f0       	brcs	.+2      	; 0x52de <LCD_voidSendNumber+0x1e0>
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	53 2b       	or	r21, r19
    52e0:	27 2f       	mov	r18, r23
    52e2:	23 0d       	add	r18, r3
    52e4:	41 e0       	ldi	r20, 0x01	; 1
    52e6:	27 17       	cp	r18, r23
    52e8:	08 f0       	brcs	.+2      	; 0x52ec <LCD_voidSendNumber+0x1ee>
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	52 0f       	add	r21, r18
    52ee:	31 e0       	ldi	r19, 0x01	; 1
    52f0:	52 17       	cp	r21, r18
    52f2:	08 f0       	brcs	.+2      	; 0x52f6 <LCD_voidSendNumber+0x1f8>
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	43 2b       	or	r20, r19
    52f8:	28 2f       	mov	r18, r24
    52fa:	22 0d       	add	r18, r2
    52fc:	31 e0       	ldi	r19, 0x01	; 1
    52fe:	28 17       	cp	r18, r24
    5300:	08 f0       	brcs	.+2      	; 0x5304 <LCD_voidSendNumber+0x206>
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	42 0f       	add	r20, r18
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	42 17       	cp	r20, r18
    530a:	08 f0       	brcs	.+2      	; 0x530e <LCD_voidSendNumber+0x210>
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	38 2b       	or	r19, r24
    5310:	e9 81       	ldd	r30, Y+1	; 0x01
    5312:	e9 0f       	add	r30, r25
    5314:	21 2e       	mov	r2, r17
    5316:	3b 2e       	mov	r3, r27
    5318:	4a 2e       	mov	r4, r26
    531a:	50 2e       	mov	r5, r16
    531c:	66 2e       	mov	r6, r22
    531e:	75 2e       	mov	r7, r21
    5320:	84 2e       	mov	r8, r20
    5322:	9e 2e       	mov	r9, r30
    5324:	93 0e       	add	r9, r19
				copy_s32Number/=10;
    5326:	2a 81       	ldd	r18, Y+2	; 0x02
    5328:	3b 81       	ldd	r19, Y+3	; 0x03
    532a:	4c 81       	ldd	r20, Y+4	; 0x04
    532c:	5d 81       	ldd	r21, Y+5	; 0x05
    532e:	6e 81       	ldd	r22, Y+6	; 0x06
    5330:	7f 81       	ldd	r23, Y+7	; 0x07
    5332:	88 85       	ldd	r24, Y+8	; 0x08
    5334:	99 85       	ldd	r25, Y+9	; 0x09
    5336:	fa e0       	ldi	r31, 0x0A	; 10
    5338:	af 2e       	mov	r10, r31
    533a:	bb 24       	eor	r11, r11
    533c:	cc 24       	eor	r12, r12
    533e:	dd 24       	eor	r13, r13
    5340:	ee 24       	eor	r14, r14
    5342:	ff 24       	eor	r15, r15
    5344:	00 e0       	ldi	r16, 0x00	; 0
    5346:	10 e0       	ldi	r17, 0x00	; 0
    5348:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    534c:	2a 83       	std	Y+2, r18	; 0x02
    534e:	3b 83       	std	Y+3, r19	; 0x03
    5350:	4c 83       	std	Y+4, r20	; 0x04
    5352:	5d 83       	std	Y+5, r21	; 0x05
    5354:	6e 83       	std	Y+6, r22	; 0x06
    5356:	7f 83       	std	Y+7, r23	; 0x07
    5358:	88 87       	std	Y+8, r24	; 0x08
    535a:	99 87       	std	Y+9, r25	; 0x09
			LCD_voidSendData('-');
			copy_s32Number *=-1;
		}
		else
		{
			while(copy_s32Number!= 0)
    535c:	82 2f       	mov	r24, r18
    535e:	83 2b       	or	r24, r19
    5360:	84 2b       	or	r24, r20
    5362:	85 2b       	or	r24, r21
    5364:	86 2b       	or	r24, r22
    5366:	87 2b       	or	r24, r23
    5368:	f8 85       	ldd	r31, Y+8	; 0x08
    536a:	8f 2b       	or	r24, r31
    536c:	89 2b       	or	r24, r25
    536e:	09 f0       	breq	.+2      	; 0x5372 <LCD_voidSendNumber+0x274>
    5370:	06 cf       	rjmp	.-500    	; 0x517e <LCD_voidSendNumber+0x80>
    5372:	1d c0       	rjmp	.+58     	; 0x53ae <LCD_voidSendNumber+0x2b0>
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
			{
				LCD_voidSendData(reversed%10 +'0');
    5374:	91 01       	movw	r18, r2
    5376:	a2 01       	movw	r20, r4
    5378:	b3 01       	movw	r22, r6
    537a:	c4 01       	movw	r24, r8
    537c:	ea e0       	ldi	r30, 0x0A	; 10
    537e:	ae 2e       	mov	r10, r30
    5380:	bb 24       	eor	r11, r11
    5382:	cc 24       	eor	r12, r12
    5384:	dd 24       	eor	r13, r13
    5386:	ee 24       	eor	r14, r14
    5388:	ff 24       	eor	r15, r15
    538a:	00 e0       	ldi	r16, 0x00	; 0
    538c:	10 e0       	ldi	r17, 0x00	; 0
    538e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__umoddi3>
    5392:	82 2f       	mov	r24, r18
    5394:	80 5d       	subi	r24, 0xD0	; 208
    5396:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_voidSendData>
				reversed/=10;
    539a:	91 01       	movw	r18, r2
    539c:	a2 01       	movw	r20, r4
    539e:	b3 01       	movw	r22, r6
    53a0:	c4 01       	movw	r24, r8
    53a2:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivdi3>
    53a6:	19 01       	movw	r2, r18
    53a8:	2a 01       	movw	r4, r20
    53aa:	3b 01       	movw	r6, r22
    53ac:	4c 01       	movw	r8, r24
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	28 16       	cp	r2, r24
    53b2:	01 f7       	brne	.-64     	; 0x5374 <LCD_voidSendNumber+0x276>
    53b4:	33 20       	and	r3, r3
    53b6:	f1 f6       	brne	.-68     	; 0x5374 <LCD_voidSendNumber+0x276>
    53b8:	44 20       	and	r4, r4
    53ba:	e1 f6       	brne	.-72     	; 0x5374 <LCD_voidSendNumber+0x276>
    53bc:	55 20       	and	r5, r5
    53be:	d1 f6       	brne	.-76     	; 0x5374 <LCD_voidSendNumber+0x276>
    53c0:	66 20       	and	r6, r6
    53c2:	c1 f6       	brne	.-80     	; 0x5374 <LCD_voidSendNumber+0x276>
    53c4:	77 20       	and	r7, r7
    53c6:	b1 f6       	brne	.-84     	; 0x5374 <LCD_voidSendNumber+0x276>
    53c8:	88 20       	and	r8, r8
    53ca:	a1 f6       	brne	.-88     	; 0x5374 <LCD_voidSendNumber+0x276>
    53cc:	99 20       	and	r9, r9
    53ce:	91 f6       	brne	.-92     	; 0x5374 <LCD_voidSendNumber+0x276>
				LCD_voidSendData(reversed%10 +'0');
				reversed/=10;
			}
		}
	}
}
    53d0:	29 96       	adiw	r28, 0x09	; 9
    53d2:	0f b6       	in	r0, 0x3f	; 63
    53d4:	f8 94       	cli
    53d6:	de bf       	out	0x3e, r29	; 62
    53d8:	0f be       	out	0x3f, r0	; 63
    53da:	cd bf       	out	0x3d, r28	; 61
    53dc:	cf 91       	pop	r28
    53de:	df 91       	pop	r29
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	ff 90       	pop	r15
    53e6:	ef 90       	pop	r14
    53e8:	df 90       	pop	r13
    53ea:	cf 90       	pop	r12
    53ec:	bf 90       	pop	r11
    53ee:	af 90       	pop	r10
    53f0:	9f 90       	pop	r9
    53f2:	8f 90       	pop	r8
    53f4:	7f 90       	pop	r7
    53f6:	6f 90       	pop	r6
    53f8:	5f 90       	pop	r5
    53fa:	4f 90       	pop	r4
    53fc:	3f 90       	pop	r3
    53fe:	2f 90       	pop	r2
    5400:	08 95       	ret

00005402 <LCD_voidSendString>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendString(const u8* copy_pu8String)
{
    5402:	1f 93       	push	r17
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
    5408:	ec 01       	movw	r28, r24
    540a:	10 e0       	ldi	r17, 0x00	; 0
    540c:	03 c0       	rjmp	.+6      	; 0x5414 <LCD_voidSendString+0x12>
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
    540e:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_voidSendData>

}

void LCD_voidSendString(const u8* copy_pu8String)
{
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
    5412:	1f 5f       	subi	r17, 0xFF	; 255
    5414:	fe 01       	movw	r30, r28
    5416:	e1 0f       	add	r30, r17
    5418:	f1 1d       	adc	r31, r1
    541a:	80 81       	ld	r24, Z
    541c:	88 23       	and	r24, r24
    541e:	b9 f7       	brne	.-18     	; 0x540e <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}
}
    5420:	df 91       	pop	r29
    5422:	cf 91       	pop	r28
    5424:	1f 91       	pop	r17
    5426:	08 95       	ret

00005428 <LCD_voidSendCommand>:




void LCD_voidSendCommand(u8 copy_u8Command)
{
    5428:	1f 93       	push	r17
    542a:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    542c:	83 e0       	ldi	r24, 0x03	; 3
    542e:	66 e0       	ldi	r22, 0x06	; 6
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    5436:	83 e0       	ldi	r24, 0x03	; 3
    5438:	65 e0       	ldi	r22, 0x05	; 5
    543a:	40 e0       	ldi	r20, 0x00	; 0
    543c:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    5440:	82 e0       	ldi	r24, 0x02	; 2
    5442:	61 2f       	mov	r22, r17
    5444:	0e 94 44 26 	call	0x4c88	; 0x4c88 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5448:	83 e0       	ldi	r24, 0x03	; 3
    544a:	64 e0       	ldi	r22, 0x04	; 4
    544c:	41 e0       	ldi	r20, 0x01	; 1
    544e:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>
    5452:	80 ea       	ldi	r24, 0xA0	; 160
    5454:	9f e0       	ldi	r25, 0x0F	; 15
    5456:	01 97       	sbiw	r24, 0x01	; 1
    5458:	f1 f7       	brne	.-4      	; 0x5456 <LCD_voidSendCommand+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    545a:	83 e0       	ldi	r24, 0x03	; 3
    545c:	64 e0       	ldi	r22, 0x04	; 4
    545e:	40 e0       	ldi	r20, 0x00	; 0
    5460:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>

}
    5464:	1f 91       	pop	r17
    5466:	08 95       	ret

00005468 <LCD_voidClearScreen>:
	LCD_voidSendData(copy_u8PatternNumber);
}

void LCD_voidClearScreen(void)
{
	LCD_voidSendCommand(0x01);
    5468:	81 e0       	ldi	r24, 0x01	; 1
    546a:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>
}
    546e:	08 95       	ret

00005470 <LCD_voidSetPosition>:


void LCD_voidSetPosition(u8 copy_u8XPosition,u8 copy_u8YPosition)
{
	u8 Local_u8Address = 0;
	if(copy_u8XPosition == LCD_ROW0)
    5470:	88 23       	and	r24, r24
    5472:	29 f0       	breq	.+10     	; 0x547e <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition;
	}
	else if(copy_u8XPosition == LCD_ROW1)
    5474:	81 30       	cpi	r24, 0x01	; 1
    5476:	11 f0       	breq	.+4      	; 0x547c <LCD_voidSetPosition+0xc>
    5478:	60 e0       	ldi	r22, 0x00	; 0
    547a:	01 c0       	rjmp	.+2      	; 0x547e <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition + DDRAM_OFFSET;
    547c:	60 5c       	subi	r22, 0xC0	; 192
	{

	}

	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
    547e:	86 2f       	mov	r24, r22
    5480:	80 68       	ori	r24, 0x80	; 128
    5482:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>
}
    5486:	08 95       	ret

00005488 <LCD_voidSendCustomCharacter>:
		}
	}
}

void LCD_voidSendCustomCharacter(u8* copy_pu8CharacterArray,u8 copy_u8PatternNumber,u8 copy_u8XPosition,u8 copy_u8YPosition)
{
    5488:	df 92       	push	r13
    548a:	ef 92       	push	r14
    548c:	ff 92       	push	r15
    548e:	0f 93       	push	r16
    5490:	1f 93       	push	r17
    5492:	cf 93       	push	r28
    5494:	df 93       	push	r29
    5496:	8c 01       	movw	r16, r24
    5498:	f6 2e       	mov	r15, r22
    549a:	e4 2e       	mov	r14, r20
    549c:	d2 2e       	mov	r13, r18
	u8 Local_u8CGRAMAddress = 0 ,Local_u8LoopCounter;

	/*Calculating CGRAM Address*/
	Local_u8CGRAMAddress = copy_u8PatternNumber*8;
    549e:	86 2f       	mov	r24, r22
    54a0:	88 0f       	add	r24, r24
    54a2:	88 0f       	add	r24, r24
    54a4:	88 0f       	add	r24, r24

	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    54a6:	80 64       	ori	r24, 0x40	; 64
    54a8:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>
    54ac:	c0 e0       	ldi	r28, 0x00	; 0
    54ae:	d0 e0       	ldi	r29, 0x00	; 0

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
    54b0:	f8 01       	movw	r30, r16
    54b2:	ec 0f       	add	r30, r28
    54b4:	fd 1f       	adc	r31, r29
    54b6:	80 81       	ld	r24, Z
    54b8:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_voidSendData>
    54bc:	21 96       	adiw	r28, 0x01	; 1
	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
    54be:	c8 30       	cpi	r28, 0x08	; 8
    54c0:	d1 05       	cpc	r29, r1
    54c2:	b1 f7       	brne	.-20     	; 0x54b0 <LCD_voidSendCustomCharacter+0x28>
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	LCD_voidSetPosition( copy_u8XPosition,copy_u8YPosition);
    54c4:	8e 2d       	mov	r24, r14
    54c6:	6d 2d       	mov	r22, r13
    54c8:	0e 94 38 2a 	call	0x5470	; 0x5470 <LCD_voidSetPosition>

	/*Displaying the pattern from CGRAM*/
	LCD_voidSendData(copy_u8PatternNumber);
    54cc:	8f 2d       	mov	r24, r15
    54ce:	0e 94 5f 28 	call	0x50be	; 0x50be <LCD_voidSendData>
}
    54d2:	df 91       	pop	r29
    54d4:	cf 91       	pop	r28
    54d6:	1f 91       	pop	r17
    54d8:	0f 91       	pop	r16
    54da:	ff 90       	pop	r15
    54dc:	ef 90       	pop	r14
    54de:	df 90       	pop	r13
    54e0:	08 95       	ret

000054e2 <LCD_voidInit>:

/********************Functions Definitions*****************/
void LCD_voidInit(void)
{
	/************Set the control pins to be output**********/
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    54e2:	83 e0       	ldi	r24, 0x03	; 3
    54e4:	64 e0       	ldi	r22, 0x04	; 4
    54e6:	41 e0       	ldi	r20, 0x01	; 1
    54e8:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    54ec:	83 e0       	ldi	r24, 0x03	; 3
    54ee:	65 e0       	ldi	r22, 0x05	; 5
    54f0:	41 e0       	ldi	r20, 0x01	; 1
    54f2:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    54f6:	83 e0       	ldi	r24, 0x03	; 3
    54f8:	66 e0       	ldi	r22, 0x06	; 6
    54fa:	41 e0       	ldi	r20, 0x01	; 1
    54fc:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
    5500:	80 e9       	ldi	r24, 0x90	; 144
    5502:	91 e0       	ldi	r25, 0x01	; 1
    5504:	28 ec       	ldi	r18, 0xC8	; 200
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	f9 01       	movw	r30, r18
    550a:	31 97       	sbiw	r30, 0x01	; 1
    550c:	f1 f7       	brne	.-4      	; 0x550a <LCD_voidInit+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    550e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5510:	d9 f7       	brne	.-10     	; 0x5508 <LCD_voidInit+0x26>

	/*Waiting for more than 30ms*/
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    5512:	82 e0       	ldi	r24, 0x02	; 2
    5514:	6f ef       	ldi	r22, 0xFF	; 255
    5516:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <DIO_u8SetPortDirection>

	/*Send the function set command: N->1 (2 lines) ,F-> 0 (5*7 char font)*/
	LCD_voidSendCommand(0x38);
    551a:	88 e3       	ldi	r24, 0x38	; 56
    551c:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>

	/*delay 39 us*/
//	_delay_us(40);

	/*Display ON/OFF control*/
	LCD_voidSendCommand(0x0C);
    5520:	8c e0       	ldi	r24, 0x0C	; 12
    5522:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>

	/*delay 39 us*/
	//_delay_us(40);

	/*Display clear control*/
	LCD_voidSendCommand(0x01);
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	0e 94 14 2a 	call	0x5428	; 0x5428 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);

#else
#error "Wrong LCD_MODE Configuration parameter"
#endif
}
    552c:	08 95       	ret

0000552e <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    552e:	ef 92       	push	r14
    5530:	ff 92       	push	r15
    5532:	0f 93       	push	r16
    5534:	1f 93       	push	r17
    5536:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5538:	05 80       	ldd	r0, Z+5	; 0x05
    553a:	f6 81       	ldd	r31, Z+6	; 0x06
    553c:	e0 2d       	mov	r30, r0
    553e:	e6 80       	ldd	r14, Z+6	; 0x06
    5540:	f7 80       	ldd	r15, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    5542:	87 01       	movw	r16, r14
    5544:	04 5f       	subi	r16, 0xF4	; 244
    5546:	1f 4f       	sbci	r17, 0xFF	; 255
    5548:	c8 01       	movw	r24, r16
    554a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    554e:	8d e3       	ldi	r24, 0x3D	; 61
    5550:	92 e0       	ldi	r25, 0x02	; 2
    5552:	b8 01       	movw	r22, r16
    5554:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    5558:	20 e0       	ldi	r18, 0x00	; 0
    555a:	e0 91 0c 02 	lds	r30, 0x020C
    555e:	f0 91 0d 02 	lds	r31, 0x020D
    5562:	d7 01       	movw	r26, r14
    5564:	56 96       	adiw	r26, 0x16	; 22
    5566:	9c 91       	ld	r25, X
    5568:	86 89       	ldd	r24, Z+22	; 0x16
    556a:	98 17       	cp	r25, r24
    556c:	08 f0       	brcs	.+2      	; 0x5570 <xCoRoutineRemoveFromEventList+0x42>
    556e:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    5570:	82 2f       	mov	r24, r18
    5572:	1f 91       	pop	r17
    5574:	0f 91       	pop	r16
    5576:	ff 90       	pop	r15
    5578:	ef 90       	pop	r14
    557a:	08 95       	ret

0000557c <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    557c:	ff 92       	push	r15
    557e:	0f 93       	push	r16
    5580:	1f 93       	push	r17
    5582:	cf 93       	push	r28
    5584:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    5586:	99 e0       	ldi	r25, 0x09	; 9
    5588:	f9 2e       	mov	r15, r25
    558a:	21 c0       	rjmp	.+66     	; 0x55ce <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    558c:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    558e:	e0 91 42 02 	lds	r30, 0x0242
    5592:	f0 91 43 02 	lds	r31, 0x0243
    5596:	06 81       	ldd	r16, Z+6	; 0x06
    5598:	17 81       	ldd	r17, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    559a:	c8 01       	movw	r24, r16
    559c:	0c 96       	adiw	r24, 0x0c	; 12
    559e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    55a2:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    55a4:	e8 01       	movw	r28, r16
    55a6:	22 96       	adiw	r28, 0x02	; 2
    55a8:	ce 01       	movw	r24, r28
    55aa:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    55ae:	f8 01       	movw	r30, r16
    55b0:	96 89       	ldd	r25, Z+22	; 0x16
    55b2:	80 91 0e 02 	lds	r24, 0x020E
    55b6:	89 17       	cp	r24, r25
    55b8:	10 f4       	brcc	.+4      	; 0x55be <vCoRoutineSchedule+0x42>
    55ba:	90 93 0e 02 	sts	0x020E, r25
    55be:	9f 9d       	mul	r25, r15
    55c0:	c0 01       	movw	r24, r0
    55c2:	11 24       	eor	r1, r1
    55c4:	8b 5e       	subi	r24, 0xEB	; 235
    55c6:	9d 4f       	sbci	r25, 0xFD	; 253
    55c8:	be 01       	movw	r22, r28
    55ca:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    55ce:	80 91 3d 02 	lds	r24, 0x023D
    55d2:	88 23       	and	r24, r24
    55d4:	d9 f6       	brne	.-74     	; 0x558c <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    55d6:	0e 94 62 31 	call	0x62c4	; 0x62c4 <xTaskGetTickCount>
    55da:	20 91 0f 02 	lds	r18, 0x020F
    55de:	30 91 10 02 	lds	r19, 0x0210
    55e2:	82 1b       	sub	r24, r18
    55e4:	93 0b       	sbc	r25, r19
    55e6:	90 93 12 02 	sts	0x0212, r25
    55ea:	80 93 11 02 	sts	0x0211, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    55ee:	89 e0       	ldi	r24, 0x09	; 9
    55f0:	f8 2e       	mov	r15, r24
    55f2:	53 c0       	rjmp	.+166    	; 0x569a <vCoRoutineSchedule+0x11e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    55f4:	01 96       	adiw	r24, 0x01	; 1
    55f6:	90 93 14 02 	sts	0x0214, r25
    55fa:	80 93 13 02 	sts	0x0213, r24
		xPassedTicks--;
    55fe:	21 50       	subi	r18, 0x01	; 1
    5600:	30 40       	sbci	r19, 0x00	; 0
    5602:	30 93 12 02 	sts	0x0212, r19
    5606:	20 93 11 02 	sts	0x0211, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    560a:	89 2b       	or	r24, r25
    560c:	09 f0       	breq	.+2      	; 0x5610 <vCoRoutineSchedule+0x94>
    560e:	3e c0       	rjmp	.+124    	; 0x568c <vCoRoutineSchedule+0x110>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    5610:	20 91 39 02 	lds	r18, 0x0239
    5614:	30 91 3a 02 	lds	r19, 0x023A
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    5618:	80 91 3b 02 	lds	r24, 0x023B
    561c:	90 91 3c 02 	lds	r25, 0x023C
    5620:	90 93 3a 02 	sts	0x023A, r25
    5624:	80 93 39 02 	sts	0x0239, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    5628:	30 93 3c 02 	sts	0x023C, r19
    562c:	20 93 3b 02 	sts	0x023B, r18
    5630:	2d c0       	rjmp	.+90     	; 0x568c <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    5632:	05 80       	ldd	r0, Z+5	; 0x05
    5634:	f6 81       	ldd	r31, Z+6	; 0x06
    5636:	e0 2d       	mov	r30, r0
    5638:	c6 81       	ldd	r28, Z+6	; 0x06
    563a:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    563c:	20 91 13 02 	lds	r18, 0x0213
    5640:	30 91 14 02 	lds	r19, 0x0214
    5644:	8a 81       	ldd	r24, Y+2	; 0x02
    5646:	9b 81       	ldd	r25, Y+3	; 0x03
    5648:	28 17       	cp	r18, r24
    564a:	39 07       	cpc	r19, r25
    564c:	30 f1       	brcs	.+76     	; 0x569a <vCoRoutineSchedule+0x11e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    564e:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    5650:	8e 01       	movw	r16, r28
    5652:	0e 5f       	subi	r16, 0xFE	; 254
    5654:	1f 4f       	sbci	r17, 0xFF	; 255
    5656:	c8 01       	movw	r24, r16
    5658:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    565c:	8c 89       	ldd	r24, Y+20	; 0x14
    565e:	9d 89       	ldd	r25, Y+21	; 0x15
    5660:	89 2b       	or	r24, r25
    5662:	21 f0       	breq	.+8      	; 0x566c <vCoRoutineSchedule+0xf0>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    5664:	ce 01       	movw	r24, r28
    5666:	0c 96       	adiw	r24, 0x0c	; 12
    5668:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    566c:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    566e:	9e 89       	ldd	r25, Y+22	; 0x16
    5670:	80 91 0e 02 	lds	r24, 0x020E
    5674:	89 17       	cp	r24, r25
    5676:	10 f4       	brcc	.+4      	; 0x567c <vCoRoutineSchedule+0x100>
    5678:	90 93 0e 02 	sts	0x020E, r25
    567c:	9f 9d       	mul	r25, r15
    567e:	c0 01       	movw	r24, r0
    5680:	11 24       	eor	r1, r1
    5682:	8b 5e       	subi	r24, 0xEB	; 235
    5684:	9d 4f       	sbci	r25, 0xFD	; 253
    5686:	b8 01       	movw	r22, r16
    5688:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    568c:	e0 91 39 02 	lds	r30, 0x0239
    5690:	f0 91 3a 02 	lds	r31, 0x023A
    5694:	80 81       	ld	r24, Z
    5696:	88 23       	and	r24, r24
    5698:	61 f6       	brne	.-104    	; 0x5632 <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    569a:	20 91 11 02 	lds	r18, 0x0211
    569e:	30 91 12 02 	lds	r19, 0x0212
    56a2:	80 91 13 02 	lds	r24, 0x0213
    56a6:	90 91 14 02 	lds	r25, 0x0214
    56aa:	21 15       	cp	r18, r1
    56ac:	31 05       	cpc	r19, r1
    56ae:	09 f0       	breq	.+2      	; 0x56b2 <vCoRoutineSchedule+0x136>
    56b0:	a1 cf       	rjmp	.-190    	; 0x55f4 <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    56b2:	90 93 10 02 	sts	0x0210, r25
    56b6:	80 93 0f 02 	sts	0x020F, r24
    56ba:	90 91 0e 02 	lds	r25, 0x020E

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    56be:	29 e0       	ldi	r18, 0x09	; 9
    56c0:	06 c0       	rjmp	.+12     	; 0x56ce <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    56c2:	99 23       	and	r25, r25
    56c4:	19 f4       	brne	.+6      	; 0x56cc <vCoRoutineSchedule+0x150>
    56c6:	10 92 0e 02 	sts	0x020E, r1
    56ca:	32 c0       	rjmp	.+100    	; 0x5730 <vCoRoutineSchedule+0x1b4>
    56cc:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    56ce:	92 9f       	mul	r25, r18
    56d0:	d0 01       	movw	r26, r0
    56d2:	11 24       	eor	r1, r1
    56d4:	ab 5e       	subi	r26, 0xEB	; 235
    56d6:	bd 4f       	sbci	r27, 0xFD	; 253
    56d8:	8c 91       	ld	r24, X
    56da:	88 23       	and	r24, r24
    56dc:	91 f3       	breq	.-28     	; 0x56c2 <vCoRoutineSchedule+0x146>
    56de:	90 93 0e 02 	sts	0x020E, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    56e2:	11 96       	adiw	r26, 0x01	; 1
    56e4:	ed 91       	ld	r30, X+
    56e6:	fc 91       	ld	r31, X
    56e8:	12 97       	sbiw	r26, 0x02	; 2
    56ea:	02 80       	ldd	r0, Z+2	; 0x02
    56ec:	f3 81       	ldd	r31, Z+3	; 0x03
    56ee:	e0 2d       	mov	r30, r0
    56f0:	12 96       	adiw	r26, 0x02	; 2
    56f2:	fc 93       	st	X, r31
    56f4:	ee 93       	st	-X, r30
    56f6:	11 97       	sbiw	r26, 0x01	; 1
    56f8:	cd 01       	movw	r24, r26
    56fa:	03 96       	adiw	r24, 0x03	; 3
    56fc:	e8 17       	cp	r30, r24
    56fe:	f9 07       	cpc	r31, r25
    5700:	31 f4       	brne	.+12     	; 0x570e <vCoRoutineSchedule+0x192>
    5702:	82 81       	ldd	r24, Z+2	; 0x02
    5704:	93 81       	ldd	r25, Z+3	; 0x03
    5706:	12 96       	adiw	r26, 0x02	; 2
    5708:	9c 93       	st	X, r25
    570a:	8e 93       	st	-X, r24
    570c:	11 97       	sbiw	r26, 0x01	; 1
    570e:	11 96       	adiw	r26, 0x01	; 1
    5710:	ed 91       	ld	r30, X+
    5712:	fc 91       	ld	r31, X
    5714:	12 97       	sbiw	r26, 0x02	; 2
    5716:	06 80       	ldd	r0, Z+6	; 0x06
    5718:	f7 81       	ldd	r31, Z+7	; 0x07
    571a:	e0 2d       	mov	r30, r0
    571c:	f0 93 0d 02 	sts	0x020D, r31
    5720:	e0 93 0c 02 	sts	0x020C, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    5724:	20 81       	ld	r18, Z
    5726:	31 81       	ldd	r19, Z+1	; 0x01
    5728:	cf 01       	movw	r24, r30
    572a:	67 89       	ldd	r22, Z+23	; 0x17
    572c:	f9 01       	movw	r30, r18
    572e:	09 95       	icall

	return;
}
    5730:	df 91       	pop	r29
    5732:	cf 91       	pop	r28
    5734:	1f 91       	pop	r17
    5736:	0f 91       	pop	r16
    5738:	ff 90       	pop	r15
    573a:	08 95       	ret

0000573c <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    573c:	0f 93       	push	r16
    573e:	1f 93       	push	r17
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    5746:	00 91 13 02 	lds	r16, 0x0213
    574a:	10 91 14 02 	lds	r17, 0x0214
    574e:	08 0f       	add	r16, r24
    5750:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5752:	80 91 0c 02 	lds	r24, 0x020C
    5756:	90 91 0d 02 	lds	r25, 0x020D
    575a:	02 96       	adiw	r24, 0x02	; 2
    575c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    5760:	e0 91 0c 02 	lds	r30, 0x020C
    5764:	f0 91 0d 02 	lds	r31, 0x020D
    5768:	13 83       	std	Z+3, r17	; 0x03
    576a:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    576c:	80 91 13 02 	lds	r24, 0x0213
    5770:	90 91 14 02 	lds	r25, 0x0214
    5774:	bf 01       	movw	r22, r30
    5776:	6e 5f       	subi	r22, 0xFE	; 254
    5778:	7f 4f       	sbci	r23, 0xFF	; 255
    577a:	08 17       	cp	r16, r24
    577c:	19 07       	cpc	r17, r25
    577e:	28 f4       	brcc	.+10     	; 0x578a <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5780:	80 91 3b 02 	lds	r24, 0x023B
    5784:	90 91 3c 02 	lds	r25, 0x023C
    5788:	04 c0       	rjmp	.+8      	; 0x5792 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    578a:	80 91 39 02 	lds	r24, 0x0239
    578e:	90 91 3a 02 	lds	r25, 0x023A
    5792:	0e 94 c9 2c 	call	0x5992	; 0x5992 <vListInsert>
	}

	if( pxEventList )
    5796:	20 97       	sbiw	r28, 0x00	; 0
    5798:	49 f0       	breq	.+18     	; 0x57ac <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    579a:	60 91 0c 02 	lds	r22, 0x020C
    579e:	70 91 0d 02 	lds	r23, 0x020D
    57a2:	64 5f       	subi	r22, 0xF4	; 244
    57a4:	7f 4f       	sbci	r23, 0xFF	; 255
    57a6:	ce 01       	movw	r24, r28
    57a8:	0e 94 c9 2c 	call	0x5992	; 0x5992 <vListInsert>
	}
}
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	0f 91       	pop	r16
    57b4:	08 95       	ret

000057b6 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    57b6:	af 92       	push	r10
    57b8:	bf 92       	push	r11
    57ba:	cf 92       	push	r12
    57bc:	df 92       	push	r13
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29
    57ca:	6c 01       	movw	r12, r24
    57cc:	b6 2e       	mov	r11, r22
    57ce:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    57d0:	8a e1       	ldi	r24, 0x1A	; 26
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pvPortMalloc>
    57d8:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    57da:	00 97       	sbiw	r24, 0x00	; 0
    57dc:	11 f4       	brne	.+4      	; 0x57e2 <xCoRoutineCreate+0x2c>
    57de:	8f ef       	ldi	r24, 0xFF	; 255
    57e0:	59 c0       	rjmp	.+178    	; 0x5894 <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    57e2:	80 91 0c 02 	lds	r24, 0x020C
    57e6:	90 91 0d 02 	lds	r25, 0x020D
    57ea:	89 2b       	or	r24, r25
    57ec:	21 f5       	brne	.+72     	; 0x5836 <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    57ee:	d0 93 0d 02 	sts	0x020D, r29
    57f2:	c0 93 0c 02 	sts	0x020C, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    57f6:	85 e1       	ldi	r24, 0x15	; 21
    57f8:	92 e0       	ldi	r25, 0x02	; 2
    57fa:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
    57fe:	8e e1       	ldi	r24, 0x1E	; 30
    5800:	92 e0       	ldi	r25, 0x02	; 2
    5802:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    5806:	27 e2       	ldi	r18, 0x27	; 39
    5808:	e2 2e       	mov	r14, r18
    580a:	22 e0       	ldi	r18, 0x02	; 2
    580c:	f2 2e       	mov	r15, r18
    580e:	c7 01       	movw	r24, r14
    5810:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    5814:	00 e3       	ldi	r16, 0x30	; 48
    5816:	12 e0       	ldi	r17, 0x02	; 2
    5818:	c8 01       	movw	r24, r16
    581a:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    581e:	8d e3       	ldi	r24, 0x3D	; 61
    5820:	92 e0       	ldi	r25, 0x02	; 2
    5822:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    5826:	f0 92 3a 02 	sts	0x023A, r15
    582a:	e0 92 39 02 	sts	0x0239, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    582e:	10 93 3c 02 	sts	0x023C, r17
    5832:	00 93 3b 02 	sts	0x023B, r16
    5836:	eb 2c       	mov	r14, r11
    5838:	bb 20       	and	r11, r11
    583a:	11 f0       	breq	.+4      	; 0x5840 <xCoRoutineCreate+0x8a>
    583c:	ee 24       	eor	r14, r14
    583e:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    5840:	19 8e       	std	Y+25, r1	; 0x19
    5842:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    5844:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    5846:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    5848:	fe 01       	movw	r30, r28
    584a:	c1 92       	st	Z+, r12
    584c:	d1 92       	st	Z+, r13
    584e:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    5850:	cf 01       	movw	r24, r30
    5852:	0e 94 9c 2c 	call	0x5938	; 0x5938 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    5856:	ce 01       	movw	r24, r28
    5858:	0c 96       	adiw	r24, 0x0c	; 12
    585a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    585e:	d9 87       	std	Y+9, r29	; 0x09
    5860:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    5862:	db 8b       	std	Y+19, r29	; 0x13
    5864:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5866:	84 e0       	ldi	r24, 0x04	; 4
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	8e 19       	sub	r24, r14
    586c:	91 09       	sbc	r25, r1
    586e:	9d 87       	std	Y+13, r25	; 0x0d
    5870:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    5872:	9e 89       	ldd	r25, Y+22	; 0x16
    5874:	80 91 0e 02 	lds	r24, 0x020E
    5878:	89 17       	cp	r24, r25
    587a:	10 f4       	brcc	.+4      	; 0x5880 <xCoRoutineCreate+0xca>
    587c:	90 93 0e 02 	sts	0x020E, r25
    5880:	89 e0       	ldi	r24, 0x09	; 9
    5882:	98 9f       	mul	r25, r24
    5884:	c0 01       	movw	r24, r0
    5886:	11 24       	eor	r1, r1
    5888:	8b 5e       	subi	r24, 0xEB	; 235
    588a:	9d 4f       	sbci	r25, 0xFD	; 253
    588c:	b8 01       	movw	r22, r16
    588e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    5892:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	1f 91       	pop	r17
    589a:	0f 91       	pop	r16
    589c:	ff 90       	pop	r15
    589e:	ef 90       	pop	r14
    58a0:	df 90       	pop	r13
    58a2:	cf 90       	pop	r12
    58a4:	bf 90       	pop	r11
    58a6:	af 90       	pop	r10
    58a8:	08 95       	ret

000058aa <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    58aa:	08 95       	ret

000058ac <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    58ac:	10 92 47 02 	sts	0x0247, r1
    58b0:	10 92 46 02 	sts	0x0246, r1
}
    58b4:	08 95       	ret

000058b6 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    58b6:	24 e1       	ldi	r18, 0x14	; 20
    58b8:	35 e0       	ldi	r19, 0x05	; 5
    58ba:	80 91 46 02 	lds	r24, 0x0246
    58be:	90 91 47 02 	lds	r25, 0x0247
    58c2:	28 1b       	sub	r18, r24
    58c4:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    58c6:	c9 01       	movw	r24, r18
    58c8:	08 95       	ret

000058ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    58ca:	0f 93       	push	r16
    58cc:	1f 93       	push	r17
    58ce:	cf 93       	push	r28
    58d0:	df 93       	push	r29
    58d2:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    58d4:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    58d8:	80 91 46 02 	lds	r24, 0x0246
    58dc:	90 91 47 02 	lds	r25, 0x0247
    58e0:	98 01       	movw	r18, r16
    58e2:	28 0f       	add	r18, r24
    58e4:	39 1f       	adc	r19, r25
    58e6:	45 e0       	ldi	r20, 0x05	; 5
    58e8:	24 31       	cpi	r18, 0x14	; 20
    58ea:	34 07       	cpc	r19, r20
    58ec:	58 f4       	brcc	.+22     	; 0x5904 <pvPortMalloc+0x3a>
    58ee:	82 17       	cp	r24, r18
    58f0:	93 07       	cpc	r25, r19
    58f2:	40 f4       	brcc	.+16     	; 0x5904 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    58f4:	ec 01       	movw	r28, r24
    58f6:	c8 5b       	subi	r28, 0xB8	; 184
    58f8:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
    58fa:	30 93 47 02 	sts	0x0247, r19
    58fe:	20 93 46 02 	sts	0x0246, r18
    5902:	02 c0       	rjmp	.+4      	; 0x5908 <pvPortMalloc+0x3e>
    5904:	c0 e0       	ldi	r28, 0x00	; 0
    5906:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    5908:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    590c:	ce 01       	movw	r24, r28
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	1f 91       	pop	r17
    5914:	0f 91       	pop	r16
    5916:	08 95       	ret

00005918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    5918:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    591a:	9c 01       	movw	r18, r24
    591c:	2d 5f       	subi	r18, 0xFD	; 253
    591e:	3f 4f       	sbci	r19, 0xFF	; 255
    5920:	32 83       	std	Z+2, r19	; 0x02
    5922:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	9f ef       	ldi	r25, 0xFF	; 255
    5928:	94 83       	std	Z+4, r25	; 0x04
    592a:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    592c:	36 83       	std	Z+6, r19	; 0x06
    592e:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    5930:	30 87       	std	Z+8, r19	; 0x08
    5932:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    5934:	10 82       	st	Z, r1
}
    5936:	08 95       	ret

00005938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    5938:	fc 01       	movw	r30, r24
    593a:	11 86       	std	Z+9, r1	; 0x09
    593c:	10 86       	std	Z+8, r1	; 0x08
}
    593e:	08 95       	ret

00005940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	ac 01       	movw	r20, r24
    5946:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    5948:	ec 01       	movw	r28, r24
    594a:	29 81       	ldd	r18, Y+1	; 0x01
    594c:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    594e:	f9 01       	movw	r30, r18
    5950:	82 81       	ldd	r24, Z+2	; 0x02
    5952:	93 81       	ldd	r25, Z+3	; 0x03
    5954:	13 96       	adiw	r26, 0x03	; 3
    5956:	9c 93       	st	X, r25
    5958:	8e 93       	st	-X, r24
    595a:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    595c:	89 81       	ldd	r24, Y+1	; 0x01
    595e:	9a 81       	ldd	r25, Y+2	; 0x02
    5960:	15 96       	adiw	r26, 0x05	; 5
    5962:	9c 93       	st	X, r25
    5964:	8e 93       	st	-X, r24
    5966:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    5968:	02 80       	ldd	r0, Z+2	; 0x02
    596a:	f3 81       	ldd	r31, Z+3	; 0x03
    596c:	e0 2d       	mov	r30, r0
    596e:	75 83       	std	Z+5, r23	; 0x05
    5970:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    5972:	e9 01       	movw	r28, r18
    5974:	7b 83       	std	Y+3, r23	; 0x03
    5976:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    5978:	fa 01       	movw	r30, r20
    597a:	72 83       	std	Z+2, r23	; 0x02
    597c:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    597e:	19 96       	adiw	r26, 0x09	; 9
    5980:	5c 93       	st	X, r21
    5982:	4e 93       	st	-X, r20
    5984:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    5986:	80 81       	ld	r24, Z
    5988:	8f 5f       	subi	r24, 0xFF	; 255
    598a:	80 83       	st	Z, r24
}
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	08 95       	ret

00005992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    5992:	cf 93       	push	r28
    5994:	df 93       	push	r29
    5996:	9c 01       	movw	r18, r24
    5998:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    599a:	48 81       	ld	r20, Y
    599c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    599e:	8f ef       	ldi	r24, 0xFF	; 255
    59a0:	4f 3f       	cpi	r20, 0xFF	; 255
    59a2:	58 07       	cpc	r21, r24
    59a4:	21 f4       	brne	.+8      	; 0x59ae <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    59a6:	f9 01       	movw	r30, r18
    59a8:	a7 81       	ldd	r26, Z+7	; 0x07
    59aa:	b0 85       	ldd	r27, Z+8	; 0x08
    59ac:	10 c0       	rjmp	.+32     	; 0x59ce <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    59ae:	d9 01       	movw	r26, r18
    59b0:	13 96       	adiw	r26, 0x03	; 3
    59b2:	04 c0       	rjmp	.+8      	; 0x59bc <vListInsert+0x2a>
    59b4:	12 96       	adiw	r26, 0x02	; 2
    59b6:	0d 90       	ld	r0, X+
    59b8:	bc 91       	ld	r27, X
    59ba:	a0 2d       	mov	r26, r0
    59bc:	12 96       	adiw	r26, 0x02	; 2
    59be:	ed 91       	ld	r30, X+
    59c0:	fc 91       	ld	r31, X
    59c2:	13 97       	sbiw	r26, 0x03	; 3
    59c4:	80 81       	ld	r24, Z
    59c6:	91 81       	ldd	r25, Z+1	; 0x01
    59c8:	48 17       	cp	r20, r24
    59ca:	59 07       	cpc	r21, r25
    59cc:	98 f7       	brcc	.-26     	; 0x59b4 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    59ce:	12 96       	adiw	r26, 0x02	; 2
    59d0:	ed 91       	ld	r30, X+
    59d2:	fc 91       	ld	r31, X
    59d4:	13 97       	sbiw	r26, 0x03	; 3
    59d6:	fb 83       	std	Y+3, r31	; 0x03
    59d8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    59da:	d5 83       	std	Z+5, r29	; 0x05
    59dc:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    59de:	bd 83       	std	Y+5, r27	; 0x05
    59e0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    59e2:	13 96       	adiw	r26, 0x03	; 3
    59e4:	dc 93       	st	X, r29
    59e6:	ce 93       	st	-X, r28
    59e8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    59ea:	39 87       	std	Y+9, r19	; 0x09
    59ec:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    59ee:	f9 01       	movw	r30, r18
    59f0:	80 81       	ld	r24, Z
    59f2:	8f 5f       	subi	r24, 0xFF	; 255
    59f4:	80 83       	st	Z, r24
}
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	08 95       	ret

000059fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    59fc:	cf 93       	push	r28
    59fe:	df 93       	push	r29
    5a00:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    5a02:	12 96       	adiw	r26, 0x02	; 2
    5a04:	ed 91       	ld	r30, X+
    5a06:	fc 91       	ld	r31, X
    5a08:	13 97       	sbiw	r26, 0x03	; 3
    5a0a:	14 96       	adiw	r26, 0x04	; 4
    5a0c:	8d 91       	ld	r24, X+
    5a0e:	9c 91       	ld	r25, X
    5a10:	15 97       	sbiw	r26, 0x05	; 5
    5a12:	95 83       	std	Z+5, r25	; 0x05
    5a14:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    5a16:	14 96       	adiw	r26, 0x04	; 4
    5a18:	cd 91       	ld	r28, X+
    5a1a:	dc 91       	ld	r29, X
    5a1c:	15 97       	sbiw	r26, 0x05	; 5
    5a1e:	fb 83       	std	Y+3, r31	; 0x03
    5a20:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    5a22:	18 96       	adiw	r26, 0x08	; 8
    5a24:	ed 91       	ld	r30, X+
    5a26:	fc 91       	ld	r31, X
    5a28:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    5a2a:	81 81       	ldd	r24, Z+1	; 0x01
    5a2c:	92 81       	ldd	r25, Z+2	; 0x02
    5a2e:	8a 17       	cp	r24, r26
    5a30:	9b 07       	cpc	r25, r27
    5a32:	11 f4       	brne	.+4      	; 0x5a38 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    5a34:	d2 83       	std	Z+2, r29	; 0x02
    5a36:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    5a38:	19 96       	adiw	r26, 0x09	; 9
    5a3a:	1c 92       	st	X, r1
    5a3c:	1e 92       	st	-X, r1
    5a3e:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    5a40:	80 81       	ld	r24, Z
    5a42:	81 50       	subi	r24, 0x01	; 1
    5a44:	80 83       	st	Z, r24
}
    5a46:	df 91       	pop	r29
    5a48:	cf 91       	pop	r28
    5a4a:	08 95       	ret

00005a4c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5a4c:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    5a4e:	91 e1       	ldi	r25, 0x11	; 17
    5a50:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    5a52:	22 e2       	ldi	r18, 0x22	; 34
    5a54:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    5a56:	83 e3       	ldi	r24, 0x33	; 51
    5a58:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5a5a:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5a5c:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    5a5e:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    5a60:	80 e8       	ldi	r24, 0x80	; 128
    5a62:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    5a64:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    5a66:	82 e0       	ldi	r24, 0x02	; 2
    5a68:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    5a6a:	83 e0       	ldi	r24, 0x03	; 3
    5a6c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    5a6e:	84 e0       	ldi	r24, 0x04	; 4
    5a70:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    5a72:	85 e0       	ldi	r24, 0x05	; 5
    5a74:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    5a76:	86 e0       	ldi	r24, 0x06	; 6
    5a78:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    5a7a:	87 e0       	ldi	r24, 0x07	; 7
    5a7c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    5a7e:	88 e0       	ldi	r24, 0x08	; 8
    5a80:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    5a82:	89 e0       	ldi	r24, 0x09	; 9
    5a84:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    5a86:	80 e1       	ldi	r24, 0x10	; 16
    5a88:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    5a8a:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    5a8c:	82 e1       	ldi	r24, 0x12	; 18
    5a8e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    5a90:	83 e1       	ldi	r24, 0x13	; 19
    5a92:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    5a94:	84 e1       	ldi	r24, 0x14	; 20
    5a96:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    5a98:	85 e1       	ldi	r24, 0x15	; 21
    5a9a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    5a9c:	86 e1       	ldi	r24, 0x16	; 22
    5a9e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    5aa0:	87 e1       	ldi	r24, 0x17	; 23
    5aa2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    5aa4:	88 e1       	ldi	r24, 0x18	; 24
    5aa6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    5aa8:	89 e1       	ldi	r24, 0x19	; 25
    5aaa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    5aac:	80 e2       	ldi	r24, 0x20	; 32
    5aae:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    5ab0:	81 e2       	ldi	r24, 0x21	; 33
    5ab2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    5ab4:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    5ab6:	83 e2       	ldi	r24, 0x23	; 35
    5ab8:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5aba:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5abc:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    5abe:	86 e2       	ldi	r24, 0x26	; 38
    5ac0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    5ac2:	87 e2       	ldi	r24, 0x27	; 39
    5ac4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    5ac6:	88 e2       	ldi	r24, 0x28	; 40
    5ac8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    5aca:	89 e2       	ldi	r24, 0x29	; 41
    5acc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    5ace:	80 e3       	ldi	r24, 0x30	; 48
    5ad0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    5ad2:	81 e3       	ldi	r24, 0x31	; 49
    5ad4:	82 93       	st	-Z, r24
    5ad6:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    5ad8:	cf 01       	movw	r24, r30
    5ada:	08 95       	ret

00005adc <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    5adc:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    5ade:	8c e7       	ldi	r24, 0x7C	; 124
    5ae0:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    5ae2:	8b e0       	ldi	r24, 0x0B	; 11
    5ae4:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    5ae6:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    5ae8:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    5aea:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    5aec:	a0 91 5c 07 	lds	r26, 0x075C
    5af0:	b0 91 5d 07 	lds	r27, 0x075D
    5af4:	cd 91       	ld	r28, X+
    5af6:	cd bf       	out	0x3d, r28	; 61
    5af8:	dd 91       	ld	r29, X+
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	ff 91       	pop	r31
    5afe:	ef 91       	pop	r30
    5b00:	df 91       	pop	r29
    5b02:	cf 91       	pop	r28
    5b04:	bf 91       	pop	r27
    5b06:	af 91       	pop	r26
    5b08:	9f 91       	pop	r25
    5b0a:	8f 91       	pop	r24
    5b0c:	7f 91       	pop	r23
    5b0e:	6f 91       	pop	r22
    5b10:	5f 91       	pop	r21
    5b12:	4f 91       	pop	r20
    5b14:	3f 91       	pop	r19
    5b16:	2f 91       	pop	r18
    5b18:	1f 91       	pop	r17
    5b1a:	0f 91       	pop	r16
    5b1c:	ff 90       	pop	r15
    5b1e:	ef 90       	pop	r14
    5b20:	df 90       	pop	r13
    5b22:	cf 90       	pop	r12
    5b24:	bf 90       	pop	r11
    5b26:	af 90       	pop	r10
    5b28:	9f 90       	pop	r9
    5b2a:	8f 90       	pop	r8
    5b2c:	7f 90       	pop	r7
    5b2e:	6f 90       	pop	r6
    5b30:	5f 90       	pop	r5
    5b32:	4f 90       	pop	r4
    5b34:	3f 90       	pop	r3
    5b36:	2f 90       	pop	r2
    5b38:	1f 90       	pop	r1
    5b3a:	0f 90       	pop	r0
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    5b40:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    5b42:	81 e0       	ldi	r24, 0x01	; 1
    5b44:	08 95       	ret

00005b46 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    5b46:	08 95       	ret

00005b48 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    5b48:	0f 92       	push	r0
    5b4a:	0f b6       	in	r0, 0x3f	; 63
    5b4c:	f8 94       	cli
    5b4e:	0f 92       	push	r0
    5b50:	1f 92       	push	r1
    5b52:	11 24       	eor	r1, r1
    5b54:	2f 92       	push	r2
    5b56:	3f 92       	push	r3
    5b58:	4f 92       	push	r4
    5b5a:	5f 92       	push	r5
    5b5c:	6f 92       	push	r6
    5b5e:	7f 92       	push	r7
    5b60:	8f 92       	push	r8
    5b62:	9f 92       	push	r9
    5b64:	af 92       	push	r10
    5b66:	bf 92       	push	r11
    5b68:	cf 92       	push	r12
    5b6a:	df 92       	push	r13
    5b6c:	ef 92       	push	r14
    5b6e:	ff 92       	push	r15
    5b70:	0f 93       	push	r16
    5b72:	1f 93       	push	r17
    5b74:	2f 93       	push	r18
    5b76:	3f 93       	push	r19
    5b78:	4f 93       	push	r20
    5b7a:	5f 93       	push	r21
    5b7c:	6f 93       	push	r22
    5b7e:	7f 93       	push	r23
    5b80:	8f 93       	push	r24
    5b82:	9f 93       	push	r25
    5b84:	af 93       	push	r26
    5b86:	bf 93       	push	r27
    5b88:	cf 93       	push	r28
    5b8a:	df 93       	push	r29
    5b8c:	ef 93       	push	r30
    5b8e:	ff 93       	push	r31
    5b90:	a0 91 5c 07 	lds	r26, 0x075C
    5b94:	b0 91 5d 07 	lds	r27, 0x075D
    5b98:	0d b6       	in	r0, 0x3d	; 61
    5b9a:	0d 92       	st	X+, r0
    5b9c:	0e b6       	in	r0, 0x3e	; 62
    5b9e:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    5ba0:	0e 94 44 32 	call	0x6488	; 0x6488 <vTaskIncrementTick>
	vTaskSwitchContext();
    5ba4:	0e 94 76 31 	call	0x62ec	; 0x62ec <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    5ba8:	a0 91 5c 07 	lds	r26, 0x075C
    5bac:	b0 91 5d 07 	lds	r27, 0x075D
    5bb0:	cd 91       	ld	r28, X+
    5bb2:	cd bf       	out	0x3d, r28	; 61
    5bb4:	dd 91       	ld	r29, X+
    5bb6:	de bf       	out	0x3e, r29	; 62
    5bb8:	ff 91       	pop	r31
    5bba:	ef 91       	pop	r30
    5bbc:	df 91       	pop	r29
    5bbe:	cf 91       	pop	r28
    5bc0:	bf 91       	pop	r27
    5bc2:	af 91       	pop	r26
    5bc4:	9f 91       	pop	r25
    5bc6:	8f 91       	pop	r24
    5bc8:	7f 91       	pop	r23
    5bca:	6f 91       	pop	r22
    5bcc:	5f 91       	pop	r21
    5bce:	4f 91       	pop	r20
    5bd0:	3f 91       	pop	r19
    5bd2:	2f 91       	pop	r18
    5bd4:	1f 91       	pop	r17
    5bd6:	0f 91       	pop	r16
    5bd8:	ff 90       	pop	r15
    5bda:	ef 90       	pop	r14
    5bdc:	df 90       	pop	r13
    5bde:	cf 90       	pop	r12
    5be0:	bf 90       	pop	r11
    5be2:	af 90       	pop	r10
    5be4:	9f 90       	pop	r9
    5be6:	8f 90       	pop	r8
    5be8:	7f 90       	pop	r7
    5bea:	6f 90       	pop	r6
    5bec:	5f 90       	pop	r5
    5bee:	4f 90       	pop	r4
    5bf0:	3f 90       	pop	r3
    5bf2:	2f 90       	pop	r2
    5bf4:	1f 90       	pop	r1
    5bf6:	0f 90       	pop	r0
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	0f 90       	pop	r0

	asm volatile ( "ret" );
    5bfc:	08 95       	ret

00005bfe <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    5bfe:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <vPortYieldFromTick>
		asm volatile ( "reti" );
    5c02:	18 95       	reti

00005c04 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    5c04:	0f 92       	push	r0
    5c06:	0f b6       	in	r0, 0x3f	; 63
    5c08:	f8 94       	cli
    5c0a:	0f 92       	push	r0
    5c0c:	1f 92       	push	r1
    5c0e:	11 24       	eor	r1, r1
    5c10:	2f 92       	push	r2
    5c12:	3f 92       	push	r3
    5c14:	4f 92       	push	r4
    5c16:	5f 92       	push	r5
    5c18:	6f 92       	push	r6
    5c1a:	7f 92       	push	r7
    5c1c:	8f 92       	push	r8
    5c1e:	9f 92       	push	r9
    5c20:	af 92       	push	r10
    5c22:	bf 92       	push	r11
    5c24:	cf 92       	push	r12
    5c26:	df 92       	push	r13
    5c28:	ef 92       	push	r14
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
    5c30:	2f 93       	push	r18
    5c32:	3f 93       	push	r19
    5c34:	4f 93       	push	r20
    5c36:	5f 93       	push	r21
    5c38:	6f 93       	push	r22
    5c3a:	7f 93       	push	r23
    5c3c:	8f 93       	push	r24
    5c3e:	9f 93       	push	r25
    5c40:	af 93       	push	r26
    5c42:	bf 93       	push	r27
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	ef 93       	push	r30
    5c4a:	ff 93       	push	r31
    5c4c:	a0 91 5c 07 	lds	r26, 0x075C
    5c50:	b0 91 5d 07 	lds	r27, 0x075D
    5c54:	0d b6       	in	r0, 0x3d	; 61
    5c56:	0d 92       	st	X+, r0
    5c58:	0e b6       	in	r0, 0x3e	; 62
    5c5a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    5c5c:	0e 94 76 31 	call	0x62ec	; 0x62ec <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    5c60:	a0 91 5c 07 	lds	r26, 0x075C
    5c64:	b0 91 5d 07 	lds	r27, 0x075D
    5c68:	cd 91       	ld	r28, X+
    5c6a:	cd bf       	out	0x3d, r28	; 61
    5c6c:	dd 91       	ld	r29, X+
    5c6e:	de bf       	out	0x3e, r29	; 62
    5c70:	ff 91       	pop	r31
    5c72:	ef 91       	pop	r30
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	bf 91       	pop	r27
    5c7a:	af 91       	pop	r26
    5c7c:	9f 91       	pop	r25
    5c7e:	8f 91       	pop	r24
    5c80:	7f 91       	pop	r23
    5c82:	6f 91       	pop	r22
    5c84:	5f 91       	pop	r21
    5c86:	4f 91       	pop	r20
    5c88:	3f 91       	pop	r19
    5c8a:	2f 91       	pop	r18
    5c8c:	1f 91       	pop	r17
    5c8e:	0f 91       	pop	r16
    5c90:	ff 90       	pop	r15
    5c92:	ef 90       	pop	r14
    5c94:	df 90       	pop	r13
    5c96:	cf 90       	pop	r12
    5c98:	bf 90       	pop	r11
    5c9a:	af 90       	pop	r10
    5c9c:	9f 90       	pop	r9
    5c9e:	8f 90       	pop	r8
    5ca0:	7f 90       	pop	r7
    5ca2:	6f 90       	pop	r6
    5ca4:	5f 90       	pop	r5
    5ca6:	4f 90       	pop	r4
    5ca8:	3f 90       	pop	r3
    5caa:	2f 90       	pop	r2
    5cac:	1f 90       	pop	r1
    5cae:	0f 90       	pop	r0
    5cb0:	0f be       	out	0x3f, r0	; 63
    5cb2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    5cb4:	08 95       	ret

00005cb6 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    5cb6:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    5cb8:	0f b6       	in	r0, 0x3f	; 63
    5cba:	f8 94       	cli
    5cbc:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    5cbe:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    5cc0:	0f 90       	pop	r0
    5cc2:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    5cc4:	08 95       	ret

00005cc6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    5cc6:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    5cc8:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    5cca:	08 95       	ret

00005ccc <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    5ccc:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    5cce:	82 8d       	ldd	r24, Z+26	; 0x1a
    5cd0:	90 e0       	ldi	r25, 0x00	; 0
    5cd2:	88 23       	and	r24, r24
    5cd4:	09 f4       	brne	.+2      	; 0x5cd8 <xQueueIsQueueEmptyFromISR+0xc>
    5cd6:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    5cd8:	89 2f       	mov	r24, r25
    5cda:	08 95       	ret

00005cdc <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    5cdc:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    5cde:	92 8d       	ldd	r25, Z+26	; 0x1a
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	83 8d       	ldd	r24, Z+27	; 0x1b
    5ce4:	98 17       	cp	r25, r24
    5ce6:	09 f4       	brne	.+2      	; 0x5cea <xQueueIsQueueFullFromISR+0xe>
    5ce8:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    5cea:	82 2f       	mov	r24, r18
    5cec:	08 95       	ret

00005cee <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    5cee:	0f 93       	push	r16
    5cf0:	1f 93       	push	r17
    5cf2:	8c 01       	movw	r16, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	80 81       	ld	r24, Z
    5cf8:	91 81       	ldd	r25, Z+1	; 0x01
    5cfa:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
	vPortFree( pxQueue );
    5cfe:	c8 01       	movw	r24, r16
    5d00:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
}
    5d04:	1f 91       	pop	r17
    5d06:	0f 91       	pop	r16
    5d08:	08 95       	ret

00005d0a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    5d0a:	0f 93       	push	r16
    5d0c:	1f 93       	push	r17
    5d0e:	cf 93       	push	r28
    5d10:	df 93       	push	r29
    5d12:	ec 01       	movw	r28, r24
    5d14:	fb 01       	movw	r30, r22
    5d16:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    5d18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d1a:	88 23       	and	r24, r24
    5d1c:	81 f1       	breq	.+96     	; 0x5d7e <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    5d1e:	48 81       	ld	r20, Y
    5d20:	59 81       	ldd	r21, Y+1	; 0x01
    5d22:	41 15       	cp	r20, r1
    5d24:	51 05       	cpc	r21, r1
    5d26:	a9 f0       	breq	.+42     	; 0x5d52 <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    5d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5d2a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d2c:	3f 81       	ldd	r19, Y+7	; 0x07
    5d2e:	28 0f       	add	r18, r24
    5d30:	31 1d       	adc	r19, r1
    5d32:	3f 83       	std	Y+7, r19	; 0x07
    5d34:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    5d36:	8a 81       	ldd	r24, Y+2	; 0x02
    5d38:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3a:	28 17       	cp	r18, r24
    5d3c:	39 07       	cpc	r19, r25
    5d3e:	10 f0       	brcs	.+4      	; 0x5d44 <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    5d40:	5f 83       	std	Y+7, r21	; 0x07
    5d42:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    5d44:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d46:	6e 81       	ldd	r22, Y+6	; 0x06
    5d48:	7f 81       	ldd	r23, Y+7	; 0x07
    5d4a:	cf 01       	movw	r24, r30
    5d4c:	50 e0       	ldi	r21, 0x00	; 0
    5d4e:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    5d52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d54:	81 50       	subi	r24, 0x01	; 1
    5d56:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    5d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    5d5c:	69 f4       	brne	.+26     	; 0x5d78 <xQueueReceiveFromISR+0x6e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5d5e:	88 85       	ldd	r24, Y+8	; 0x08
    5d60:	88 23       	and	r24, r24
    5d62:	61 f0       	breq	.+24     	; 0x5d7c <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5d64:	ce 01       	movw	r24, r28
    5d66:	08 96       	adiw	r24, 0x08	; 8
    5d68:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5d6c:	88 23       	and	r24, r24
    5d6e:	31 f0       	breq	.+12     	; 0x5d7c <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	f8 01       	movw	r30, r16
    5d74:	80 83       	st	Z, r24
    5d76:	03 c0       	rjmp	.+6      	; 0x5d7e <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    5d78:	8f 5f       	subi	r24, 0xFF	; 255
    5d7a:	8d 8f       	std	Y+29, r24	; 0x1d
    5d7c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    5d7e:	df 91       	pop	r29
    5d80:	cf 91       	pop	r28
    5d82:	1f 91       	pop	r17
    5d84:	0f 91       	pop	r16
    5d86:	08 95       	ret

00005d88 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    5d90:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d92:	44 23       	and	r20, r20
    5d94:	a1 f1       	breq	.+104    	; 0x5dfe <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    5d96:	88 23       	and	r24, r24
    5d98:	b1 f4       	brne	.+44     	; 0x5dc6 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    5d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    5d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    5d9e:	50 e0       	ldi	r21, 0x00	; 0
    5da0:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    5da4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5da6:	2c 81       	ldd	r18, Y+4	; 0x04
    5da8:	3d 81       	ldd	r19, Y+5	; 0x05
    5daa:	28 0f       	add	r18, r24
    5dac:	31 1d       	adc	r19, r1
    5dae:	3d 83       	std	Y+5, r19	; 0x05
    5db0:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    5db2:	8a 81       	ldd	r24, Y+2	; 0x02
    5db4:	9b 81       	ldd	r25, Y+3	; 0x03
    5db6:	28 17       	cp	r18, r24
    5db8:	39 07       	cpc	r19, r25
    5dba:	08 f1       	brcs	.+66     	; 0x5dfe <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5dbc:	88 81       	ld	r24, Y
    5dbe:	99 81       	ldd	r25, Y+1	; 0x01
    5dc0:	9d 83       	std	Y+5, r25	; 0x05
    5dc2:	8c 83       	std	Y+4, r24	; 0x04
    5dc4:	1c c0       	rjmp	.+56     	; 0x5dfe <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    5dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    5dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    5dca:	50 e0       	ldi	r21, 0x00	; 0
    5dcc:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    5dd0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	44 27       	eor	r20, r20
    5dd6:	55 27       	eor	r21, r21
    5dd8:	48 1b       	sub	r20, r24
    5dda:	59 0b       	sbc	r21, r25
    5ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    5dde:	9f 81       	ldd	r25, Y+7	; 0x07
    5de0:	84 0f       	add	r24, r20
    5de2:	95 1f       	adc	r25, r21
    5de4:	9f 83       	std	Y+7, r25	; 0x07
    5de6:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    5de8:	28 81       	ld	r18, Y
    5dea:	39 81       	ldd	r19, Y+1	; 0x01
    5dec:	82 17       	cp	r24, r18
    5dee:	93 07       	cpc	r25, r19
    5df0:	30 f4       	brcc	.+12     	; 0x5dfe <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5df2:	8a 81       	ldd	r24, Y+2	; 0x02
    5df4:	9b 81       	ldd	r25, Y+3	; 0x03
    5df6:	84 0f       	add	r24, r20
    5df8:	95 1f       	adc	r25, r21
    5dfa:	9f 83       	std	Y+7, r25	; 0x07
    5dfc:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    5dfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5e00:	8f 5f       	subi	r24, 0xFF	; 255
    5e02:	8a 8f       	std	Y+26, r24	; 0x1a
}
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	08 95       	ret

00005e0a <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	ec 01       	movw	r28, r24
    5e14:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    5e16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e1a:	98 17       	cp	r25, r24
    5e1c:	10 f0       	brcs	.+4      	; 0x5e22 <xQueueGenericSendFromISR+0x18>
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	17 c0       	rjmp	.+46     	; 0x5e50 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5e22:	ce 01       	movw	r24, r28
    5e24:	42 2f       	mov	r20, r18
    5e26:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    5e2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    5e2e:	69 f4       	brne	.+26     	; 0x5e4a <xQueueGenericSendFromISR+0x40>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5e30:	89 89       	ldd	r24, Y+17	; 0x11
    5e32:	88 23       	and	r24, r24
    5e34:	61 f0       	breq	.+24     	; 0x5e4e <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5e36:	ce 01       	movw	r24, r28
    5e38:	41 96       	adiw	r24, 0x11	; 17
    5e3a:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5e3e:	88 23       	and	r24, r24
    5e40:	31 f0       	breq	.+12     	; 0x5e4e <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    5e42:	81 e0       	ldi	r24, 0x01	; 1
    5e44:	f8 01       	movw	r30, r16
    5e46:	80 83       	st	Z, r24
    5e48:	03 c0       	rjmp	.+6      	; 0x5e50 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    5e4a:	8f 5f       	subi	r24, 0xFF	; 255
    5e4c:	8e 8f       	std	Y+30, r24	; 0x1e
    5e4e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    5e50:	df 91       	pop	r29
    5e52:	cf 91       	pop	r28
    5e54:	1f 91       	pop	r17
    5e56:	0f 91       	pop	r16
    5e58:	08 95       	ret

00005e5a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    5e5a:	0f 93       	push	r16
    5e5c:	1f 93       	push	r17
    5e5e:	cf 93       	push	r28
    5e60:	df 93       	push	r29
    5e62:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    5e64:	0f b6       	in	r0, 0x3f	; 63
    5e66:	f8 94       	cli
    5e68:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5e6a:	8c 01       	movw	r16, r24
    5e6c:	0f 5e       	subi	r16, 0xEF	; 239
    5e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    5e70:	0d c0       	rjmp	.+26     	; 0x5e8c <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5e72:	89 89       	ldd	r24, Y+17	; 0x11
    5e74:	88 23       	and	r24, r24
    5e76:	69 f0       	breq	.+26     	; 0x5e92 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5e78:	c8 01       	movw	r24, r16
    5e7a:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5e7e:	88 23       	and	r24, r24
    5e80:	11 f0       	breq	.+4      	; 0x5e86 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    5e82:	0e 94 01 32 	call	0x6402	; 0x6402 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    5e86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e88:	81 50       	subi	r24, 0x01	; 1
    5e8a:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    5e8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e8e:	18 16       	cp	r1, r24
    5e90:	84 f3       	brlt	.-32     	; 0x5e72 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    5e92:	8f ef       	ldi	r24, 0xFF	; 255
    5e94:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    5e96:	0f 90       	pop	r0
    5e98:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5ea0:	8e 01       	movw	r16, r28
    5ea2:	08 5f       	subi	r16, 0xF8	; 248
    5ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea6:	0d c0       	rjmp	.+26     	; 0x5ec2 <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5ea8:	88 85       	ldd	r24, Y+8	; 0x08
    5eaa:	88 23       	and	r24, r24
    5eac:	69 f0       	breq	.+26     	; 0x5ec8 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5eae:	c8 01       	movw	r24, r16
    5eb0:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5eb4:	88 23       	and	r24, r24
    5eb6:	11 f0       	breq	.+4      	; 0x5ebc <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    5eb8:	0e 94 01 32 	call	0x6402	; 0x6402 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    5ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ebe:	81 50       	subi	r24, 0x01	; 1
    5ec0:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    5ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5ec4:	18 16       	cp	r1, r24
    5ec6:	84 f3       	brlt	.-32     	; 0x5ea8 <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    5ec8:	8f ef       	ldi	r24, 0xFF	; 255
    5eca:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    5ecc:	0f 90       	pop	r0
    5ece:	0f be       	out	0x3f, r0	; 63
}
    5ed0:	df 91       	pop	r29
    5ed2:	cf 91       	pop	r28
    5ed4:	1f 91       	pop	r17
    5ed6:	0f 91       	pop	r16
    5ed8:	08 95       	ret

00005eda <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    5eda:	7f 92       	push	r7
    5edc:	8f 92       	push	r8
    5ede:	9f 92       	push	r9
    5ee0:	af 92       	push	r10
    5ee2:	bf 92       	push	r11
    5ee4:	cf 92       	push	r12
    5ee6:	df 92       	push	r13
    5ee8:	ef 92       	push	r14
    5eea:	ff 92       	push	r15
    5eec:	0f 93       	push	r16
    5eee:	1f 93       	push	r17
    5ef0:	df 93       	push	r29
    5ef2:	cf 93       	push	r28
    5ef4:	00 d0       	rcall	.+0      	; 0x5ef6 <xQueueGenericReceive+0x1c>
    5ef6:	00 d0       	rcall	.+0      	; 0x5ef8 <xQueueGenericReceive+0x1e>
    5ef8:	0f 92       	push	r0
    5efa:	cd b7       	in	r28, 0x3d	; 61
    5efc:	de b7       	in	r29, 0x3e	; 62
    5efe:	8c 01       	movw	r16, r24
    5f00:	96 2e       	mov	r9, r22
    5f02:	87 2e       	mov	r8, r23
    5f04:	5d 83       	std	Y+5, r21	; 0x05
    5f06:	4c 83       	std	Y+4, r20	; 0x04
    5f08:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5f0a:	91 e1       	ldi	r25, 0x11	; 17
    5f0c:	c9 2e       	mov	r12, r25
    5f0e:	d1 2c       	mov	r13, r1
    5f10:	c0 0e       	add	r12, r16
    5f12:	d1 1e       	adc	r13, r17
    5f14:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5f16:	7e 01       	movw	r14, r28
    5f18:	08 94       	sec
    5f1a:	e1 1c       	adc	r14, r1
    5f1c:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5f1e:	84 e0       	ldi	r24, 0x04	; 4
    5f20:	a8 2e       	mov	r10, r24
    5f22:	b1 2c       	mov	r11, r1
    5f24:	ac 0e       	add	r10, r28
    5f26:	bd 1e       	adc	r11, r29
    5f28:	01 c0       	rjmp	.+2      	; 0x5f2c <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5f2a:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    5f32:	f8 01       	movw	r30, r16
    5f34:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f36:	88 23       	and	r24, r24
    5f38:	09 f4       	brne	.+2      	; 0x5f3c <xQueueGenericReceive+0x62>
    5f3a:	3e c0       	rjmp	.+124    	; 0x5fb8 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    5f3c:	e6 80       	ldd	r14, Z+6	; 0x06
    5f3e:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    5f40:	40 81       	ld	r20, Z
    5f42:	51 81       	ldd	r21, Z+1	; 0x01
    5f44:	41 15       	cp	r20, r1
    5f46:	51 05       	cpc	r21, r1
    5f48:	b1 f0       	breq	.+44     	; 0x5f76 <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    5f4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    5f4c:	97 01       	movw	r18, r14
    5f4e:	28 0f       	add	r18, r24
    5f50:	31 1d       	adc	r19, r1
    5f52:	37 83       	std	Z+7, r19	; 0x07
    5f54:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    5f56:	82 81       	ldd	r24, Z+2	; 0x02
    5f58:	93 81       	ldd	r25, Z+3	; 0x03
    5f5a:	28 17       	cp	r18, r24
    5f5c:	39 07       	cpc	r19, r25
    5f5e:	10 f0       	brcs	.+4      	; 0x5f64 <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    5f60:	57 83       	std	Z+7, r21	; 0x07
    5f62:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    5f64:	f8 01       	movw	r30, r16
    5f66:	44 8d       	ldd	r20, Z+28	; 0x1c
    5f68:	66 81       	ldd	r22, Z+6	; 0x06
    5f6a:	77 81       	ldd	r23, Z+7	; 0x07
    5f6c:	89 2d       	mov	r24, r9
    5f6e:	98 2d       	mov	r25, r8
    5f70:	50 e0       	ldi	r21, 0x00	; 0
    5f72:	0e 94 43 38 	call	0x7086	; 0x7086 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    5f76:	77 20       	and	r7, r7
    5f78:	71 f4       	brne	.+28     	; 0x5f96 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    5f7a:	f8 01       	movw	r30, r16
    5f7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    5f7e:	81 50       	subi	r24, 0x01	; 1
    5f80:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5f82:	80 85       	ldd	r24, Z+8	; 0x08
    5f84:	88 23       	and	r24, r24
    5f86:	a1 f0       	breq	.+40     	; 0x5fb0 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    5f88:	c8 01       	movw	r24, r16
    5f8a:	08 96       	adiw	r24, 0x08	; 8
    5f8c:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5f90:	81 30       	cpi	r24, 0x01	; 1
    5f92:	71 f4       	brne	.+28     	; 0x5fb0 <xQueueGenericReceive+0xd6>
    5f94:	0b c0       	rjmp	.+22     	; 0x5fac <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    5f96:	f8 01       	movw	r30, r16
    5f98:	f7 82       	std	Z+7, r15	; 0x07
    5f9a:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5f9c:	81 89       	ldd	r24, Z+17	; 0x11
    5f9e:	88 23       	and	r24, r24
    5fa0:	39 f0       	breq	.+14     	; 0x5fb0 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5fa2:	c6 01       	movw	r24, r12
    5fa4:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    5fa8:	88 23       	and	r24, r24
    5faa:	11 f0       	breq	.+4      	; 0x5fb0 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    5fac:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    5fb0:	0f 90       	pop	r0
    5fb2:	0f be       	out	0x3f, r0	; 63
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	4a c0       	rjmp	.+148    	; 0x604c <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    5fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    5fba:	9d 81       	ldd	r25, Y+5	; 0x05
    5fbc:	89 2b       	or	r24, r25
    5fbe:	19 f4       	brne	.+6      	; 0x5fc6 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5fc0:	0f 90       	pop	r0
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	42 c0       	rjmp	.+132    	; 0x604a <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    5fc6:	22 23       	and	r18, r18
    5fc8:	19 f4       	brne	.+6      	; 0x5fd0 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5fca:	c7 01       	movw	r24, r14
    5fcc:	0e 94 b8 31 	call	0x6370	; 0x6370 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    5fd0:	0f 90       	pop	r0
    5fd2:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5fd4:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5fd8:	0f b6       	in	r0, 0x3f	; 63
    5fda:	f8 94       	cli
    5fdc:	0f 92       	push	r0
    5fde:	f8 01       	movw	r30, r16
    5fe0:	85 8d       	ldd	r24, Z+29	; 0x1d
    5fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    5fe4:	09 f4       	brne	.+2      	; 0x5fe8 <xQueueGenericReceive+0x10e>
    5fe6:	15 8e       	std	Z+29, r1	; 0x1d
    5fe8:	f8 01       	movw	r30, r16
    5fea:	86 8d       	ldd	r24, Z+30	; 0x1e
    5fec:	8f 3f       	cpi	r24, 0xFF	; 255
    5fee:	09 f4       	brne	.+2      	; 0x5ff2 <xQueueGenericReceive+0x118>
    5ff0:	16 8e       	std	Z+30, r1	; 0x1e
    5ff2:	0f 90       	pop	r0
    5ff4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5ff6:	c7 01       	movw	r24, r14
    5ff8:	b5 01       	movw	r22, r10
    5ffa:	0e 94 c3 31 	call	0x6386	; 0x6386 <xTaskCheckForTimeOut>
    5ffe:	88 23       	and	r24, r24
    6000:	f9 f4       	brne	.+62     	; 0x6040 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6002:	0f b6       	in	r0, 0x3f	; 63
    6004:	f8 94       	cli
    6006:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    6008:	f8 01       	movw	r30, r16
    600a:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    600c:	0f 90       	pop	r0
    600e:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6010:	88 23       	and	r24, r24
    6012:	81 f4       	brne	.+32     	; 0x6034 <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6014:	6c 81       	ldd	r22, Y+4	; 0x04
    6016:	7d 81       	ldd	r23, Y+5	; 0x05
    6018:	c6 01       	movw	r24, r12
    601a:	0e 94 6d 33 	call	0x66da	; 0x66da <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    601e:	c8 01       	movw	r24, r16
    6020:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    6024:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    6028:	88 23       	and	r24, r24
    602a:	09 f0       	breq	.+2      	; 0x602e <xQueueGenericReceive+0x154>
    602c:	7e cf       	rjmp	.-260    	; 0x5f2a <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    602e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    6032:	7b cf       	rjmp	.-266    	; 0x5f2a <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6034:	c8 01       	movw	r24, r16
    6036:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    603a:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    603e:	75 cf       	rjmp	.-278    	; 0x5f2a <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    6040:	c8 01       	movw	r24, r16
    6042:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6046:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    604a:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	0f 90       	pop	r0
    6054:	0f 90       	pop	r0
    6056:	cf 91       	pop	r28
    6058:	df 91       	pop	r29
    605a:	1f 91       	pop	r17
    605c:	0f 91       	pop	r16
    605e:	ff 90       	pop	r15
    6060:	ef 90       	pop	r14
    6062:	df 90       	pop	r13
    6064:	cf 90       	pop	r12
    6066:	bf 90       	pop	r11
    6068:	af 90       	pop	r10
    606a:	9f 90       	pop	r9
    606c:	8f 90       	pop	r8
    606e:	7f 90       	pop	r7
    6070:	08 95       	ret

00006072 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    6072:	7f 92       	push	r7
    6074:	8f 92       	push	r8
    6076:	9f 92       	push	r9
    6078:	af 92       	push	r10
    607a:	bf 92       	push	r11
    607c:	cf 92       	push	r12
    607e:	df 92       	push	r13
    6080:	ef 92       	push	r14
    6082:	ff 92       	push	r15
    6084:	0f 93       	push	r16
    6086:	1f 93       	push	r17
    6088:	df 93       	push	r29
    608a:	cf 93       	push	r28
    608c:	00 d0       	rcall	.+0      	; 0x608e <xQueueGenericSend+0x1c>
    608e:	00 d0       	rcall	.+0      	; 0x6090 <xQueueGenericSend+0x1e>
    6090:	0f 92       	push	r0
    6092:	cd b7       	in	r28, 0x3d	; 61
    6094:	de b7       	in	r29, 0x3e	; 62
    6096:	8c 01       	movw	r16, r24
    6098:	6b 01       	movw	r12, r22
    609a:	5d 83       	std	Y+5, r21	; 0x05
    609c:	4c 83       	std	Y+4, r20	; 0x04
    609e:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    60a0:	48 e0       	ldi	r20, 0x08	; 8
    60a2:	e4 2e       	mov	r14, r20
    60a4:	f1 2c       	mov	r15, r1
    60a6:	e8 0e       	add	r14, r24
    60a8:	f9 1e       	adc	r15, r25
    60aa:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    60ac:	5e 01       	movw	r10, r28
    60ae:	08 94       	sec
    60b0:	a1 1c       	adc	r10, r1
    60b2:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    60b4:	34 e0       	ldi	r19, 0x04	; 4
    60b6:	83 2e       	mov	r8, r19
    60b8:	91 2c       	mov	r9, r1
    60ba:	8c 0e       	add	r8, r28
    60bc:	9d 1e       	adc	r9, r29
    60be:	01 c0       	rjmp	.+2      	; 0x60c2 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    60c0:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    60c2:	0f b6       	in	r0, 0x3f	; 63
    60c4:	f8 94       	cli
    60c6:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    60c8:	f8 01       	movw	r30, r16
    60ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    60cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    60ce:	98 17       	cp	r25, r24
    60d0:	a8 f4       	brcc	.+42     	; 0x60fc <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    60d2:	c8 01       	movw	r24, r16
    60d4:	b6 01       	movw	r22, r12
    60d6:	47 2d       	mov	r20, r7
    60d8:	0e 94 c4 2e 	call	0x5d88	; 0x5d88 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    60dc:	f8 01       	movw	r30, r16
    60de:	81 89       	ldd	r24, Z+17	; 0x11
    60e0:	88 23       	and	r24, r24
    60e2:	41 f0       	breq	.+16     	; 0x60f4 <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    60e4:	c8 01       	movw	r24, r16
    60e6:	41 96       	adiw	r24, 0x11	; 17
    60e8:	0e 94 05 32 	call	0x640a	; 0x640a <xTaskRemoveFromEventList>
    60ec:	81 30       	cpi	r24, 0x01	; 1
    60ee:	11 f4       	brne	.+4      	; 0x60f4 <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    60f0:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    60f4:	0f 90       	pop	r0
    60f6:	0f be       	out	0x3f, r0	; 63
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	4c c0       	rjmp	.+152    	; 0x6194 <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    60fc:	8c 81       	ldd	r24, Y+4	; 0x04
    60fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6100:	89 2b       	or	r24, r25
    6102:	19 f4       	brne	.+6      	; 0x610a <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6104:	0f 90       	pop	r0
    6106:	0f be       	out	0x3f, r0	; 63
    6108:	44 c0       	rjmp	.+136    	; 0x6192 <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    610a:	22 23       	and	r18, r18
    610c:	19 f4       	brne	.+6      	; 0x6114 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    610e:	c5 01       	movw	r24, r10
    6110:	0e 94 b8 31 	call	0x6370	; 0x6370 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    6114:	0f 90       	pop	r0
    6116:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6118:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    611c:	0f b6       	in	r0, 0x3f	; 63
    611e:	f8 94       	cli
    6120:	0f 92       	push	r0
    6122:	f8 01       	movw	r30, r16
    6124:	85 8d       	ldd	r24, Z+29	; 0x1d
    6126:	8f 3f       	cpi	r24, 0xFF	; 255
    6128:	09 f4       	brne	.+2      	; 0x612c <xQueueGenericSend+0xba>
    612a:	15 8e       	std	Z+29, r1	; 0x1d
    612c:	f8 01       	movw	r30, r16
    612e:	86 8d       	ldd	r24, Z+30	; 0x1e
    6130:	8f 3f       	cpi	r24, 0xFF	; 255
    6132:	09 f4       	brne	.+2      	; 0x6136 <xQueueGenericSend+0xc4>
    6134:	16 8e       	std	Z+30, r1	; 0x1e
    6136:	0f 90       	pop	r0
    6138:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    613a:	c5 01       	movw	r24, r10
    613c:	b4 01       	movw	r22, r8
    613e:	0e 94 c3 31 	call	0x6386	; 0x6386 <xTaskCheckForTimeOut>
    6142:	88 23       	and	r24, r24
    6144:	09 f5       	brne	.+66     	; 0x6188 <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6146:	0f b6       	in	r0, 0x3f	; 63
    6148:	f8 94       	cli
    614a:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    614c:	f8 01       	movw	r30, r16
    614e:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    6150:	0f 90       	pop	r0
    6152:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6154:	f8 01       	movw	r30, r16
    6156:	83 8d       	ldd	r24, Z+27	; 0x1b
    6158:	98 17       	cp	r25, r24
    615a:	81 f4       	brne	.+32     	; 0x617c <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    615c:	6c 81       	ldd	r22, Y+4	; 0x04
    615e:	7d 81       	ldd	r23, Y+5	; 0x05
    6160:	c7 01       	movw	r24, r14
    6162:	0e 94 6d 33 	call	0x66da	; 0x66da <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6166:	c8 01       	movw	r24, r16
    6168:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    616c:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    6170:	88 23       	and	r24, r24
    6172:	09 f0       	breq	.+2      	; 0x6176 <xQueueGenericSend+0x104>
    6174:	a5 cf       	rjmp	.-182    	; 0x60c0 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    6176:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    617a:	a2 cf       	rjmp	.-188    	; 0x60c0 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    617c:	c8 01       	movw	r24, r16
    617e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6182:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    6186:	9c cf       	rjmp	.-200    	; 0x60c0 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6188:	c8 01       	movw	r24, r16
    618a:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    618e:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
    6192:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    6194:	0f 90       	pop	r0
    6196:	0f 90       	pop	r0
    6198:	0f 90       	pop	r0
    619a:	0f 90       	pop	r0
    619c:	0f 90       	pop	r0
    619e:	cf 91       	pop	r28
    61a0:	df 91       	pop	r29
    61a2:	1f 91       	pop	r17
    61a4:	0f 91       	pop	r16
    61a6:	ff 90       	pop	r15
    61a8:	ef 90       	pop	r14
    61aa:	df 90       	pop	r13
    61ac:	cf 90       	pop	r12
    61ae:	bf 90       	pop	r11
    61b0:	af 90       	pop	r10
    61b2:	9f 90       	pop	r9
    61b4:	8f 90       	pop	r8
    61b6:	7f 90       	pop	r7
    61b8:	08 95       	ret

000061ba <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    61ba:	af 92       	push	r10
    61bc:	bf 92       	push	r11
    61be:	cf 92       	push	r12
    61c0:	df 92       	push	r13
    61c2:	ef 92       	push	r14
    61c4:	ff 92       	push	r15
    61c6:	0f 93       	push	r16
    61c8:	1f 93       	push	r17
    61ca:	cf 93       	push	r28
    61cc:	df 93       	push	r29
    61ce:	b8 2e       	mov	r11, r24
    61d0:	a6 2e       	mov	r10, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    61d2:	88 23       	and	r24, r24
    61d4:	09 f4       	brne	.+2      	; 0x61d8 <xQueueCreate+0x1e>
    61d6:	42 c0       	rjmp	.+132    	; 0x625c <xQueueCreate+0xa2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    61d8:	8f e1       	ldi	r24, 0x1F	; 31
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pvPortMalloc>
    61e0:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    61e2:	00 97       	sbiw	r24, 0x00	; 0
    61e4:	d9 f1       	breq	.+118    	; 0x625c <xQueueCreate+0xa2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    61e6:	eb 2c       	mov	r14, r11
    61e8:	ff 24       	eor	r15, r15
    61ea:	ca 2c       	mov	r12, r10
    61ec:	dd 24       	eor	r13, r13
    61ee:	ce 9c       	mul	r12, r14
    61f0:	80 01       	movw	r16, r0
    61f2:	cf 9c       	mul	r12, r15
    61f4:	10 0d       	add	r17, r0
    61f6:	de 9c       	mul	r13, r14
    61f8:	10 0d       	add	r17, r0
    61fa:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    61fc:	c8 01       	movw	r24, r16
    61fe:	01 96       	adiw	r24, 0x01	; 1
    6200:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pvPortMalloc>
    6204:	9c 01       	movw	r18, r24
    6206:	99 83       	std	Y+1, r25	; 0x01
    6208:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    620a:	00 97       	sbiw	r24, 0x00	; 0
    620c:	21 f1       	breq	.+72     	; 0x6256 <xQueueCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    620e:	08 0f       	add	r16, r24
    6210:	19 1f       	adc	r17, r25
    6212:	1b 83       	std	Y+3, r17	; 0x03
    6214:	0a 83       	std	Y+2, r16	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    6216:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    6218:	9d 83       	std	Y+5, r25	; 0x05
    621a:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    621c:	08 94       	sec
    621e:	e1 08       	sbc	r14, r1
    6220:	f1 08       	sbc	r15, r1
    6222:	ec 9c       	mul	r14, r12
    6224:	c0 01       	movw	r24, r0
    6226:	ed 9c       	mul	r14, r13
    6228:	90 0d       	add	r25, r0
    622a:	fc 9c       	mul	r15, r12
    622c:	90 0d       	add	r25, r0
    622e:	11 24       	eor	r1, r1
    6230:	28 0f       	add	r18, r24
    6232:	39 1f       	adc	r19, r25
    6234:	3f 83       	std	Y+7, r19	; 0x07
    6236:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    6238:	bb 8e       	std	Y+27, r11	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    623a:	ac 8e       	std	Y+28, r10	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    623c:	8f ef       	ldi	r24, 0xFF	; 255
    623e:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    6240:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    6242:	ce 01       	movw	r24, r28
    6244:	08 96       	adiw	r24, 0x08	; 8
    6246:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    624a:	ce 01       	movw	r24, r28
    624c:	41 96       	adiw	r24, 0x11	; 17
    624e:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
    6252:	9e 01       	movw	r18, r28
    6254:	05 c0       	rjmp	.+10     	; 0x6260 <xQueueCreate+0xa6>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    6256:	ce 01       	movw	r24, r28
    6258:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
    625c:	20 e0       	ldi	r18, 0x00	; 0
    625e:	30 e0       	ldi	r19, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    6260:	c9 01       	movw	r24, r18
    6262:	df 91       	pop	r29
    6264:	cf 91       	pop	r28
    6266:	1f 91       	pop	r17
    6268:	0f 91       	pop	r16
    626a:	ff 90       	pop	r15
    626c:	ef 90       	pop	r14
    626e:	df 90       	pop	r13
    6270:	cf 90       	pop	r12
    6272:	bf 90       	pop	r11
    6274:	af 90       	pop	r10
    6276:	08 95       	ret

00006278 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    6278:	1f 93       	push	r17
    627a:	16 2f       	mov	r17, r22
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    627c:	60 e0       	ldi	r22, 0x00	; 0
    627e:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6282:	fc 01       	movw	r30, r24

		if( pxHandle != NULL )
    6284:	00 97       	sbiw	r24, 0x00	; 0
    6286:	09 f0       	breq	.+2      	; 0x628a <xQueueCreateCountingSemaphore+0x12>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    6288:	12 8f       	std	Z+26, r17	; 0x1a
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
    628a:	cf 01       	movw	r24, r30
    628c:	1f 91       	pop	r17
    628e:	08 95       	ret

00006290 <xTaskIsTaskSuspended>:
#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    6290:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    6292:	82 85       	ldd	r24, Z+10	; 0x0a
    6294:	93 85       	ldd	r25, Z+11	; 0x0b
    6296:	86 5b       	subi	r24, 0xB6	; 182
    6298:	97 40       	sbci	r25, 0x07	; 7
    629a:	59 f4       	brne	.+22     	; 0x62b2 <xTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    629c:	84 89       	ldd	r24, Z+20	; 0x14
    629e:	95 89       	ldd	r25, Z+21	; 0x15
    62a0:	27 e0       	ldi	r18, 0x07	; 7
    62a2:	84 3a       	cpi	r24, 0xA4	; 164
    62a4:	92 07       	cpc	r25, r18
    62a6:	29 f0       	breq	.+10     	; 0x62b2 <xTaskIsTaskSuspended+0x22>
    62a8:	20 e0       	ldi	r18, 0x00	; 0
    62aa:	89 2b       	or	r24, r25
    62ac:	19 f4       	brne	.+6      	; 0x62b4 <xTaskIsTaskSuspended+0x24>
    62ae:	21 e0       	ldi	r18, 0x01	; 1
    62b0:	01 c0       	rjmp	.+2      	; 0x62b4 <xTaskIsTaskSuspended+0x24>
    62b2:	20 e0       	ldi	r18, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    62b4:	82 2f       	mov	r24, r18
    62b6:	08 95       	ret

000062b8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    62b8:	80 91 62 07 	lds	r24, 0x0762
    62bc:	8f 5f       	subi	r24, 0xFF	; 255
    62be:	80 93 62 07 	sts	0x0762, r24
}
    62c2:	08 95       	ret

000062c4 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    62c4:	0f b6       	in	r0, 0x3f	; 63
    62c6:	f8 94       	cli
    62c8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    62ca:	20 91 60 07 	lds	r18, 0x0760
    62ce:	30 91 61 07 	lds	r19, 0x0761
	}
	taskEXIT_CRITICAL();
    62d2:	0f 90       	pop	r0
    62d4:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    62d6:	c9 01       	movw	r24, r18
    62d8:	08 95       	ret

000062da <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    62da:	20 91 60 07 	lds	r18, 0x0760
    62de:	30 91 61 07 	lds	r19, 0x0761
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    62e2:	c9 01       	movw	r24, r18
    62e4:	08 95       	ret

000062e6 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    62e6:	80 91 65 07 	lds	r24, 0x0765
}
    62ea:	08 95       	ret

000062ec <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    62ec:	80 91 62 07 	lds	r24, 0x0762
    62f0:	88 23       	and	r24, r24
    62f2:	51 f0       	breq	.+20     	; 0x6308 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    62f4:	81 e0       	ldi	r24, 0x01	; 1
    62f6:	80 93 5e 07 	sts	0x075E, r24
    62fa:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    62fc:	80 91 63 07 	lds	r24, 0x0763
    6300:	81 50       	subi	r24, 0x01	; 1
    6302:	80 93 63 07 	sts	0x0763, r24
    6306:	01 c0       	rjmp	.+2      	; 0x630a <vTaskSwitchContext+0x1e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    6308:	99 e0       	ldi	r25, 0x09	; 9
    630a:	e0 91 63 07 	lds	r30, 0x0763
    630e:	e9 9f       	mul	r30, r25
    6310:	f0 01       	movw	r30, r0
    6312:	11 24       	eor	r1, r1
    6314:	e6 59       	subi	r30, 0x96	; 150
    6316:	f8 4f       	sbci	r31, 0xF8	; 248
    6318:	80 81       	ld	r24, Z
    631a:	88 23       	and	r24, r24
    631c:	79 f3       	breq	.-34     	; 0x62fc <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    631e:	90 91 63 07 	lds	r25, 0x0763
    6322:	89 e0       	ldi	r24, 0x09	; 9
    6324:	98 9f       	mul	r25, r24
    6326:	d0 01       	movw	r26, r0
    6328:	11 24       	eor	r1, r1
    632a:	a6 59       	subi	r26, 0x96	; 150
    632c:	b8 4f       	sbci	r27, 0xF8	; 248
    632e:	11 96       	adiw	r26, 0x01	; 1
    6330:	ed 91       	ld	r30, X+
    6332:	fc 91       	ld	r31, X
    6334:	12 97       	sbiw	r26, 0x02	; 2
    6336:	02 80       	ldd	r0, Z+2	; 0x02
    6338:	f3 81       	ldd	r31, Z+3	; 0x03
    633a:	e0 2d       	mov	r30, r0
    633c:	12 96       	adiw	r26, 0x02	; 2
    633e:	fc 93       	st	X, r31
    6340:	ee 93       	st	-X, r30
    6342:	11 97       	sbiw	r26, 0x01	; 1
    6344:	cd 01       	movw	r24, r26
    6346:	03 96       	adiw	r24, 0x03	; 3
    6348:	e8 17       	cp	r30, r24
    634a:	f9 07       	cpc	r31, r25
    634c:	31 f4       	brne	.+12     	; 0x635a <vTaskSwitchContext+0x6e>
    634e:	82 81       	ldd	r24, Z+2	; 0x02
    6350:	93 81       	ldd	r25, Z+3	; 0x03
    6352:	12 96       	adiw	r26, 0x02	; 2
    6354:	9c 93       	st	X, r25
    6356:	8e 93       	st	-X, r24
    6358:	11 97       	sbiw	r26, 0x01	; 1
    635a:	11 96       	adiw	r26, 0x01	; 1
    635c:	ed 91       	ld	r30, X+
    635e:	fc 91       	ld	r31, X
    6360:	12 97       	sbiw	r26, 0x02	; 2
    6362:	86 81       	ldd	r24, Z+6	; 0x06
    6364:	97 81       	ldd	r25, Z+7	; 0x07
    6366:	90 93 5d 07 	sts	0x075D, r25
    636a:	80 93 5c 07 	sts	0x075C, r24
    636e:	08 95       	ret

00006370 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    6370:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6372:	80 91 5f 07 	lds	r24, 0x075F
    6376:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    6378:	80 91 60 07 	lds	r24, 0x0760
    637c:	90 91 61 07 	lds	r25, 0x0761
    6380:	92 83       	std	Z+2, r25	; 0x02
    6382:	81 83       	std	Z+1, r24	; 0x01
}
    6384:	08 95       	ret

00006386 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    6386:	fc 01       	movw	r30, r24
    6388:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    638a:	0f b6       	in	r0, 0x3f	; 63
    638c:	f8 94       	cli
    638e:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    6390:	4d 91       	ld	r20, X+
    6392:	5c 91       	ld	r21, X
    6394:	11 97       	sbiw	r26, 0x01	; 1
    6396:	8f ef       	ldi	r24, 0xFF	; 255
    6398:	4f 3f       	cpi	r20, 0xFF	; 255
    639a:	58 07       	cpc	r21, r24
    639c:	61 f1       	breq	.+88     	; 0x63f6 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    639e:	90 91 5f 07 	lds	r25, 0x075F
    63a2:	80 81       	ld	r24, Z
    63a4:	98 17       	cp	r25, r24
    63a6:	49 f0       	breq	.+18     	; 0x63ba <xTaskCheckForTimeOut+0x34>
    63a8:	20 91 60 07 	lds	r18, 0x0760
    63ac:	30 91 61 07 	lds	r19, 0x0761
    63b0:	81 81       	ldd	r24, Z+1	; 0x01
    63b2:	92 81       	ldd	r25, Z+2	; 0x02
    63b4:	28 17       	cp	r18, r24
    63b6:	39 07       	cpc	r19, r25
    63b8:	00 f5       	brcc	.+64     	; 0x63fa <xTaskCheckForTimeOut+0x74>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    63ba:	80 91 60 07 	lds	r24, 0x0760
    63be:	90 91 61 07 	lds	r25, 0x0761
    63c2:	21 81       	ldd	r18, Z+1	; 0x01
    63c4:	32 81       	ldd	r19, Z+2	; 0x02
    63c6:	82 1b       	sub	r24, r18
    63c8:	93 0b       	sbc	r25, r19
    63ca:	84 17       	cp	r24, r20
    63cc:	95 07       	cpc	r25, r21
    63ce:	a8 f4       	brcc	.+42     	; 0x63fa <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    63d0:	80 91 60 07 	lds	r24, 0x0760
    63d4:	90 91 61 07 	lds	r25, 0x0761
    63d8:	28 1b       	sub	r18, r24
    63da:	39 0b       	sbc	r19, r25
    63dc:	24 0f       	add	r18, r20
    63de:	35 1f       	adc	r19, r21
    63e0:	2d 93       	st	X+, r18
    63e2:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    63e4:	80 91 5f 07 	lds	r24, 0x075F
    63e8:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    63ea:	80 91 60 07 	lds	r24, 0x0760
    63ee:	90 91 61 07 	lds	r25, 0x0761
    63f2:	92 83       	std	Z+2, r25	; 0x02
    63f4:	81 83       	std	Z+1, r24	; 0x01
    63f6:	80 e0       	ldi	r24, 0x00	; 0
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <xTaskCheckForTimeOut+0x76>
    63fa:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    63fc:	0f 90       	pop	r0
    63fe:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    6400:	08 95       	ret

00006402 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	80 93 5e 07 	sts	0x075E, r24
}
    6408:	08 95       	ret

0000640a <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    640a:	0f 93       	push	r16
    640c:	1f 93       	push	r17
    640e:	cf 93       	push	r28
    6410:	df 93       	push	r29
    6412:	fc 01       	movw	r30, r24
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6414:	05 80       	ldd	r0, Z+5	; 0x05
    6416:	f6 81       	ldd	r31, Z+6	; 0x06
    6418:	e0 2d       	mov	r30, r0
    641a:	06 81       	ldd	r16, Z+6	; 0x06
    641c:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    641e:	e8 01       	movw	r28, r16
    6420:	2c 96       	adiw	r28, 0x0c	; 12
    6422:	ce 01       	movw	r24, r28
    6424:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6428:	80 91 62 07 	lds	r24, 0x0762
    642c:	88 23       	and	r24, r24
    642e:	a9 f4       	brne	.+42     	; 0x645a <xTaskRemoveFromEventList+0x50>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    6430:	e8 01       	movw	r28, r16
    6432:	22 96       	adiw	r28, 0x02	; 2
    6434:	ce 01       	movw	r24, r28
    6436:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    643a:	d8 01       	movw	r26, r16
    643c:	56 96       	adiw	r26, 0x16	; 22
    643e:	9c 91       	ld	r25, X
    6440:	80 91 63 07 	lds	r24, 0x0763
    6444:	89 17       	cp	r24, r25
    6446:	10 f4       	brcc	.+4      	; 0x644c <xTaskRemoveFromEventList+0x42>
    6448:	90 93 63 07 	sts	0x0763, r25
    644c:	89 e0       	ldi	r24, 0x09	; 9
    644e:	98 9f       	mul	r25, r24
    6450:	c0 01       	movw	r24, r0
    6452:	11 24       	eor	r1, r1
    6454:	86 59       	subi	r24, 0x96	; 150
    6456:	98 4f       	sbci	r25, 0xF8	; 248
    6458:	02 c0       	rjmp	.+4      	; 0x645e <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    645a:	84 ea       	ldi	r24, 0xA4	; 164
    645c:	97 e0       	ldi	r25, 0x07	; 7
    645e:	be 01       	movw	r22, r28
    6460:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6464:	e0 91 5c 07 	lds	r30, 0x075C
    6468:	f0 91 5d 07 	lds	r31, 0x075D
    646c:	20 e0       	ldi	r18, 0x00	; 0
    646e:	d8 01       	movw	r26, r16
    6470:	56 96       	adiw	r26, 0x16	; 22
    6472:	9c 91       	ld	r25, X
    6474:	86 89       	ldd	r24, Z+22	; 0x16
    6476:	98 17       	cp	r25, r24
    6478:	08 f0       	brcs	.+2      	; 0x647c <xTaskRemoveFromEventList+0x72>
    647a:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    647c:	82 2f       	mov	r24, r18
    647e:	df 91       	pop	r29
    6480:	cf 91       	pop	r28
    6482:	1f 91       	pop	r17
    6484:	0f 91       	pop	r16
    6486:	08 95       	ret

00006488 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    6488:	ff 92       	push	r15
    648a:	0f 93       	push	r16
    648c:	1f 93       	push	r17
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6492:	80 91 62 07 	lds	r24, 0x0762
    6496:	88 23       	and	r24, r24
    6498:	09 f0       	breq	.+2      	; 0x649c <vTaskIncrementTick+0x14>
    649a:	8f c0       	rjmp	.+286    	; 0x65ba <vTaskIncrementTick+0x132>
	{
		++xTickCount;
    649c:	80 91 60 07 	lds	r24, 0x0760
    64a0:	90 91 61 07 	lds	r25, 0x0761
    64a4:	01 96       	adiw	r24, 0x01	; 1
    64a6:	90 93 61 07 	sts	0x0761, r25
    64aa:	80 93 60 07 	sts	0x0760, r24
		if( xTickCount == ( portTickType ) 0U )
    64ae:	80 91 60 07 	lds	r24, 0x0760
    64b2:	90 91 61 07 	lds	r25, 0x0761
    64b6:	89 2b       	or	r24, r25
    64b8:	79 f5       	brne	.+94     	; 0x6518 <vTaskIncrementTick+0x90>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    64ba:	20 91 a0 07 	lds	r18, 0x07A0
    64be:	30 91 a1 07 	lds	r19, 0x07A1
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    64c2:	80 91 a2 07 	lds	r24, 0x07A2
    64c6:	90 91 a3 07 	lds	r25, 0x07A3
    64ca:	90 93 a1 07 	sts	0x07A1, r25
    64ce:	80 93 a0 07 	sts	0x07A0, r24
			pxOverflowDelayedTaskList = pxTemp;
    64d2:	30 93 a3 07 	sts	0x07A3, r19
    64d6:	20 93 a2 07 	sts	0x07A2, r18
			xNumOfOverflows++;
    64da:	80 91 5f 07 	lds	r24, 0x075F
    64de:	8f 5f       	subi	r24, 0xFF	; 255
    64e0:	80 93 5f 07 	sts	0x075F, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    64e4:	e0 91 a0 07 	lds	r30, 0x07A0
    64e8:	f0 91 a1 07 	lds	r31, 0x07A1
    64ec:	80 81       	ld	r24, Z
    64ee:	88 23       	and	r24, r24
    64f0:	19 f4       	brne	.+6      	; 0x64f8 <vTaskIncrementTick+0x70>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    64f2:	8f ef       	ldi	r24, 0xFF	; 255
    64f4:	9f ef       	ldi	r25, 0xFF	; 255
    64f6:	0c c0       	rjmp	.+24     	; 0x6510 <vTaskIncrementTick+0x88>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    64f8:	e0 91 a0 07 	lds	r30, 0x07A0
    64fc:	f0 91 a1 07 	lds	r31, 0x07A1
    6500:	05 80       	ldd	r0, Z+5	; 0x05
    6502:	f6 81       	ldd	r31, Z+6	; 0x06
    6504:	e0 2d       	mov	r30, r0
    6506:	06 80       	ldd	r0, Z+6	; 0x06
    6508:	f7 81       	ldd	r31, Z+7	; 0x07
    650a:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    650c:	82 81       	ldd	r24, Z+2	; 0x02
    650e:	93 81       	ldd	r25, Z+3	; 0x03
    6510:	90 93 d8 01 	sts	0x01D8, r25
    6514:	80 93 d7 01 	sts	0x01D7, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    6518:	20 91 60 07 	lds	r18, 0x0760
    651c:	30 91 61 07 	lds	r19, 0x0761
    6520:	80 91 d7 01 	lds	r24, 0x01D7
    6524:	90 91 d8 01 	lds	r25, 0x01D8
    6528:	28 17       	cp	r18, r24
    652a:	39 07       	cpc	r19, r25
    652c:	08 f4       	brcc	.+2      	; 0x6530 <vTaskIncrementTick+0xa8>
    652e:	4a c0       	rjmp	.+148    	; 0x65c4 <vTaskIncrementTick+0x13c>
    6530:	89 e0       	ldi	r24, 0x09	; 9
    6532:	f8 2e       	mov	r15, r24
    6534:	e0 91 a0 07 	lds	r30, 0x07A0
    6538:	f0 91 a1 07 	lds	r31, 0x07A1
    653c:	80 81       	ld	r24, Z
    653e:	88 23       	and	r24, r24
    6540:	39 f4       	brne	.+14     	; 0x6550 <vTaskIncrementTick+0xc8>
    6542:	8f ef       	ldi	r24, 0xFF	; 255
    6544:	9f ef       	ldi	r25, 0xFF	; 255
    6546:	90 93 d8 01 	sts	0x01D8, r25
    654a:	80 93 d7 01 	sts	0x01D7, r24
    654e:	3a c0       	rjmp	.+116    	; 0x65c4 <vTaskIncrementTick+0x13c>
    6550:	e0 91 a0 07 	lds	r30, 0x07A0
    6554:	f0 91 a1 07 	lds	r31, 0x07A1
    6558:	05 80       	ldd	r0, Z+5	; 0x05
    655a:	f6 81       	ldd	r31, Z+6	; 0x06
    655c:	e0 2d       	mov	r30, r0
    655e:	c6 81       	ldd	r28, Z+6	; 0x06
    6560:	d7 81       	ldd	r29, Z+7	; 0x07
    6562:	2a 81       	ldd	r18, Y+2	; 0x02
    6564:	3b 81       	ldd	r19, Y+3	; 0x03
    6566:	80 91 60 07 	lds	r24, 0x0760
    656a:	90 91 61 07 	lds	r25, 0x0761
    656e:	82 17       	cp	r24, r18
    6570:	93 07       	cpc	r25, r19
    6572:	28 f4       	brcc	.+10     	; 0x657e <vTaskIncrementTick+0xf6>
    6574:	30 93 d8 01 	sts	0x01D8, r19
    6578:	20 93 d7 01 	sts	0x01D7, r18
    657c:	23 c0       	rjmp	.+70     	; 0x65c4 <vTaskIncrementTick+0x13c>
    657e:	8e 01       	movw	r16, r28
    6580:	0e 5f       	subi	r16, 0xFE	; 254
    6582:	1f 4f       	sbci	r17, 0xFF	; 255
    6584:	c8 01       	movw	r24, r16
    6586:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
    658a:	8c 89       	ldd	r24, Y+20	; 0x14
    658c:	9d 89       	ldd	r25, Y+21	; 0x15
    658e:	89 2b       	or	r24, r25
    6590:	21 f0       	breq	.+8      	; 0x659a <vTaskIncrementTick+0x112>
    6592:	ce 01       	movw	r24, r28
    6594:	0c 96       	adiw	r24, 0x0c	; 12
    6596:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
    659a:	9e 89       	ldd	r25, Y+22	; 0x16
    659c:	80 91 63 07 	lds	r24, 0x0763
    65a0:	89 17       	cp	r24, r25
    65a2:	10 f4       	brcc	.+4      	; 0x65a8 <vTaskIncrementTick+0x120>
    65a4:	90 93 63 07 	sts	0x0763, r25
    65a8:	9f 9d       	mul	r25, r15
    65aa:	c0 01       	movw	r24, r0
    65ac:	11 24       	eor	r1, r1
    65ae:	86 59       	subi	r24, 0x96	; 150
    65b0:	98 4f       	sbci	r25, 0xF8	; 248
    65b2:	b8 01       	movw	r22, r16
    65b4:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    65b8:	bd cf       	rjmp	.-134    	; 0x6534 <vTaskIncrementTick+0xac>
	}
	else
	{
		++uxMissedTicks;
    65ba:	80 91 64 07 	lds	r24, 0x0764
    65be:	8f 5f       	subi	r24, 0xFF	; 255
    65c0:	80 93 64 07 	sts	0x0764, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    65c4:	df 91       	pop	r29
    65c6:	cf 91       	pop	r28
    65c8:	1f 91       	pop	r17
    65ca:	0f 91       	pop	r16
    65cc:	ff 90       	pop	r15
    65ce:	08 95       	ret

000065d0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    65d0:	df 92       	push	r13
    65d2:	ef 92       	push	r14
    65d4:	ff 92       	push	r15
    65d6:	0f 93       	push	r16
    65d8:	1f 93       	push	r17
    65da:	cf 93       	push	r28
    65dc:	df 93       	push	r29
	portBASE_TYPE xYieldRequired = pdFALSE;
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    65de:	ec 01       	movw	r28, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    65e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    65e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    65e4:	86 5b       	subi	r24, 0xB6	; 182
    65e6:	97 40       	sbci	r25, 0x07	; 7
    65e8:	91 f5       	brne	.+100    	; 0x664e <xTaskResumeFromISR+0x7e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    65ea:	8c 89       	ldd	r24, Y+20	; 0x14
    65ec:	9d 89       	ldd	r25, Y+21	; 0x15
    65ee:	27 e0       	ldi	r18, 0x07	; 7
    65f0:	84 3a       	cpi	r24, 0xA4	; 164
    65f2:	92 07       	cpc	r25, r18
    65f4:	61 f1       	breq	.+88     	; 0x664e <xTaskResumeFromISR+0x7e>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    65f6:	89 2b       	or	r24, r25
    65f8:	51 f5       	brne	.+84     	; 0x664e <xTaskResumeFromISR+0x7e>
    65fa:	33 c0       	rjmp	.+102    	; 0x6662 <xTaskResumeFromISR+0x92>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    65fc:	de 88       	ldd	r13, Y+22	; 0x16
    65fe:	e0 91 5c 07 	lds	r30, 0x075C
    6602:	f0 91 5d 07 	lds	r31, 0x075D
    6606:	06 89       	ldd	r16, Z+22	; 0x16
				vListRemove(  &( pxTCB->xGenericListItem ) );
    6608:	92 e0       	ldi	r25, 0x02	; 2
    660a:	e9 2e       	mov	r14, r25
    660c:	f1 2c       	mov	r15, r1
    660e:	ec 0e       	add	r14, r28
    6610:	fd 1e       	adc	r15, r29
    6612:	c7 01       	movw	r24, r14
    6614:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    6618:	6e 89       	ldd	r22, Y+22	; 0x16
    661a:	80 91 63 07 	lds	r24, 0x0763
    661e:	86 17       	cp	r24, r22
    6620:	10 f4       	brcc	.+4      	; 0x6626 <xTaskResumeFromISR+0x56>
    6622:	60 93 63 07 	sts	0x0763, r22
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    6626:	10 e0       	ldi	r17, 0x00	; 0
    6628:	d0 16       	cp	r13, r16
    662a:	08 f0       	brcs	.+2      	; 0x662e <xTaskResumeFromISR+0x5e>
    662c:	11 e0       	ldi	r17, 0x01	; 1
				vListRemove(  &( pxTCB->xGenericListItem ) );
				prvAddTaskToReadyQueue( pxTCB );
    662e:	89 e0       	ldi	r24, 0x09	; 9
    6630:	68 9f       	mul	r22, r24
    6632:	c0 01       	movw	r24, r0
    6634:	11 24       	eor	r1, r1
    6636:	86 59       	subi	r24, 0x96	; 150
    6638:	98 4f       	sbci	r25, 0xF8	; 248
    663a:	b7 01       	movw	r22, r14
    663c:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    6640:	07 c0       	rjmp	.+14     	; 0x6650 <xTaskResumeFromISR+0x80>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6642:	2c 96       	adiw	r28, 0x0c	; 12
    6644:	84 ea       	ldi	r24, 0xA4	; 164
    6646:	97 e0       	ldi	r25, 0x07	; 7
    6648:	be 01       	movw	r22, r28
    664a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    664e:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		return xYieldRequired;
	}
    6650:	81 2f       	mov	r24, r17
    6652:	df 91       	pop	r29
    6654:	cf 91       	pop	r28
    6656:	1f 91       	pop	r17
    6658:	0f 91       	pop	r16
    665a:	ff 90       	pop	r15
    665c:	ef 90       	pop	r14
    665e:	df 90       	pop	r13
    6660:	08 95       	ret

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6662:	80 91 62 07 	lds	r24, 0x0762
    6666:	88 23       	and	r24, r24
    6668:	49 f2       	breq	.-110    	; 0x65fc <xTaskResumeFromISR+0x2c>
    666a:	eb cf       	rjmp	.-42     	; 0x6642 <xTaskResumeFromISR+0x72>

0000666c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    666c:	cf 93       	push	r28
    666e:	df 93       	push	r29
    6670:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    6672:	e0 91 5c 07 	lds	r30, 0x075C
    6676:	f0 91 5d 07 	lds	r31, 0x075D
    667a:	93 83       	std	Z+3, r25	; 0x03
    667c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    667e:	80 91 60 07 	lds	r24, 0x0760
    6682:	90 91 61 07 	lds	r25, 0x0761
    6686:	c8 17       	cp	r28, r24
    6688:	d9 07       	cpc	r29, r25
    668a:	68 f4       	brcc	.+26     	; 0x66a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    668c:	80 91 a2 07 	lds	r24, 0x07A2
    6690:	90 91 a3 07 	lds	r25, 0x07A3
    6694:	60 91 5c 07 	lds	r22, 0x075C
    6698:	70 91 5d 07 	lds	r23, 0x075D
    669c:	6e 5f       	subi	r22, 0xFE	; 254
    669e:	7f 4f       	sbci	r23, 0xFF	; 255
    66a0:	0e 94 c9 2c 	call	0x5992	; 0x5992 <vListInsert>
    66a4:	17 c0       	rjmp	.+46     	; 0x66d4 <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    66a6:	80 91 a0 07 	lds	r24, 0x07A0
    66aa:	90 91 a1 07 	lds	r25, 0x07A1
    66ae:	60 91 5c 07 	lds	r22, 0x075C
    66b2:	70 91 5d 07 	lds	r23, 0x075D
    66b6:	6e 5f       	subi	r22, 0xFE	; 254
    66b8:	7f 4f       	sbci	r23, 0xFF	; 255
    66ba:	0e 94 c9 2c 	call	0x5992	; 0x5992 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    66be:	80 91 d7 01 	lds	r24, 0x01D7
    66c2:	90 91 d8 01 	lds	r25, 0x01D8
    66c6:	c8 17       	cp	r28, r24
    66c8:	d9 07       	cpc	r29, r25
    66ca:	20 f4       	brcc	.+8      	; 0x66d4 <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    66cc:	d0 93 d8 01 	sts	0x01D8, r29
    66d0:	c0 93 d7 01 	sts	0x01D7, r28
		}
	}
}
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	08 95       	ret

000066da <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    66e0:	60 91 5c 07 	lds	r22, 0x075C
    66e4:	70 91 5d 07 	lds	r23, 0x075D
    66e8:	64 5f       	subi	r22, 0xF4	; 244
    66ea:	7f 4f       	sbci	r23, 0xFF	; 255
    66ec:	0e 94 c9 2c 	call	0x5992	; 0x5992 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    66f0:	80 91 5c 07 	lds	r24, 0x075C
    66f4:	90 91 5d 07 	lds	r25, 0x075D
    66f8:	02 96       	adiw	r24, 0x02	; 2
    66fa:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    66fe:	8f ef       	ldi	r24, 0xFF	; 255
    6700:	cf 3f       	cpi	r28, 0xFF	; 255
    6702:	d8 07       	cpc	r29, r24
    6704:	59 f4       	brne	.+22     	; 0x671c <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6706:	60 91 5c 07 	lds	r22, 0x075C
    670a:	70 91 5d 07 	lds	r23, 0x075D
    670e:	6e 5f       	subi	r22, 0xFE	; 254
    6710:	7f 4f       	sbci	r23, 0xFF	; 255
    6712:	86 eb       	ldi	r24, 0xB6	; 182
    6714:	97 e0       	ldi	r25, 0x07	; 7
    6716:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
    671a:	08 c0       	rjmp	.+16     	; 0x672c <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    671c:	80 91 60 07 	lds	r24, 0x0760
    6720:	90 91 61 07 	lds	r25, 0x0761
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    6724:	8c 0f       	add	r24, r28
    6726:	9d 1f       	adc	r25, r29
    6728:	0e 94 36 33 	call	0x666c	; 0x666c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	08 95       	ret

00006732 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    6732:	cf 92       	push	r12
    6734:	df 92       	push	r13
    6736:	ff 92       	push	r15
    6738:	0f 93       	push	r16
    673a:	1f 93       	push	r17
    673c:	df 93       	push	r29
    673e:	cf 93       	push	r28
    6740:	0f 92       	push	r0
    6742:	cd b7       	in	r28, 0x3d	; 61
    6744:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    6746:	0f b6       	in	r0, 0x3f	; 63
    6748:	f8 94       	cli
    674a:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    674c:	80 91 62 07 	lds	r24, 0x0762
    6750:	81 50       	subi	r24, 0x01	; 1
    6752:	80 93 62 07 	sts	0x0762, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6756:	80 91 62 07 	lds	r24, 0x0762
    675a:	88 23       	and	r24, r24
    675c:	09 f0       	breq	.+2      	; 0x6760 <xTaskResumeAll+0x2e>
    675e:	58 c0       	rjmp	.+176    	; 0x6810 <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    6760:	80 91 65 07 	lds	r24, 0x0765
    6764:	88 23       	and	r24, r24
    6766:	09 f4       	brne	.+2      	; 0x676a <xTaskResumeAll+0x38>
    6768:	53 c0       	rjmp	.+166    	; 0x6810 <xTaskResumeAll+0xde>
    676a:	19 82       	std	Y+1, r1	; 0x01
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    676c:	29 e0       	ldi	r18, 0x09	; 9
    676e:	f2 2e       	mov	r15, r18
    6770:	2d c0       	rjmp	.+90     	; 0x67cc <xTaskResumeAll+0x9a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    6772:	e0 91 a9 07 	lds	r30, 0x07A9
    6776:	f0 91 aa 07 	lds	r31, 0x07AA
    677a:	c6 80       	ldd	r12, Z+6	; 0x06
    677c:	d7 80       	ldd	r13, Z+7	; 0x07
					vListRemove( &( pxTCB->xEventListItem ) );
    677e:	c6 01       	movw	r24, r12
    6780:	0c 96       	adiw	r24, 0x0c	; 12
    6782:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    6786:	86 01       	movw	r16, r12
    6788:	0e 5f       	subi	r16, 0xFE	; 254
    678a:	1f 4f       	sbci	r17, 0xFF	; 255
    678c:	c8 01       	movw	r24, r16
    678e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    6792:	d6 01       	movw	r26, r12
    6794:	56 96       	adiw	r26, 0x16	; 22
    6796:	9c 91       	ld	r25, X
    6798:	80 91 63 07 	lds	r24, 0x0763
    679c:	89 17       	cp	r24, r25
    679e:	10 f4       	brcc	.+4      	; 0x67a4 <xTaskResumeAll+0x72>
    67a0:	90 93 63 07 	sts	0x0763, r25
    67a4:	9f 9d       	mul	r25, r15
    67a6:	c0 01       	movw	r24, r0
    67a8:	11 24       	eor	r1, r1
    67aa:	86 59       	subi	r24, 0x96	; 150
    67ac:	98 4f       	sbci	r25, 0xF8	; 248
    67ae:	b8 01       	movw	r22, r16
    67b0:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    67b4:	e0 91 5c 07 	lds	r30, 0x075C
    67b8:	f0 91 5d 07 	lds	r31, 0x075D
    67bc:	d6 01       	movw	r26, r12
    67be:	56 96       	adiw	r26, 0x16	; 22
    67c0:	9c 91       	ld	r25, X
    67c2:	86 89       	ldd	r24, Z+22	; 0x16
    67c4:	98 17       	cp	r25, r24
    67c6:	10 f0       	brcs	.+4      	; 0x67cc <xTaskResumeAll+0x9a>
    67c8:	b1 e0       	ldi	r27, 0x01	; 1
    67ca:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    67cc:	80 91 a4 07 	lds	r24, 0x07A4
    67d0:	88 23       	and	r24, r24
    67d2:	79 f6       	brne	.-98     	; 0x6772 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    67d4:	80 91 64 07 	lds	r24, 0x0764
    67d8:	88 23       	and	r24, r24
    67da:	41 f4       	brne	.+16     	; 0x67ec <xTaskResumeAll+0xba>
    67dc:	0c c0       	rjmp	.+24     	; 0x67f6 <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    67de:	0e 94 44 32 	call	0x6488	; 0x6488 <vTaskIncrementTick>
						--uxMissedTicks;
    67e2:	80 91 64 07 	lds	r24, 0x0764
    67e6:	81 50       	subi	r24, 0x01	; 1
    67e8:	80 93 64 07 	sts	0x0764, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    67ec:	80 91 64 07 	lds	r24, 0x0764
    67f0:	88 23       	and	r24, r24
    67f2:	a9 f7       	brne	.-22     	; 0x67de <xTaskResumeAll+0xac>
    67f4:	07 c0       	rjmp	.+14     	; 0x6804 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    67f6:	e9 81       	ldd	r30, Y+1	; 0x01
    67f8:	e1 30       	cpi	r30, 0x01	; 1
    67fa:	21 f0       	breq	.+8      	; 0x6804 <xTaskResumeAll+0xd2>
    67fc:	80 91 5e 07 	lds	r24, 0x075E
    6800:	81 30       	cpi	r24, 0x01	; 1
    6802:	31 f4       	brne	.+12     	; 0x6810 <xTaskResumeAll+0xde>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    6804:	10 92 5e 07 	sts	0x075E, r1
					portYIELD_WITHIN_API();
    6808:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	01 c0       	rjmp	.+2      	; 0x6812 <xTaskResumeAll+0xe0>
    6810:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    6812:	0f 90       	pop	r0
    6814:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    6816:	0f 90       	pop	r0
    6818:	cf 91       	pop	r28
    681a:	df 91       	pop	r29
    681c:	1f 91       	pop	r17
    681e:	0f 91       	pop	r16
    6820:	ff 90       	pop	r15
    6822:	df 90       	pop	r13
    6824:	cf 90       	pop	r12
    6826:	08 95       	ret

00006828 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    6828:	0f 93       	push	r16
    682a:	1f 93       	push	r17
    682c:	cf 93       	push	r28
    682e:	df 93       	push	r29
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    6830:	ec 01       	movw	r28, r24

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    6832:	00 97       	sbiw	r24, 0x00	; 0
    6834:	09 f4       	brne	.+2      	; 0x6838 <vTaskResume+0x10>
    6836:	3c c0       	rjmp	.+120    	; 0x68b0 <vTaskResume+0x88>
    6838:	80 91 5c 07 	lds	r24, 0x075C
    683c:	90 91 5d 07 	lds	r25, 0x075D
    6840:	c8 17       	cp	r28, r24
    6842:	d9 07       	cpc	r29, r25
    6844:	a9 f1       	breq	.+106    	; 0x68b0 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
    6846:	0f b6       	in	r0, 0x3f	; 63
    6848:	f8 94       	cli
    684a:	0f 92       	push	r0
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    684c:	8a 85       	ldd	r24, Y+10	; 0x0a
    684e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6850:	86 5b       	subi	r24, 0xB6	; 182
    6852:	97 40       	sbci	r25, 0x07	; 7
    6854:	f1 f4       	brne	.+60     	; 0x6892 <vTaskResume+0x6a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    6856:	8c 89       	ldd	r24, Y+20	; 0x14
    6858:	9d 89       	ldd	r25, Y+21	; 0x15
    685a:	27 e0       	ldi	r18, 0x07	; 7
    685c:	84 3a       	cpi	r24, 0xA4	; 164
    685e:	92 07       	cpc	r25, r18
    6860:	c1 f0       	breq	.+48     	; 0x6892 <vTaskResume+0x6a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    6862:	89 2b       	or	r24, r25
    6864:	b1 f4       	brne	.+44     	; 0x6892 <vTaskResume+0x6a>
    6866:	18 c0       	rjmp	.+48     	; 0x6898 <vTaskResume+0x70>
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    6868:	90 93 63 07 	sts	0x0763, r25
    686c:	89 e0       	ldi	r24, 0x09	; 9
    686e:	98 9f       	mul	r25, r24
    6870:	c0 01       	movw	r24, r0
    6872:	11 24       	eor	r1, r1
    6874:	86 59       	subi	r24, 0x96	; 150
    6876:	98 4f       	sbci	r25, 0xF8	; 248
    6878:	b8 01       	movw	r22, r16
    687a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    687e:	e0 91 5c 07 	lds	r30, 0x075C
    6882:	f0 91 5d 07 	lds	r31, 0x075D
    6886:	9e 89       	ldd	r25, Y+22	; 0x16
    6888:	86 89       	ldd	r24, Z+22	; 0x16
    688a:	98 17       	cp	r25, r24
    688c:	10 f0       	brcs	.+4      	; 0x6892 <vTaskResume+0x6a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    688e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    6892:	0f 90       	pop	r0
    6894:	0f be       	out	0x3f, r0	; 63
    6896:	0c c0       	rjmp	.+24     	; 0x68b0 <vTaskResume+0x88>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    6898:	8e 01       	movw	r16, r28
    689a:	0e 5f       	subi	r16, 0xFE	; 254
    689c:	1f 4f       	sbci	r17, 0xFF	; 255
    689e:	c8 01       	movw	r24, r16
    68a0:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    68a4:	9e 89       	ldd	r25, Y+22	; 0x16
    68a6:	80 91 63 07 	lds	r24, 0x0763
    68aa:	89 17       	cp	r24, r25
    68ac:	e8 f2       	brcs	.-70     	; 0x6868 <vTaskResume+0x40>
    68ae:	de cf       	rjmp	.-68     	; 0x686c <vTaskResume+0x44>
					}
				}
			}
			taskEXIT_CRITICAL();
		}
	}
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	08 95       	ret

000068ba <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    68ba:	ef 92       	push	r14
    68bc:	ff 92       	push	r15
    68be:	0f 93       	push	r16
    68c0:	1f 93       	push	r17
    68c2:	cf 93       	push	r28
    68c4:	df 93       	push	r29
    68c6:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    68c8:	0f b6       	in	r0, 0x3f	; 63
    68ca:	f8 94       	cli
    68cc:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    68ce:	80 91 5c 07 	lds	r24, 0x075C
    68d2:	90 91 5d 07 	lds	r25, 0x075D
    68d6:	08 17       	cp	r16, r24
    68d8:	19 07       	cpc	r17, r25
    68da:	19 f4       	brne	.+6      	; 0x68e2 <vTaskSuspend+0x28>
    68dc:	00 e0       	ldi	r16, 0x00	; 0
    68de:	10 e0       	ldi	r17, 0x00	; 0
    68e0:	03 c0       	rjmp	.+6      	; 0x68e8 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    68e2:	01 15       	cp	r16, r1
    68e4:	11 05       	cpc	r17, r1
    68e6:	29 f4       	brne	.+10     	; 0x68f2 <vTaskSuspend+0x38>
    68e8:	c0 91 5c 07 	lds	r28, 0x075C
    68ec:	d0 91 5d 07 	lds	r29, 0x075D
    68f0:	01 c0       	rjmp	.+2      	; 0x68f4 <vTaskSuspend+0x3a>
    68f2:	e8 01       	movw	r28, r16

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    68f4:	32 e0       	ldi	r19, 0x02	; 2
    68f6:	e3 2e       	mov	r14, r19
    68f8:	f1 2c       	mov	r15, r1
    68fa:	ec 0e       	add	r14, r28
    68fc:	fd 1e       	adc	r15, r29
    68fe:	c7 01       	movw	r24, r14
    6900:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    6904:	8c 89       	ldd	r24, Y+20	; 0x14
    6906:	9d 89       	ldd	r25, Y+21	; 0x15
    6908:	89 2b       	or	r24, r25
    690a:	21 f0       	breq	.+8      	; 0x6914 <vTaskSuspend+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    690c:	ce 01       	movw	r24, r28
    690e:	0c 96       	adiw	r24, 0x0c	; 12
    6910:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    6914:	86 eb       	ldi	r24, 0xB6	; 182
    6916:	97 e0       	ldi	r25, 0x07	; 7
    6918:	b7 01       	movw	r22, r14
    691a:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    691e:	0f 90       	pop	r0
    6920:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    6922:	01 2b       	or	r16, r17
    6924:	a1 f4       	brne	.+40     	; 0x694e <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    6926:	80 91 66 07 	lds	r24, 0x0766
    692a:	88 23       	and	r24, r24
    692c:	19 f0       	breq	.+6      	; 0x6934 <vTaskSuspend+0x7a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    692e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    6932:	0d c0       	rjmp	.+26     	; 0x694e <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    6934:	90 91 b6 07 	lds	r25, 0x07B6
    6938:	80 91 65 07 	lds	r24, 0x0765
    693c:	98 17       	cp	r25, r24
    693e:	29 f4       	brne	.+10     	; 0x694a <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    6940:	10 92 5d 07 	sts	0x075D, r1
    6944:	10 92 5c 07 	sts	0x075C, r1
    6948:	02 c0       	rjmp	.+4      	; 0x694e <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    694a:	0e 94 76 31 	call	0x62ec	; 0x62ec <vTaskSwitchContext>
				}
			}
		}
	}
    694e:	df 91       	pop	r29
    6950:	cf 91       	pop	r28
    6952:	1f 91       	pop	r17
    6954:	0f 91       	pop	r16
    6956:	ff 90       	pop	r15
    6958:	ef 90       	pop	r14
    695a:	08 95       	ret

0000695c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    695c:	0f 93       	push	r16
    695e:	1f 93       	push	r17
    6960:	cf 93       	push	r28
    6962:	df 93       	push	r29
    6964:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    6966:	00 97       	sbiw	r24, 0x00	; 0
    6968:	c9 f0       	breq	.+50     	; 0x699c <vTaskDelay+0x40>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    696a:	80 91 62 07 	lds	r24, 0x0762
    696e:	8f 5f       	subi	r24, 0xFF	; 255
    6970:	80 93 62 07 	sts	0x0762, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    6974:	00 91 60 07 	lds	r16, 0x0760
    6978:	10 91 61 07 	lds	r17, 0x0761

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    697c:	80 91 5c 07 	lds	r24, 0x075C
    6980:	90 91 5d 07 	lds	r25, 0x075D
    6984:	02 96       	adiw	r24, 0x02	; 2
    6986:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    698a:	ce 01       	movw	r24, r28
    698c:	80 0f       	add	r24, r16
    698e:	91 1f       	adc	r25, r17
    6990:	0e 94 36 33 	call	0x666c	; 0x666c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    6994:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6998:	88 23       	and	r24, r24
    699a:	11 f4       	brne	.+4      	; 0x69a0 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
    699c:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
		}
	}
    69a0:	df 91       	pop	r29
    69a2:	cf 91       	pop	r28
    69a4:	1f 91       	pop	r17
    69a6:	0f 91       	pop	r16
    69a8:	08 95       	ret

000069aa <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    69aa:	cf 93       	push	r28
    69ac:	df 93       	push	r29
    69ae:	fc 01       	movw	r30, r24
    69b0:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    69b2:	80 91 62 07 	lds	r24, 0x0762
    69b6:	8f 5f       	subi	r24, 0xFF	; 255
    69b8:	80 93 62 07 	sts	0x0762, r24
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    69bc:	20 81       	ld	r18, Z
    69be:	31 81       	ldd	r19, Z+1	; 0x01
    69c0:	c2 0f       	add	r28, r18
    69c2:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    69c4:	80 91 60 07 	lds	r24, 0x0760
    69c8:	90 91 61 07 	lds	r25, 0x0761
    69cc:	82 17       	cp	r24, r18
    69ce:	93 07       	cpc	r25, r19
    69d0:	28 f4       	brcc	.+10     	; 0x69dc <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    69d2:	c2 17       	cp	r28, r18
    69d4:	d3 07       	cpc	r29, r19
    69d6:	28 f0       	brcs	.+10     	; 0x69e2 <vTaskDelayUntil+0x38>
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	0c c0       	rjmp	.+24     	; 0x69f4 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    69dc:	c2 17       	cp	r28, r18
    69de:	d3 07       	cpc	r29, r19
    69e0:	40 f0       	brcs	.+16     	; 0x69f2 <vTaskDelayUntil+0x48>
    69e2:	80 91 60 07 	lds	r24, 0x0760
    69e6:	90 91 61 07 	lds	r25, 0x0761
    69ea:	20 e0       	ldi	r18, 0x00	; 0
    69ec:	8c 17       	cp	r24, r28
    69ee:	9d 07       	cpc	r25, r29
    69f0:	08 f4       	brcc	.+2      	; 0x69f4 <vTaskDelayUntil+0x4a>
    69f2:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    69f4:	d1 83       	std	Z+1, r29	; 0x01
    69f6:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    69f8:	22 23       	and	r18, r18
    69fa:	51 f0       	breq	.+20     	; 0x6a10 <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    69fc:	80 91 5c 07 	lds	r24, 0x075C
    6a00:	90 91 5d 07 	lds	r25, 0x075D
    6a04:	02 96       	adiw	r24, 0x02	; 2
    6a06:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    6a0a:	ce 01       	movw	r24, r28
    6a0c:	0e 94 36 33 	call	0x666c	; 0x666c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    6a10:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6a14:	88 23       	and	r24, r24
    6a16:	11 f4       	brne	.+4      	; 0x6a1c <vTaskDelayUntil+0x72>
		{
			portYIELD_WITHIN_API();
    6a18:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
		}
	}
    6a1c:	df 91       	pop	r29
    6a1e:	cf 91       	pop	r28
    6a20:	08 95       	ret

00006a22 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    6a22:	ef 92       	push	r14
    6a24:	ff 92       	push	r15
    6a26:	0f 93       	push	r16
    6a28:	1f 93       	push	r17
    6a2a:	cf 93       	push	r28
    6a2c:	df 93       	push	r29
    6a2e:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    6a30:	0f b6       	in	r0, 0x3f	; 63
    6a32:	f8 94       	cli
    6a34:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    6a36:	80 91 5c 07 	lds	r24, 0x075C
    6a3a:	90 91 5d 07 	lds	r25, 0x075D
    6a3e:	08 17       	cp	r16, r24
    6a40:	19 07       	cpc	r17, r25
    6a42:	19 f4       	brne	.+6      	; 0x6a4a <vTaskDelete+0x28>
    6a44:	00 e0       	ldi	r16, 0x00	; 0
    6a46:	10 e0       	ldi	r17, 0x00	; 0
    6a48:	03 c0       	rjmp	.+6      	; 0x6a50 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    6a4a:	01 15       	cp	r16, r1
    6a4c:	11 05       	cpc	r17, r1
    6a4e:	29 f4       	brne	.+10     	; 0x6a5a <vTaskDelete+0x38>
    6a50:	c0 91 5c 07 	lds	r28, 0x075C
    6a54:	d0 91 5d 07 	lds	r29, 0x075D
    6a58:	01 c0       	rjmp	.+2      	; 0x6a5c <vTaskDelete+0x3a>
    6a5a:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    6a5c:	42 e0       	ldi	r20, 0x02	; 2
    6a5e:	e4 2e       	mov	r14, r20
    6a60:	f1 2c       	mov	r15, r1
    6a62:	ec 0e       	add	r14, r28
    6a64:	fd 1e       	adc	r15, r29
    6a66:	c7 01       	movw	r24, r14
    6a68:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    6a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    6a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    6a70:	89 2b       	or	r24, r25
    6a72:	21 f0       	breq	.+8      	; 0x6a7c <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    6a74:	ce 01       	movw	r24, r28
    6a76:	0c 96       	adiw	r24, 0x0c	; 12
    6a78:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    6a7c:	8d ea       	ldi	r24, 0xAD	; 173
    6a7e:	97 e0       	ldi	r25, 0x07	; 7
    6a80:	b7 01       	movw	r22, r14
    6a82:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    6a86:	80 91 67 07 	lds	r24, 0x0767
    6a8a:	8f 5f       	subi	r24, 0xFF	; 255
    6a8c:	80 93 67 07 	sts	0x0767, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    6a90:	80 91 68 07 	lds	r24, 0x0768
    6a94:	8f 5f       	subi	r24, 0xFF	; 255
    6a96:	80 93 68 07 	sts	0x0768, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    6a9a:	0f 90       	pop	r0
    6a9c:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    6a9e:	80 91 66 07 	lds	r24, 0x0766
    6aa2:	88 23       	and	r24, r24
    6aa4:	21 f0       	breq	.+8      	; 0x6aae <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    6aa6:	01 2b       	or	r16, r17
    6aa8:	11 f4       	brne	.+4      	; 0x6aae <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    6aaa:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
			}
		}
	}
    6aae:	df 91       	pop	r29
    6ab0:	cf 91       	pop	r28
    6ab2:	1f 91       	pop	r17
    6ab4:	0f 91       	pop	r16
    6ab6:	ff 90       	pop	r15
    6ab8:	ef 90       	pop	r14
    6aba:	08 95       	ret

00006abc <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    6abc:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    6abe:	10 92 66 07 	sts	0x0766, r1
	vPortEndScheduler();
    6ac2:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <vPortEndScheduler>
}
    6ac6:	08 95       	ret

00006ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    6ac8:	0f 93       	push	r16
    6aca:	1f 93       	push	r17
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    6acc:	80 91 67 07 	lds	r24, 0x0767
    6ad0:	88 23       	and	r24, r24
    6ad2:	e1 f3       	breq	.-8      	; 0x6acc <prvIdleTask+0x4>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    6ad4:	80 91 62 07 	lds	r24, 0x0762
    6ad8:	8f 5f       	subi	r24, 0xFF	; 255
    6ada:	80 93 62 07 	sts	0x0762, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    6ade:	10 91 ad 07 	lds	r17, 0x07AD
			xTaskResumeAll();
    6ae2:	0e 94 99 33 	call	0x6732	; 0x6732 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    6ae6:	11 23       	and	r17, r17
    6ae8:	89 f3       	breq	.-30     	; 0x6acc <prvIdleTask+0x4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    6aea:	0f b6       	in	r0, 0x3f	; 63
    6aec:	f8 94       	cli
    6aee:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    6af0:	e0 91 b2 07 	lds	r30, 0x07B2
    6af4:	f0 91 b3 07 	lds	r31, 0x07B3
    6af8:	06 81       	ldd	r16, Z+6	; 0x06
    6afa:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    6afc:	c8 01       	movw	r24, r16
    6afe:	02 96       	adiw	r24, 0x02	; 2
    6b00:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <vListRemove>
					--uxCurrentNumberOfTasks;
    6b04:	80 91 65 07 	lds	r24, 0x0765
    6b08:	81 50       	subi	r24, 0x01	; 1
    6b0a:	80 93 65 07 	sts	0x0765, r24
					--uxTasksDeleted;
    6b0e:	80 91 67 07 	lds	r24, 0x0767
    6b12:	81 50       	subi	r24, 0x01	; 1
    6b14:	80 93 67 07 	sts	0x0767, r24
				}
				taskEXIT_CRITICAL();
    6b18:	0f 90       	pop	r0
    6b1a:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    6b1c:	f8 01       	movw	r30, r16
    6b1e:	87 89       	ldd	r24, Z+23	; 0x17
    6b20:	90 8d       	ldd	r25, Z+24	; 0x18
    6b22:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
		vPortFree( pxTCB );
    6b26:	c8 01       	movw	r24, r16
    6b28:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
    6b2c:	cf cf       	rjmp	.-98     	; 0x6acc <prvIdleTask+0x4>

00006b2e <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    6b2e:	2f 92       	push	r2
    6b30:	3f 92       	push	r3
    6b32:	5f 92       	push	r5
    6b34:	6f 92       	push	r6
    6b36:	7f 92       	push	r7
    6b38:	8f 92       	push	r8
    6b3a:	9f 92       	push	r9
    6b3c:	af 92       	push	r10
    6b3e:	bf 92       	push	r11
    6b40:	cf 92       	push	r12
    6b42:	df 92       	push	r13
    6b44:	ef 92       	push	r14
    6b46:	ff 92       	push	r15
    6b48:	0f 93       	push	r16
    6b4a:	1f 93       	push	r17
    6b4c:	df 93       	push	r29
    6b4e:	cf 93       	push	r28
    6b50:	00 d0       	rcall	.+0      	; 0x6b52 <xTaskGenericCreate+0x24>
    6b52:	00 d0       	rcall	.+0      	; 0x6b54 <xTaskGenericCreate+0x26>
    6b54:	cd b7       	in	r28, 0x3d	; 61
    6b56:	de b7       	in	r29, 0x3e	; 62
    6b58:	9a 83       	std	Y+2, r25	; 0x02
    6b5a:	89 83       	std	Y+1, r24	; 0x01
    6b5c:	4b 01       	movw	r8, r22
    6b5e:	5a 01       	movw	r10, r20
    6b60:	19 01       	movw	r2, r18
    6b62:	50 2e       	mov	r5, r16
    6b64:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    6b66:	81 e2       	ldi	r24, 0x21	; 33
    6b68:	90 e0       	ldi	r25, 0x00	; 0
    6b6a:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pvPortMalloc>
    6b6e:	8b 83       	std	Y+3, r24	; 0x03
    6b70:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    6b72:	8b 81       	ldd	r24, Y+3	; 0x03
    6b74:	9c 81       	ldd	r25, Y+4	; 0x04
    6b76:	89 2b       	or	r24, r25
    6b78:	89 f0       	breq	.+34     	; 0x6b9c <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    6b7a:	c1 14       	cp	r12, r1
    6b7c:	d1 04       	cpc	r13, r1
    6b7e:	21 f4       	brne	.+8      	; 0x6b88 <xTaskGenericCreate+0x5a>
    6b80:	c5 01       	movw	r24, r10
    6b82:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pvPortMalloc>
    6b86:	6c 01       	movw	r12, r24
    6b88:	eb 81       	ldd	r30, Y+3	; 0x03
    6b8a:	fc 81       	ldd	r31, Y+4	; 0x04
    6b8c:	d0 8e       	std	Z+24, r13	; 0x18
    6b8e:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    6b90:	c1 14       	cp	r12, r1
    6b92:	d1 04       	cpc	r13, r1
    6b94:	29 f4       	brne	.+10     	; 0x6ba0 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    6b96:	cf 01       	movw	r24, r30
    6b98:	0e 94 55 2c 	call	0x58aa	; 0x58aa <vPortFree>
    6b9c:	8f ef       	ldi	r24, 0xFF	; 255
    6b9e:	da c0       	rjmp	.+436    	; 0x6d54 <xTaskGenericCreate+0x226>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    6ba0:	c6 01       	movw	r24, r12
    6ba2:	65 ea       	ldi	r22, 0xA5	; 165
    6ba4:	70 e0       	ldi	r23, 0x00	; 0
    6ba6:	a5 01       	movw	r20, r10
    6ba8:	0e 94 4c 38 	call	0x7098	; 0x7098 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    6bac:	08 94       	sec
    6bae:	a1 08       	sbc	r10, r1
    6bb0:	b1 08       	sbc	r11, r1
    6bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    6bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    6bb6:	e7 88       	ldd	r14, Z+23	; 0x17
    6bb8:	f0 8c       	ldd	r15, Z+24	; 0x18
    6bba:	ea 0c       	add	r14, r10
    6bbc:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    6bbe:	cf 01       	movw	r24, r30
    6bc0:	49 96       	adiw	r24, 0x19	; 25
    6bc2:	b4 01       	movw	r22, r8
    6bc4:	48 e0       	ldi	r20, 0x08	; 8
    6bc6:	50 e0       	ldi	r21, 0x00	; 0
    6bc8:	0e 94 53 38 	call	0x70a6	; 0x70a6 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    6bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    6bce:	fc 81       	ldd	r31, Y+4	; 0x04
    6bd0:	10 a2       	std	Z+32, r1	; 0x20
    6bd2:	05 2d       	mov	r16, r5
    6bd4:	f3 e0       	ldi	r31, 0x03	; 3
    6bd6:	f5 15       	cp	r31, r5
    6bd8:	08 f4       	brcc	.+2      	; 0x6bdc <xTaskGenericCreate+0xae>
    6bda:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    6bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    6bde:	fc 81       	ldd	r31, Y+4	; 0x04
    6be0:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    6be2:	62 e0       	ldi	r22, 0x02	; 2
    6be4:	c6 2e       	mov	r12, r22
    6be6:	d1 2c       	mov	r13, r1
    6be8:	ce 0e       	add	r12, r30
    6bea:	df 1e       	adc	r13, r31
    6bec:	c6 01       	movw	r24, r12
    6bee:	0e 94 9c 2c 	call	0x5938	; 0x5938 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    6bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    6bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    6bf6:	0c 96       	adiw	r24, 0x0c	; 12
    6bf8:	0e 94 9c 2c 	call	0x5938	; 0x5938 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    6bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    6bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    6c00:	fc 01       	movw	r30, r24
    6c02:	91 87       	std	Z+9, r25	; 0x09
    6c04:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    6c06:	84 e0       	ldi	r24, 0x04	; 4
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	80 1b       	sub	r24, r16
    6c0c:	91 09       	sbc	r25, r1
    6c0e:	95 87       	std	Z+13, r25	; 0x0d
    6c10:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    6c12:	f3 8b       	std	Z+19, r31	; 0x13
    6c14:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    6c16:	c7 01       	movw	r24, r14
    6c18:	69 81       	ldd	r22, Y+1	; 0x01
    6c1a:	7a 81       	ldd	r23, Y+2	; 0x02
    6c1c:	a1 01       	movw	r20, r2
    6c1e:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <pxPortInitialiseStack>
    6c22:	eb 81       	ldd	r30, Y+3	; 0x03
    6c24:	fc 81       	ldd	r31, Y+4	; 0x04
    6c26:	91 83       	std	Z+1, r25	; 0x01
    6c28:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    6c2a:	61 14       	cp	r6, r1
    6c2c:	71 04       	cpc	r7, r1
    6c2e:	21 f0       	breq	.+8      	; 0x6c38 <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    6c30:	cf 01       	movw	r24, r30
    6c32:	f3 01       	movw	r30, r6
    6c34:	91 83       	std	Z+1, r25	; 0x01
    6c36:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    6c38:	0f b6       	in	r0, 0x3f	; 63
    6c3a:	f8 94       	cli
    6c3c:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    6c3e:	80 91 65 07 	lds	r24, 0x0765
    6c42:	8f 5f       	subi	r24, 0xFF	; 255
    6c44:	80 93 65 07 	sts	0x0765, r24
			if( pxCurrentTCB == NULL )
    6c48:	80 91 5c 07 	lds	r24, 0x075C
    6c4c:	90 91 5d 07 	lds	r25, 0x075D
    6c50:	89 2b       	or	r24, r25
    6c52:	e1 f5       	brne	.+120    	; 0x6ccc <xTaskGenericCreate+0x19e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    6c54:	eb 81       	ldd	r30, Y+3	; 0x03
    6c56:	fc 81       	ldd	r31, Y+4	; 0x04
    6c58:	f0 93 5d 07 	sts	0x075D, r31
    6c5c:	e0 93 5c 07 	sts	0x075C, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    6c60:	80 91 65 07 	lds	r24, 0x0765
    6c64:	81 30       	cpi	r24, 0x01	; 1
    6c66:	09 f0       	breq	.+2      	; 0x6c6a <xTaskGenericCreate+0x13c>
    6c68:	42 c0       	rjmp	.+132    	; 0x6cee <xTaskGenericCreate+0x1c0>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    6c6a:	8a e6       	ldi	r24, 0x6A	; 106
    6c6c:	97 e0       	ldi	r25, 0x07	; 7
    6c6e:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
    6c72:	83 e7       	ldi	r24, 0x73	; 115
    6c74:	97 e0       	ldi	r25, 0x07	; 7
    6c76:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
    6c7a:	8c e7       	ldi	r24, 0x7C	; 124
    6c7c:	97 e0       	ldi	r25, 0x07	; 7
    6c7e:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
    6c82:	85 e8       	ldi	r24, 0x85	; 133
    6c84:	97 e0       	ldi	r25, 0x07	; 7
    6c86:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    6c8a:	5e e8       	ldi	r21, 0x8E	; 142
    6c8c:	e5 2e       	mov	r14, r21
    6c8e:	57 e0       	ldi	r21, 0x07	; 7
    6c90:	f5 2e       	mov	r15, r21
    6c92:	c7 01       	movw	r24, r14
    6c94:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    6c98:	07 e9       	ldi	r16, 0x97	; 151
    6c9a:	17 e0       	ldi	r17, 0x07	; 7
    6c9c:	c8 01       	movw	r24, r16
    6c9e:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    6ca2:	84 ea       	ldi	r24, 0xA4	; 164
    6ca4:	97 e0       	ldi	r25, 0x07	; 7
    6ca6:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    6caa:	8d ea       	ldi	r24, 0xAD	; 173
    6cac:	97 e0       	ldi	r25, 0x07	; 7
    6cae:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    6cb2:	86 eb       	ldi	r24, 0xB6	; 182
    6cb4:	97 e0       	ldi	r25, 0x07	; 7
    6cb6:	0e 94 8c 2c 	call	0x5918	; 0x5918 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    6cba:	f0 92 a1 07 	sts	0x07A1, r15
    6cbe:	e0 92 a0 07 	sts	0x07A0, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    6cc2:	10 93 a3 07 	sts	0x07A3, r17
    6cc6:	00 93 a2 07 	sts	0x07A2, r16
    6cca:	11 c0       	rjmp	.+34     	; 0x6cee <xTaskGenericCreate+0x1c0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    6ccc:	80 91 66 07 	lds	r24, 0x0766
    6cd0:	88 23       	and	r24, r24
    6cd2:	69 f4       	brne	.+26     	; 0x6cee <xTaskGenericCreate+0x1c0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    6cd4:	e0 91 5c 07 	lds	r30, 0x075C
    6cd8:	f0 91 5d 07 	lds	r31, 0x075D
    6cdc:	86 89       	ldd	r24, Z+22	; 0x16
    6cde:	58 16       	cp	r5, r24
    6ce0:	30 f0       	brcs	.+12     	; 0x6cee <xTaskGenericCreate+0x1c0>
					{
						pxCurrentTCB = pxNewTCB;
    6ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    6ce6:	90 93 5d 07 	sts	0x075D, r25
    6cea:	80 93 5c 07 	sts	0x075C, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    6cee:	eb 81       	ldd	r30, Y+3	; 0x03
    6cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    6cf2:	96 89       	ldd	r25, Z+22	; 0x16
    6cf4:	80 91 69 07 	lds	r24, 0x0769
    6cf8:	89 17       	cp	r24, r25
    6cfa:	10 f4       	brcc	.+4      	; 0x6d00 <xTaskGenericCreate+0x1d2>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    6cfc:	90 93 69 07 	sts	0x0769, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    6d00:	80 91 68 07 	lds	r24, 0x0768
    6d04:	8f 5f       	subi	r24, 0xFF	; 255
    6d06:	80 93 68 07 	sts	0x0768, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    6d0a:	eb 81       	ldd	r30, Y+3	; 0x03
    6d0c:	fc 81       	ldd	r31, Y+4	; 0x04
    6d0e:	96 89       	ldd	r25, Z+22	; 0x16
    6d10:	80 91 63 07 	lds	r24, 0x0763
    6d14:	89 17       	cp	r24, r25
    6d16:	10 f4       	brcc	.+4      	; 0x6d1c <xTaskGenericCreate+0x1ee>
    6d18:	90 93 63 07 	sts	0x0763, r25
    6d1c:	eb 81       	ldd	r30, Y+3	; 0x03
    6d1e:	fc 81       	ldd	r31, Y+4	; 0x04
    6d20:	86 89       	ldd	r24, Z+22	; 0x16
    6d22:	29 e0       	ldi	r18, 0x09	; 9
    6d24:	82 9f       	mul	r24, r18
    6d26:	c0 01       	movw	r24, r0
    6d28:	11 24       	eor	r1, r1
    6d2a:	86 59       	subi	r24, 0x96	; 150
    6d2c:	98 4f       	sbci	r25, 0xF8	; 248
    6d2e:	b6 01       	movw	r22, r12
    6d30:	0e 94 a0 2c 	call	0x5940	; 0x5940 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    6d34:	0f 90       	pop	r0
    6d36:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    6d38:	80 91 66 07 	lds	r24, 0x0766
    6d3c:	88 23       	and	r24, r24
    6d3e:	49 f0       	breq	.+18     	; 0x6d52 <xTaskGenericCreate+0x224>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    6d40:	e0 91 5c 07 	lds	r30, 0x075C
    6d44:	f0 91 5d 07 	lds	r31, 0x075D
    6d48:	86 89       	ldd	r24, Z+22	; 0x16
    6d4a:	85 15       	cp	r24, r5
    6d4c:	10 f4       	brcc	.+4      	; 0x6d52 <xTaskGenericCreate+0x224>
			{
				portYIELD_WITHIN_API();
    6d4e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <vPortYield>
    6d52:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    6d54:	0f 90       	pop	r0
    6d56:	0f 90       	pop	r0
    6d58:	0f 90       	pop	r0
    6d5a:	0f 90       	pop	r0
    6d5c:	cf 91       	pop	r28
    6d5e:	df 91       	pop	r29
    6d60:	1f 91       	pop	r17
    6d62:	0f 91       	pop	r16
    6d64:	ff 90       	pop	r15
    6d66:	ef 90       	pop	r14
    6d68:	df 90       	pop	r13
    6d6a:	cf 90       	pop	r12
    6d6c:	bf 90       	pop	r11
    6d6e:	af 90       	pop	r10
    6d70:	9f 90       	pop	r9
    6d72:	8f 90       	pop	r8
    6d74:	7f 90       	pop	r7
    6d76:	6f 90       	pop	r6
    6d78:	5f 90       	pop	r5
    6d7a:	3f 90       	pop	r3
    6d7c:	2f 90       	pop	r2
    6d7e:	08 95       	ret

00006d80 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    6d80:	af 92       	push	r10
    6d82:	bf 92       	push	r11
    6d84:	cf 92       	push	r12
    6d86:	df 92       	push	r13
    6d88:	ef 92       	push	r14
    6d8a:	ff 92       	push	r15
    6d8c:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    6d8e:	84 e6       	ldi	r24, 0x64	; 100
    6d90:	95 e3       	ldi	r25, 0x35	; 53
    6d92:	6f ec       	ldi	r22, 0xCF	; 207
    6d94:	70 e0       	ldi	r23, 0x00	; 0
    6d96:	42 e3       	ldi	r20, 0x32	; 50
    6d98:	50 e0       	ldi	r21, 0x00	; 0
    6d9a:	20 e0       	ldi	r18, 0x00	; 0
    6d9c:	30 e0       	ldi	r19, 0x00	; 0
    6d9e:	00 e0       	ldi	r16, 0x00	; 0
    6da0:	ee 24       	eor	r14, r14
    6da2:	ff 24       	eor	r15, r15
    6da4:	cc 24       	eor	r12, r12
    6da6:	dd 24       	eor	r13, r13
    6da8:	aa 24       	eor	r10, r10
    6daa:	bb 24       	eor	r11, r11
    6dac:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    6db0:	81 30       	cpi	r24, 0x01	; 1
    6db2:	49 f4       	brne	.+18     	; 0x6dc6 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    6db4:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    6db6:	80 93 66 07 	sts	0x0766, r24
		xTickCount = ( portTickType ) 0U;
    6dba:	10 92 61 07 	sts	0x0761, r1
    6dbe:	10 92 60 07 	sts	0x0760, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    6dc2:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    6dc6:	0f 91       	pop	r16
    6dc8:	ff 90       	pop	r15
    6dca:	ef 90       	pop	r14
    6dcc:	df 90       	pop	r13
    6dce:	cf 90       	pop	r12
    6dd0:	bf 90       	pop	r11
    6dd2:	af 90       	pop	r10
    6dd4:	08 95       	ret

00006dd6 <main>:
xSemaphoreHandle BTN1_Semaphore,BTN2_Semaphore,LCD_xMutex,Fan_Semaphore;
xQueueHandle Temp_Queue=NULL;



s32 main(void){
    6dd6:	af 92       	push	r10
    6dd8:	bf 92       	push	r11
    6dda:	cf 92       	push	r12
    6ddc:	df 92       	push	r13
    6dde:	ef 92       	push	r14
    6de0:	ff 92       	push	r15
    6de2:	0f 93       	push	r16



	GIE_voidEnable();
    6de4:	0e 94 22 25 	call	0x4a44	; 0x4a44 <GIE_voidEnable>
	EXTI_voidInit();
    6de8:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <EXTI_voidInit>

	/*POWER ON PIN*/
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_INPUT);
    6dec:	83 e0       	ldi	r24, 0x03	; 3
    6dee:	64 e0       	ldi	r22, 0x04	; 4
    6df0:	40 e0       	ldi	r20, 0x00	; 0
    6df2:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	CPU_Sleep();
    6df6:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <CPU_Sleep>

	TIMER0_voidInit();
    6dfa:	0e 94 9d 21 	call	0x433a	; 0x433a <TIMER0_voidInit>
	TIMER2_voidInit();
    6dfe:	0e 94 0c 22 	call	0x4418	; 0x4418 <TIMER2_voidInit>

	LCD_voidInit();
    6e02:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <LCD_voidInit>

	USART_voidInit();
    6e06:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <USART_voidInit>


	/*****************************PIN INITIALISATION*********************************/

	/*BUTTON PINS*/
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
    6e0a:	83 e0       	ldi	r24, 0x03	; 3
    6e0c:	62 e0       	ldi	r22, 0x02	; 2
    6e0e:	40 e0       	ldi	r20, 0x00	; 0
    6e10:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_INPUT);
    6e14:	83 e0       	ldi	r24, 0x03	; 3
    6e16:	63 e0       	ldi	r22, 0x03	; 3
    6e18:	40 e0       	ldi	r20, 0x00	; 0
    6e1a:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>



	/*DIO PINS*/
	DIO_u8SetPinDirection(DIO_PORTA,BUZZER_PIN,DIO_PIN_OUTPUT);
    6e1e:	80 e0       	ldi	r24, 0x00	; 0
    6e20:	61 e0       	ldi	r22, 0x01	; 1
    6e22:	41 e0       	ldi	r20, 0x01	; 1
    6e24:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTA,ALERT_LED_PIN,DIO_PIN_OUTPUT);
    6e28:	80 e0       	ldi	r24, 0x00	; 0
    6e2a:	60 e0       	ldi	r22, 0x00	; 0
    6e2c:	41 e0       	ldi	r20, 0x01	; 1
    6e2e:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>

	/*FANS PINS*/
	DIO_u8SetPinDirection(FAN1_PORT,FAN1_PIN,DIO_PIN_OUTPUT);
    6e32:	81 e0       	ldi	r24, 0x01	; 1
    6e34:	63 e0       	ldi	r22, 0x03	; 3
    6e36:	41 e0       	ldi	r20, 0x01	; 1
    6e38:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(FAN2_PORT,FAN2_PIN,DIO_PIN_OUTPUT);
    6e3c:	83 e0       	ldi	r24, 0x03	; 3
    6e3e:	67 e0       	ldi	r22, 0x07	; 7
    6e40:	41 e0       	ldi	r20, 0x01	; 1
    6e42:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>




	/*SPI PINS*/
	DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN4,DIO_PIN_OUTPUT);
    6e46:	81 e0       	ldi	r24, 0x01	; 1
    6e48:	64 e0       	ldi	r22, 0x04	; 4
    6e4a:	41 e0       	ldi	r20, 0x01	; 1
    6e4c:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN5,DIO_PIN_OUTPUT);
    6e50:	81 e0       	ldi	r24, 0x01	; 1
    6e52:	65 e0       	ldi	r22, 0x05	; 5
    6e54:	41 e0       	ldi	r20, 0x01	; 1
    6e56:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_INPUT);
    6e5a:	81 e0       	ldi	r24, 0x01	; 1
    6e5c:	66 e0       	ldi	r22, 0x06	; 6
    6e5e:	40 e0       	ldi	r20, 0x00	; 0
    6e60:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_PIN_OUTPUT);
    6e64:	81 e0       	ldi	r24, 0x01	; 1
    6e66:	67 e0       	ldi	r22, 0x07	; 7
    6e68:	41 e0       	ldi	r20, 0x01	; 1
    6e6a:	0e 94 01 27 	call	0x4e02	; 0x4e02 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
    6e6e:	81 e0       	ldi	r24, 0x01	; 1
    6e70:	64 e0       	ldi	r22, 0x04	; 4
    6e72:	40 e0       	ldi	r20, 0x00	; 0
    6e74:	0e 94 88 26 	call	0x4d10	; 0x4d10 <DIO_u8SetPinValue>
	SPI_VoidInit();
    6e78:	0e 94 8c 23 	call	0x4718	; 0x4718 <SPI_VoidInit>

	vSemaphoreCreateBinary(BTN1_Semaphore);
    6e7c:	81 e0       	ldi	r24, 0x01	; 1
    6e7e:	60 e0       	ldi	r22, 0x00	; 0
    6e80:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6e84:	90 93 ca 07 	sts	0x07CA, r25
    6e88:	80 93 c9 07 	sts	0x07C9, r24
    6e8c:	00 97       	sbiw	r24, 0x00	; 0
    6e8e:	39 f0       	breq	.+14     	; 0x6e9e <main+0xc8>
    6e90:	60 e0       	ldi	r22, 0x00	; 0
    6e92:	70 e0       	ldi	r23, 0x00	; 0
    6e94:	40 e0       	ldi	r20, 0x00	; 0
    6e96:	50 e0       	ldi	r21, 0x00	; 0
    6e98:	20 e0       	ldi	r18, 0x00	; 0
    6e9a:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
	vSemaphoreCreateBinary(BTN2_Semaphore);
    6e9e:	81 e0       	ldi	r24, 0x01	; 1
    6ea0:	60 e0       	ldi	r22, 0x00	; 0
    6ea2:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6ea6:	90 93 c6 07 	sts	0x07C6, r25
    6eaa:	80 93 c5 07 	sts	0x07C5, r24
    6eae:	00 97       	sbiw	r24, 0x00	; 0
    6eb0:	39 f0       	breq	.+14     	; 0x6ec0 <main+0xea>
    6eb2:	60 e0       	ldi	r22, 0x00	; 0
    6eb4:	70 e0       	ldi	r23, 0x00	; 0
    6eb6:	40 e0       	ldi	r20, 0x00	; 0
    6eb8:	50 e0       	ldi	r21, 0x00	; 0
    6eba:	20 e0       	ldi	r18, 0x00	; 0
    6ebc:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
	vSemaphoreCreateBinary(LCD_xMutex);
    6ec0:	81 e0       	ldi	r24, 0x01	; 1
    6ec2:	60 e0       	ldi	r22, 0x00	; 0
    6ec4:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6ec8:	90 93 c8 07 	sts	0x07C8, r25
    6ecc:	80 93 c7 07 	sts	0x07C7, r24
    6ed0:	00 97       	sbiw	r24, 0x00	; 0
    6ed2:	39 f0       	breq	.+14     	; 0x6ee2 <main+0x10c>
    6ed4:	60 e0       	ldi	r22, 0x00	; 0
    6ed6:	70 e0       	ldi	r23, 0x00	; 0
    6ed8:	40 e0       	ldi	r20, 0x00	; 0
    6eda:	50 e0       	ldi	r21, 0x00	; 0
    6edc:	20 e0       	ldi	r18, 0x00	; 0
    6ede:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>
	vSemaphoreCreateBinary(Fan_Semaphore);
    6ee2:	81 e0       	ldi	r24, 0x01	; 1
    6ee4:	60 e0       	ldi	r22, 0x00	; 0
    6ee6:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6eea:	90 93 c4 07 	sts	0x07C4, r25
    6eee:	80 93 c3 07 	sts	0x07C3, r24
    6ef2:	00 97       	sbiw	r24, 0x00	; 0
    6ef4:	39 f0       	breq	.+14     	; 0x6f04 <main+0x12e>
    6ef6:	60 e0       	ldi	r22, 0x00	; 0
    6ef8:	70 e0       	ldi	r23, 0x00	; 0
    6efa:	40 e0       	ldi	r20, 0x00	; 0
    6efc:	50 e0       	ldi	r21, 0x00	; 0
    6efe:	20 e0       	ldi	r18, 0x00	; 0
    6f00:	0e 94 39 30 	call	0x6072	; 0x6072 <xQueueGenericSend>

	Temp_Queue = xQueueCreate(2,sizeof(u8));
    6f04:	82 e0       	ldi	r24, 0x02	; 2
    6f06:	61 e0       	ldi	r22, 0x01	; 1
    6f08:	0e 94 dd 30 	call	0x61ba	; 0x61ba <xQueueCreate>
    6f0c:	90 93 c2 07 	sts	0x07C2, r25
    6f10:	80 93 c1 07 	sts	0x07C1, r24


	EXTI_u8INT0SetCallBack(Button_1);
    6f14:	86 e5       	ldi	r24, 0x56	; 86
    6f16:	90 e2       	ldi	r25, 0x20	; 32
    6f18:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <EXTI_u8INT0SetCallBack>
	EXTI_u8INT1SetCallBack(Button_2);
    6f1c:	81 e4       	ldi	r24, 0x41	; 65
    6f1e:	90 e2       	ldi	r25, 0x20	; 32
    6f20:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <EXTI_u8INT1SetCallBack>

	xTaskCreate(UART_TASK,NULL,50,NULL,3,&xUART_Handle);
    6f24:	8e ee       	ldi	r24, 0xEE	; 238
    6f26:	9e e1       	ldi	r25, 0x1E	; 30
    6f28:	60 e0       	ldi	r22, 0x00	; 0
    6f2a:	70 e0       	ldi	r23, 0x00	; 0
    6f2c:	42 e3       	ldi	r20, 0x32	; 50
    6f2e:	50 e0       	ldi	r21, 0x00	; 0
    6f30:	20 e0       	ldi	r18, 0x00	; 0
    6f32:	30 e0       	ldi	r19, 0x00	; 0
    6f34:	03 e0       	ldi	r16, 0x03	; 3
    6f36:	ef eb       	ldi	r30, 0xBF	; 191
    6f38:	ee 2e       	mov	r14, r30
    6f3a:	e7 e0       	ldi	r30, 0x07	; 7
    6f3c:	fe 2e       	mov	r15, r30
    6f3e:	cc 24       	eor	r12, r12
    6f40:	dd 24       	eor	r13, r13
    6f42:	aa 24       	eor	r10, r10
    6f44:	bb 24       	eor	r11, r11
    6f46:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xTaskGenericCreate>
	xTaskCreate(ROOM_1,NULL,250,NULL,2,NULL);
    6f4a:	89 ea       	ldi	r24, 0xA9	; 169
    6f4c:	9f e1       	ldi	r25, 0x1F	; 31
    6f4e:	60 e0       	ldi	r22, 0x00	; 0
    6f50:	70 e0       	ldi	r23, 0x00	; 0
    6f52:	4a ef       	ldi	r20, 0xFA	; 250
    6f54:	50 e0       	ldi	r21, 0x00	; 0
    6f56:	20 e0       	ldi	r18, 0x00	; 0
    6f58:	30 e0       	ldi	r19, 0x00	; 0
    6f5a:	02 e0       	ldi	r16, 0x02	; 2
    6f5c:	ee 24       	eor	r14, r14
    6f5e:	ff 24       	eor	r15, r15
    6f60:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xTaskGenericCreate>
	xTaskCreate(ROOM_2,NULL,250,NULL,1,NULL);
    6f64:	81 e1       	ldi	r24, 0x11	; 17
    6f66:	9f e1       	ldi	r25, 0x1F	; 31
    6f68:	60 e0       	ldi	r22, 0x00	; 0
    6f6a:	70 e0       	ldi	r23, 0x00	; 0
    6f6c:	4a ef       	ldi	r20, 0xFA	; 250
    6f6e:	50 e0       	ldi	r21, 0x00	; 0
    6f70:	20 e0       	ldi	r18, 0x00	; 0
    6f72:	30 e0       	ldi	r19, 0x00	; 0
    6f74:	01 e0       	ldi	r16, 0x01	; 1
    6f76:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xTaskGenericCreate>
	xTaskCreate(FAN,NULL,250,NULL,3,NULL);
    6f7a:	82 e1       	ldi	r24, 0x12	; 18
    6f7c:	9e e1       	ldi	r25, 0x1E	; 30
    6f7e:	60 e0       	ldi	r22, 0x00	; 0
    6f80:	70 e0       	ldi	r23, 0x00	; 0
    6f82:	4a ef       	ldi	r20, 0xFA	; 250
    6f84:	50 e0       	ldi	r21, 0x00	; 0
    6f86:	20 e0       	ldi	r18, 0x00	; 0
    6f88:	30 e0       	ldi	r19, 0x00	; 0
    6f8a:	03 e0       	ldi	r16, 0x03	; 3
    6f8c:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xTaskGenericCreate>



	vTaskStartScheduler();
    6f90:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <vTaskStartScheduler>
    6f94:	ff cf       	rjmp	.-2      	; 0x6f94 <main+0x1be>

00006f96 <__mulsi3>:
    6f96:	62 9f       	mul	r22, r18
    6f98:	d0 01       	movw	r26, r0
    6f9a:	73 9f       	mul	r23, r19
    6f9c:	f0 01       	movw	r30, r0
    6f9e:	82 9f       	mul	r24, r18
    6fa0:	e0 0d       	add	r30, r0
    6fa2:	f1 1d       	adc	r31, r1
    6fa4:	64 9f       	mul	r22, r20
    6fa6:	e0 0d       	add	r30, r0
    6fa8:	f1 1d       	adc	r31, r1
    6faa:	92 9f       	mul	r25, r18
    6fac:	f0 0d       	add	r31, r0
    6fae:	83 9f       	mul	r24, r19
    6fb0:	f0 0d       	add	r31, r0
    6fb2:	74 9f       	mul	r23, r20
    6fb4:	f0 0d       	add	r31, r0
    6fb6:	65 9f       	mul	r22, r21
    6fb8:	f0 0d       	add	r31, r0
    6fba:	99 27       	eor	r25, r25
    6fbc:	72 9f       	mul	r23, r18
    6fbe:	b0 0d       	add	r27, r0
    6fc0:	e1 1d       	adc	r30, r1
    6fc2:	f9 1f       	adc	r31, r25
    6fc4:	63 9f       	mul	r22, r19
    6fc6:	b0 0d       	add	r27, r0
    6fc8:	e1 1d       	adc	r30, r1
    6fca:	f9 1f       	adc	r31, r25
    6fcc:	bd 01       	movw	r22, r26
    6fce:	cf 01       	movw	r24, r30
    6fd0:	11 24       	eor	r1, r1
    6fd2:	08 95       	ret

00006fd4 <__udivmodsi4>:
    6fd4:	a1 e2       	ldi	r26, 0x21	; 33
    6fd6:	1a 2e       	mov	r1, r26
    6fd8:	aa 1b       	sub	r26, r26
    6fda:	bb 1b       	sub	r27, r27
    6fdc:	fd 01       	movw	r30, r26
    6fde:	0d c0       	rjmp	.+26     	; 0x6ffa <__udivmodsi4_ep>

00006fe0 <__udivmodsi4_loop>:
    6fe0:	aa 1f       	adc	r26, r26
    6fe2:	bb 1f       	adc	r27, r27
    6fe4:	ee 1f       	adc	r30, r30
    6fe6:	ff 1f       	adc	r31, r31
    6fe8:	a2 17       	cp	r26, r18
    6fea:	b3 07       	cpc	r27, r19
    6fec:	e4 07       	cpc	r30, r20
    6fee:	f5 07       	cpc	r31, r21
    6ff0:	20 f0       	brcs	.+8      	; 0x6ffa <__udivmodsi4_ep>
    6ff2:	a2 1b       	sub	r26, r18
    6ff4:	b3 0b       	sbc	r27, r19
    6ff6:	e4 0b       	sbc	r30, r20
    6ff8:	f5 0b       	sbc	r31, r21

00006ffa <__udivmodsi4_ep>:
    6ffa:	66 1f       	adc	r22, r22
    6ffc:	77 1f       	adc	r23, r23
    6ffe:	88 1f       	adc	r24, r24
    7000:	99 1f       	adc	r25, r25
    7002:	1a 94       	dec	r1
    7004:	69 f7       	brne	.-38     	; 0x6fe0 <__udivmodsi4_loop>
    7006:	60 95       	com	r22
    7008:	70 95       	com	r23
    700a:	80 95       	com	r24
    700c:	90 95       	com	r25
    700e:	9b 01       	movw	r18, r22
    7010:	ac 01       	movw	r20, r24
    7012:	bd 01       	movw	r22, r26
    7014:	cf 01       	movw	r24, r30
    7016:	08 95       	ret

00007018 <__prologue_saves__>:
    7018:	2f 92       	push	r2
    701a:	3f 92       	push	r3
    701c:	4f 92       	push	r4
    701e:	5f 92       	push	r5
    7020:	6f 92       	push	r6
    7022:	7f 92       	push	r7
    7024:	8f 92       	push	r8
    7026:	9f 92       	push	r9
    7028:	af 92       	push	r10
    702a:	bf 92       	push	r11
    702c:	cf 92       	push	r12
    702e:	df 92       	push	r13
    7030:	ef 92       	push	r14
    7032:	ff 92       	push	r15
    7034:	0f 93       	push	r16
    7036:	1f 93       	push	r17
    7038:	cf 93       	push	r28
    703a:	df 93       	push	r29
    703c:	cd b7       	in	r28, 0x3d	; 61
    703e:	de b7       	in	r29, 0x3e	; 62
    7040:	ca 1b       	sub	r28, r26
    7042:	db 0b       	sbc	r29, r27
    7044:	0f b6       	in	r0, 0x3f	; 63
    7046:	f8 94       	cli
    7048:	de bf       	out	0x3e, r29	; 62
    704a:	0f be       	out	0x3f, r0	; 63
    704c:	cd bf       	out	0x3d, r28	; 61
    704e:	09 94       	ijmp

00007050 <__epilogue_restores__>:
    7050:	2a 88       	ldd	r2, Y+18	; 0x12
    7052:	39 88       	ldd	r3, Y+17	; 0x11
    7054:	48 88       	ldd	r4, Y+16	; 0x10
    7056:	5f 84       	ldd	r5, Y+15	; 0x0f
    7058:	6e 84       	ldd	r6, Y+14	; 0x0e
    705a:	7d 84       	ldd	r7, Y+13	; 0x0d
    705c:	8c 84       	ldd	r8, Y+12	; 0x0c
    705e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7060:	aa 84       	ldd	r10, Y+10	; 0x0a
    7062:	b9 84       	ldd	r11, Y+9	; 0x09
    7064:	c8 84       	ldd	r12, Y+8	; 0x08
    7066:	df 80       	ldd	r13, Y+7	; 0x07
    7068:	ee 80       	ldd	r14, Y+6	; 0x06
    706a:	fd 80       	ldd	r15, Y+5	; 0x05
    706c:	0c 81       	ldd	r16, Y+4	; 0x04
    706e:	1b 81       	ldd	r17, Y+3	; 0x03
    7070:	aa 81       	ldd	r26, Y+2	; 0x02
    7072:	b9 81       	ldd	r27, Y+1	; 0x01
    7074:	ce 0f       	add	r28, r30
    7076:	d1 1d       	adc	r29, r1
    7078:	0f b6       	in	r0, 0x3f	; 63
    707a:	f8 94       	cli
    707c:	de bf       	out	0x3e, r29	; 62
    707e:	0f be       	out	0x3f, r0	; 63
    7080:	cd bf       	out	0x3d, r28	; 61
    7082:	ed 01       	movw	r28, r26
    7084:	08 95       	ret

00007086 <memcpy>:
    7086:	fb 01       	movw	r30, r22
    7088:	dc 01       	movw	r26, r24
    708a:	02 c0       	rjmp	.+4      	; 0x7090 <memcpy+0xa>
    708c:	01 90       	ld	r0, Z+
    708e:	0d 92       	st	X+, r0
    7090:	41 50       	subi	r20, 0x01	; 1
    7092:	50 40       	sbci	r21, 0x00	; 0
    7094:	d8 f7       	brcc	.-10     	; 0x708c <memcpy+0x6>
    7096:	08 95       	ret

00007098 <memset>:
    7098:	dc 01       	movw	r26, r24
    709a:	01 c0       	rjmp	.+2      	; 0x709e <memset+0x6>
    709c:	6d 93       	st	X+, r22
    709e:	41 50       	subi	r20, 0x01	; 1
    70a0:	50 40       	sbci	r21, 0x00	; 0
    70a2:	e0 f7       	brcc	.-8      	; 0x709c <memset+0x4>
    70a4:	08 95       	ret

000070a6 <strncpy>:
    70a6:	fb 01       	movw	r30, r22
    70a8:	dc 01       	movw	r26, r24
    70aa:	41 50       	subi	r20, 0x01	; 1
    70ac:	50 40       	sbci	r21, 0x00	; 0
    70ae:	48 f0       	brcs	.+18     	; 0x70c2 <strncpy+0x1c>
    70b0:	01 90       	ld	r0, Z+
    70b2:	0d 92       	st	X+, r0
    70b4:	00 20       	and	r0, r0
    70b6:	c9 f7       	brne	.-14     	; 0x70aa <strncpy+0x4>
    70b8:	01 c0       	rjmp	.+2      	; 0x70bc <strncpy+0x16>
    70ba:	1d 92       	st	X+, r1
    70bc:	41 50       	subi	r20, 0x01	; 1
    70be:	50 40       	sbci	r21, 0x00	; 0
    70c0:	e0 f7       	brcc	.-8      	; 0x70ba <strncpy+0x14>
    70c2:	08 95       	ret

000070c4 <_exit>:
    70c4:	f8 94       	cli

000070c6 <__stop_program>:
    70c6:	ff cf       	rjmp	.-2      	; 0x70c6 <__stop_program>
