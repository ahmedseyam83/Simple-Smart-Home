
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00007a96  00007b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000579  00800180  00800180  00007c4a  2**0
                  ALLOC
  3 .stab         0000852c  00000000  00000000  00007c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000434b  00000000  00000000  00010178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000144c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000235  00000000  00000000  000146a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000039dc  00000000  00000000  000148d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f9  00000000  00000000  000182b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017e2  00000000  00000000  000198ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0001b090  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000366  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c46  00000000  00000000  0001b5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  0001f23c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 31 29 	jmp	0x5262	; 0x5262 <__vector_1>
       8:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <__vector_2>
       c:	0c 94 83 29 	jmp	0x5306	; 0x5306 <__vector_3>
      10:	0c 94 cb 26 	jmp	0x4d96	; 0x4d96 <__vector_4>
      14:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__vector_5>
      18:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__vector_6>
      1c:	0c 94 09 33 	jmp	0x6612	; 0x6612 <__vector_7>
      20:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__vector_8>
      24:	0c 94 27 26 	jmp	0x4c4e	; 0x4c4e <__vector_9>
      28:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <__vector_10>
      2c:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_11>
      30:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <__vector_12>
      34:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fa e7       	ldi	r31, 0x7A	; 122
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 3c 	call	0x78a4	; 0x78a4 <main>
      8a:	0c 94 49 3d 	jmp	0x7a92	; 0x7a92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <__subsf3>
     1bc:	0e 94 12 21 	call	0x4224	; 0x4224 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 12 21 	call	0x4224	; 0x4224 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__divdi3>:
     1e8:	a2 e7       	ldi	r26, 0x72	; 114
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
     1f4:	98 2e       	mov	r9, r24
     1f6:	89 2e       	mov	r8, r25
     1f8:	71 2e       	mov	r7, r17
     1fa:	88 e0       	ldi	r24, 0x08	; 8
     1fc:	fe 01       	movw	r30, r28
     1fe:	31 96       	adiw	r30, 0x01	; 1
     200:	df 01       	movw	r26, r30
     202:	68 2e       	mov	r6, r24
     204:	1d 92       	st	X+, r1
     206:	6a 94       	dec	r6
     208:	e9 f7       	brne	.-6      	; 0x204 <__divdi3+0x1c>
     20a:	29 83       	std	Y+1, r18	; 0x01
     20c:	3a 83       	std	Y+2, r19	; 0x02
     20e:	4b 83       	std	Y+3, r20	; 0x03
     210:	5c 83       	std	Y+4, r21	; 0x04
     212:	6d 83       	std	Y+5, r22	; 0x05
     214:	7e 83       	std	Y+6, r23	; 0x06
     216:	9f 82       	std	Y+7, r9	; 0x07
     218:	98 87       	std	Y+8, r25	; 0x08
     21a:	fe 01       	movw	r30, r28
     21c:	39 96       	adiw	r30, 0x09	; 9
     21e:	df 01       	movw	r26, r30
     220:	1d 92       	st	X+, r1
     222:	8a 95       	dec	r24
     224:	e9 f7       	brne	.-6      	; 0x220 <__divdi3+0x38>
     226:	a9 86       	std	Y+9, r10	; 0x09
     228:	ba 86       	std	Y+10, r11	; 0x0a
     22a:	cb 86       	std	Y+11, r12	; 0x0b
     22c:	dc 86       	std	Y+12, r13	; 0x0c
     22e:	ed 86       	std	Y+13, r14	; 0x0d
     230:	fe 86       	std	Y+14, r15	; 0x0e
     232:	0f 87       	std	Y+15, r16	; 0x0f
     234:	18 8b       	std	Y+16, r17	; 0x10
     236:	8d 81       	ldd	r24, Y+5	; 0x05
     238:	9e 81       	ldd	r25, Y+6	; 0x06
     23a:	af 81       	ldd	r26, Y+7	; 0x07
     23c:	b8 85       	ldd	r27, Y+8	; 0x08
     23e:	b7 fd       	sbrc	r27, 7
     240:	07 c0       	rjmp	.+14     	; 0x250 <__divdi3+0x68>
     242:	e1 96       	adiw	r28, 0x31	; 49
     244:	1c ae       	std	Y+60, r1	; 0x3c
     246:	1d ae       	std	Y+61, r1	; 0x3d
     248:	1e ae       	std	Y+62, r1	; 0x3e
     24a:	1f ae       	std	Y+63, r1	; 0x3f
     24c:	e1 97       	sbiw	r28, 0x31	; 49
     24e:	64 c0       	rjmp	.+200    	; 0x318 <__divdi3+0x130>
     250:	21 95       	neg	r18
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	12 16       	cp	r1, r18
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x72>
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	31 95       	neg	r19
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	13 16       	cp	r1, r19
     260:	08 f0       	brcs	.+2      	; 0x264 <__divdi3+0x7c>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	b3 2f       	mov	r27, r19
     266:	b8 1b       	sub	r27, r24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	3b 17       	cp	r19, r27
     26c:	08 f0       	brcs	.+2      	; 0x270 <__divdi3+0x88>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	98 2b       	or	r25, r24
     272:	41 95       	neg	r20
     274:	31 e0       	ldi	r19, 0x01	; 1
     276:	14 16       	cp	r1, r20
     278:	08 f0       	brcs	.+2      	; 0x27c <__divdi3+0x94>
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	a4 2f       	mov	r26, r20
     27e:	a9 1b       	sub	r26, r25
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	4a 17       	cp	r20, r26
     284:	08 f0       	brcs	.+2      	; 0x288 <__divdi3+0xa0>
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	38 2b       	or	r19, r24
     28a:	51 95       	neg	r21
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	15 16       	cp	r1, r21
     290:	08 f0       	brcs	.+2      	; 0x294 <__divdi3+0xac>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	f5 2f       	mov	r31, r21
     296:	f3 1b       	sub	r31, r19
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	5f 17       	cp	r21, r31
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <__divdi3+0xb8>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	98 2b       	or	r25, r24
     2a2:	61 95       	neg	r22
     2a4:	31 e0       	ldi	r19, 0x01	; 1
     2a6:	16 16       	cp	r1, r22
     2a8:	08 f0       	brcs	.+2      	; 0x2ac <__divdi3+0xc4>
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	e6 2f       	mov	r30, r22
     2ae:	e9 1b       	sub	r30, r25
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	6e 17       	cp	r22, r30
     2b4:	08 f0       	brcs	.+2      	; 0x2b8 <__divdi3+0xd0>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	38 2b       	or	r19, r24
     2ba:	71 95       	neg	r23
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	17 16       	cp	r1, r23
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <__divdi3+0xdc>
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	57 2f       	mov	r21, r23
     2c6:	53 1b       	sub	r21, r19
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	75 17       	cp	r23, r21
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <__divdi3+0xe8>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	48 2b       	or	r20, r24
     2d2:	89 2d       	mov	r24, r9
     2d4:	81 95       	neg	r24
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	18 16       	cp	r1, r24
     2da:	08 f0       	brcs	.+2      	; 0x2de <__divdi3+0xf6>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	68 2e       	mov	r6, r24
     2e0:	64 1a       	sub	r6, r20
     2e2:	46 2d       	mov	r20, r6
     2e4:	31 e0       	ldi	r19, 0x01	; 1
     2e6:	86 15       	cp	r24, r6
     2e8:	08 f0       	brcs	.+2      	; 0x2ec <__divdi3+0x104>
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	93 2b       	or	r25, r19
     2ee:	88 2d       	mov	r24, r8
     2f0:	81 95       	neg	r24
     2f2:	89 1b       	sub	r24, r25
     2f4:	29 83       	std	Y+1, r18	; 0x01
     2f6:	ba 83       	std	Y+2, r27	; 0x02
     2f8:	ab 83       	std	Y+3, r26	; 0x03
     2fa:	fc 83       	std	Y+4, r31	; 0x04
     2fc:	ed 83       	std	Y+5, r30	; 0x05
     2fe:	5e 83       	std	Y+6, r21	; 0x06
     300:	4f 83       	std	Y+7, r20	; 0x07
     302:	88 87       	std	Y+8, r24	; 0x08
     304:	2f ef       	ldi	r18, 0xFF	; 255
     306:	3f ef       	ldi	r19, 0xFF	; 255
     308:	4f ef       	ldi	r20, 0xFF	; 255
     30a:	5f ef       	ldi	r21, 0xFF	; 255
     30c:	e1 96       	adiw	r28, 0x31	; 49
     30e:	2c af       	std	Y+60, r18	; 0x3c
     310:	3d af       	std	Y+61, r19	; 0x3d
     312:	4e af       	std	Y+62, r20	; 0x3e
     314:	5f af       	std	Y+63, r21	; 0x3f
     316:	e1 97       	sbiw	r28, 0x31	; 49
     318:	8d 85       	ldd	r24, Y+13	; 0x0d
     31a:	9e 85       	ldd	r25, Y+14	; 0x0e
     31c:	af 85       	ldd	r26, Y+15	; 0x0f
     31e:	b8 89       	ldd	r27, Y+16	; 0x10
     320:	b7 ff       	sbrs	r27, 7
     322:	6a c0       	rjmp	.+212    	; 0x3f8 <__divdi3+0x210>
     324:	e1 96       	adiw	r28, 0x31	; 49
     326:	4c ad       	ldd	r20, Y+60	; 0x3c
     328:	5d ad       	ldd	r21, Y+61	; 0x3d
     32a:	6e ad       	ldd	r22, Y+62	; 0x3e
     32c:	7f ad       	ldd	r23, Y+63	; 0x3f
     32e:	e1 97       	sbiw	r28, 0x31	; 49
     330:	40 95       	com	r20
     332:	50 95       	com	r21
     334:	60 95       	com	r22
     336:	70 95       	com	r23
     338:	e1 96       	adiw	r28, 0x31	; 49
     33a:	4c af       	std	Y+60, r20	; 0x3c
     33c:	5d af       	std	Y+61, r21	; 0x3d
     33e:	6e af       	std	Y+62, r22	; 0x3e
     340:	7f af       	std	Y+63, r23	; 0x3f
     342:	e1 97       	sbiw	r28, 0x31	; 49
     344:	a1 94       	neg	r10
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	1a 14       	cp	r1, r10
     34a:	08 f0       	brcs	.+2      	; 0x34e <__divdi3+0x166>
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	b1 94       	neg	r11
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	1b 14       	cp	r1, r11
     354:	08 f0       	brcs	.+2      	; 0x358 <__divdi3+0x170>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	6b 2d       	mov	r22, r11
     35a:	68 1b       	sub	r22, r24
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	b6 16       	cp	r11, r22
     360:	08 f0       	brcs	.+2      	; 0x364 <__divdi3+0x17c>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	98 2b       	or	r25, r24
     366:	c1 94       	neg	r12
     368:	21 e0       	ldi	r18, 0x01	; 1
     36a:	1c 14       	cp	r1, r12
     36c:	08 f0       	brcs	.+2      	; 0x370 <__divdi3+0x188>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	5c 2d       	mov	r21, r12
     372:	59 1b       	sub	r21, r25
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	c5 16       	cp	r12, r21
     378:	08 f0       	brcs	.+2      	; 0x37c <__divdi3+0x194>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	28 2b       	or	r18, r24
     37e:	d1 94       	neg	r13
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	1d 14       	cp	r1, r13
     384:	08 f0       	brcs	.+2      	; 0x388 <__divdi3+0x1a0>
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	4d 2d       	mov	r20, r13
     38a:	42 1b       	sub	r20, r18
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	d4 16       	cp	r13, r20
     390:	08 f0       	brcs	.+2      	; 0x394 <__divdi3+0x1ac>
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	98 2b       	or	r25, r24
     396:	e1 94       	neg	r14
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	1e 14       	cp	r1, r14
     39c:	08 f0       	brcs	.+2      	; 0x3a0 <__divdi3+0x1b8>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	3e 2d       	mov	r19, r14
     3a2:	39 1b       	sub	r19, r25
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	e3 16       	cp	r14, r19
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <__divdi3+0x1c4>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	28 2b       	or	r18, r24
     3ae:	f1 94       	neg	r15
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	1f 14       	cp	r1, r15
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <__divdi3+0x1d0>
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	7f 2d       	mov	r23, r15
     3ba:	72 1b       	sub	r23, r18
     3bc:	27 2f       	mov	r18, r23
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	f7 16       	cp	r15, r23
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__divdi3+0x1de>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	98 2b       	or	r25, r24
     3c8:	01 95       	neg	r16
     3ca:	11 e0       	ldi	r17, 0x01	; 1
     3cc:	10 16       	cp	r1, r16
     3ce:	08 f0       	brcs	.+2      	; 0x3d2 <__divdi3+0x1ea>
     3d0:	10 e0       	ldi	r17, 0x00	; 0
     3d2:	80 2f       	mov	r24, r16
     3d4:	89 1b       	sub	r24, r25
     3d6:	98 2f       	mov	r25, r24
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	09 17       	cp	r16, r25
     3dc:	08 f0       	brcs	.+2      	; 0x3e0 <__divdi3+0x1f8>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	18 2b       	or	r17, r24
     3e2:	87 2d       	mov	r24, r7
     3e4:	81 95       	neg	r24
     3e6:	81 1b       	sub	r24, r17
     3e8:	a9 86       	std	Y+9, r10	; 0x09
     3ea:	6a 87       	std	Y+10, r22	; 0x0a
     3ec:	5b 87       	std	Y+11, r21	; 0x0b
     3ee:	4c 87       	std	Y+12, r20	; 0x0c
     3f0:	3d 87       	std	Y+13, r19	; 0x0d
     3f2:	2e 87       	std	Y+14, r18	; 0x0e
     3f4:	9f 87       	std	Y+15, r25	; 0x0f
     3f6:	88 8b       	std	Y+16, r24	; 0x10
     3f8:	99 81       	ldd	r25, Y+1	; 0x01
     3fa:	2a 81       	ldd	r18, Y+2	; 0x02
     3fc:	3b 81       	ldd	r19, Y+3	; 0x03
     3fe:	4c 81       	ldd	r20, Y+4	; 0x04
     400:	5d 81       	ldd	r21, Y+5	; 0x05
     402:	6e 81       	ldd	r22, Y+6	; 0x06
     404:	7f 81       	ldd	r23, Y+7	; 0x07
     406:	a8 85       	ldd	r26, Y+8	; 0x08
     408:	b9 85       	ldd	r27, Y+9	; 0x09
     40a:	1a 85       	ldd	r17, Y+10	; 0x0a
     40c:	0b 85       	ldd	r16, Y+11	; 0x0b
     40e:	fc 84       	ldd	r15, Y+12	; 0x0c
     410:	ed 84       	ldd	r14, Y+13	; 0x0d
     412:	de 84       	ldd	r13, Y+14	; 0x0e
     414:	cf 84       	ldd	r12, Y+15	; 0x0f
     416:	b8 88       	ldd	r11, Y+16	; 0x10
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	e1 e1       	ldi	r30, 0x11	; 17
     41c:	8e 2e       	mov	r8, r30
     41e:	91 2c       	mov	r9, r1
     420:	8c 0e       	add	r8, r28
     422:	9d 1e       	adc	r9, r29
     424:	f4 01       	movw	r30, r8
     426:	68 2e       	mov	r6, r24
     428:	11 92       	st	Z+, r1
     42a:	6a 94       	dec	r6
     42c:	e9 f7       	brne	.-6      	; 0x428 <__divdi3+0x240>
     42e:	99 8b       	std	Y+17, r25	; 0x11
     430:	2a 8b       	std	Y+18, r18	; 0x12
     432:	3b 8b       	std	Y+19, r19	; 0x13
     434:	4c 8b       	std	Y+20, r20	; 0x14
     436:	5d 8b       	std	Y+21, r21	; 0x15
     438:	6e 8b       	std	Y+22, r22	; 0x16
     43a:	7f 8b       	std	Y+23, r23	; 0x17
     43c:	a8 8f       	std	Y+24, r26	; 0x18
     43e:	9e 01       	movw	r18, r28
     440:	27 5e       	subi	r18, 0xE7	; 231
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	f9 01       	movw	r30, r18
     446:	11 92       	st	Z+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <__divdi3+0x25e>
     44c:	b9 8f       	std	Y+25, r27	; 0x19
     44e:	1a 8f       	std	Y+26, r17	; 0x1a
     450:	0b 8f       	std	Y+27, r16	; 0x1b
     452:	fc 8e       	std	Y+28, r15	; 0x1c
     454:	ed 8e       	std	Y+29, r14	; 0x1d
     456:	de 8e       	std	Y+30, r13	; 0x1e
     458:	cf 8e       	std	Y+31, r12	; 0x1f
     45a:	b8 a2       	std	Y+32, r11	; 0x20
     45c:	29 8c       	ldd	r2, Y+25	; 0x19
     45e:	3a 8c       	ldd	r3, Y+26	; 0x1a
     460:	4b 8c       	ldd	r4, Y+27	; 0x1b
     462:	5c 8c       	ldd	r5, Y+28	; 0x1c
     464:	ed 8c       	ldd	r14, Y+29	; 0x1d
     466:	fe 8c       	ldd	r15, Y+30	; 0x1e
     468:	0f 8d       	ldd	r16, Y+31	; 0x1f
     46a:	18 a1       	ldd	r17, Y+32	; 0x20
     46c:	69 88       	ldd	r6, Y+17	; 0x11
     46e:	7a 88       	ldd	r7, Y+18	; 0x12
     470:	8b 88       	ldd	r8, Y+19	; 0x13
     472:	9c 88       	ldd	r9, Y+20	; 0x14
     474:	21 96       	adiw	r28, 0x01	; 1
     476:	6c ae       	std	Y+60, r6	; 0x3c
     478:	7d ae       	std	Y+61, r7	; 0x3d
     47a:	8e ae       	std	Y+62, r8	; 0x3e
     47c:	9f ae       	std	Y+63, r9	; 0x3f
     47e:	21 97       	sbiw	r28, 0x01	; 1
     480:	6d 88       	ldd	r6, Y+21	; 0x15
     482:	7e 88       	ldd	r7, Y+22	; 0x16
     484:	8f 88       	ldd	r8, Y+23	; 0x17
     486:	98 8c       	ldd	r9, Y+24	; 0x18
     488:	e1 14       	cp	r14, r1
     48a:	f1 04       	cpc	r15, r1
     48c:	01 05       	cpc	r16, r1
     48e:	11 05       	cpc	r17, r1
     490:	09 f0       	breq	.+2      	; 0x494 <__divdi3+0x2ac>
     492:	d9 c3       	rjmp	.+1970   	; 0xc46 <__stack+0x3e7>
     494:	62 14       	cp	r6, r2
     496:	73 04       	cpc	r7, r3
     498:	84 04       	cpc	r8, r4
     49a:	95 04       	cpc	r9, r5
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <__divdi3+0x2b8>
     49e:	57 c1       	rjmp	.+686    	; 0x74e <__divdi3+0x566>
     4a0:	00 e0       	ldi	r16, 0x00	; 0
     4a2:	20 16       	cp	r2, r16
     4a4:	00 e0       	ldi	r16, 0x00	; 0
     4a6:	30 06       	cpc	r3, r16
     4a8:	01 e0       	ldi	r16, 0x01	; 1
     4aa:	40 06       	cpc	r4, r16
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	50 06       	cpc	r5, r16
     4b0:	88 f4       	brcc	.+34     	; 0x4d4 <__divdi3+0x2ec>
     4b2:	1f ef       	ldi	r17, 0xFF	; 255
     4b4:	21 16       	cp	r2, r17
     4b6:	31 04       	cpc	r3, r1
     4b8:	41 04       	cpc	r4, r1
     4ba:	51 04       	cpc	r5, r1
     4bc:	39 f0       	breq	.+14     	; 0x4cc <__divdi3+0x2e4>
     4be:	30 f0       	brcs	.+12     	; 0x4cc <__divdi3+0x2e4>
     4c0:	48 e0       	ldi	r20, 0x08	; 8
     4c2:	e4 2e       	mov	r14, r20
     4c4:	f1 2c       	mov	r15, r1
     4c6:	01 2d       	mov	r16, r1
     4c8:	11 2d       	mov	r17, r1
     4ca:	18 c0       	rjmp	.+48     	; 0x4fc <__divdi3+0x314>
     4cc:	ee 24       	eor	r14, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	87 01       	movw	r16, r14
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__divdi3+0x314>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	22 16       	cp	r2, r18
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	32 06       	cpc	r3, r18
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	42 06       	cpc	r4, r18
     4e0:	21 e0       	ldi	r18, 0x01	; 1
     4e2:	52 06       	cpc	r5, r18
     4e4:	30 f0       	brcs	.+12     	; 0x4f2 <__divdi3+0x30a>
     4e6:	38 e1       	ldi	r19, 0x18	; 24
     4e8:	e3 2e       	mov	r14, r19
     4ea:	f1 2c       	mov	r15, r1
     4ec:	01 2d       	mov	r16, r1
     4ee:	11 2d       	mov	r17, r1
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__divdi3+0x314>
     4f2:	20 e1       	ldi	r18, 0x10	; 16
     4f4:	e2 2e       	mov	r14, r18
     4f6:	f1 2c       	mov	r15, r1
     4f8:	01 2d       	mov	r16, r1
     4fa:	11 2d       	mov	r17, r1
     4fc:	d2 01       	movw	r26, r4
     4fe:	c1 01       	movw	r24, r2
     500:	0e 2c       	mov	r0, r14
     502:	04 c0       	rjmp	.+8      	; 0x50c <__divdi3+0x324>
     504:	b6 95       	lsr	r27
     506:	a7 95       	ror	r26
     508:	97 95       	ror	r25
     50a:	87 95       	ror	r24
     50c:	0a 94       	dec	r0
     50e:	d2 f7       	brpl	.-12     	; 0x504 <__divdi3+0x31c>
     510:	83 59       	subi	r24, 0x93	; 147
     512:	9f 4f       	sbci	r25, 0xFF	; 255
     514:	dc 01       	movw	r26, r24
     516:	2c 91       	ld	r18, X
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	8e 19       	sub	r24, r14
     522:	9f 09       	sbc	r25, r15
     524:	a0 0b       	sbc	r26, r16
     526:	b1 0b       	sbc	r27, r17
     528:	7c 01       	movw	r14, r24
     52a:	8d 01       	movw	r16, r26
     52c:	e2 1a       	sub	r14, r18
     52e:	f1 08       	sbc	r15, r1
     530:	01 09       	sbc	r16, r1
     532:	11 09       	sbc	r17, r1
     534:	e1 14       	cp	r14, r1
     536:	f1 04       	cpc	r15, r1
     538:	01 05       	cpc	r16, r1
     53a:	11 05       	cpc	r17, r1
     53c:	d1 f1       	breq	.+116    	; 0x5b2 <__divdi3+0x3ca>
     53e:	0e 2c       	mov	r0, r14
     540:	04 c0       	rjmp	.+8      	; 0x54a <__divdi3+0x362>
     542:	22 0c       	add	r2, r2
     544:	33 1c       	adc	r3, r3
     546:	44 1c       	adc	r4, r4
     548:	55 1c       	adc	r5, r5
     54a:	0a 94       	dec	r0
     54c:	d2 f7       	brpl	.-12     	; 0x542 <__divdi3+0x35a>
     54e:	a4 01       	movw	r20, r8
     550:	93 01       	movw	r18, r6
     552:	0e 2c       	mov	r0, r14
     554:	04 c0       	rjmp	.+8      	; 0x55e <__divdi3+0x376>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	44 1f       	adc	r20, r20
     55c:	55 1f       	adc	r21, r21
     55e:	0a 94       	dec	r0
     560:	d2 f7       	brpl	.-12     	; 0x556 <__divdi3+0x36e>
     562:	80 e2       	ldi	r24, 0x20	; 32
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	8e 19       	sub	r24, r14
     568:	9f 09       	sbc	r25, r15
     56a:	21 96       	adiw	r28, 0x01	; 1
     56c:	6c ac       	ldd	r6, Y+60	; 0x3c
     56e:	7d ac       	ldd	r7, Y+61	; 0x3d
     570:	8e ac       	ldd	r8, Y+62	; 0x3e
     572:	9f ac       	ldd	r9, Y+63	; 0x3f
     574:	21 97       	sbiw	r28, 0x01	; 1
     576:	04 c0       	rjmp	.+8      	; 0x580 <__divdi3+0x398>
     578:	96 94       	lsr	r9
     57a:	87 94       	ror	r8
     57c:	77 94       	ror	r7
     57e:	67 94       	ror	r6
     580:	8a 95       	dec	r24
     582:	d2 f7       	brpl	.-12     	; 0x578 <__divdi3+0x390>
     584:	62 2a       	or	r6, r18
     586:	73 2a       	or	r7, r19
     588:	84 2a       	or	r8, r20
     58a:	95 2a       	or	r9, r21
     58c:	21 96       	adiw	r28, 0x01	; 1
     58e:	ac ac       	ldd	r10, Y+60	; 0x3c
     590:	bd ac       	ldd	r11, Y+61	; 0x3d
     592:	ce ac       	ldd	r12, Y+62	; 0x3e
     594:	df ac       	ldd	r13, Y+63	; 0x3f
     596:	21 97       	sbiw	r28, 0x01	; 1
     598:	04 c0       	rjmp	.+8      	; 0x5a2 <__divdi3+0x3ba>
     59a:	aa 0c       	add	r10, r10
     59c:	bb 1c       	adc	r11, r11
     59e:	cc 1c       	adc	r12, r12
     5a0:	dd 1c       	adc	r13, r13
     5a2:	ea 94       	dec	r14
     5a4:	d2 f7       	brpl	.-12     	; 0x59a <__divdi3+0x3b2>
     5a6:	21 96       	adiw	r28, 0x01	; 1
     5a8:	ac ae       	std	Y+60, r10	; 0x3c
     5aa:	bd ae       	std	Y+61, r11	; 0x3d
     5ac:	ce ae       	std	Y+62, r12	; 0x3e
     5ae:	df ae       	std	Y+63, r13	; 0x3f
     5b0:	21 97       	sbiw	r28, 0x01	; 1
     5b2:	62 01       	movw	r12, r4
     5b4:	ee 24       	eor	r14, r14
     5b6:	ff 24       	eor	r15, r15
     5b8:	29 96       	adiw	r28, 0x09	; 9
     5ba:	cc ae       	std	Y+60, r12	; 0x3c
     5bc:	dd ae       	std	Y+61, r13	; 0x3d
     5be:	ee ae       	std	Y+62, r14	; 0x3e
     5c0:	ff ae       	std	Y+63, r15	; 0x3f
     5c2:	29 97       	sbiw	r28, 0x09	; 9
     5c4:	92 01       	movw	r18, r4
     5c6:	81 01       	movw	r16, r2
     5c8:	20 70       	andi	r18, 0x00	; 0
     5ca:	30 70       	andi	r19, 0x00	; 0
     5cc:	2d 96       	adiw	r28, 0x0d	; 13
     5ce:	0c af       	std	Y+60, r16	; 0x3c
     5d0:	1d af       	std	Y+61, r17	; 0x3d
     5d2:	2e af       	std	Y+62, r18	; 0x3e
     5d4:	3f af       	std	Y+63, r19	; 0x3f
     5d6:	2d 97       	sbiw	r28, 0x0d	; 13
     5d8:	c4 01       	movw	r24, r8
     5da:	b3 01       	movw	r22, r6
     5dc:	a7 01       	movw	r20, r14
     5de:	96 01       	movw	r18, r12
     5e0:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     5e4:	7b 01       	movw	r14, r22
     5e6:	8c 01       	movw	r16, r24
     5e8:	c4 01       	movw	r24, r8
     5ea:	b3 01       	movw	r22, r6
     5ec:	29 96       	adiw	r28, 0x09	; 9
     5ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     5f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     5f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     5f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     5f6:	29 97       	sbiw	r28, 0x09	; 9
     5f8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     5fc:	c9 01       	movw	r24, r18
     5fe:	da 01       	movw	r26, r20
     600:	3c 01       	movw	r6, r24
     602:	4d 01       	movw	r8, r26
     604:	c4 01       	movw	r24, r8
     606:	b3 01       	movw	r22, r6
     608:	2d 96       	adiw	r28, 0x0d	; 13
     60a:	2c ad       	ldd	r18, Y+60	; 0x3c
     60c:	3d ad       	ldd	r19, Y+61	; 0x3d
     60e:	4e ad       	ldd	r20, Y+62	; 0x3e
     610:	5f ad       	ldd	r21, Y+63	; 0x3f
     612:	2d 97       	sbiw	r28, 0x0d	; 13
     614:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	87 01       	movw	r16, r14
     61e:	ff 24       	eor	r15, r15
     620:	ee 24       	eor	r14, r14
     622:	21 96       	adiw	r28, 0x01	; 1
     624:	ac ac       	ldd	r10, Y+60	; 0x3c
     626:	bd ac       	ldd	r11, Y+61	; 0x3d
     628:	ce ac       	ldd	r12, Y+62	; 0x3e
     62a:	df ac       	ldd	r13, Y+63	; 0x3f
     62c:	21 97       	sbiw	r28, 0x01	; 1
     62e:	c6 01       	movw	r24, r12
     630:	aa 27       	eor	r26, r26
     632:	bb 27       	eor	r27, r27
     634:	57 01       	movw	r10, r14
     636:	68 01       	movw	r12, r16
     638:	a8 2a       	or	r10, r24
     63a:	b9 2a       	or	r11, r25
     63c:	ca 2a       	or	r12, r26
     63e:	db 2a       	or	r13, r27
     640:	a2 16       	cp	r10, r18
     642:	b3 06       	cpc	r11, r19
     644:	c4 06       	cpc	r12, r20
     646:	d5 06       	cpc	r13, r21
     648:	e0 f4       	brcc	.+56     	; 0x682 <__divdi3+0x49a>
     64a:	08 94       	sec
     64c:	61 08       	sbc	r6, r1
     64e:	71 08       	sbc	r7, r1
     650:	81 08       	sbc	r8, r1
     652:	91 08       	sbc	r9, r1
     654:	a2 0c       	add	r10, r2
     656:	b3 1c       	adc	r11, r3
     658:	c4 1c       	adc	r12, r4
     65a:	d5 1c       	adc	r13, r5
     65c:	a2 14       	cp	r10, r2
     65e:	b3 04       	cpc	r11, r3
     660:	c4 04       	cpc	r12, r4
     662:	d5 04       	cpc	r13, r5
     664:	70 f0       	brcs	.+28     	; 0x682 <__divdi3+0x49a>
     666:	a2 16       	cp	r10, r18
     668:	b3 06       	cpc	r11, r19
     66a:	c4 06       	cpc	r12, r20
     66c:	d5 06       	cpc	r13, r21
     66e:	48 f4       	brcc	.+18     	; 0x682 <__divdi3+0x49a>
     670:	08 94       	sec
     672:	61 08       	sbc	r6, r1
     674:	71 08       	sbc	r7, r1
     676:	81 08       	sbc	r8, r1
     678:	91 08       	sbc	r9, r1
     67a:	a2 0c       	add	r10, r2
     67c:	b3 1c       	adc	r11, r3
     67e:	c4 1c       	adc	r12, r4
     680:	d5 1c       	adc	r13, r5
     682:	a2 1a       	sub	r10, r18
     684:	b3 0a       	sbc	r11, r19
     686:	c4 0a       	sbc	r12, r20
     688:	d5 0a       	sbc	r13, r21
     68a:	c6 01       	movw	r24, r12
     68c:	b5 01       	movw	r22, r10
     68e:	29 96       	adiw	r28, 0x09	; 9
     690:	2c ad       	ldd	r18, Y+60	; 0x3c
     692:	3d ad       	ldd	r19, Y+61	; 0x3d
     694:	4e ad       	ldd	r20, Y+62	; 0x3e
     696:	5f ad       	ldd	r21, Y+63	; 0x3f
     698:	29 97       	sbiw	r28, 0x09	; 9
     69a:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     69e:	7b 01       	movw	r14, r22
     6a0:	8c 01       	movw	r16, r24
     6a2:	c6 01       	movw	r24, r12
     6a4:	b5 01       	movw	r22, r10
     6a6:	29 96       	adiw	r28, 0x09	; 9
     6a8:	2c ad       	ldd	r18, Y+60	; 0x3c
     6aa:	3d ad       	ldd	r19, Y+61	; 0x3d
     6ac:	4e ad       	ldd	r20, Y+62	; 0x3e
     6ae:	5f ad       	ldd	r21, Y+63	; 0x3f
     6b0:	29 97       	sbiw	r28, 0x09	; 9
     6b2:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     6b6:	c9 01       	movw	r24, r18
     6b8:	da 01       	movw	r26, r20
     6ba:	5c 01       	movw	r10, r24
     6bc:	6d 01       	movw	r12, r26
     6be:	c6 01       	movw	r24, r12
     6c0:	b5 01       	movw	r22, r10
     6c2:	2d 96       	adiw	r28, 0x0d	; 13
     6c4:	2c ad       	ldd	r18, Y+60	; 0x3c
     6c6:	3d ad       	ldd	r19, Y+61	; 0x3d
     6c8:	4e ad       	ldd	r20, Y+62	; 0x3e
     6ca:	5f ad       	ldd	r21, Y+63	; 0x3f
     6cc:	2d 97       	sbiw	r28, 0x0d	; 13
     6ce:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	87 01       	movw	r16, r14
     6d8:	ff 24       	eor	r15, r15
     6da:	ee 24       	eor	r14, r14
     6dc:	21 96       	adiw	r28, 0x01	; 1
     6de:	8c ad       	ldd	r24, Y+60	; 0x3c
     6e0:	9d ad       	ldd	r25, Y+61	; 0x3d
     6e2:	ae ad       	ldd	r26, Y+62	; 0x3e
     6e4:	bf ad       	ldd	r27, Y+63	; 0x3f
     6e6:	21 97       	sbiw	r28, 0x01	; 1
     6e8:	a0 70       	andi	r26, 0x00	; 0
     6ea:	b0 70       	andi	r27, 0x00	; 0
     6ec:	e8 2a       	or	r14, r24
     6ee:	f9 2a       	or	r15, r25
     6f0:	0a 2b       	or	r16, r26
     6f2:	1b 2b       	or	r17, r27
     6f4:	e2 16       	cp	r14, r18
     6f6:	f3 06       	cpc	r15, r19
     6f8:	04 07       	cpc	r16, r20
     6fa:	15 07       	cpc	r17, r21
     6fc:	c0 f4       	brcc	.+48     	; 0x72e <__divdi3+0x546>
     6fe:	08 94       	sec
     700:	a1 08       	sbc	r10, r1
     702:	b1 08       	sbc	r11, r1
     704:	c1 08       	sbc	r12, r1
     706:	d1 08       	sbc	r13, r1
     708:	e2 0c       	add	r14, r2
     70a:	f3 1c       	adc	r15, r3
     70c:	04 1d       	adc	r16, r4
     70e:	15 1d       	adc	r17, r5
     710:	e2 14       	cp	r14, r2
     712:	f3 04       	cpc	r15, r3
     714:	04 05       	cpc	r16, r4
     716:	15 05       	cpc	r17, r5
     718:	50 f0       	brcs	.+20     	; 0x72e <__divdi3+0x546>
     71a:	e2 16       	cp	r14, r18
     71c:	f3 06       	cpc	r15, r19
     71e:	04 07       	cpc	r16, r20
     720:	15 07       	cpc	r17, r21
     722:	28 f4       	brcc	.+10     	; 0x72e <__divdi3+0x546>
     724:	08 94       	sec
     726:	a1 08       	sbc	r10, r1
     728:	b1 08       	sbc	r11, r1
     72a:	c1 08       	sbc	r12, r1
     72c:	d1 08       	sbc	r13, r1
     72e:	d3 01       	movw	r26, r6
     730:	99 27       	eor	r25, r25
     732:	88 27       	eor	r24, r24
     734:	86 01       	movw	r16, r12
     736:	75 01       	movw	r14, r10
     738:	e8 2a       	or	r14, r24
     73a:	f9 2a       	or	r15, r25
     73c:	0a 2b       	or	r16, r26
     73e:	1b 2b       	or	r17, r27
     740:	25 96       	adiw	r28, 0x05	; 5
     742:	ec ae       	std	Y+60, r14	; 0x3c
     744:	fd ae       	std	Y+61, r15	; 0x3d
     746:	0e af       	std	Y+62, r16	; 0x3e
     748:	1f af       	std	Y+63, r17	; 0x3f
     74a:	25 97       	sbiw	r28, 0x05	; 5
     74c:	eb c4       	rjmp	.+2518   	; 0x1124 <__stack+0x8c5>
     74e:	21 14       	cp	r2, r1
     750:	31 04       	cpc	r3, r1
     752:	41 04       	cpc	r4, r1
     754:	51 04       	cpc	r5, r1
     756:	71 f4       	brne	.+28     	; 0x774 <__divdi3+0x58c>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     76c:	c9 01       	movw	r24, r18
     76e:	da 01       	movw	r26, r20
     770:	1c 01       	movw	r2, r24
     772:	2d 01       	movw	r4, r26
     774:	00 e0       	ldi	r16, 0x00	; 0
     776:	20 16       	cp	r2, r16
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	30 06       	cpc	r3, r16
     77c:	01 e0       	ldi	r16, 0x01	; 1
     77e:	40 06       	cpc	r4, r16
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	50 06       	cpc	r5, r16
     784:	88 f4       	brcc	.+34     	; 0x7a8 <__divdi3+0x5c0>
     786:	1f ef       	ldi	r17, 0xFF	; 255
     788:	21 16       	cp	r2, r17
     78a:	31 04       	cpc	r3, r1
     78c:	41 04       	cpc	r4, r1
     78e:	51 04       	cpc	r5, r1
     790:	31 f0       	breq	.+12     	; 0x79e <__divdi3+0x5b6>
     792:	28 f0       	brcs	.+10     	; 0x79e <__divdi3+0x5b6>
     794:	48 e0       	ldi	r20, 0x08	; 8
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <__divdi3+0x5e4>
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	12 c0       	rjmp	.+36     	; 0x7cc <__divdi3+0x5e4>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	22 16       	cp	r2, r18
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	32 06       	cpc	r3, r18
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	42 06       	cpc	r4, r18
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	52 06       	cpc	r5, r18
     7b8:	28 f0       	brcs	.+10     	; 0x7c4 <__divdi3+0x5dc>
     7ba:	48 e1       	ldi	r20, 0x18	; 24
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__divdi3+0x5e4>
     7c4:	40 e1       	ldi	r20, 0x10	; 16
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	d2 01       	movw	r26, r4
     7ce:	c1 01       	movw	r24, r2
     7d0:	04 2e       	mov	r0, r20
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__divdi3+0x5f4>
     7d4:	b6 95       	lsr	r27
     7d6:	a7 95       	ror	r26
     7d8:	97 95       	ror	r25
     7da:	87 95       	ror	r24
     7dc:	0a 94       	dec	r0
     7de:	d2 f7       	brpl	.-12     	; 0x7d4 <__divdi3+0x5ec>
     7e0:	83 59       	subi	r24, 0x93	; 147
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	dc 01       	movw	r26, r24
     7e6:	2c 91       	ld	r18, X
     7e8:	e0 e2       	ldi	r30, 0x20	; 32
     7ea:	ee 2e       	mov	r14, r30
     7ec:	f1 2c       	mov	r15, r1
     7ee:	01 2d       	mov	r16, r1
     7f0:	11 2d       	mov	r17, r1
     7f2:	d8 01       	movw	r26, r16
     7f4:	c7 01       	movw	r24, r14
     7f6:	84 1b       	sub	r24, r20
     7f8:	95 0b       	sbc	r25, r21
     7fa:	a6 0b       	sbc	r26, r22
     7fc:	b7 0b       	sbc	r27, r23
     7fe:	82 1b       	sub	r24, r18
     800:	91 09       	sbc	r25, r1
     802:	a1 09       	sbc	r26, r1
     804:	b1 09       	sbc	r27, r1
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	a1 05       	cpc	r26, r1
     80a:	b1 05       	cpc	r27, r1
     80c:	61 f4       	brne	.+24     	; 0x826 <__divdi3+0x63e>
     80e:	64 01       	movw	r12, r8
     810:	53 01       	movw	r10, r6
     812:	a2 18       	sub	r10, r2
     814:	b3 08       	sbc	r11, r3
     816:	c4 08       	sbc	r12, r4
     818:	d5 08       	sbc	r13, r5
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	63 2e       	mov	r6, r19
     81e:	71 2c       	mov	r7, r1
     820:	81 2c       	mov	r8, r1
     822:	91 2c       	mov	r9, r1
     824:	24 c1       	rjmp	.+584    	; 0xa6e <__stack+0x20f>
     826:	e3 96       	adiw	r28, 0x33	; 51
     828:	8f af       	std	Y+63, r24	; 0x3f
     82a:	e3 97       	sbiw	r28, 0x33	; 51
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__divdi3+0x650>
     830:	22 0c       	add	r2, r2
     832:	33 1c       	adc	r3, r3
     834:	44 1c       	adc	r4, r4
     836:	55 1c       	adc	r5, r5
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__divdi3+0x648>
     83c:	ee 2d       	mov	r30, r14
     83e:	e8 1b       	sub	r30, r24
     840:	64 01       	movw	r12, r8
     842:	53 01       	movw	r10, r6
     844:	0e 2e       	mov	r0, r30
     846:	04 c0       	rjmp	.+8      	; 0x850 <__divdi3+0x668>
     848:	d6 94       	lsr	r13
     84a:	c7 94       	ror	r12
     84c:	b7 94       	ror	r11
     84e:	a7 94       	ror	r10
     850:	0a 94       	dec	r0
     852:	d2 f7       	brpl	.-12     	; 0x848 <__divdi3+0x660>
     854:	a4 01       	movw	r20, r8
     856:	93 01       	movw	r18, r6
     858:	e3 96       	adiw	r28, 0x33	; 51
     85a:	0f ac       	ldd	r0, Y+63	; 0x3f
     85c:	e3 97       	sbiw	r28, 0x33	; 51
     85e:	04 c0       	rjmp	.+8      	; 0x868 <__stack+0x9>
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
     864:	44 1f       	adc	r20, r20
     866:	55 1f       	adc	r21, r21
     868:	0a 94       	dec	r0
     86a:	d2 f7       	brpl	.-12     	; 0x860 <__stack+0x1>
     86c:	21 96       	adiw	r28, 0x01	; 1
     86e:	6c ac       	ldd	r6, Y+60	; 0x3c
     870:	7d ac       	ldd	r7, Y+61	; 0x3d
     872:	8e ac       	ldd	r8, Y+62	; 0x3e
     874:	9f ac       	ldd	r9, Y+63	; 0x3f
     876:	21 97       	sbiw	r28, 0x01	; 1
     878:	0e 2e       	mov	r0, r30
     87a:	04 c0       	rjmp	.+8      	; 0x884 <__stack+0x25>
     87c:	96 94       	lsr	r9
     87e:	87 94       	ror	r8
     880:	77 94       	ror	r7
     882:	67 94       	ror	r6
     884:	0a 94       	dec	r0
     886:	d2 f7       	brpl	.-12     	; 0x87c <__stack+0x1d>
     888:	84 01       	movw	r16, r8
     88a:	73 01       	movw	r14, r6
     88c:	e2 2a       	or	r14, r18
     88e:	f3 2a       	or	r15, r19
     890:	04 2b       	or	r16, r20
     892:	15 2b       	or	r17, r21
     894:	e9 ae       	std	Y+57, r14	; 0x39
     896:	fa ae       	std	Y+58, r15	; 0x3a
     898:	0b af       	std	Y+59, r16	; 0x3b
     89a:	1c af       	std	Y+60, r17	; 0x3c
     89c:	32 01       	movw	r6, r4
     89e:	88 24       	eor	r8, r8
     8a0:	99 24       	eor	r9, r9
     8a2:	92 01       	movw	r18, r4
     8a4:	81 01       	movw	r16, r2
     8a6:	20 70       	andi	r18, 0x00	; 0
     8a8:	30 70       	andi	r19, 0x00	; 0
     8aa:	61 96       	adiw	r28, 0x11	; 17
     8ac:	0c af       	std	Y+60, r16	; 0x3c
     8ae:	1d af       	std	Y+61, r17	; 0x3d
     8b0:	2e af       	std	Y+62, r18	; 0x3e
     8b2:	3f af       	std	Y+63, r19	; 0x3f
     8b4:	61 97       	sbiw	r28, 0x11	; 17
     8b6:	c6 01       	movw	r24, r12
     8b8:	b5 01       	movw	r22, r10
     8ba:	a4 01       	movw	r20, r8
     8bc:	93 01       	movw	r18, r6
     8be:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	a4 01       	movw	r20, r8
     8cc:	93 01       	movw	r18, r6
     8ce:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     8d2:	c9 01       	movw	r24, r18
     8d4:	da 01       	movw	r26, r20
     8d6:	65 96       	adiw	r28, 0x15	; 21
     8d8:	8c af       	std	Y+60, r24	; 0x3c
     8da:	9d af       	std	Y+61, r25	; 0x3d
     8dc:	ae af       	std	Y+62, r26	; 0x3e
     8de:	bf af       	std	Y+63, r27	; 0x3f
     8e0:	65 97       	sbiw	r28, 0x15	; 21
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	61 96       	adiw	r28, 0x11	; 17
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	61 97       	sbiw	r28, 0x11	; 17
     8f2:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	a9 ac       	ldd	r10, Y+57	; 0x39
     902:	ba ac       	ldd	r11, Y+58	; 0x3a
     904:	cb ac       	ldd	r12, Y+59	; 0x3b
     906:	dc ac       	ldd	r13, Y+60	; 0x3c
     908:	c6 01       	movw	r24, r12
     90a:	aa 27       	eor	r26, r26
     90c:	bb 27       	eor	r27, r27
     90e:	5c 01       	movw	r10, r24
     910:	6d 01       	movw	r12, r26
     912:	ae 28       	or	r10, r14
     914:	bf 28       	or	r11, r15
     916:	c0 2a       	or	r12, r16
     918:	d1 2a       	or	r13, r17
     91a:	a2 16       	cp	r10, r18
     91c:	b3 06       	cpc	r11, r19
     91e:	c4 06       	cpc	r12, r20
     920:	d5 06       	cpc	r13, r21
     922:	60 f5       	brcc	.+88     	; 0x97c <__stack+0x11d>
     924:	65 96       	adiw	r28, 0x15	; 21
     926:	6c ad       	ldd	r22, Y+60	; 0x3c
     928:	7d ad       	ldd	r23, Y+61	; 0x3d
     92a:	8e ad       	ldd	r24, Y+62	; 0x3e
     92c:	9f ad       	ldd	r25, Y+63	; 0x3f
     92e:	65 97       	sbiw	r28, 0x15	; 21
     930:	61 50       	subi	r22, 0x01	; 1
     932:	70 40       	sbci	r23, 0x00	; 0
     934:	80 40       	sbci	r24, 0x00	; 0
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	65 96       	adiw	r28, 0x15	; 21
     93a:	6c af       	std	Y+60, r22	; 0x3c
     93c:	7d af       	std	Y+61, r23	; 0x3d
     93e:	8e af       	std	Y+62, r24	; 0x3e
     940:	9f af       	std	Y+63, r25	; 0x3f
     942:	65 97       	sbiw	r28, 0x15	; 21
     944:	a2 0c       	add	r10, r2
     946:	b3 1c       	adc	r11, r3
     948:	c4 1c       	adc	r12, r4
     94a:	d5 1c       	adc	r13, r5
     94c:	a2 14       	cp	r10, r2
     94e:	b3 04       	cpc	r11, r3
     950:	c4 04       	cpc	r12, r4
     952:	d5 04       	cpc	r13, r5
     954:	98 f0       	brcs	.+38     	; 0x97c <__stack+0x11d>
     956:	a2 16       	cp	r10, r18
     958:	b3 06       	cpc	r11, r19
     95a:	c4 06       	cpc	r12, r20
     95c:	d5 06       	cpc	r13, r21
     95e:	70 f4       	brcc	.+28     	; 0x97c <__stack+0x11d>
     960:	61 50       	subi	r22, 0x01	; 1
     962:	70 40       	sbci	r23, 0x00	; 0
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	65 96       	adiw	r28, 0x15	; 21
     96a:	6c af       	std	Y+60, r22	; 0x3c
     96c:	7d af       	std	Y+61, r23	; 0x3d
     96e:	8e af       	std	Y+62, r24	; 0x3e
     970:	9f af       	std	Y+63, r25	; 0x3f
     972:	65 97       	sbiw	r28, 0x15	; 21
     974:	a2 0c       	add	r10, r2
     976:	b3 1c       	adc	r11, r3
     978:	c4 1c       	adc	r12, r4
     97a:	d5 1c       	adc	r13, r5
     97c:	a2 1a       	sub	r10, r18
     97e:	b3 0a       	sbc	r11, r19
     980:	c4 0a       	sbc	r12, r20
     982:	d5 0a       	sbc	r13, r21
     984:	c6 01       	movw	r24, r12
     986:	b5 01       	movw	r22, r10
     988:	a4 01       	movw	r20, r8
     98a:	93 01       	movw	r18, r6
     98c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     990:	7b 01       	movw	r14, r22
     992:	8c 01       	movw	r16, r24
     994:	c6 01       	movw	r24, r12
     996:	b5 01       	movw	r22, r10
     998:	a4 01       	movw	r20, r8
     99a:	93 01       	movw	r18, r6
     99c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     9a0:	c9 01       	movw	r24, r18
     9a2:	da 01       	movw	r26, r20
     9a4:	3c 01       	movw	r6, r24
     9a6:	4d 01       	movw	r8, r26
     9a8:	c4 01       	movw	r24, r8
     9aa:	b3 01       	movw	r22, r6
     9ac:	61 96       	adiw	r28, 0x11	; 17
     9ae:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b0:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b2:	4e ad       	ldd	r20, Y+62	; 0x3e
     9b4:	5f ad       	ldd	r21, Y+63	; 0x3f
     9b6:	61 97       	sbiw	r28, 0x11	; 17
     9b8:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	87 01       	movw	r16, r14
     9c2:	ff 24       	eor	r15, r15
     9c4:	ee 24       	eor	r14, r14
     9c6:	89 ad       	ldd	r24, Y+57	; 0x39
     9c8:	9a ad       	ldd	r25, Y+58	; 0x3a
     9ca:	ab ad       	ldd	r26, Y+59	; 0x3b
     9cc:	bc ad       	ldd	r27, Y+60	; 0x3c
     9ce:	a0 70       	andi	r26, 0x00	; 0
     9d0:	b0 70       	andi	r27, 0x00	; 0
     9d2:	57 01       	movw	r10, r14
     9d4:	68 01       	movw	r12, r16
     9d6:	a8 2a       	or	r10, r24
     9d8:	b9 2a       	or	r11, r25
     9da:	ca 2a       	or	r12, r26
     9dc:	db 2a       	or	r13, r27
     9de:	a2 16       	cp	r10, r18
     9e0:	b3 06       	cpc	r11, r19
     9e2:	c4 06       	cpc	r12, r20
     9e4:	d5 06       	cpc	r13, r21
     9e6:	e0 f4       	brcc	.+56     	; 0xa20 <__stack+0x1c1>
     9e8:	08 94       	sec
     9ea:	61 08       	sbc	r6, r1
     9ec:	71 08       	sbc	r7, r1
     9ee:	81 08       	sbc	r8, r1
     9f0:	91 08       	sbc	r9, r1
     9f2:	a2 0c       	add	r10, r2
     9f4:	b3 1c       	adc	r11, r3
     9f6:	c4 1c       	adc	r12, r4
     9f8:	d5 1c       	adc	r13, r5
     9fa:	a2 14       	cp	r10, r2
     9fc:	b3 04       	cpc	r11, r3
     9fe:	c4 04       	cpc	r12, r4
     a00:	d5 04       	cpc	r13, r5
     a02:	70 f0       	brcs	.+28     	; 0xa20 <__stack+0x1c1>
     a04:	a2 16       	cp	r10, r18
     a06:	b3 06       	cpc	r11, r19
     a08:	c4 06       	cpc	r12, r20
     a0a:	d5 06       	cpc	r13, r21
     a0c:	48 f4       	brcc	.+18     	; 0xa20 <__stack+0x1c1>
     a0e:	08 94       	sec
     a10:	61 08       	sbc	r6, r1
     a12:	71 08       	sbc	r7, r1
     a14:	81 08       	sbc	r8, r1
     a16:	91 08       	sbc	r9, r1
     a18:	a2 0c       	add	r10, r2
     a1a:	b3 1c       	adc	r11, r3
     a1c:	c4 1c       	adc	r12, r4
     a1e:	d5 1c       	adc	r13, r5
     a20:	21 96       	adiw	r28, 0x01	; 1
     a22:	8c ad       	ldd	r24, Y+60	; 0x3c
     a24:	9d ad       	ldd	r25, Y+61	; 0x3d
     a26:	ae ad       	ldd	r26, Y+62	; 0x3e
     a28:	bf ad       	ldd	r27, Y+63	; 0x3f
     a2a:	21 97       	sbiw	r28, 0x01	; 1
     a2c:	e3 96       	adiw	r28, 0x33	; 51
     a2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     a30:	e3 97       	sbiw	r28, 0x33	; 51
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <__stack+0x1dd>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	0a 94       	dec	r0
     a3e:	d2 f7       	brpl	.-12     	; 0xa34 <__stack+0x1d5>
     a40:	21 96       	adiw	r28, 0x01	; 1
     a42:	8c af       	std	Y+60, r24	; 0x3c
     a44:	9d af       	std	Y+61, r25	; 0x3d
     a46:	ae af       	std	Y+62, r26	; 0x3e
     a48:	bf af       	std	Y+63, r27	; 0x3f
     a4a:	21 97       	sbiw	r28, 0x01	; 1
     a4c:	a2 1a       	sub	r10, r18
     a4e:	b3 0a       	sbc	r11, r19
     a50:	c4 0a       	sbc	r12, r20
     a52:	d5 0a       	sbc	r13, r21
     a54:	65 96       	adiw	r28, 0x15	; 21
     a56:	ec ac       	ldd	r14, Y+60	; 0x3c
     a58:	fd ac       	ldd	r15, Y+61	; 0x3d
     a5a:	0e ad       	ldd	r16, Y+62	; 0x3e
     a5c:	1f ad       	ldd	r17, Y+63	; 0x3f
     a5e:	65 97       	sbiw	r28, 0x15	; 21
     a60:	d7 01       	movw	r26, r14
     a62:	99 27       	eor	r25, r25
     a64:	88 27       	eor	r24, r24
     a66:	68 2a       	or	r6, r24
     a68:	79 2a       	or	r7, r25
     a6a:	8a 2a       	or	r8, r26
     a6c:	9b 2a       	or	r9, r27
     a6e:	82 01       	movw	r16, r4
     a70:	22 27       	eor	r18, r18
     a72:	33 27       	eor	r19, r19
     a74:	69 96       	adiw	r28, 0x19	; 25
     a76:	0c af       	std	Y+60, r16	; 0x3c
     a78:	1d af       	std	Y+61, r17	; 0x3d
     a7a:	2e af       	std	Y+62, r18	; 0x3e
     a7c:	3f af       	std	Y+63, r19	; 0x3f
     a7e:	69 97       	sbiw	r28, 0x19	; 25
     a80:	a2 01       	movw	r20, r4
     a82:	91 01       	movw	r18, r2
     a84:	40 70       	andi	r20, 0x00	; 0
     a86:	50 70       	andi	r21, 0x00	; 0
     a88:	6d 96       	adiw	r28, 0x1d	; 29
     a8a:	2c af       	std	Y+60, r18	; 0x3c
     a8c:	3d af       	std	Y+61, r19	; 0x3d
     a8e:	4e af       	std	Y+62, r20	; 0x3e
     a90:	5f af       	std	Y+63, r21	; 0x3f
     a92:	6d 97       	sbiw	r28, 0x1d	; 29
     a94:	c6 01       	movw	r24, r12
     a96:	b5 01       	movw	r22, r10
     a98:	69 96       	adiw	r28, 0x19	; 25
     a9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa0:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa2:	69 97       	sbiw	r28, 0x19	; 25
     aa4:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	69 96       	adiw	r28, 0x19	; 25
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	69 97       	sbiw	r28, 0x19	; 25
     abc:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     ac0:	c9 01       	movw	r24, r18
     ac2:	da 01       	movw	r26, r20
     ac4:	a1 96       	adiw	r28, 0x21	; 33
     ac6:	8c af       	std	Y+60, r24	; 0x3c
     ac8:	9d af       	std	Y+61, r25	; 0x3d
     aca:	ae af       	std	Y+62, r26	; 0x3e
     acc:	bf af       	std	Y+63, r27	; 0x3f
     ace:	a1 97       	sbiw	r28, 0x21	; 33
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	6d 96       	adiw	r28, 0x1d	; 29
     ad6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ad8:	3d ad       	ldd	r19, Y+61	; 0x3d
     ada:	4e ad       	ldd	r20, Y+62	; 0x3e
     adc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ade:	6d 97       	sbiw	r28, 0x1d	; 29
     ae0:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	87 01       	movw	r16, r14
     aea:	ff 24       	eor	r15, r15
     aec:	ee 24       	eor	r14, r14
     aee:	21 96       	adiw	r28, 0x01	; 1
     af0:	ac ac       	ldd	r10, Y+60	; 0x3c
     af2:	bd ac       	ldd	r11, Y+61	; 0x3d
     af4:	ce ac       	ldd	r12, Y+62	; 0x3e
     af6:	df ac       	ldd	r13, Y+63	; 0x3f
     af8:	21 97       	sbiw	r28, 0x01	; 1
     afa:	c6 01       	movw	r24, r12
     afc:	aa 27       	eor	r26, r26
     afe:	bb 27       	eor	r27, r27
     b00:	57 01       	movw	r10, r14
     b02:	68 01       	movw	r12, r16
     b04:	a8 2a       	or	r10, r24
     b06:	b9 2a       	or	r11, r25
     b08:	ca 2a       	or	r12, r26
     b0a:	db 2a       	or	r13, r27
     b0c:	a2 16       	cp	r10, r18
     b0e:	b3 06       	cpc	r11, r19
     b10:	c4 06       	cpc	r12, r20
     b12:	d5 06       	cpc	r13, r21
     b14:	60 f5       	brcc	.+88     	; 0xb6e <__stack+0x30f>
     b16:	a1 96       	adiw	r28, 0x21	; 33
     b18:	6c ad       	ldd	r22, Y+60	; 0x3c
     b1a:	7d ad       	ldd	r23, Y+61	; 0x3d
     b1c:	8e ad       	ldd	r24, Y+62	; 0x3e
     b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     b20:	a1 97       	sbiw	r28, 0x21	; 33
     b22:	61 50       	subi	r22, 0x01	; 1
     b24:	70 40       	sbci	r23, 0x00	; 0
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	a1 96       	adiw	r28, 0x21	; 33
     b2c:	6c af       	std	Y+60, r22	; 0x3c
     b2e:	7d af       	std	Y+61, r23	; 0x3d
     b30:	8e af       	std	Y+62, r24	; 0x3e
     b32:	9f af       	std	Y+63, r25	; 0x3f
     b34:	a1 97       	sbiw	r28, 0x21	; 33
     b36:	a2 0c       	add	r10, r2
     b38:	b3 1c       	adc	r11, r3
     b3a:	c4 1c       	adc	r12, r4
     b3c:	d5 1c       	adc	r13, r5
     b3e:	a2 14       	cp	r10, r2
     b40:	b3 04       	cpc	r11, r3
     b42:	c4 04       	cpc	r12, r4
     b44:	d5 04       	cpc	r13, r5
     b46:	98 f0       	brcs	.+38     	; 0xb6e <__stack+0x30f>
     b48:	a2 16       	cp	r10, r18
     b4a:	b3 06       	cpc	r11, r19
     b4c:	c4 06       	cpc	r12, r20
     b4e:	d5 06       	cpc	r13, r21
     b50:	70 f4       	brcc	.+28     	; 0xb6e <__stack+0x30f>
     b52:	61 50       	subi	r22, 0x01	; 1
     b54:	70 40       	sbci	r23, 0x00	; 0
     b56:	80 40       	sbci	r24, 0x00	; 0
     b58:	90 40       	sbci	r25, 0x00	; 0
     b5a:	a1 96       	adiw	r28, 0x21	; 33
     b5c:	6c af       	std	Y+60, r22	; 0x3c
     b5e:	7d af       	std	Y+61, r23	; 0x3d
     b60:	8e af       	std	Y+62, r24	; 0x3e
     b62:	9f af       	std	Y+63, r25	; 0x3f
     b64:	a1 97       	sbiw	r28, 0x21	; 33
     b66:	a2 0c       	add	r10, r2
     b68:	b3 1c       	adc	r11, r3
     b6a:	c4 1c       	adc	r12, r4
     b6c:	d5 1c       	adc	r13, r5
     b6e:	a2 1a       	sub	r10, r18
     b70:	b3 0a       	sbc	r11, r19
     b72:	c4 0a       	sbc	r12, r20
     b74:	d5 0a       	sbc	r13, r21
     b76:	c6 01       	movw	r24, r12
     b78:	b5 01       	movw	r22, r10
     b7a:	69 96       	adiw	r28, 0x19	; 25
     b7c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b7e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b80:	4e ad       	ldd	r20, Y+62	; 0x3e
     b82:	5f ad       	ldd	r21, Y+63	; 0x3f
     b84:	69 97       	sbiw	r28, 0x19	; 25
     b86:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     b8a:	7b 01       	movw	r14, r22
     b8c:	8c 01       	movw	r16, r24
     b8e:	c6 01       	movw	r24, r12
     b90:	b5 01       	movw	r22, r10
     b92:	69 96       	adiw	r28, 0x19	; 25
     b94:	2c ad       	ldd	r18, Y+60	; 0x3c
     b96:	3d ad       	ldd	r19, Y+61	; 0x3d
     b98:	4e ad       	ldd	r20, Y+62	; 0x3e
     b9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b9c:	69 97       	sbiw	r28, 0x19	; 25
     b9e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     ba2:	c9 01       	movw	r24, r18
     ba4:	da 01       	movw	r26, r20
     ba6:	5c 01       	movw	r10, r24
     ba8:	6d 01       	movw	r12, r26
     baa:	c6 01       	movw	r24, r12
     bac:	b5 01       	movw	r22, r10
     bae:	6d 96       	adiw	r28, 0x1d	; 29
     bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bb8:	6d 97       	sbiw	r28, 0x1d	; 29
     bba:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	87 01       	movw	r16, r14
     bc4:	ff 24       	eor	r15, r15
     bc6:	ee 24       	eor	r14, r14
     bc8:	21 96       	adiw	r28, 0x01	; 1
     bca:	8c ad       	ldd	r24, Y+60	; 0x3c
     bcc:	9d ad       	ldd	r25, Y+61	; 0x3d
     bce:	ae ad       	ldd	r26, Y+62	; 0x3e
     bd0:	bf ad       	ldd	r27, Y+63	; 0x3f
     bd2:	21 97       	sbiw	r28, 0x01	; 1
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	e8 2a       	or	r14, r24
     bda:	f9 2a       	or	r15, r25
     bdc:	0a 2b       	or	r16, r26
     bde:	1b 2b       	or	r17, r27
     be0:	e2 16       	cp	r14, r18
     be2:	f3 06       	cpc	r15, r19
     be4:	04 07       	cpc	r16, r20
     be6:	15 07       	cpc	r17, r21
     be8:	c0 f4       	brcc	.+48     	; 0xc1a <__stack+0x3bb>
     bea:	08 94       	sec
     bec:	a1 08       	sbc	r10, r1
     bee:	b1 08       	sbc	r11, r1
     bf0:	c1 08       	sbc	r12, r1
     bf2:	d1 08       	sbc	r13, r1
     bf4:	e2 0c       	add	r14, r2
     bf6:	f3 1c       	adc	r15, r3
     bf8:	04 1d       	adc	r16, r4
     bfa:	15 1d       	adc	r17, r5
     bfc:	e2 14       	cp	r14, r2
     bfe:	f3 04       	cpc	r15, r3
     c00:	04 05       	cpc	r16, r4
     c02:	15 05       	cpc	r17, r5
     c04:	50 f0       	brcs	.+20     	; 0xc1a <__stack+0x3bb>
     c06:	e2 16       	cp	r14, r18
     c08:	f3 06       	cpc	r15, r19
     c0a:	04 07       	cpc	r16, r20
     c0c:	15 07       	cpc	r17, r21
     c0e:	28 f4       	brcc	.+10     	; 0xc1a <__stack+0x3bb>
     c10:	08 94       	sec
     c12:	a1 08       	sbc	r10, r1
     c14:	b1 08       	sbc	r11, r1
     c16:	c1 08       	sbc	r12, r1
     c18:	d1 08       	sbc	r13, r1
     c1a:	a1 96       	adiw	r28, 0x21	; 33
     c1c:	ec ac       	ldd	r14, Y+60	; 0x3c
     c1e:	fd ac       	ldd	r15, Y+61	; 0x3d
     c20:	0e ad       	ldd	r16, Y+62	; 0x3e
     c22:	1f ad       	ldd	r17, Y+63	; 0x3f
     c24:	a1 97       	sbiw	r28, 0x21	; 33
     c26:	d7 01       	movw	r26, r14
     c28:	99 27       	eor	r25, r25
     c2a:	88 27       	eor	r24, r24
     c2c:	96 01       	movw	r18, r12
     c2e:	85 01       	movw	r16, r10
     c30:	08 2b       	or	r16, r24
     c32:	19 2b       	or	r17, r25
     c34:	2a 2b       	or	r18, r26
     c36:	3b 2b       	or	r19, r27
     c38:	25 96       	adiw	r28, 0x05	; 5
     c3a:	0c af       	std	Y+60, r16	; 0x3c
     c3c:	1d af       	std	Y+61, r17	; 0x3d
     c3e:	2e af       	std	Y+62, r18	; 0x3e
     c40:	3f af       	std	Y+63, r19	; 0x3f
     c42:	25 97       	sbiw	r28, 0x05	; 5
     c44:	72 c2       	rjmp	.+1252   	; 0x112a <__stack+0x8cb>
     c46:	6e 14       	cp	r6, r14
     c48:	7f 04       	cpc	r7, r15
     c4a:	80 06       	cpc	r8, r16
     c4c:	91 06       	cpc	r9, r17
     c4e:	08 f4       	brcc	.+2      	; 0xc52 <__stack+0x3f3>
     c50:	5f c2       	rjmp	.+1214   	; 0x1110 <__stack+0x8b1>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	e2 16       	cp	r14, r18
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	f2 06       	cpc	r15, r18
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	02 07       	cpc	r16, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	12 07       	cpc	r17, r18
     c62:	88 f4       	brcc	.+34     	; 0xc86 <__stack+0x427>
     c64:	3f ef       	ldi	r19, 0xFF	; 255
     c66:	e3 16       	cp	r14, r19
     c68:	f1 04       	cpc	r15, r1
     c6a:	01 05       	cpc	r16, r1
     c6c:	11 05       	cpc	r17, r1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <__stack+0x41d>
     c70:	28 f0       	brcs	.+10     	; 0xc7c <__stack+0x41d>
     c72:	48 e0       	ldi	r20, 0x08	; 8
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	17 c0       	rjmp	.+46     	; 0xcaa <__stack+0x44b>
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	12 c0       	rjmp	.+36     	; 0xcaa <__stack+0x44b>
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	e4 16       	cp	r14, r20
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	f4 06       	cpc	r15, r20
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	04 07       	cpc	r16, r20
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	14 07       	cpc	r17, r20
     c96:	28 f0       	brcs	.+10     	; 0xca2 <__stack+0x443>
     c98:	48 e1       	ldi	r20, 0x18	; 24
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <__stack+0x44b>
     ca2:	40 e1       	ldi	r20, 0x10	; 16
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	d8 01       	movw	r26, r16
     cac:	c7 01       	movw	r24, r14
     cae:	04 2e       	mov	r0, r20
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <__stack+0x45b>
     cb2:	b6 95       	lsr	r27
     cb4:	a7 95       	ror	r26
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	0a 94       	dec	r0
     cbc:	d2 f7       	brpl	.-12     	; 0xcb2 <__stack+0x453>
     cbe:	83 59       	subi	r24, 0x93	; 147
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	dc 01       	movw	r26, r24
     cc4:	2c 91       	ld	r18, X
     cc6:	30 e2       	ldi	r19, 0x20	; 32
     cc8:	a3 2e       	mov	r10, r19
     cca:	b1 2c       	mov	r11, r1
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
     cd0:	d6 01       	movw	r26, r12
     cd2:	c5 01       	movw	r24, r10
     cd4:	84 1b       	sub	r24, r20
     cd6:	95 0b       	sbc	r25, r21
     cd8:	a6 0b       	sbc	r26, r22
     cda:	b7 0b       	sbc	r27, r23
     cdc:	82 1b       	sub	r24, r18
     cde:	91 09       	sbc	r25, r1
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	a1 05       	cpc	r26, r1
     ce8:	b1 05       	cpc	r27, r1
     cea:	99 f4       	brne	.+38     	; 0xd12 <__stack+0x4b3>
     cec:	e6 14       	cp	r14, r6
     cee:	f7 04       	cpc	r15, r7
     cf0:	08 05       	cpc	r16, r8
     cf2:	19 05       	cpc	r17, r9
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <__stack+0x499>
     cf6:	fe c1       	rjmp	.+1020   	; 0x10f4 <__stack+0x895>
     cf8:	21 96       	adiw	r28, 0x01	; 1
     cfa:	6c ac       	ldd	r6, Y+60	; 0x3c
     cfc:	7d ac       	ldd	r7, Y+61	; 0x3d
     cfe:	8e ac       	ldd	r8, Y+62	; 0x3e
     d00:	9f ac       	ldd	r9, Y+63	; 0x3f
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	62 14       	cp	r6, r2
     d06:	73 04       	cpc	r7, r3
     d08:	84 04       	cpc	r8, r4
     d0a:	95 04       	cpc	r9, r5
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <__stack+0x4b1>
     d0e:	f2 c1       	rjmp	.+996    	; 0x10f4 <__stack+0x895>
     d10:	ff c1       	rjmp	.+1022   	; 0x1110 <__stack+0x8b1>
     d12:	e2 96       	adiw	r28, 0x32	; 50
     d14:	8f af       	std	Y+63, r24	; 0x3f
     d16:	e2 97       	sbiw	r28, 0x32	; 50
     d18:	08 2e       	mov	r0, r24
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__stack+0x4c5>
     d1c:	ee 0c       	add	r14, r14
     d1e:	ff 1c       	adc	r15, r15
     d20:	00 1f       	adc	r16, r16
     d22:	11 1f       	adc	r17, r17
     d24:	0a 94       	dec	r0
     d26:	d2 f7       	brpl	.-12     	; 0xd1c <__stack+0x4bd>
     d28:	6a 2d       	mov	r22, r10
     d2a:	68 1b       	sub	r22, r24
     d2c:	d2 01       	movw	r26, r4
     d2e:	c1 01       	movw	r24, r2
     d30:	06 2e       	mov	r0, r22
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <__stack+0x4dd>
     d34:	b6 95       	lsr	r27
     d36:	a7 95       	ror	r26
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	0a 94       	dec	r0
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <__stack+0x4d5>
     d40:	5c 01       	movw	r10, r24
     d42:	6d 01       	movw	r12, r26
     d44:	ae 28       	or	r10, r14
     d46:	bf 28       	or	r11, r15
     d48:	c0 2a       	or	r12, r16
     d4a:	d1 2a       	or	r13, r17
     d4c:	ad aa       	std	Y+53, r10	; 0x35
     d4e:	be aa       	std	Y+54, r11	; 0x36
     d50:	cf aa       	std	Y+55, r12	; 0x37
     d52:	d8 ae       	std	Y+56, r13	; 0x38
     d54:	72 01       	movw	r14, r4
     d56:	61 01       	movw	r12, r2
     d58:	e2 96       	adiw	r28, 0x32	; 50
     d5a:	0f ac       	ldd	r0, Y+63	; 0x3f
     d5c:	e2 97       	sbiw	r28, 0x32	; 50
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__stack+0x509>
     d60:	cc 0c       	add	r12, r12
     d62:	dd 1c       	adc	r13, r13
     d64:	ee 1c       	adc	r14, r14
     d66:	ff 1c       	adc	r15, r15
     d68:	0a 94       	dec	r0
     d6a:	d2 f7       	brpl	.-12     	; 0xd60 <__stack+0x501>
     d6c:	c9 aa       	std	Y+49, r12	; 0x31
     d6e:	da aa       	std	Y+50, r13	; 0x32
     d70:	eb aa       	std	Y+51, r14	; 0x33
     d72:	fc aa       	std	Y+52, r15	; 0x34
     d74:	64 01       	movw	r12, r8
     d76:	53 01       	movw	r10, r6
     d78:	06 2e       	mov	r0, r22
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <__stack+0x525>
     d7c:	d6 94       	lsr	r13
     d7e:	c7 94       	ror	r12
     d80:	b7 94       	ror	r11
     d82:	a7 94       	ror	r10
     d84:	0a 94       	dec	r0
     d86:	d2 f7       	brpl	.-12     	; 0xd7c <__stack+0x51d>
     d88:	d4 01       	movw	r26, r8
     d8a:	c3 01       	movw	r24, r6
     d8c:	e2 96       	adiw	r28, 0x32	; 50
     d8e:	0f ac       	ldd	r0, Y+63	; 0x3f
     d90:	e2 97       	sbiw	r28, 0x32	; 50
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__stack+0x53d>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	aa 1f       	adc	r26, r26
     d9a:	bb 1f       	adc	r27, r27
     d9c:	0a 94       	dec	r0
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <__stack+0x535>
     da0:	21 96       	adiw	r28, 0x01	; 1
     da2:	ec ac       	ldd	r14, Y+60	; 0x3c
     da4:	fd ac       	ldd	r15, Y+61	; 0x3d
     da6:	0e ad       	ldd	r16, Y+62	; 0x3e
     da8:	1f ad       	ldd	r17, Y+63	; 0x3f
     daa:	21 97       	sbiw	r28, 0x01	; 1
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__stack+0x557>
     dae:	16 95       	lsr	r17
     db0:	07 95       	ror	r16
     db2:	f7 94       	ror	r15
     db4:	e7 94       	ror	r14
     db6:	6a 95       	dec	r22
     db8:	d2 f7       	brpl	.-12     	; 0xdae <__stack+0x54f>
     dba:	37 01       	movw	r6, r14
     dbc:	48 01       	movw	r8, r16
     dbe:	68 2a       	or	r6, r24
     dc0:	79 2a       	or	r7, r25
     dc2:	8a 2a       	or	r8, r26
     dc4:	9b 2a       	or	r9, r27
     dc6:	6d a6       	std	Y+45, r6	; 0x2d
     dc8:	7e a6       	std	Y+46, r7	; 0x2e
     dca:	8f a6       	std	Y+47, r8	; 0x2f
     dcc:	98 aa       	std	Y+48, r9	; 0x30
     dce:	ed a8       	ldd	r14, Y+53	; 0x35
     dd0:	fe a8       	ldd	r15, Y+54	; 0x36
     dd2:	0f a9       	ldd	r16, Y+55	; 0x37
     dd4:	18 ad       	ldd	r17, Y+56	; 0x38
     dd6:	38 01       	movw	r6, r16
     dd8:	88 24       	eor	r8, r8
     dda:	99 24       	eor	r9, r9
     ddc:	98 01       	movw	r18, r16
     dde:	87 01       	movw	r16, r14
     de0:	20 70       	andi	r18, 0x00	; 0
     de2:	30 70       	andi	r19, 0x00	; 0
     de4:	a5 96       	adiw	r28, 0x25	; 37
     de6:	0c af       	std	Y+60, r16	; 0x3c
     de8:	1d af       	std	Y+61, r17	; 0x3d
     dea:	2e af       	std	Y+62, r18	; 0x3e
     dec:	3f af       	std	Y+63, r19	; 0x3f
     dee:	a5 97       	sbiw	r28, 0x25	; 37
     df0:	c6 01       	movw	r24, r12
     df2:	b5 01       	movw	r22, r10
     df4:	a4 01       	movw	r20, r8
     df6:	93 01       	movw	r18, r6
     df8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     dfc:	7b 01       	movw	r14, r22
     dfe:	8c 01       	movw	r16, r24
     e00:	c6 01       	movw	r24, r12
     e02:	b5 01       	movw	r22, r10
     e04:	a4 01       	movw	r20, r8
     e06:	93 01       	movw	r18, r6
     e08:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     e0c:	c9 01       	movw	r24, r18
     e0e:	da 01       	movw	r26, r20
     e10:	1c 01       	movw	r2, r24
     e12:	2d 01       	movw	r4, r26
     e14:	c2 01       	movw	r24, r4
     e16:	b1 01       	movw	r22, r2
     e18:	a5 96       	adiw	r28, 0x25	; 37
     e1a:	2c ad       	ldd	r18, Y+60	; 0x3c
     e1c:	3d ad       	ldd	r19, Y+61	; 0x3d
     e1e:	4e ad       	ldd	r20, Y+62	; 0x3e
     e20:	5f ad       	ldd	r21, Y+63	; 0x3f
     e22:	a5 97       	sbiw	r28, 0x25	; 37
     e24:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	87 01       	movw	r16, r14
     e2e:	ff 24       	eor	r15, r15
     e30:	ee 24       	eor	r14, r14
     e32:	ad a4       	ldd	r10, Y+45	; 0x2d
     e34:	be a4       	ldd	r11, Y+46	; 0x2e
     e36:	cf a4       	ldd	r12, Y+47	; 0x2f
     e38:	d8 a8       	ldd	r13, Y+48	; 0x30
     e3a:	c6 01       	movw	r24, r12
     e3c:	aa 27       	eor	r26, r26
     e3e:	bb 27       	eor	r27, r27
     e40:	57 01       	movw	r10, r14
     e42:	68 01       	movw	r12, r16
     e44:	a8 2a       	or	r10, r24
     e46:	b9 2a       	or	r11, r25
     e48:	ca 2a       	or	r12, r26
     e4a:	db 2a       	or	r13, r27
     e4c:	a2 16       	cp	r10, r18
     e4e:	b3 06       	cpc	r11, r19
     e50:	c4 06       	cpc	r12, r20
     e52:	d5 06       	cpc	r13, r21
     e54:	00 f5       	brcc	.+64     	; 0xe96 <__stack+0x637>
     e56:	08 94       	sec
     e58:	21 08       	sbc	r2, r1
     e5a:	31 08       	sbc	r3, r1
     e5c:	41 08       	sbc	r4, r1
     e5e:	51 08       	sbc	r5, r1
     e60:	ed a8       	ldd	r14, Y+53	; 0x35
     e62:	fe a8       	ldd	r15, Y+54	; 0x36
     e64:	0f a9       	ldd	r16, Y+55	; 0x37
     e66:	18 ad       	ldd	r17, Y+56	; 0x38
     e68:	ae 0c       	add	r10, r14
     e6a:	bf 1c       	adc	r11, r15
     e6c:	c0 1e       	adc	r12, r16
     e6e:	d1 1e       	adc	r13, r17
     e70:	ae 14       	cp	r10, r14
     e72:	bf 04       	cpc	r11, r15
     e74:	c0 06       	cpc	r12, r16
     e76:	d1 06       	cpc	r13, r17
     e78:	70 f0       	brcs	.+28     	; 0xe96 <__stack+0x637>
     e7a:	a2 16       	cp	r10, r18
     e7c:	b3 06       	cpc	r11, r19
     e7e:	c4 06       	cpc	r12, r20
     e80:	d5 06       	cpc	r13, r21
     e82:	48 f4       	brcc	.+18     	; 0xe96 <__stack+0x637>
     e84:	08 94       	sec
     e86:	21 08       	sbc	r2, r1
     e88:	31 08       	sbc	r3, r1
     e8a:	41 08       	sbc	r4, r1
     e8c:	51 08       	sbc	r5, r1
     e8e:	ae 0c       	add	r10, r14
     e90:	bf 1c       	adc	r11, r15
     e92:	c0 1e       	adc	r12, r16
     e94:	d1 1e       	adc	r13, r17
     e96:	a2 1a       	sub	r10, r18
     e98:	b3 0a       	sbc	r11, r19
     e9a:	c4 0a       	sbc	r12, r20
     e9c:	d5 0a       	sbc	r13, r21
     e9e:	c6 01       	movw	r24, r12
     ea0:	b5 01       	movw	r22, r10
     ea2:	a4 01       	movw	r20, r8
     ea4:	93 01       	movw	r18, r6
     ea6:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     eaa:	7b 01       	movw	r14, r22
     eac:	8c 01       	movw	r16, r24
     eae:	c6 01       	movw	r24, r12
     eb0:	b5 01       	movw	r22, r10
     eb2:	a4 01       	movw	r20, r8
     eb4:	93 01       	movw	r18, r6
     eb6:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
     eba:	c9 01       	movw	r24, r18
     ebc:	da 01       	movw	r26, r20
     ebe:	3c 01       	movw	r6, r24
     ec0:	4d 01       	movw	r8, r26
     ec2:	c4 01       	movw	r24, r8
     ec4:	b3 01       	movw	r22, r6
     ec6:	a5 96       	adiw	r28, 0x25	; 37
     ec8:	2c ad       	ldd	r18, Y+60	; 0x3c
     eca:	3d ad       	ldd	r19, Y+61	; 0x3d
     ecc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ece:	5f ad       	ldd	r21, Y+63	; 0x3f
     ed0:	a5 97       	sbiw	r28, 0x25	; 37
     ed2:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	87 01       	movw	r16, r14
     edc:	ff 24       	eor	r15, r15
     ede:	ee 24       	eor	r14, r14
     ee0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee4:	af a5       	ldd	r26, Y+47	; 0x2f
     ee6:	b8 a9       	ldd	r27, Y+48	; 0x30
     ee8:	a0 70       	andi	r26, 0x00	; 0
     eea:	b0 70       	andi	r27, 0x00	; 0
     eec:	57 01       	movw	r10, r14
     eee:	68 01       	movw	r12, r16
     ef0:	a8 2a       	or	r10, r24
     ef2:	b9 2a       	or	r11, r25
     ef4:	ca 2a       	or	r12, r26
     ef6:	db 2a       	or	r13, r27
     ef8:	a2 16       	cp	r10, r18
     efa:	b3 06       	cpc	r11, r19
     efc:	c4 06       	cpc	r12, r20
     efe:	d5 06       	cpc	r13, r21
     f00:	00 f5       	brcc	.+64     	; 0xf42 <__stack+0x6e3>
     f02:	08 94       	sec
     f04:	61 08       	sbc	r6, r1
     f06:	71 08       	sbc	r7, r1
     f08:	81 08       	sbc	r8, r1
     f0a:	91 08       	sbc	r9, r1
     f0c:	6d a9       	ldd	r22, Y+53	; 0x35
     f0e:	7e a9       	ldd	r23, Y+54	; 0x36
     f10:	8f a9       	ldd	r24, Y+55	; 0x37
     f12:	98 ad       	ldd	r25, Y+56	; 0x38
     f14:	a6 0e       	add	r10, r22
     f16:	b7 1e       	adc	r11, r23
     f18:	c8 1e       	adc	r12, r24
     f1a:	d9 1e       	adc	r13, r25
     f1c:	a6 16       	cp	r10, r22
     f1e:	b7 06       	cpc	r11, r23
     f20:	c8 06       	cpc	r12, r24
     f22:	d9 06       	cpc	r13, r25
     f24:	70 f0       	brcs	.+28     	; 0xf42 <__stack+0x6e3>
     f26:	a2 16       	cp	r10, r18
     f28:	b3 06       	cpc	r11, r19
     f2a:	c4 06       	cpc	r12, r20
     f2c:	d5 06       	cpc	r13, r21
     f2e:	48 f4       	brcc	.+18     	; 0xf42 <__stack+0x6e3>
     f30:	08 94       	sec
     f32:	61 08       	sbc	r6, r1
     f34:	71 08       	sbc	r7, r1
     f36:	81 08       	sbc	r8, r1
     f38:	91 08       	sbc	r9, r1
     f3a:	a6 0e       	add	r10, r22
     f3c:	b7 1e       	adc	r11, r23
     f3e:	c8 1e       	adc	r12, r24
     f40:	d9 1e       	adc	r13, r25
     f42:	d6 01       	movw	r26, r12
     f44:	c5 01       	movw	r24, r10
     f46:	82 1b       	sub	r24, r18
     f48:	93 0b       	sbc	r25, r19
     f4a:	a4 0b       	sbc	r26, r20
     f4c:	b5 0b       	sbc	r27, r21
     f4e:	89 a7       	std	Y+41, r24	; 0x29
     f50:	9a a7       	std	Y+42, r25	; 0x2a
     f52:	ab a7       	std	Y+43, r26	; 0x2b
     f54:	bc a7       	std	Y+44, r27	; 0x2c
     f56:	d1 01       	movw	r26, r2
     f58:	99 27       	eor	r25, r25
     f5a:	88 27       	eor	r24, r24
     f5c:	64 01       	movw	r12, r8
     f5e:	53 01       	movw	r10, r6
     f60:	a8 2a       	or	r10, r24
     f62:	b9 2a       	or	r11, r25
     f64:	ca 2a       	or	r12, r26
     f66:	db 2a       	or	r13, r27
     f68:	25 96       	adiw	r28, 0x05	; 5
     f6a:	ac ae       	std	Y+60, r10	; 0x3c
     f6c:	bd ae       	std	Y+61, r11	; 0x3d
     f6e:	ce ae       	std	Y+62, r12	; 0x3e
     f70:	df ae       	std	Y+63, r13	; 0x3f
     f72:	25 97       	sbiw	r28, 0x05	; 5
     f74:	86 01       	movw	r16, r12
     f76:	75 01       	movw	r14, r10
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	e2 22       	and	r14, r18
     f82:	f3 22       	and	r15, r19
     f84:	04 23       	and	r16, r20
     f86:	15 23       	and	r17, r21
     f88:	a6 01       	movw	r20, r12
     f8a:	66 27       	eor	r22, r22
     f8c:	77 27       	eor	r23, r23
     f8e:	ad 96       	adiw	r28, 0x2d	; 45
     f90:	4c af       	std	Y+60, r20	; 0x3c
     f92:	5d af       	std	Y+61, r21	; 0x3d
     f94:	6e af       	std	Y+62, r22	; 0x3e
     f96:	7f af       	std	Y+63, r23	; 0x3f
     f98:	ad 97       	sbiw	r28, 0x2d	; 45
     f9a:	a9 a8       	ldd	r10, Y+49	; 0x31
     f9c:	ba a8       	ldd	r11, Y+50	; 0x32
     f9e:	cb a8       	ldd	r12, Y+51	; 0x33
     fa0:	dc a8       	ldd	r13, Y+52	; 0x34
     fa2:	6f ef       	ldi	r22, 0xFF	; 255
     fa4:	7f ef       	ldi	r23, 0xFF	; 255
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a6 22       	and	r10, r22
     fac:	b7 22       	and	r11, r23
     fae:	c8 22       	and	r12, r24
     fb0:	d9 22       	and	r13, r25
     fb2:	89 a9       	ldd	r24, Y+49	; 0x31
     fb4:	9a a9       	ldd	r25, Y+50	; 0x32
     fb6:	ab a9       	ldd	r26, Y+51	; 0x33
     fb8:	bc a9       	ldd	r27, Y+52	; 0x34
     fba:	1d 01       	movw	r2, r26
     fbc:	44 24       	eor	r4, r4
     fbe:	55 24       	eor	r5, r5
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	a6 01       	movw	r20, r12
     fc6:	95 01       	movw	r18, r10
     fc8:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     fcc:	a9 96       	adiw	r28, 0x29	; 41
     fce:	6c af       	std	Y+60, r22	; 0x3c
     fd0:	7d af       	std	Y+61, r23	; 0x3d
     fd2:	8e af       	std	Y+62, r24	; 0x3e
     fd4:	9f af       	std	Y+63, r25	; 0x3f
     fd6:	a9 97       	sbiw	r28, 0x29	; 41
     fd8:	c8 01       	movw	r24, r16
     fda:	b7 01       	movw	r22, r14
     fdc:	a2 01       	movw	r20, r4
     fde:	91 01       	movw	r18, r2
     fe0:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     fe4:	3b 01       	movw	r6, r22
     fe6:	4c 01       	movw	r8, r24
     fe8:	ad 96       	adiw	r28, 0x2d	; 45
     fea:	6c ad       	ldd	r22, Y+60	; 0x3c
     fec:	7d ad       	ldd	r23, Y+61	; 0x3d
     fee:	8e ad       	ldd	r24, Y+62	; 0x3e
     ff0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ff2:	ad 97       	sbiw	r28, 0x2d	; 45
     ff4:	a6 01       	movw	r20, r12
     ff6:	95 01       	movw	r18, r10
     ff8:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
     ffc:	7b 01       	movw	r14, r22
     ffe:	8c 01       	movw	r16, r24
    1000:	ad 96       	adiw	r28, 0x2d	; 45
    1002:	6c ad       	ldd	r22, Y+60	; 0x3c
    1004:	7d ad       	ldd	r23, Y+61	; 0x3d
    1006:	8e ad       	ldd	r24, Y+62	; 0x3e
    1008:	9f ad       	ldd	r25, Y+63	; 0x3f
    100a:	ad 97       	sbiw	r28, 0x2d	; 45
    100c:	a2 01       	movw	r20, r4
    100e:	91 01       	movw	r18, r2
    1010:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1014:	5b 01       	movw	r10, r22
    1016:	6c 01       	movw	r12, r24
    1018:	a8 01       	movw	r20, r16
    101a:	97 01       	movw	r18, r14
    101c:	26 0d       	add	r18, r6
    101e:	37 1d       	adc	r19, r7
    1020:	48 1d       	adc	r20, r8
    1022:	59 1d       	adc	r21, r9
    1024:	a9 96       	adiw	r28, 0x29	; 41
    1026:	6c ac       	ldd	r6, Y+60	; 0x3c
    1028:	7d ac       	ldd	r7, Y+61	; 0x3d
    102a:	8e ac       	ldd	r8, Y+62	; 0x3e
    102c:	9f ac       	ldd	r9, Y+63	; 0x3f
    102e:	a9 97       	sbiw	r28, 0x29	; 41
    1030:	c4 01       	movw	r24, r8
    1032:	aa 27       	eor	r26, r26
    1034:	bb 27       	eor	r27, r27
    1036:	28 0f       	add	r18, r24
    1038:	39 1f       	adc	r19, r25
    103a:	4a 1f       	adc	r20, r26
    103c:	5b 1f       	adc	r21, r27
    103e:	2e 15       	cp	r18, r14
    1040:	3f 05       	cpc	r19, r15
    1042:	40 07       	cpc	r20, r16
    1044:	51 07       	cpc	r21, r17
    1046:	48 f4       	brcc	.+18     	; 0x105a <__stack+0x7fb>
    1048:	e1 2c       	mov	r14, r1
    104a:	f1 2c       	mov	r15, r1
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	06 2f       	mov	r16, r22
    1050:	11 2d       	mov	r17, r1
    1052:	ae 0c       	add	r10, r14
    1054:	bf 1c       	adc	r11, r15
    1056:	c0 1e       	adc	r12, r16
    1058:	d1 1e       	adc	r13, r17
    105a:	ca 01       	movw	r24, r20
    105c:	aa 27       	eor	r26, r26
    105e:	bb 27       	eor	r27, r27
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	6a 0d       	add	r22, r10
    1066:	7b 1d       	adc	r23, r11
    1068:	8c 1d       	adc	r24, r12
    106a:	9d 1d       	adc	r25, r13
    106c:	69 a4       	ldd	r6, Y+41	; 0x29
    106e:	7a a4       	ldd	r7, Y+42	; 0x2a
    1070:	8b a4       	ldd	r8, Y+43	; 0x2b
    1072:	9c a4       	ldd	r9, Y+44	; 0x2c
    1074:	66 16       	cp	r6, r22
    1076:	77 06       	cpc	r7, r23
    1078:	88 06       	cpc	r8, r24
    107a:	99 06       	cpc	r9, r25
    107c:	50 f1       	brcs	.+84     	; 0x10d2 <__stack+0x873>
    107e:	66 15       	cp	r22, r6
    1080:	77 05       	cpc	r23, r7
    1082:	88 05       	cpc	r24, r8
    1084:	99 05       	cpc	r25, r9
    1086:	09 f0       	breq	.+2      	; 0x108a <__stack+0x82b>
    1088:	4d c0       	rjmp	.+154    	; 0x1124 <__stack+0x8c5>
    108a:	d9 01       	movw	r26, r18
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	a9 96       	adiw	r28, 0x29	; 41
    1092:	2c ad       	ldd	r18, Y+60	; 0x3c
    1094:	3d ad       	ldd	r19, Y+61	; 0x3d
    1096:	4e ad       	ldd	r20, Y+62	; 0x3e
    1098:	5f ad       	ldd	r21, Y+63	; 0x3f
    109a:	a9 97       	sbiw	r28, 0x29	; 41
    109c:	40 70       	andi	r20, 0x00	; 0
    109e:	50 70       	andi	r21, 0x00	; 0
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	a4 1f       	adc	r26, r20
    10a6:	b5 1f       	adc	r27, r21
    10a8:	21 96       	adiw	r28, 0x01	; 1
    10aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    10ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    10ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    10b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    10b2:	21 97       	sbiw	r28, 0x01	; 1
    10b4:	e2 96       	adiw	r28, 0x32	; 50
    10b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    10b8:	e2 97       	sbiw	r28, 0x32	; 50
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <__stack+0x865>
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	44 1f       	adc	r20, r20
    10c2:	55 1f       	adc	r21, r21
    10c4:	0a 94       	dec	r0
    10c6:	d2 f7       	brpl	.-12     	; 0x10bc <__stack+0x85d>
    10c8:	28 17       	cp	r18, r24
    10ca:	39 07       	cpc	r19, r25
    10cc:	4a 07       	cpc	r20, r26
    10ce:	5b 07       	cpc	r21, r27
    10d0:	48 f5       	brcc	.+82     	; 0x1124 <__stack+0x8c5>
    10d2:	25 96       	adiw	r28, 0x05	; 5
    10d4:	0c ad       	ldd	r16, Y+60	; 0x3c
    10d6:	1d ad       	ldd	r17, Y+61	; 0x3d
    10d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    10da:	3f ad       	ldd	r19, Y+63	; 0x3f
    10dc:	25 97       	sbiw	r28, 0x05	; 5
    10de:	01 50       	subi	r16, 0x01	; 1
    10e0:	10 40       	sbci	r17, 0x00	; 0
    10e2:	20 40       	sbci	r18, 0x00	; 0
    10e4:	30 40       	sbci	r19, 0x00	; 0
    10e6:	25 96       	adiw	r28, 0x05	; 5
    10e8:	0c af       	std	Y+60, r16	; 0x3c
    10ea:	1d af       	std	Y+61, r17	; 0x3d
    10ec:	2e af       	std	Y+62, r18	; 0x3e
    10ee:	3f af       	std	Y+63, r19	; 0x3f
    10f0:	25 97       	sbiw	r28, 0x05	; 5
    10f2:	18 c0       	rjmp	.+48     	; 0x1124 <__stack+0x8c5>
    10f4:	66 24       	eor	r6, r6
    10f6:	77 24       	eor	r7, r7
    10f8:	43 01       	movw	r8, r6
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	25 96       	adiw	r28, 0x05	; 5
    1104:	2c af       	std	Y+60, r18	; 0x3c
    1106:	3d af       	std	Y+61, r19	; 0x3d
    1108:	4e af       	std	Y+62, r20	; 0x3e
    110a:	5f af       	std	Y+63, r21	; 0x3f
    110c:	25 97       	sbiw	r28, 0x05	; 5
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__stack+0x8cb>
    1110:	66 24       	eor	r6, r6
    1112:	77 24       	eor	r7, r7
    1114:	43 01       	movw	r8, r6
    1116:	25 96       	adiw	r28, 0x05	; 5
    1118:	1c ae       	std	Y+60, r1	; 0x3c
    111a:	1d ae       	std	Y+61, r1	; 0x3d
    111c:	1e ae       	std	Y+62, r1	; 0x3e
    111e:	1f ae       	std	Y+63, r1	; 0x3f
    1120:	25 97       	sbiw	r28, 0x05	; 5
    1122:	03 c0       	rjmp	.+6      	; 0x112a <__stack+0x8cb>
    1124:	66 24       	eor	r6, r6
    1126:	77 24       	eor	r7, r7
    1128:	43 01       	movw	r8, r6
    112a:	fe 01       	movw	r30, r28
    112c:	b1 96       	adiw	r30, 0x21	; 33
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	df 01       	movw	r26, r30
    1132:	1d 92       	st	X+, r1
    1134:	8a 95       	dec	r24
    1136:	e9 f7       	brne	.-6      	; 0x1132 <__stack+0x8d3>
    1138:	25 96       	adiw	r28, 0x05	; 5
    113a:	ac ac       	ldd	r10, Y+60	; 0x3c
    113c:	bd ac       	ldd	r11, Y+61	; 0x3d
    113e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1140:	df ac       	ldd	r13, Y+63	; 0x3f
    1142:	25 97       	sbiw	r28, 0x05	; 5
    1144:	a9 a2       	std	Y+33, r10	; 0x21
    1146:	ba a2       	std	Y+34, r11	; 0x22
    1148:	cb a2       	std	Y+35, r12	; 0x23
    114a:	dc a2       	std	Y+36, r13	; 0x24
    114c:	6d a2       	std	Y+37, r6	; 0x25
    114e:	7e a2       	std	Y+38, r7	; 0x26
    1150:	8f a2       	std	Y+39, r8	; 0x27
    1152:	98 a6       	std	Y+40, r9	; 0x28
    1154:	22 96       	adiw	r28, 0x02	; 2
    1156:	2f ad       	ldd	r18, Y+63	; 0x3f
    1158:	22 97       	sbiw	r28, 0x02	; 2
    115a:	3a a1       	ldd	r19, Y+34	; 0x22
    115c:	4b a1       	ldd	r20, Y+35	; 0x23
    115e:	5c a1       	ldd	r21, Y+36	; 0x24
    1160:	66 2d       	mov	r22, r6
    1162:	7e a1       	ldd	r23, Y+38	; 0x26
    1164:	df a0       	ldd	r13, Y+39	; 0x27
    1166:	98 a5       	ldd	r25, Y+40	; 0x28
    1168:	e1 96       	adiw	r28, 0x31	; 49
    116a:	ec ac       	ldd	r14, Y+60	; 0x3c
    116c:	fd ac       	ldd	r15, Y+61	; 0x3d
    116e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1170:	1f ad       	ldd	r17, Y+63	; 0x3f
    1172:	e1 97       	sbiw	r28, 0x31	; 49
    1174:	e1 14       	cp	r14, r1
    1176:	f1 04       	cpc	r15, r1
    1178:	01 05       	cpc	r16, r1
    117a:	11 05       	cpc	r17, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <__stack+0x921>
    117e:	56 c0       	rjmp	.+172    	; 0x122c <__stack+0x9cd>
    1180:	21 95       	neg	r18
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	12 16       	cp	r1, r18
    1186:	08 f0       	brcs	.+2      	; 0x118a <__stack+0x92b>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	31 95       	neg	r19
    118c:	e1 e0       	ldi	r30, 0x01	; 1
    118e:	13 16       	cp	r1, r19
    1190:	08 f0       	brcs	.+2      	; 0x1194 <__stack+0x935>
    1192:	e0 e0       	ldi	r30, 0x00	; 0
    1194:	93 2e       	mov	r9, r19
    1196:	98 1a       	sub	r9, r24
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	39 15       	cp	r19, r9
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__stack+0x941>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	e8 2b       	or	r30, r24
    11a2:	41 95       	neg	r20
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	14 16       	cp	r1, r20
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__stack+0x94d>
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	a4 2e       	mov	r10, r20
    11ae:	ae 1a       	sub	r10, r30
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	4a 15       	cp	r20, r10
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <__stack+0x959>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	f8 2b       	or	r31, r24
    11ba:	51 95       	neg	r21
    11bc:	e1 e0       	ldi	r30, 0x01	; 1
    11be:	15 16       	cp	r1, r21
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <__stack+0x965>
    11c2:	e0 e0       	ldi	r30, 0x00	; 0
    11c4:	b5 2e       	mov	r11, r21
    11c6:	bf 1a       	sub	r11, r31
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	5b 15       	cp	r21, r11
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <__stack+0x971>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	e8 2b       	or	r30, r24
    11d2:	61 95       	neg	r22
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	16 16       	cp	r1, r22
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <__stack+0x97d>
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	a6 2f       	mov	r26, r22
    11de:	ae 1b       	sub	r26, r30
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	6a 17       	cp	r22, r26
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__stack+0x989>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	f8 2b       	or	r31, r24
    11ea:	71 95       	neg	r23
    11ec:	e1 e0       	ldi	r30, 0x01	; 1
    11ee:	17 16       	cp	r1, r23
    11f0:	08 f0       	brcs	.+2      	; 0x11f4 <__stack+0x995>
    11f2:	e0 e0       	ldi	r30, 0x00	; 0
    11f4:	c7 2e       	mov	r12, r23
    11f6:	cf 1a       	sub	r12, r31
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	7c 15       	cp	r23, r12
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__stack+0x9a1>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	e8 2b       	or	r30, r24
    1202:	8d 2d       	mov	r24, r13
    1204:	81 95       	neg	r24
    1206:	f1 e0       	ldi	r31, 0x01	; 1
    1208:	18 16       	cp	r1, r24
    120a:	08 f0       	brcs	.+2      	; 0x120e <__stack+0x9af>
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	d8 2e       	mov	r13, r24
    1210:	de 1a       	sub	r13, r30
    1212:	e1 e0       	ldi	r30, 0x01	; 1
    1214:	8d 15       	cp	r24, r13
    1216:	08 f0       	brcs	.+2      	; 0x121a <__stack+0x9bb>
    1218:	e0 e0       	ldi	r30, 0x00	; 0
    121a:	fe 2b       	or	r31, r30
    121c:	89 2f       	mov	r24, r25
    121e:	81 95       	neg	r24
    1220:	39 2d       	mov	r19, r9
    1222:	a5 01       	movw	r20, r10
    1224:	6a 2f       	mov	r22, r26
    1226:	7c 2d       	mov	r23, r12
    1228:	98 2f       	mov	r25, r24
    122a:	9f 1b       	sub	r25, r31
    122c:	8d 2d       	mov	r24, r13
    122e:	ce 58       	subi	r28, 0x8E	; 142
    1230:	df 4f       	sbci	r29, 0xFF	; 255
    1232:	e2 e1       	ldi	r30, 0x12	; 18
    1234:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

00001238 <__moddi3>:
    1238:	a7 e7       	ldi	r26, 0x77	; 119
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e2       	ldi	r30, 0x22	; 34
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
    1244:	98 2e       	mov	r9, r24
    1246:	89 2e       	mov	r8, r25
    1248:	71 2e       	mov	r7, r17
    124a:	88 e0       	ldi	r24, 0x08	; 8
    124c:	fe 01       	movw	r30, r28
    124e:	31 96       	adiw	r30, 0x01	; 1
    1250:	df 01       	movw	r26, r30
    1252:	68 2e       	mov	r6, r24
    1254:	1d 92       	st	X+, r1
    1256:	6a 94       	dec	r6
    1258:	e9 f7       	brne	.-6      	; 0x1254 <__moddi3+0x1c>
    125a:	29 83       	std	Y+1, r18	; 0x01
    125c:	3a 83       	std	Y+2, r19	; 0x02
    125e:	4b 83       	std	Y+3, r20	; 0x03
    1260:	5c 83       	std	Y+4, r21	; 0x04
    1262:	6d 83       	std	Y+5, r22	; 0x05
    1264:	7e 83       	std	Y+6, r23	; 0x06
    1266:	9f 82       	std	Y+7, r9	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
    126a:	fe 01       	movw	r30, r28
    126c:	39 96       	adiw	r30, 0x09	; 9
    126e:	df 01       	movw	r26, r30
    1270:	1d 92       	st	X+, r1
    1272:	8a 95       	dec	r24
    1274:	e9 f7       	brne	.-6      	; 0x1270 <__moddi3+0x38>
    1276:	a9 86       	std	Y+9, r10	; 0x09
    1278:	ba 86       	std	Y+10, r11	; 0x0a
    127a:	cb 86       	std	Y+11, r12	; 0x0b
    127c:	dc 86       	std	Y+12, r13	; 0x0c
    127e:	ed 86       	std	Y+13, r14	; 0x0d
    1280:	fe 86       	std	Y+14, r15	; 0x0e
    1282:	0f 87       	std	Y+15, r16	; 0x0f
    1284:	18 8b       	std	Y+16, r17	; 0x10
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	af 81       	ldd	r26, Y+7	; 0x07
    128c:	b8 85       	ldd	r27, Y+8	; 0x08
    128e:	b7 fd       	sbrc	r27, 7
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <__moddi3+0x68>
    1292:	e1 96       	adiw	r28, 0x31	; 49
    1294:	1c ae       	std	Y+60, r1	; 0x3c
    1296:	1d ae       	std	Y+61, r1	; 0x3d
    1298:	1e ae       	std	Y+62, r1	; 0x3e
    129a:	1f ae       	std	Y+63, r1	; 0x3f
    129c:	e1 97       	sbiw	r28, 0x31	; 49
    129e:	64 c0       	rjmp	.+200    	; 0x1368 <__moddi3+0x130>
    12a0:	21 95       	neg	r18
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	12 16       	cp	r1, r18
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <__moddi3+0x72>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	31 95       	neg	r19
    12ac:	91 e0       	ldi	r25, 0x01	; 1
    12ae:	13 16       	cp	r1, r19
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__moddi3+0x7c>
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b3 2f       	mov	r27, r19
    12b6:	b8 1b       	sub	r27, r24
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	3b 17       	cp	r19, r27
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <__moddi3+0x88>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	98 2b       	or	r25, r24
    12c2:	41 95       	neg	r20
    12c4:	31 e0       	ldi	r19, 0x01	; 1
    12c6:	14 16       	cp	r1, r20
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <__moddi3+0x94>
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	a4 2f       	mov	r26, r20
    12ce:	a9 1b       	sub	r26, r25
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	4a 17       	cp	r20, r26
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <__moddi3+0xa0>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	38 2b       	or	r19, r24
    12da:	51 95       	neg	r21
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	15 16       	cp	r1, r21
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__moddi3+0xac>
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	f5 2f       	mov	r31, r21
    12e6:	f3 1b       	sub	r31, r19
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	5f 17       	cp	r21, r31
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <__moddi3+0xb8>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	98 2b       	or	r25, r24
    12f2:	61 95       	neg	r22
    12f4:	31 e0       	ldi	r19, 0x01	; 1
    12f6:	16 16       	cp	r1, r22
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <__moddi3+0xc4>
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	e6 2f       	mov	r30, r22
    12fe:	e9 1b       	sub	r30, r25
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	6e 17       	cp	r22, r30
    1304:	08 f0       	brcs	.+2      	; 0x1308 <__moddi3+0xd0>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	38 2b       	or	r19, r24
    130a:	71 95       	neg	r23
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	17 16       	cp	r1, r23
    1310:	08 f0       	brcs	.+2      	; 0x1314 <__moddi3+0xdc>
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	57 2f       	mov	r21, r23
    1316:	53 1b       	sub	r21, r19
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	75 17       	cp	r23, r21
    131c:	08 f0       	brcs	.+2      	; 0x1320 <__moddi3+0xe8>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	48 2b       	or	r20, r24
    1322:	89 2d       	mov	r24, r9
    1324:	81 95       	neg	r24
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	18 16       	cp	r1, r24
    132a:	08 f0       	brcs	.+2      	; 0x132e <__moddi3+0xf6>
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	68 2e       	mov	r6, r24
    1330:	64 1a       	sub	r6, r20
    1332:	46 2d       	mov	r20, r6
    1334:	31 e0       	ldi	r19, 0x01	; 1
    1336:	86 15       	cp	r24, r6
    1338:	08 f0       	brcs	.+2      	; 0x133c <__moddi3+0x104>
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	93 2b       	or	r25, r19
    133e:	88 2d       	mov	r24, r8
    1340:	81 95       	neg	r24
    1342:	89 1b       	sub	r24, r25
    1344:	29 83       	std	Y+1, r18	; 0x01
    1346:	ba 83       	std	Y+2, r27	; 0x02
    1348:	ab 83       	std	Y+3, r26	; 0x03
    134a:	fc 83       	std	Y+4, r31	; 0x04
    134c:	ed 83       	std	Y+5, r30	; 0x05
    134e:	5e 83       	std	Y+6, r21	; 0x06
    1350:	4f 83       	std	Y+7, r20	; 0x07
    1352:	88 87       	std	Y+8, r24	; 0x08
    1354:	2f ef       	ldi	r18, 0xFF	; 255
    1356:	3f ef       	ldi	r19, 0xFF	; 255
    1358:	4f ef       	ldi	r20, 0xFF	; 255
    135a:	5f ef       	ldi	r21, 0xFF	; 255
    135c:	e1 96       	adiw	r28, 0x31	; 49
    135e:	2c af       	std	Y+60, r18	; 0x3c
    1360:	3d af       	std	Y+61, r19	; 0x3d
    1362:	4e af       	std	Y+62, r20	; 0x3e
    1364:	5f af       	std	Y+63, r21	; 0x3f
    1366:	e1 97       	sbiw	r28, 0x31	; 49
    1368:	8d 85       	ldd	r24, Y+13	; 0x0d
    136a:	9e 85       	ldd	r25, Y+14	; 0x0e
    136c:	af 85       	ldd	r26, Y+15	; 0x0f
    136e:	b8 89       	ldd	r27, Y+16	; 0x10
    1370:	b7 ff       	sbrs	r27, 7
    1372:	5a c0       	rjmp	.+180    	; 0x1428 <__moddi3+0x1f0>
    1374:	a1 94       	neg	r10
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	1a 14       	cp	r1, r10
    137a:	08 f0       	brcs	.+2      	; 0x137e <__moddi3+0x146>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	b1 94       	neg	r11
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	1b 14       	cp	r1, r11
    1384:	08 f0       	brcs	.+2      	; 0x1388 <__moddi3+0x150>
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	6b 2d       	mov	r22, r11
    138a:	68 1b       	sub	r22, r24
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	b6 16       	cp	r11, r22
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__moddi3+0x15c>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	98 2b       	or	r25, r24
    1396:	c1 94       	neg	r12
    1398:	21 e0       	ldi	r18, 0x01	; 1
    139a:	1c 14       	cp	r1, r12
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <__moddi3+0x168>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	5c 2d       	mov	r21, r12
    13a2:	59 1b       	sub	r21, r25
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	c5 16       	cp	r12, r21
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <__moddi3+0x174>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	28 2b       	or	r18, r24
    13ae:	d1 94       	neg	r13
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	1d 14       	cp	r1, r13
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__moddi3+0x180>
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	4d 2d       	mov	r20, r13
    13ba:	42 1b       	sub	r20, r18
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	d4 16       	cp	r13, r20
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__moddi3+0x18c>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	98 2b       	or	r25, r24
    13c6:	e1 94       	neg	r14
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	1e 14       	cp	r1, r14
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <__moddi3+0x198>
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3e 2d       	mov	r19, r14
    13d2:	39 1b       	sub	r19, r25
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	e3 16       	cp	r14, r19
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <__moddi3+0x1a4>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	28 2b       	or	r18, r24
    13de:	f1 94       	neg	r15
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	1f 14       	cp	r1, r15
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <__moddi3+0x1b0>
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	7f 2d       	mov	r23, r15
    13ea:	72 1b       	sub	r23, r18
    13ec:	27 2f       	mov	r18, r23
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	f7 16       	cp	r15, r23
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__moddi3+0x1be>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	98 2b       	or	r25, r24
    13f8:	01 95       	neg	r16
    13fa:	11 e0       	ldi	r17, 0x01	; 1
    13fc:	10 16       	cp	r1, r16
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <__moddi3+0x1ca>
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	80 2f       	mov	r24, r16
    1404:	89 1b       	sub	r24, r25
    1406:	98 2f       	mov	r25, r24
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	09 17       	cp	r16, r25
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__moddi3+0x1d8>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	18 2b       	or	r17, r24
    1412:	87 2d       	mov	r24, r7
    1414:	81 95       	neg	r24
    1416:	81 1b       	sub	r24, r17
    1418:	a9 86       	std	Y+9, r10	; 0x09
    141a:	6a 87       	std	Y+10, r22	; 0x0a
    141c:	5b 87       	std	Y+11, r21	; 0x0b
    141e:	4c 87       	std	Y+12, r20	; 0x0c
    1420:	3d 87       	std	Y+13, r19	; 0x0d
    1422:	2e 87       	std	Y+14, r18	; 0x0e
    1424:	9f 87       	std	Y+15, r25	; 0x0f
    1426:	88 8b       	std	Y+16, r24	; 0x10
    1428:	99 81       	ldd	r25, Y+1	; 0x01
    142a:	2a 81       	ldd	r18, Y+2	; 0x02
    142c:	3b 81       	ldd	r19, Y+3	; 0x03
    142e:	4c 81       	ldd	r20, Y+4	; 0x04
    1430:	5d 81       	ldd	r21, Y+5	; 0x05
    1432:	6e 81       	ldd	r22, Y+6	; 0x06
    1434:	7f 81       	ldd	r23, Y+7	; 0x07
    1436:	a8 85       	ldd	r26, Y+8	; 0x08
    1438:	b9 85       	ldd	r27, Y+9	; 0x09
    143a:	1a 85       	ldd	r17, Y+10	; 0x0a
    143c:	0b 85       	ldd	r16, Y+11	; 0x0b
    143e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1440:	ed 84       	ldd	r14, Y+13	; 0x0d
    1442:	de 84       	ldd	r13, Y+14	; 0x0e
    1444:	cf 84       	ldd	r12, Y+15	; 0x0f
    1446:	b8 88       	ldd	r11, Y+16	; 0x10
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	e9 e1       	ldi	r30, 0x19	; 25
    144c:	8e 2e       	mov	r8, r30
    144e:	91 2c       	mov	r9, r1
    1450:	8c 0e       	add	r8, r28
    1452:	9d 1e       	adc	r9, r29
    1454:	f4 01       	movw	r30, r8
    1456:	68 2e       	mov	r6, r24
    1458:	11 92       	st	Z+, r1
    145a:	6a 94       	dec	r6
    145c:	e9 f7       	brne	.-6      	; 0x1458 <__moddi3+0x220>
    145e:	99 8f       	std	Y+25, r25	; 0x19
    1460:	2a 8f       	std	Y+26, r18	; 0x1a
    1462:	3b 8f       	std	Y+27, r19	; 0x1b
    1464:	4c 8f       	std	Y+28, r20	; 0x1c
    1466:	5d 8f       	std	Y+29, r21	; 0x1d
    1468:	6e 8f       	std	Y+30, r22	; 0x1e
    146a:	7f 8f       	std	Y+31, r23	; 0x1f
    146c:	a8 a3       	std	Y+32, r26	; 0x20
    146e:	9e 01       	movw	r18, r28
    1470:	2f 5d       	subi	r18, 0xDF	; 223
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	f9 01       	movw	r30, r18
    1476:	11 92       	st	Z+, r1
    1478:	8a 95       	dec	r24
    147a:	e9 f7       	brne	.-6      	; 0x1476 <__moddi3+0x23e>
    147c:	b9 a3       	std	Y+33, r27	; 0x21
    147e:	1a a3       	std	Y+34, r17	; 0x22
    1480:	0b a3       	std	Y+35, r16	; 0x23
    1482:	fc a2       	std	Y+36, r15	; 0x24
    1484:	ed a2       	std	Y+37, r14	; 0x25
    1486:	de a2       	std	Y+38, r13	; 0x26
    1488:	cf a2       	std	Y+39, r12	; 0x27
    148a:	b8 a6       	std	Y+40, r11	; 0x28
    148c:	29 a0       	ldd	r2, Y+33	; 0x21
    148e:	3a a0       	ldd	r3, Y+34	; 0x22
    1490:	4b a0       	ldd	r4, Y+35	; 0x23
    1492:	5c a0       	ldd	r5, Y+36	; 0x24
    1494:	ad a0       	ldd	r10, Y+37	; 0x25
    1496:	be a0       	ldd	r11, Y+38	; 0x26
    1498:	cf a0       	ldd	r12, Y+39	; 0x27
    149a:	d8 a4       	ldd	r13, Y+40	; 0x28
    149c:	49 8d       	ldd	r20, Y+25	; 0x19
    149e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    14a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    14a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    14a4:	e5 96       	adiw	r28, 0x35	; 53
    14a6:	4f af       	std	Y+63, r20	; 0x3f
    14a8:	e5 97       	sbiw	r28, 0x35	; 53
    14aa:	e6 96       	adiw	r28, 0x36	; 54
    14ac:	5f af       	std	Y+63, r21	; 0x3f
    14ae:	e6 97       	sbiw	r28, 0x36	; 54
    14b0:	e7 96       	adiw	r28, 0x37	; 55
    14b2:	6f af       	std	Y+63, r22	; 0x3f
    14b4:	e7 97       	sbiw	r28, 0x37	; 55
    14b6:	e8 96       	adiw	r28, 0x38	; 56
    14b8:	7f af       	std	Y+63, r23	; 0x3f
    14ba:	e8 97       	sbiw	r28, 0x38	; 56
    14bc:	e8 96       	adiw	r28, 0x38	; 56
    14be:	6c ac       	ldd	r6, Y+60	; 0x3c
    14c0:	7d ac       	ldd	r7, Y+61	; 0x3d
    14c2:	8e ac       	ldd	r8, Y+62	; 0x3e
    14c4:	9f ac       	ldd	r9, Y+63	; 0x3f
    14c6:	e8 97       	sbiw	r28, 0x38	; 56
    14c8:	2d 96       	adiw	r28, 0x0d	; 13
    14ca:	6c ae       	std	Y+60, r6	; 0x3c
    14cc:	7d ae       	std	Y+61, r7	; 0x3d
    14ce:	8e ae       	std	Y+62, r8	; 0x3e
    14d0:	9f ae       	std	Y+63, r9	; 0x3f
    14d2:	2d 97       	sbiw	r28, 0x0d	; 13
    14d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    14da:	38 a1       	ldd	r19, Y+32	; 0x20
    14dc:	3c 01       	movw	r6, r24
    14de:	49 01       	movw	r8, r18
    14e0:	61 96       	adiw	r28, 0x11	; 17
    14e2:	6c ae       	std	Y+60, r6	; 0x3c
    14e4:	7d ae       	std	Y+61, r7	; 0x3d
    14e6:	8e ae       	std	Y+62, r8	; 0x3e
    14e8:	9f ae       	std	Y+63, r9	; 0x3f
    14ea:	61 97       	sbiw	r28, 0x11	; 17
    14ec:	a1 14       	cp	r10, r1
    14ee:	b1 04       	cpc	r11, r1
    14f0:	c1 04       	cpc	r12, r1
    14f2:	d1 04       	cpc	r13, r1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <__moddi3+0x2c0>
    14f6:	28 c3       	rjmp	.+1616   	; 0x1b48 <__moddi3+0x910>
    14f8:	62 14       	cp	r6, r2
    14fa:	73 04       	cpc	r7, r3
    14fc:	84 04       	cpc	r8, r4
    14fe:	95 04       	cpc	r9, r5
    1500:	08 f0       	brcs	.+2      	; 0x1504 <__moddi3+0x2cc>
    1502:	0e c1       	rjmp	.+540    	; 0x1720 <__moddi3+0x4e8>
    1504:	00 e0       	ldi	r16, 0x00	; 0
    1506:	20 16       	cp	r2, r16
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	30 06       	cpc	r3, r16
    150c:	01 e0       	ldi	r16, 0x01	; 1
    150e:	40 06       	cpc	r4, r16
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	50 06       	cpc	r5, r16
    1514:	88 f4       	brcc	.+34     	; 0x1538 <__moddi3+0x300>
    1516:	1f ef       	ldi	r17, 0xFF	; 255
    1518:	21 16       	cp	r2, r17
    151a:	31 04       	cpc	r3, r1
    151c:	41 04       	cpc	r4, r1
    151e:	51 04       	cpc	r5, r1
    1520:	39 f0       	breq	.+14     	; 0x1530 <__moddi3+0x2f8>
    1522:	30 f0       	brcs	.+12     	; 0x1530 <__moddi3+0x2f8>
    1524:	88 e0       	ldi	r24, 0x08	; 8
    1526:	e8 2e       	mov	r14, r24
    1528:	f1 2c       	mov	r15, r1
    152a:	01 2d       	mov	r16, r1
    152c:	11 2d       	mov	r17, r1
    152e:	18 c0       	rjmp	.+48     	; 0x1560 <__moddi3+0x328>
    1530:	ee 24       	eor	r14, r14
    1532:	ff 24       	eor	r15, r15
    1534:	87 01       	movw	r16, r14
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <__moddi3+0x328>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	22 16       	cp	r2, r18
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	32 06       	cpc	r3, r18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	42 06       	cpc	r4, r18
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	52 06       	cpc	r5, r18
    1548:	30 f0       	brcs	.+12     	; 0x1556 <__moddi3+0x31e>
    154a:	b8 e1       	ldi	r27, 0x18	; 24
    154c:	eb 2e       	mov	r14, r27
    154e:	f1 2c       	mov	r15, r1
    1550:	01 2d       	mov	r16, r1
    1552:	11 2d       	mov	r17, r1
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <__moddi3+0x328>
    1556:	a0 e1       	ldi	r26, 0x10	; 16
    1558:	ea 2e       	mov	r14, r26
    155a:	f1 2c       	mov	r15, r1
    155c:	01 2d       	mov	r16, r1
    155e:	11 2d       	mov	r17, r1
    1560:	d2 01       	movw	r26, r4
    1562:	c1 01       	movw	r24, r2
    1564:	0e 2c       	mov	r0, r14
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <__moddi3+0x338>
    1568:	b6 95       	lsr	r27
    156a:	a7 95       	ror	r26
    156c:	97 95       	ror	r25
    156e:	87 95       	ror	r24
    1570:	0a 94       	dec	r0
    1572:	d2 f7       	brpl	.-12     	; 0x1568 <__moddi3+0x330>
    1574:	83 59       	subi	r24, 0x93	; 147
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	dc 01       	movw	r26, r24
    157a:	2c 91       	ld	r18, X
    157c:	80 e2       	ldi	r24, 0x20	; 32
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	8e 19       	sub	r24, r14
    1586:	9f 09       	sbc	r25, r15
    1588:	a0 0b       	sbc	r26, r16
    158a:	b1 0b       	sbc	r27, r17
    158c:	5c 01       	movw	r10, r24
    158e:	6d 01       	movw	r12, r26
    1590:	a2 1a       	sub	r10, r18
    1592:	b1 08       	sbc	r11, r1
    1594:	c1 08       	sbc	r12, r1
    1596:	d1 08       	sbc	r13, r1
    1598:	65 96       	adiw	r28, 0x15	; 21
    159a:	ac ae       	std	Y+60, r10	; 0x3c
    159c:	bd ae       	std	Y+61, r11	; 0x3d
    159e:	ce ae       	std	Y+62, r12	; 0x3e
    15a0:	df ae       	std	Y+63, r13	; 0x3f
    15a2:	65 97       	sbiw	r28, 0x15	; 21
    15a4:	a1 14       	cp	r10, r1
    15a6:	b1 04       	cpc	r11, r1
    15a8:	c1 04       	cpc	r12, r1
    15aa:	d1 04       	cpc	r13, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__moddi3+0x378>
    15ae:	45 c0       	rjmp	.+138    	; 0x163a <__moddi3+0x402>
    15b0:	62 96       	adiw	r28, 0x12	; 18
    15b2:	6f ad       	ldd	r22, Y+63	; 0x3f
    15b4:	62 97       	sbiw	r28, 0x12	; 18
    15b6:	06 2e       	mov	r0, r22
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <__moddi3+0x38a>
    15ba:	22 0c       	add	r2, r2
    15bc:	33 1c       	adc	r3, r3
    15be:	44 1c       	adc	r4, r4
    15c0:	55 1c       	adc	r5, r5
    15c2:	0a 94       	dec	r0
    15c4:	d2 f7       	brpl	.-12     	; 0x15ba <__moddi3+0x382>
    15c6:	a4 01       	movw	r20, r8
    15c8:	93 01       	movw	r18, r6
    15ca:	06 2e       	mov	r0, r22
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__moddi3+0x39e>
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	44 1f       	adc	r20, r20
    15d4:	55 1f       	adc	r21, r21
    15d6:	0a 94       	dec	r0
    15d8:	d2 f7       	brpl	.-12     	; 0x15ce <__moddi3+0x396>
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	8a 19       	sub	r24, r10
    15e0:	9b 09       	sbc	r25, r11
    15e2:	e8 96       	adiw	r28, 0x38	; 56
    15e4:	cc ac       	ldd	r12, Y+60	; 0x3c
    15e6:	dd ac       	ldd	r13, Y+61	; 0x3d
    15e8:	ee ac       	ldd	r14, Y+62	; 0x3e
    15ea:	ff ac       	ldd	r15, Y+63	; 0x3f
    15ec:	e8 97       	sbiw	r28, 0x38	; 56
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <__moddi3+0x3c0>
    15f0:	f6 94       	lsr	r15
    15f2:	e7 94       	ror	r14
    15f4:	d7 94       	ror	r13
    15f6:	c7 94       	ror	r12
    15f8:	8a 95       	dec	r24
    15fa:	d2 f7       	brpl	.-12     	; 0x15f0 <__moddi3+0x3b8>
    15fc:	87 01       	movw	r16, r14
    15fe:	76 01       	movw	r14, r12
    1600:	e2 2a       	or	r14, r18
    1602:	f3 2a       	or	r15, r19
    1604:	04 2b       	or	r16, r20
    1606:	15 2b       	or	r17, r21
    1608:	61 96       	adiw	r28, 0x11	; 17
    160a:	ec ae       	std	Y+60, r14	; 0x3c
    160c:	fd ae       	std	Y+61, r15	; 0x3d
    160e:	0e af       	std	Y+62, r16	; 0x3e
    1610:	1f af       	std	Y+63, r17	; 0x3f
    1612:	61 97       	sbiw	r28, 0x11	; 17
    1614:	e8 96       	adiw	r28, 0x38	; 56
    1616:	0c ad       	ldd	r16, Y+60	; 0x3c
    1618:	1d ad       	ldd	r17, Y+61	; 0x3d
    161a:	2e ad       	ldd	r18, Y+62	; 0x3e
    161c:	3f ad       	ldd	r19, Y+63	; 0x3f
    161e:	e8 97       	sbiw	r28, 0x38	; 56
    1620:	04 c0       	rjmp	.+8      	; 0x162a <__moddi3+0x3f2>
    1622:	00 0f       	add	r16, r16
    1624:	11 1f       	adc	r17, r17
    1626:	22 1f       	adc	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	6a 95       	dec	r22
    162c:	d2 f7       	brpl	.-12     	; 0x1622 <__moddi3+0x3ea>
    162e:	2d 96       	adiw	r28, 0x0d	; 13
    1630:	0c af       	std	Y+60, r16	; 0x3c
    1632:	1d af       	std	Y+61, r17	; 0x3d
    1634:	2e af       	std	Y+62, r18	; 0x3e
    1636:	3f af       	std	Y+63, r19	; 0x3f
    1638:	2d 97       	sbiw	r28, 0x0d	; 13
    163a:	32 01       	movw	r6, r4
    163c:	88 24       	eor	r8, r8
    163e:	99 24       	eor	r9, r9
    1640:	a2 01       	movw	r20, r4
    1642:	91 01       	movw	r18, r2
    1644:	40 70       	andi	r20, 0x00	; 0
    1646:	50 70       	andi	r21, 0x00	; 0
    1648:	69 96       	adiw	r28, 0x19	; 25
    164a:	2c af       	std	Y+60, r18	; 0x3c
    164c:	3d af       	std	Y+61, r19	; 0x3d
    164e:	4e af       	std	Y+62, r20	; 0x3e
    1650:	5f af       	std	Y+63, r21	; 0x3f
    1652:	69 97       	sbiw	r28, 0x19	; 25
    1654:	61 96       	adiw	r28, 0x11	; 17
    1656:	6c ad       	ldd	r22, Y+60	; 0x3c
    1658:	7d ad       	ldd	r23, Y+61	; 0x3d
    165a:	8e ad       	ldd	r24, Y+62	; 0x3e
    165c:	9f ad       	ldd	r25, Y+63	; 0x3f
    165e:	61 97       	sbiw	r28, 0x11	; 17
    1660:	a4 01       	movw	r20, r8
    1662:	93 01       	movw	r18, r6
    1664:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1668:	7b 01       	movw	r14, r22
    166a:	8c 01       	movw	r16, r24
    166c:	61 96       	adiw	r28, 0x11	; 17
    166e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1670:	7d ad       	ldd	r23, Y+61	; 0x3d
    1672:	8e ad       	ldd	r24, Y+62	; 0x3e
    1674:	9f ad       	ldd	r25, Y+63	; 0x3f
    1676:	61 97       	sbiw	r28, 0x11	; 17
    1678:	a4 01       	movw	r20, r8
    167a:	93 01       	movw	r18, r6
    167c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1680:	ca 01       	movw	r24, r20
    1682:	b9 01       	movw	r22, r18
    1684:	69 96       	adiw	r28, 0x19	; 25
    1686:	2c ad       	ldd	r18, Y+60	; 0x3c
    1688:	3d ad       	ldd	r19, Y+61	; 0x3d
    168a:	4e ad       	ldd	r20, Y+62	; 0x3e
    168c:	5f ad       	ldd	r21, Y+63	; 0x3f
    168e:	69 97       	sbiw	r28, 0x19	; 25
    1690:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	87 01       	movw	r16, r14
    169a:	ff 24       	eor	r15, r15
    169c:	ee 24       	eor	r14, r14
    169e:	2d 96       	adiw	r28, 0x0d	; 13
    16a0:	ac ac       	ldd	r10, Y+60	; 0x3c
    16a2:	bd ac       	ldd	r11, Y+61	; 0x3d
    16a4:	ce ac       	ldd	r12, Y+62	; 0x3e
    16a6:	df ac       	ldd	r13, Y+63	; 0x3f
    16a8:	2d 97       	sbiw	r28, 0x0d	; 13
    16aa:	c6 01       	movw	r24, r12
    16ac:	aa 27       	eor	r26, r26
    16ae:	bb 27       	eor	r27, r27
    16b0:	57 01       	movw	r10, r14
    16b2:	68 01       	movw	r12, r16
    16b4:	a8 2a       	or	r10, r24
    16b6:	b9 2a       	or	r11, r25
    16b8:	ca 2a       	or	r12, r26
    16ba:	db 2a       	or	r13, r27
    16bc:	a2 16       	cp	r10, r18
    16be:	b3 06       	cpc	r11, r19
    16c0:	c4 06       	cpc	r12, r20
    16c2:	d5 06       	cpc	r13, r21
    16c4:	90 f4       	brcc	.+36     	; 0x16ea <__moddi3+0x4b2>
    16c6:	a2 0c       	add	r10, r2
    16c8:	b3 1c       	adc	r11, r3
    16ca:	c4 1c       	adc	r12, r4
    16cc:	d5 1c       	adc	r13, r5
    16ce:	a2 14       	cp	r10, r2
    16d0:	b3 04       	cpc	r11, r3
    16d2:	c4 04       	cpc	r12, r4
    16d4:	d5 04       	cpc	r13, r5
    16d6:	48 f0       	brcs	.+18     	; 0x16ea <__moddi3+0x4b2>
    16d8:	a2 16       	cp	r10, r18
    16da:	b3 06       	cpc	r11, r19
    16dc:	c4 06       	cpc	r12, r20
    16de:	d5 06       	cpc	r13, r21
    16e0:	20 f4       	brcc	.+8      	; 0x16ea <__moddi3+0x4b2>
    16e2:	a2 0c       	add	r10, r2
    16e4:	b3 1c       	adc	r11, r3
    16e6:	c4 1c       	adc	r12, r4
    16e8:	d5 1c       	adc	r13, r5
    16ea:	a2 1a       	sub	r10, r18
    16ec:	b3 0a       	sbc	r11, r19
    16ee:	c4 0a       	sbc	r12, r20
    16f0:	d5 0a       	sbc	r13, r21
    16f2:	c6 01       	movw	r24, r12
    16f4:	b5 01       	movw	r22, r10
    16f6:	a4 01       	movw	r20, r8
    16f8:	93 01       	movw	r18, r6
    16fa:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    16fe:	7b 01       	movw	r14, r22
    1700:	8c 01       	movw	r16, r24
    1702:	c6 01       	movw	r24, r12
    1704:	b5 01       	movw	r22, r10
    1706:	a4 01       	movw	r20, r8
    1708:	93 01       	movw	r18, r6
    170a:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    170e:	ca 01       	movw	r24, r20
    1710:	b9 01       	movw	r22, r18
    1712:	69 96       	adiw	r28, 0x19	; 25
    1714:	2c ad       	ldd	r18, Y+60	; 0x3c
    1716:	3d ad       	ldd	r19, Y+61	; 0x3d
    1718:	4e ad       	ldd	r20, Y+62	; 0x3e
    171a:	5f ad       	ldd	r21, Y+63	; 0x3f
    171c:	69 97       	sbiw	r28, 0x19	; 25
    171e:	c8 c1       	rjmp	.+912    	; 0x1ab0 <__moddi3+0x878>
    1720:	21 14       	cp	r2, r1
    1722:	31 04       	cpc	r3, r1
    1724:	41 04       	cpc	r4, r1
    1726:	51 04       	cpc	r5, r1
    1728:	71 f4       	brne	.+28     	; 0x1746 <__moddi3+0x50e>
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    173e:	c9 01       	movw	r24, r18
    1740:	da 01       	movw	r26, r20
    1742:	1c 01       	movw	r2, r24
    1744:	2d 01       	movw	r4, r26
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	20 16       	cp	r2, r16
    174a:	00 e0       	ldi	r16, 0x00	; 0
    174c:	30 06       	cpc	r3, r16
    174e:	01 e0       	ldi	r16, 0x01	; 1
    1750:	40 06       	cpc	r4, r16
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	50 06       	cpc	r5, r16
    1756:	88 f4       	brcc	.+34     	; 0x177a <__moddi3+0x542>
    1758:	1f ef       	ldi	r17, 0xFF	; 255
    175a:	21 16       	cp	r2, r17
    175c:	31 04       	cpc	r3, r1
    175e:	41 04       	cpc	r4, r1
    1760:	51 04       	cpc	r5, r1
    1762:	39 f0       	breq	.+14     	; 0x1772 <__moddi3+0x53a>
    1764:	30 f0       	brcs	.+12     	; 0x1772 <__moddi3+0x53a>
    1766:	68 e0       	ldi	r22, 0x08	; 8
    1768:	e6 2e       	mov	r14, r22
    176a:	f1 2c       	mov	r15, r1
    176c:	01 2d       	mov	r16, r1
    176e:	11 2d       	mov	r17, r1
    1770:	18 c0       	rjmp	.+48     	; 0x17a2 <__moddi3+0x56a>
    1772:	ee 24       	eor	r14, r14
    1774:	ff 24       	eor	r15, r15
    1776:	87 01       	movw	r16, r14
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <__moddi3+0x56a>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	22 16       	cp	r2, r18
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	32 06       	cpc	r3, r18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	42 06       	cpc	r4, r18
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	52 06       	cpc	r5, r18
    178a:	30 f0       	brcs	.+12     	; 0x1798 <__moddi3+0x560>
    178c:	58 e1       	ldi	r21, 0x18	; 24
    178e:	e5 2e       	mov	r14, r21
    1790:	f1 2c       	mov	r15, r1
    1792:	01 2d       	mov	r16, r1
    1794:	11 2d       	mov	r17, r1
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <__moddi3+0x56a>
    1798:	40 e1       	ldi	r20, 0x10	; 16
    179a:	e4 2e       	mov	r14, r20
    179c:	f1 2c       	mov	r15, r1
    179e:	01 2d       	mov	r16, r1
    17a0:	11 2d       	mov	r17, r1
    17a2:	d2 01       	movw	r26, r4
    17a4:	c1 01       	movw	r24, r2
    17a6:	0e 2c       	mov	r0, r14
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__moddi3+0x57a>
    17aa:	b6 95       	lsr	r27
    17ac:	a7 95       	ror	r26
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	0a 94       	dec	r0
    17b4:	d2 f7       	brpl	.-12     	; 0x17aa <__moddi3+0x572>
    17b6:	83 59       	subi	r24, 0x93	; 147
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	dc 01       	movw	r26, r24
    17bc:	2c 91       	ld	r18, X
    17be:	30 e2       	ldi	r19, 0x20	; 32
    17c0:	a3 2e       	mov	r10, r19
    17c2:	b1 2c       	mov	r11, r1
    17c4:	c1 2c       	mov	r12, r1
    17c6:	d1 2c       	mov	r13, r1
    17c8:	d6 01       	movw	r26, r12
    17ca:	c5 01       	movw	r24, r10
    17cc:	8e 19       	sub	r24, r14
    17ce:	9f 09       	sbc	r25, r15
    17d0:	a0 0b       	sbc	r26, r16
    17d2:	b1 0b       	sbc	r27, r17
    17d4:	7c 01       	movw	r14, r24
    17d6:	8d 01       	movw	r16, r26
    17d8:	e2 1a       	sub	r14, r18
    17da:	f1 08       	sbc	r15, r1
    17dc:	01 09       	sbc	r16, r1
    17de:	11 09       	sbc	r17, r1
    17e0:	65 96       	adiw	r28, 0x15	; 21
    17e2:	ec ae       	std	Y+60, r14	; 0x3c
    17e4:	fd ae       	std	Y+61, r15	; 0x3d
    17e6:	0e af       	std	Y+62, r16	; 0x3e
    17e8:	1f af       	std	Y+63, r17	; 0x3f
    17ea:	65 97       	sbiw	r28, 0x15	; 21
    17ec:	e1 14       	cp	r14, r1
    17ee:	f1 04       	cpc	r15, r1
    17f0:	01 05       	cpc	r16, r1
    17f2:	11 05       	cpc	r17, r1
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__moddi3+0x5cc>
    17f6:	64 01       	movw	r12, r8
    17f8:	53 01       	movw	r10, r6
    17fa:	a2 18       	sub	r10, r2
    17fc:	b3 08       	sbc	r11, r3
    17fe:	c4 08       	sbc	r12, r4
    1800:	d5 08       	sbc	r13, r5
    1802:	ec c0       	rjmp	.+472    	; 0x19dc <__moddi3+0x7a4>
    1804:	62 96       	adiw	r28, 0x12	; 18
    1806:	ff ac       	ldd	r15, Y+63	; 0x3f
    1808:	62 97       	sbiw	r28, 0x12	; 18
    180a:	e4 96       	adiw	r28, 0x34	; 52
    180c:	ff ae       	std	Y+63, r15	; 0x3f
    180e:	e4 97       	sbiw	r28, 0x34	; 52
    1810:	0f 2c       	mov	r0, r15
    1812:	04 c0       	rjmp	.+8      	; 0x181c <__moddi3+0x5e4>
    1814:	22 0c       	add	r2, r2
    1816:	33 1c       	adc	r3, r3
    1818:	44 1c       	adc	r4, r4
    181a:	55 1c       	adc	r5, r5
    181c:	0a 94       	dec	r0
    181e:	d2 f7       	brpl	.-12     	; 0x1814 <__moddi3+0x5dc>
    1820:	8a 2d       	mov	r24, r10
    1822:	8f 19       	sub	r24, r15
    1824:	64 01       	movw	r12, r8
    1826:	53 01       	movw	r10, r6
    1828:	08 2e       	mov	r0, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <__moddi3+0x5fc>
    182c:	d6 94       	lsr	r13
    182e:	c7 94       	ror	r12
    1830:	b7 94       	ror	r11
    1832:	a7 94       	ror	r10
    1834:	0a 94       	dec	r0
    1836:	d2 f7       	brpl	.-12     	; 0x182c <__moddi3+0x5f4>
    1838:	a4 01       	movw	r20, r8
    183a:	93 01       	movw	r18, r6
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <__moddi3+0x60e>
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	44 1f       	adc	r20, r20
    1844:	55 1f       	adc	r21, r21
    1846:	fa 94       	dec	r15
    1848:	d2 f7       	brpl	.-12     	; 0x183e <__moddi3+0x606>
    184a:	e8 96       	adiw	r28, 0x38	; 56
    184c:	6c ac       	ldd	r6, Y+60	; 0x3c
    184e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1850:	8e ac       	ldd	r8, Y+62	; 0x3e
    1852:	9f ac       	ldd	r9, Y+63	; 0x3f
    1854:	e8 97       	sbiw	r28, 0x38	; 56
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <__moddi3+0x628>
    1858:	96 94       	lsr	r9
    185a:	87 94       	ror	r8
    185c:	77 94       	ror	r7
    185e:	67 94       	ror	r6
    1860:	8a 95       	dec	r24
    1862:	d2 f7       	brpl	.-12     	; 0x1858 <__moddi3+0x620>
    1864:	84 01       	movw	r16, r8
    1866:	73 01       	movw	r14, r6
    1868:	e2 2a       	or	r14, r18
    186a:	f3 2a       	or	r15, r19
    186c:	04 2b       	or	r16, r20
    186e:	15 2b       	or	r17, r21
    1870:	29 96       	adiw	r28, 0x09	; 9
    1872:	ec ae       	std	Y+60, r14	; 0x3c
    1874:	fd ae       	std	Y+61, r15	; 0x3d
    1876:	0e af       	std	Y+62, r16	; 0x3e
    1878:	1f af       	std	Y+63, r17	; 0x3f
    187a:	29 97       	sbiw	r28, 0x09	; 9
    187c:	32 01       	movw	r6, r4
    187e:	88 24       	eor	r8, r8
    1880:	99 24       	eor	r9, r9
    1882:	92 01       	movw	r18, r4
    1884:	81 01       	movw	r16, r2
    1886:	20 70       	andi	r18, 0x00	; 0
    1888:	30 70       	andi	r19, 0x00	; 0
    188a:	6d 96       	adiw	r28, 0x1d	; 29
    188c:	0c af       	std	Y+60, r16	; 0x3c
    188e:	1d af       	std	Y+61, r17	; 0x3d
    1890:	2e af       	std	Y+62, r18	; 0x3e
    1892:	3f af       	std	Y+63, r19	; 0x3f
    1894:	6d 97       	sbiw	r28, 0x1d	; 29
    1896:	c6 01       	movw	r24, r12
    1898:	b5 01       	movw	r22, r10
    189a:	a4 01       	movw	r20, r8
    189c:	93 01       	movw	r18, r6
    189e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    18a2:	7b 01       	movw	r14, r22
    18a4:	8c 01       	movw	r16, r24
    18a6:	c6 01       	movw	r24, r12
    18a8:	b5 01       	movw	r22, r10
    18aa:	a4 01       	movw	r20, r8
    18ac:	93 01       	movw	r18, r6
    18ae:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    18b2:	ca 01       	movw	r24, r20
    18b4:	b9 01       	movw	r22, r18
    18b6:	6d 96       	adiw	r28, 0x1d	; 29
    18b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    18bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18be:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c0:	6d 97       	sbiw	r28, 0x1d	; 29
    18c2:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    18c6:	9b 01       	movw	r18, r22
    18c8:	ac 01       	movw	r20, r24
    18ca:	87 01       	movw	r16, r14
    18cc:	ff 24       	eor	r15, r15
    18ce:	ee 24       	eor	r14, r14
    18d0:	29 96       	adiw	r28, 0x09	; 9
    18d2:	ac ac       	ldd	r10, Y+60	; 0x3c
    18d4:	bd ac       	ldd	r11, Y+61	; 0x3d
    18d6:	ce ac       	ldd	r12, Y+62	; 0x3e
    18d8:	df ac       	ldd	r13, Y+63	; 0x3f
    18da:	29 97       	sbiw	r28, 0x09	; 9
    18dc:	c6 01       	movw	r24, r12
    18de:	aa 27       	eor	r26, r26
    18e0:	bb 27       	eor	r27, r27
    18e2:	5c 01       	movw	r10, r24
    18e4:	6d 01       	movw	r12, r26
    18e6:	ae 28       	or	r10, r14
    18e8:	bf 28       	or	r11, r15
    18ea:	c0 2a       	or	r12, r16
    18ec:	d1 2a       	or	r13, r17
    18ee:	a2 16       	cp	r10, r18
    18f0:	b3 06       	cpc	r11, r19
    18f2:	c4 06       	cpc	r12, r20
    18f4:	d5 06       	cpc	r13, r21
    18f6:	90 f4       	brcc	.+36     	; 0x191c <__moddi3+0x6e4>
    18f8:	a2 0c       	add	r10, r2
    18fa:	b3 1c       	adc	r11, r3
    18fc:	c4 1c       	adc	r12, r4
    18fe:	d5 1c       	adc	r13, r5
    1900:	a2 14       	cp	r10, r2
    1902:	b3 04       	cpc	r11, r3
    1904:	c4 04       	cpc	r12, r4
    1906:	d5 04       	cpc	r13, r5
    1908:	48 f0       	brcs	.+18     	; 0x191c <__moddi3+0x6e4>
    190a:	a2 16       	cp	r10, r18
    190c:	b3 06       	cpc	r11, r19
    190e:	c4 06       	cpc	r12, r20
    1910:	d5 06       	cpc	r13, r21
    1912:	20 f4       	brcc	.+8      	; 0x191c <__moddi3+0x6e4>
    1914:	a2 0c       	add	r10, r2
    1916:	b3 1c       	adc	r11, r3
    1918:	c4 1c       	adc	r12, r4
    191a:	d5 1c       	adc	r13, r5
    191c:	a2 1a       	sub	r10, r18
    191e:	b3 0a       	sbc	r11, r19
    1920:	c4 0a       	sbc	r12, r20
    1922:	d5 0a       	sbc	r13, r21
    1924:	c6 01       	movw	r24, r12
    1926:	b5 01       	movw	r22, r10
    1928:	a4 01       	movw	r20, r8
    192a:	93 01       	movw	r18, r6
    192c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1930:	7b 01       	movw	r14, r22
    1932:	8c 01       	movw	r16, r24
    1934:	c6 01       	movw	r24, r12
    1936:	b5 01       	movw	r22, r10
    1938:	a4 01       	movw	r20, r8
    193a:	93 01       	movw	r18, r6
    193c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1940:	ca 01       	movw	r24, r20
    1942:	b9 01       	movw	r22, r18
    1944:	6d 96       	adiw	r28, 0x1d	; 29
    1946:	2c ad       	ldd	r18, Y+60	; 0x3c
    1948:	3d ad       	ldd	r19, Y+61	; 0x3d
    194a:	4e ad       	ldd	r20, Y+62	; 0x3e
    194c:	5f ad       	ldd	r21, Y+63	; 0x3f
    194e:	6d 97       	sbiw	r28, 0x1d	; 29
    1950:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	87 01       	movw	r16, r14
    195a:	ff 24       	eor	r15, r15
    195c:	ee 24       	eor	r14, r14
    195e:	29 96       	adiw	r28, 0x09	; 9
    1960:	8c ad       	ldd	r24, Y+60	; 0x3c
    1962:	9d ad       	ldd	r25, Y+61	; 0x3d
    1964:	ae ad       	ldd	r26, Y+62	; 0x3e
    1966:	bf ad       	ldd	r27, Y+63	; 0x3f
    1968:	29 97       	sbiw	r28, 0x09	; 9
    196a:	a0 70       	andi	r26, 0x00	; 0
    196c:	b0 70       	andi	r27, 0x00	; 0
    196e:	57 01       	movw	r10, r14
    1970:	68 01       	movw	r12, r16
    1972:	a8 2a       	or	r10, r24
    1974:	b9 2a       	or	r11, r25
    1976:	ca 2a       	or	r12, r26
    1978:	db 2a       	or	r13, r27
    197a:	a2 16       	cp	r10, r18
    197c:	b3 06       	cpc	r11, r19
    197e:	c4 06       	cpc	r12, r20
    1980:	d5 06       	cpc	r13, r21
    1982:	90 f4       	brcc	.+36     	; 0x19a8 <__moddi3+0x770>
    1984:	a2 0c       	add	r10, r2
    1986:	b3 1c       	adc	r11, r3
    1988:	c4 1c       	adc	r12, r4
    198a:	d5 1c       	adc	r13, r5
    198c:	a2 14       	cp	r10, r2
    198e:	b3 04       	cpc	r11, r3
    1990:	c4 04       	cpc	r12, r4
    1992:	d5 04       	cpc	r13, r5
    1994:	48 f0       	brcs	.+18     	; 0x19a8 <__moddi3+0x770>
    1996:	a2 16       	cp	r10, r18
    1998:	b3 06       	cpc	r11, r19
    199a:	c4 06       	cpc	r12, r20
    199c:	d5 06       	cpc	r13, r21
    199e:	20 f4       	brcc	.+8      	; 0x19a8 <__moddi3+0x770>
    19a0:	a2 0c       	add	r10, r2
    19a2:	b3 1c       	adc	r11, r3
    19a4:	c4 1c       	adc	r12, r4
    19a6:	d5 1c       	adc	r13, r5
    19a8:	e8 96       	adiw	r28, 0x38	; 56
    19aa:	ec ac       	ldd	r14, Y+60	; 0x3c
    19ac:	fd ac       	ldd	r15, Y+61	; 0x3d
    19ae:	0e ad       	ldd	r16, Y+62	; 0x3e
    19b0:	1f ad       	ldd	r17, Y+63	; 0x3f
    19b2:	e8 97       	sbiw	r28, 0x38	; 56
    19b4:	e4 96       	adiw	r28, 0x34	; 52
    19b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    19b8:	e4 97       	sbiw	r28, 0x34	; 52
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <__moddi3+0x78c>
    19bc:	ee 0c       	add	r14, r14
    19be:	ff 1c       	adc	r15, r15
    19c0:	00 1f       	adc	r16, r16
    19c2:	11 1f       	adc	r17, r17
    19c4:	0a 94       	dec	r0
    19c6:	d2 f7       	brpl	.-12     	; 0x19bc <__moddi3+0x784>
    19c8:	2d 96       	adiw	r28, 0x0d	; 13
    19ca:	ec ae       	std	Y+60, r14	; 0x3c
    19cc:	fd ae       	std	Y+61, r15	; 0x3d
    19ce:	0e af       	std	Y+62, r16	; 0x3e
    19d0:	1f af       	std	Y+63, r17	; 0x3f
    19d2:	2d 97       	sbiw	r28, 0x0d	; 13
    19d4:	a2 1a       	sub	r10, r18
    19d6:	b3 0a       	sbc	r11, r19
    19d8:	c4 0a       	sbc	r12, r20
    19da:	d5 0a       	sbc	r13, r21
    19dc:	32 01       	movw	r6, r4
    19de:	88 24       	eor	r8, r8
    19e0:	99 24       	eor	r9, r9
    19e2:	92 01       	movw	r18, r4
    19e4:	81 01       	movw	r16, r2
    19e6:	20 70       	andi	r18, 0x00	; 0
    19e8:	30 70       	andi	r19, 0x00	; 0
    19ea:	a1 96       	adiw	r28, 0x21	; 33
    19ec:	0c af       	std	Y+60, r16	; 0x3c
    19ee:	1d af       	std	Y+61, r17	; 0x3d
    19f0:	2e af       	std	Y+62, r18	; 0x3e
    19f2:	3f af       	std	Y+63, r19	; 0x3f
    19f4:	a1 97       	sbiw	r28, 0x21	; 33
    19f6:	c6 01       	movw	r24, r12
    19f8:	b5 01       	movw	r22, r10
    19fa:	a4 01       	movw	r20, r8
    19fc:	93 01       	movw	r18, r6
    19fe:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1a02:	7b 01       	movw	r14, r22
    1a04:	8c 01       	movw	r16, r24
    1a06:	c6 01       	movw	r24, r12
    1a08:	b5 01       	movw	r22, r10
    1a0a:	a4 01       	movw	r20, r8
    1a0c:	93 01       	movw	r18, r6
    1a0e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1a12:	ca 01       	movw	r24, r20
    1a14:	b9 01       	movw	r22, r18
    1a16:	a1 96       	adiw	r28, 0x21	; 33
    1a18:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a20:	a1 97       	sbiw	r28, 0x21	; 33
    1a22:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1a26:	9b 01       	movw	r18, r22
    1a28:	ac 01       	movw	r20, r24
    1a2a:	87 01       	movw	r16, r14
    1a2c:	ff 24       	eor	r15, r15
    1a2e:	ee 24       	eor	r14, r14
    1a30:	2d 96       	adiw	r28, 0x0d	; 13
    1a32:	ac ac       	ldd	r10, Y+60	; 0x3c
    1a34:	bd ac       	ldd	r11, Y+61	; 0x3d
    1a36:	ce ac       	ldd	r12, Y+62	; 0x3e
    1a38:	df ac       	ldd	r13, Y+63	; 0x3f
    1a3a:	2d 97       	sbiw	r28, 0x0d	; 13
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	aa 27       	eor	r26, r26
    1a40:	bb 27       	eor	r27, r27
    1a42:	57 01       	movw	r10, r14
    1a44:	68 01       	movw	r12, r16
    1a46:	a8 2a       	or	r10, r24
    1a48:	b9 2a       	or	r11, r25
    1a4a:	ca 2a       	or	r12, r26
    1a4c:	db 2a       	or	r13, r27
    1a4e:	a2 16       	cp	r10, r18
    1a50:	b3 06       	cpc	r11, r19
    1a52:	c4 06       	cpc	r12, r20
    1a54:	d5 06       	cpc	r13, r21
    1a56:	90 f4       	brcc	.+36     	; 0x1a7c <__moddi3+0x844>
    1a58:	a2 0c       	add	r10, r2
    1a5a:	b3 1c       	adc	r11, r3
    1a5c:	c4 1c       	adc	r12, r4
    1a5e:	d5 1c       	adc	r13, r5
    1a60:	a2 14       	cp	r10, r2
    1a62:	b3 04       	cpc	r11, r3
    1a64:	c4 04       	cpc	r12, r4
    1a66:	d5 04       	cpc	r13, r5
    1a68:	48 f0       	brcs	.+18     	; 0x1a7c <__moddi3+0x844>
    1a6a:	a2 16       	cp	r10, r18
    1a6c:	b3 06       	cpc	r11, r19
    1a6e:	c4 06       	cpc	r12, r20
    1a70:	d5 06       	cpc	r13, r21
    1a72:	20 f4       	brcc	.+8      	; 0x1a7c <__moddi3+0x844>
    1a74:	a2 0c       	add	r10, r2
    1a76:	b3 1c       	adc	r11, r3
    1a78:	c4 1c       	adc	r12, r4
    1a7a:	d5 1c       	adc	r13, r5
    1a7c:	a2 1a       	sub	r10, r18
    1a7e:	b3 0a       	sbc	r11, r19
    1a80:	c4 0a       	sbc	r12, r20
    1a82:	d5 0a       	sbc	r13, r21
    1a84:	c6 01       	movw	r24, r12
    1a86:	b5 01       	movw	r22, r10
    1a88:	a4 01       	movw	r20, r8
    1a8a:	93 01       	movw	r18, r6
    1a8c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1a90:	7b 01       	movw	r14, r22
    1a92:	8c 01       	movw	r16, r24
    1a94:	c6 01       	movw	r24, r12
    1a96:	b5 01       	movw	r22, r10
    1a98:	a4 01       	movw	r20, r8
    1a9a:	93 01       	movw	r18, r6
    1a9c:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	a1 96       	adiw	r28, 0x21	; 33
    1aa6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1aa8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1aae:	a1 97       	sbiw	r28, 0x21	; 33
    1ab0:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1ab4:	9b 01       	movw	r18, r22
    1ab6:	ac 01       	movw	r20, r24
    1ab8:	87 01       	movw	r16, r14
    1aba:	ff 24       	eor	r15, r15
    1abc:	ee 24       	eor	r14, r14
    1abe:	2d 96       	adiw	r28, 0x0d	; 13
    1ac0:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ac2:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ac4:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ac6:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ac8:	2d 97       	sbiw	r28, 0x0d	; 13
    1aca:	a0 70       	andi	r26, 0x00	; 0
    1acc:	b0 70       	andi	r27, 0x00	; 0
    1ace:	e8 2a       	or	r14, r24
    1ad0:	f9 2a       	or	r15, r25
    1ad2:	0a 2b       	or	r16, r26
    1ad4:	1b 2b       	or	r17, r27
    1ad6:	e2 16       	cp	r14, r18
    1ad8:	f3 06       	cpc	r15, r19
    1ada:	04 07       	cpc	r16, r20
    1adc:	15 07       	cpc	r17, r21
    1ade:	90 f4       	brcc	.+36     	; 0x1b04 <__moddi3+0x8cc>
    1ae0:	e2 0c       	add	r14, r2
    1ae2:	f3 1c       	adc	r15, r3
    1ae4:	04 1d       	adc	r16, r4
    1ae6:	15 1d       	adc	r17, r5
    1ae8:	e2 14       	cp	r14, r2
    1aea:	f3 04       	cpc	r15, r3
    1aec:	04 05       	cpc	r16, r4
    1aee:	15 05       	cpc	r17, r5
    1af0:	48 f0       	brcs	.+18     	; 0x1b04 <__moddi3+0x8cc>
    1af2:	e2 16       	cp	r14, r18
    1af4:	f3 06       	cpc	r15, r19
    1af6:	04 07       	cpc	r16, r20
    1af8:	15 07       	cpc	r17, r21
    1afa:	20 f4       	brcc	.+8      	; 0x1b04 <__moddi3+0x8cc>
    1afc:	e2 0c       	add	r14, r2
    1afe:	f3 1c       	adc	r15, r3
    1b00:	04 1d       	adc	r16, r4
    1b02:	15 1d       	adc	r17, r5
    1b04:	e2 1a       	sub	r14, r18
    1b06:	f3 0a       	sbc	r15, r19
    1b08:	04 0b       	sbc	r16, r20
    1b0a:	15 0b       	sbc	r17, r21
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	c7 01       	movw	r24, r14
    1b10:	62 96       	adiw	r28, 0x12	; 18
    1b12:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b14:	62 97       	sbiw	r28, 0x12	; 18
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <__moddi3+0x8e8>
    1b18:	b6 95       	lsr	r27
    1b1a:	a7 95       	ror	r26
    1b1c:	97 95       	ror	r25
    1b1e:	87 95       	ror	r24
    1b20:	0a 94       	dec	r0
    1b22:	d2 f7       	brpl	.-12     	; 0x1b18 <__moddi3+0x8e0>
    1b24:	89 a7       	std	Y+41, r24	; 0x29
    1b26:	9a a7       	std	Y+42, r25	; 0x2a
    1b28:	ab a7       	std	Y+43, r26	; 0x2b
    1b2a:	bc a7       	std	Y+44, r27	; 0x2c
    1b2c:	1d a6       	std	Y+45, r1	; 0x2d
    1b2e:	1e a6       	std	Y+46, r1	; 0x2e
    1b30:	1f a6       	std	Y+47, r1	; 0x2f
    1b32:	18 aa       	std	Y+48, r1	; 0x30
    1b34:	89 8b       	std	Y+17, r24	; 0x11
    1b36:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b38:	8a 8b       	std	Y+18, r24	; 0x12
    1b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b40:	8c 8b       	std	Y+20, r24	; 0x14
    1b42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b44:	8d 8b       	std	Y+21, r24	; 0x15
    1b46:	2f c3       	rjmp	.+1630   	; 0x21a6 <__moddi3+0xf6e>
    1b48:	6a 14       	cp	r6, r10
    1b4a:	7b 04       	cpc	r7, r11
    1b4c:	8c 04       	cpc	r8, r12
    1b4e:	9d 04       	cpc	r9, r13
    1b50:	48 f4       	brcc	.+18     	; 0x1b64 <__moddi3+0x92c>
    1b52:	49 8b       	std	Y+17, r20	; 0x11
    1b54:	5a 8b       	std	Y+18, r21	; 0x12
    1b56:	6b 8b       	std	Y+19, r22	; 0x13
    1b58:	7c 8b       	std	Y+20, r23	; 0x14
    1b5a:	8d 8b       	std	Y+21, r24	; 0x15
    1b5c:	9e 8b       	std	Y+22, r25	; 0x16
    1b5e:	2f 8b       	std	Y+23, r18	; 0x17
    1b60:	38 8f       	std	Y+24, r19	; 0x18
    1b62:	27 c3       	rjmp	.+1614   	; 0x21b2 <__moddi3+0xf7a>
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	a0 16       	cp	r10, r16
    1b68:	00 e0       	ldi	r16, 0x00	; 0
    1b6a:	b0 06       	cpc	r11, r16
    1b6c:	01 e0       	ldi	r16, 0x01	; 1
    1b6e:	c0 06       	cpc	r12, r16
    1b70:	00 e0       	ldi	r16, 0x00	; 0
    1b72:	d0 06       	cpc	r13, r16
    1b74:	88 f4       	brcc	.+34     	; 0x1b98 <__moddi3+0x960>
    1b76:	1f ef       	ldi	r17, 0xFF	; 255
    1b78:	a1 16       	cp	r10, r17
    1b7a:	b1 04       	cpc	r11, r1
    1b7c:	c1 04       	cpc	r12, r1
    1b7e:	d1 04       	cpc	r13, r1
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <__moddi3+0x958>
    1b82:	30 f0       	brcs	.+12     	; 0x1b90 <__moddi3+0x958>
    1b84:	28 e0       	ldi	r18, 0x08	; 8
    1b86:	e2 2e       	mov	r14, r18
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	01 2d       	mov	r16, r1
    1b8c:	11 2d       	mov	r17, r1
    1b8e:	18 c0       	rjmp	.+48     	; 0x1bc0 <__moddi3+0x988>
    1b90:	ee 24       	eor	r14, r14
    1b92:	ff 24       	eor	r15, r15
    1b94:	87 01       	movw	r16, r14
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <__moddi3+0x988>
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	a2 16       	cp	r10, r18
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	b2 06       	cpc	r11, r18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	c2 06       	cpc	r12, r18
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	d2 06       	cpc	r13, r18
    1ba8:	30 f0       	brcs	.+12     	; 0x1bb6 <__moddi3+0x97e>
    1baa:	98 e1       	ldi	r25, 0x18	; 24
    1bac:	e9 2e       	mov	r14, r25
    1bae:	f1 2c       	mov	r15, r1
    1bb0:	01 2d       	mov	r16, r1
    1bb2:	11 2d       	mov	r17, r1
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <__moddi3+0x988>
    1bb6:	80 e1       	ldi	r24, 0x10	; 16
    1bb8:	e8 2e       	mov	r14, r24
    1bba:	f1 2c       	mov	r15, r1
    1bbc:	01 2d       	mov	r16, r1
    1bbe:	11 2d       	mov	r17, r1
    1bc0:	d6 01       	movw	r26, r12
    1bc2:	c5 01       	movw	r24, r10
    1bc4:	0e 2c       	mov	r0, r14
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <__moddi3+0x998>
    1bc8:	b6 95       	lsr	r27
    1bca:	a7 95       	ror	r26
    1bcc:	97 95       	ror	r25
    1bce:	87 95       	ror	r24
    1bd0:	0a 94       	dec	r0
    1bd2:	d2 f7       	brpl	.-12     	; 0x1bc8 <__moddi3+0x990>
    1bd4:	83 59       	subi	r24, 0x93	; 147
    1bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd8:	dc 01       	movw	r26, r24
    1bda:	2c 91       	ld	r18, X
    1bdc:	80 e2       	ldi	r24, 0x20	; 32
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	8e 19       	sub	r24, r14
    1be6:	9f 09       	sbc	r25, r15
    1be8:	a0 0b       	sbc	r26, r16
    1bea:	b1 0b       	sbc	r27, r17
    1bec:	82 1b       	sub	r24, r18
    1bee:	91 09       	sbc	r25, r1
    1bf0:	a1 09       	sbc	r26, r1
    1bf2:	b1 09       	sbc	r27, r1
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	a1 05       	cpc	r26, r1
    1bf8:	b1 05       	cpc	r27, r1
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <__moddi3+0x9c6>
    1bfc:	59 c0       	rjmp	.+178    	; 0x1cb0 <__moddi3+0xa78>
    1bfe:	a6 14       	cp	r10, r6
    1c00:	b7 04       	cpc	r11, r7
    1c02:	c8 04       	cpc	r12, r8
    1c04:	d9 04       	cpc	r13, r9
    1c06:	70 f0       	brcs	.+28     	; 0x1c24 <__moddi3+0x9ec>
    1c08:	e8 96       	adiw	r28, 0x38	; 56
    1c0a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1c0c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1c0e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1c10:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c12:	e8 97       	sbiw	r28, 0x38	; 56
    1c14:	e2 14       	cp	r14, r2
    1c16:	f3 04       	cpc	r15, r3
    1c18:	04 05       	cpc	r16, r4
    1c1a:	15 05       	cpc	r17, r5
    1c1c:	18 f4       	brcc	.+6      	; 0x1c24 <__moddi3+0x9ec>
    1c1e:	d8 01       	movw	r26, r16
    1c20:	c7 01       	movw	r24, r14
    1c22:	2f c0       	rjmp	.+94     	; 0x1c82 <__moddi3+0xa4a>
    1c24:	e8 96       	adiw	r28, 0x38	; 56
    1c26:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c28:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c2e:	e8 97       	sbiw	r28, 0x38	; 56
    1c30:	82 19       	sub	r24, r2
    1c32:	93 09       	sbc	r25, r3
    1c34:	a4 09       	sbc	r26, r4
    1c36:	b5 09       	sbc	r27, r5
    1c38:	a4 01       	movw	r20, r8
    1c3a:	93 01       	movw	r18, r6
    1c3c:	2a 19       	sub	r18, r10
    1c3e:	3b 09       	sbc	r19, r11
    1c40:	4c 09       	sbc	r20, r12
    1c42:	5d 09       	sbc	r21, r13
    1c44:	aa 24       	eor	r10, r10
    1c46:	bb 24       	eor	r11, r11
    1c48:	65 01       	movw	r12, r10
    1c4a:	e8 96       	adiw	r28, 0x38	; 56
    1c4c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1c4e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1c50:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c52:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c54:	e8 97       	sbiw	r28, 0x38	; 56
    1c56:	68 16       	cp	r6, r24
    1c58:	79 06       	cpc	r7, r25
    1c5a:	8a 06       	cpc	r8, r26
    1c5c:	9b 06       	cpc	r9, r27
    1c5e:	28 f4       	brcc	.+10     	; 0x1c6a <__moddi3+0xa32>
    1c60:	11 e0       	ldi	r17, 0x01	; 1
    1c62:	a1 2e       	mov	r10, r17
    1c64:	b1 2c       	mov	r11, r1
    1c66:	c1 2c       	mov	r12, r1
    1c68:	d1 2c       	mov	r13, r1
    1c6a:	79 01       	movw	r14, r18
    1c6c:	8a 01       	movw	r16, r20
    1c6e:	ea 18       	sub	r14, r10
    1c70:	fb 08       	sbc	r15, r11
    1c72:	0c 09       	sbc	r16, r12
    1c74:	1d 09       	sbc	r17, r13
    1c76:	61 96       	adiw	r28, 0x11	; 17
    1c78:	ec ae       	std	Y+60, r14	; 0x3c
    1c7a:	fd ae       	std	Y+61, r15	; 0x3d
    1c7c:	0e af       	std	Y+62, r16	; 0x3e
    1c7e:	1f af       	std	Y+63, r17	; 0x3f
    1c80:	61 97       	sbiw	r28, 0x11	; 17
    1c82:	89 a7       	std	Y+41, r24	; 0x29
    1c84:	9a a7       	std	Y+42, r25	; 0x2a
    1c86:	ab a7       	std	Y+43, r26	; 0x2b
    1c88:	bc a7       	std	Y+44, r27	; 0x2c
    1c8a:	61 96       	adiw	r28, 0x11	; 17
    1c8c:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c8e:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c90:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c92:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c94:	61 97       	sbiw	r28, 0x11	; 17
    1c96:	0d a7       	std	Y+45, r16	; 0x2d
    1c98:	1e a7       	std	Y+46, r17	; 0x2e
    1c9a:	2f a7       	std	Y+47, r18	; 0x2f
    1c9c:	38 ab       	std	Y+48, r19	; 0x30
    1c9e:	89 8b       	std	Y+17, r24	; 0x11
    1ca0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ca2:	8a 8b       	std	Y+18, r24	; 0x12
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1caa:	8c 8b       	std	Y+20, r24	; 0x14
    1cac:	0d 8b       	std	Y+21, r16	; 0x15
    1cae:	7b c2       	rjmp	.+1270   	; 0x21a6 <__moddi3+0xf6e>
    1cb0:	e3 96       	adiw	r28, 0x33	; 51
    1cb2:	8f af       	std	Y+63, r24	; 0x3f
    1cb4:	e3 97       	sbiw	r28, 0x33	; 51
    1cb6:	a6 01       	movw	r20, r12
    1cb8:	95 01       	movw	r18, r10
    1cba:	08 2e       	mov	r0, r24
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <__moddi3+0xa8e>
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	44 1f       	adc	r20, r20
    1cc4:	55 1f       	adc	r21, r21
    1cc6:	0a 94       	dec	r0
    1cc8:	d2 f7       	brpl	.-12     	; 0x1cbe <__moddi3+0xa86>
    1cca:	10 e2       	ldi	r17, 0x20	; 32
    1ccc:	18 1b       	sub	r17, r24
    1cce:	e2 96       	adiw	r28, 0x32	; 50
    1cd0:	1f af       	std	Y+63, r17	; 0x3f
    1cd2:	e2 97       	sbiw	r28, 0x32	; 50
    1cd4:	d2 01       	movw	r26, r4
    1cd6:	c1 01       	movw	r24, r2
    1cd8:	01 2e       	mov	r0, r17
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <__moddi3+0xaac>
    1cdc:	b6 95       	lsr	r27
    1cde:	a7 95       	ror	r26
    1ce0:	97 95       	ror	r25
    1ce2:	87 95       	ror	r24
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <__moddi3+0xaa4>
    1ce8:	5c 01       	movw	r10, r24
    1cea:	6d 01       	movw	r12, r26
    1cec:	a2 2a       	or	r10, r18
    1cee:	b3 2a       	or	r11, r19
    1cf0:	c4 2a       	or	r12, r20
    1cf2:	d5 2a       	or	r13, r21
    1cf4:	25 96       	adiw	r28, 0x05	; 5
    1cf6:	ac ae       	std	Y+60, r10	; 0x3c
    1cf8:	bd ae       	std	Y+61, r11	; 0x3d
    1cfa:	ce ae       	std	Y+62, r12	; 0x3e
    1cfc:	df ae       	std	Y+63, r13	; 0x3f
    1cfe:	25 97       	sbiw	r28, 0x05	; 5
    1d00:	72 01       	movw	r14, r4
    1d02:	61 01       	movw	r12, r2
    1d04:	e3 96       	adiw	r28, 0x33	; 51
    1d06:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d08:	e3 97       	sbiw	r28, 0x33	; 51
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__moddi3+0xadc>
    1d0c:	cc 0c       	add	r12, r12
    1d0e:	dd 1c       	adc	r13, r13
    1d10:	ee 1c       	adc	r14, r14
    1d12:	ff 1c       	adc	r15, r15
    1d14:	0a 94       	dec	r0
    1d16:	d2 f7       	brpl	.-12     	; 0x1d0c <__moddi3+0xad4>
    1d18:	21 96       	adiw	r28, 0x01	; 1
    1d1a:	cc ae       	std	Y+60, r12	; 0x3c
    1d1c:	dd ae       	std	Y+61, r13	; 0x3d
    1d1e:	ee ae       	std	Y+62, r14	; 0x3e
    1d20:	ff ae       	std	Y+63, r15	; 0x3f
    1d22:	21 97       	sbiw	r28, 0x01	; 1
    1d24:	64 01       	movw	r12, r8
    1d26:	53 01       	movw	r10, r6
    1d28:	01 2e       	mov	r0, r17
    1d2a:	04 c0       	rjmp	.+8      	; 0x1d34 <__moddi3+0xafc>
    1d2c:	d6 94       	lsr	r13
    1d2e:	c7 94       	ror	r12
    1d30:	b7 94       	ror	r11
    1d32:	a7 94       	ror	r10
    1d34:	0a 94       	dec	r0
    1d36:	d2 f7       	brpl	.-12     	; 0x1d2c <__moddi3+0xaf4>
    1d38:	a4 01       	movw	r20, r8
    1d3a:	93 01       	movw	r18, r6
    1d3c:	e3 96       	adiw	r28, 0x33	; 51
    1d3e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d40:	e3 97       	sbiw	r28, 0x33	; 51
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <__moddi3+0xb14>
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	44 1f       	adc	r20, r20
    1d4a:	55 1f       	adc	r21, r21
    1d4c:	0a 94       	dec	r0
    1d4e:	d2 f7       	brpl	.-12     	; 0x1d44 <__moddi3+0xb0c>
    1d50:	e8 96       	adiw	r28, 0x38	; 56
    1d52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d5a:	e8 97       	sbiw	r28, 0x38	; 56
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__moddi3+0xb2e>
    1d5e:	b6 95       	lsr	r27
    1d60:	a7 95       	ror	r26
    1d62:	97 95       	ror	r25
    1d64:	87 95       	ror	r24
    1d66:	1a 95       	dec	r17
    1d68:	d2 f7       	brpl	.-12     	; 0x1d5e <__moddi3+0xb26>
    1d6a:	7c 01       	movw	r14, r24
    1d6c:	8d 01       	movw	r16, r26
    1d6e:	e2 2a       	or	r14, r18
    1d70:	f3 2a       	or	r15, r19
    1d72:	04 2b       	or	r16, r20
    1d74:	15 2b       	or	r17, r21
    1d76:	e9 ae       	std	Y+57, r14	; 0x39
    1d78:	fa ae       	std	Y+58, r15	; 0x3a
    1d7a:	0b af       	std	Y+59, r16	; 0x3b
    1d7c:	1c af       	std	Y+60, r17	; 0x3c
    1d7e:	e8 96       	adiw	r28, 0x38	; 56
    1d80:	0c ad       	ldd	r16, Y+60	; 0x3c
    1d82:	1d ad       	ldd	r17, Y+61	; 0x3d
    1d84:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d86:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d88:	e8 97       	sbiw	r28, 0x38	; 56
    1d8a:	e3 96       	adiw	r28, 0x33	; 51
    1d8c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d8e:	e3 97       	sbiw	r28, 0x33	; 51
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <__moddi3+0xb62>
    1d92:	00 0f       	add	r16, r16
    1d94:	11 1f       	adc	r17, r17
    1d96:	22 1f       	adc	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	0a 94       	dec	r0
    1d9c:	d2 f7       	brpl	.-12     	; 0x1d92 <__moddi3+0xb5a>
    1d9e:	0d ab       	std	Y+53, r16	; 0x35
    1da0:	1e ab       	std	Y+54, r17	; 0x36
    1da2:	2f ab       	std	Y+55, r18	; 0x37
    1da4:	38 af       	std	Y+56, r19	; 0x38
    1da6:	25 96       	adiw	r28, 0x05	; 5
    1da8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1daa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1dac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1db0:	25 97       	sbiw	r28, 0x05	; 5
    1db2:	3a 01       	movw	r6, r20
    1db4:	88 24       	eor	r8, r8
    1db6:	99 24       	eor	r9, r9
    1db8:	40 70       	andi	r20, 0x00	; 0
    1dba:	50 70       	andi	r21, 0x00	; 0
    1dbc:	a5 96       	adiw	r28, 0x25	; 37
    1dbe:	2c af       	std	Y+60, r18	; 0x3c
    1dc0:	3d af       	std	Y+61, r19	; 0x3d
    1dc2:	4e af       	std	Y+62, r20	; 0x3e
    1dc4:	5f af       	std	Y+63, r21	; 0x3f
    1dc6:	a5 97       	sbiw	r28, 0x25	; 37
    1dc8:	c6 01       	movw	r24, r12
    1dca:	b5 01       	movw	r22, r10
    1dcc:	a4 01       	movw	r20, r8
    1dce:	93 01       	movw	r18, r6
    1dd0:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1dd4:	7b 01       	movw	r14, r22
    1dd6:	8c 01       	movw	r16, r24
    1dd8:	c6 01       	movw	r24, r12
    1dda:	b5 01       	movw	r22, r10
    1ddc:	a4 01       	movw	r20, r8
    1dde:	93 01       	movw	r18, r6
    1de0:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1de4:	c9 01       	movw	r24, r18
    1de6:	da 01       	movw	r26, r20
    1de8:	1c 01       	movw	r2, r24
    1dea:	2d 01       	movw	r4, r26
    1dec:	c2 01       	movw	r24, r4
    1dee:	b1 01       	movw	r22, r2
    1df0:	a5 96       	adiw	r28, 0x25	; 37
    1df2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1df4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1df6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1df8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dfa:	a5 97       	sbiw	r28, 0x25	; 37
    1dfc:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	87 01       	movw	r16, r14
    1e06:	ff 24       	eor	r15, r15
    1e08:	ee 24       	eor	r14, r14
    1e0a:	a9 ac       	ldd	r10, Y+57	; 0x39
    1e0c:	ba ac       	ldd	r11, Y+58	; 0x3a
    1e0e:	cb ac       	ldd	r12, Y+59	; 0x3b
    1e10:	dc ac       	ldd	r13, Y+60	; 0x3c
    1e12:	c6 01       	movw	r24, r12
    1e14:	aa 27       	eor	r26, r26
    1e16:	bb 27       	eor	r27, r27
    1e18:	57 01       	movw	r10, r14
    1e1a:	68 01       	movw	r12, r16
    1e1c:	a8 2a       	or	r10, r24
    1e1e:	b9 2a       	or	r11, r25
    1e20:	ca 2a       	or	r12, r26
    1e22:	db 2a       	or	r13, r27
    1e24:	a2 16       	cp	r10, r18
    1e26:	b3 06       	cpc	r11, r19
    1e28:	c4 06       	cpc	r12, r20
    1e2a:	d5 06       	cpc	r13, r21
    1e2c:	10 f5       	brcc	.+68     	; 0x1e72 <__moddi3+0xc3a>
    1e2e:	08 94       	sec
    1e30:	21 08       	sbc	r2, r1
    1e32:	31 08       	sbc	r3, r1
    1e34:	41 08       	sbc	r4, r1
    1e36:	51 08       	sbc	r5, r1
    1e38:	25 96       	adiw	r28, 0x05	; 5
    1e3a:	ec ac       	ldd	r14, Y+60	; 0x3c
    1e3c:	fd ac       	ldd	r15, Y+61	; 0x3d
    1e3e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e40:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e42:	25 97       	sbiw	r28, 0x05	; 5
    1e44:	ae 0c       	add	r10, r14
    1e46:	bf 1c       	adc	r11, r15
    1e48:	c0 1e       	adc	r12, r16
    1e4a:	d1 1e       	adc	r13, r17
    1e4c:	ae 14       	cp	r10, r14
    1e4e:	bf 04       	cpc	r11, r15
    1e50:	c0 06       	cpc	r12, r16
    1e52:	d1 06       	cpc	r13, r17
    1e54:	70 f0       	brcs	.+28     	; 0x1e72 <__moddi3+0xc3a>
    1e56:	a2 16       	cp	r10, r18
    1e58:	b3 06       	cpc	r11, r19
    1e5a:	c4 06       	cpc	r12, r20
    1e5c:	d5 06       	cpc	r13, r21
    1e5e:	48 f4       	brcc	.+18     	; 0x1e72 <__moddi3+0xc3a>
    1e60:	08 94       	sec
    1e62:	21 08       	sbc	r2, r1
    1e64:	31 08       	sbc	r3, r1
    1e66:	41 08       	sbc	r4, r1
    1e68:	51 08       	sbc	r5, r1
    1e6a:	ae 0c       	add	r10, r14
    1e6c:	bf 1c       	adc	r11, r15
    1e6e:	c0 1e       	adc	r12, r16
    1e70:	d1 1e       	adc	r13, r17
    1e72:	a2 1a       	sub	r10, r18
    1e74:	b3 0a       	sbc	r11, r19
    1e76:	c4 0a       	sbc	r12, r20
    1e78:	d5 0a       	sbc	r13, r21
    1e7a:	c6 01       	movw	r24, r12
    1e7c:	b5 01       	movw	r22, r10
    1e7e:	a4 01       	movw	r20, r8
    1e80:	93 01       	movw	r18, r6
    1e82:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1e86:	7b 01       	movw	r14, r22
    1e88:	8c 01       	movw	r16, r24
    1e8a:	c6 01       	movw	r24, r12
    1e8c:	b5 01       	movw	r22, r10
    1e8e:	a4 01       	movw	r20, r8
    1e90:	93 01       	movw	r18, r6
    1e92:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    1e96:	c9 01       	movw	r24, r18
    1e98:	da 01       	movw	r26, r20
    1e9a:	3c 01       	movw	r6, r24
    1e9c:	4d 01       	movw	r8, r26
    1e9e:	c4 01       	movw	r24, r8
    1ea0:	b3 01       	movw	r22, r6
    1ea2:	a5 96       	adiw	r28, 0x25	; 37
    1ea4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ea6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ea8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eaa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eac:	a5 97       	sbiw	r28, 0x25	; 37
    1eae:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1eb2:	9b 01       	movw	r18, r22
    1eb4:	ac 01       	movw	r20, r24
    1eb6:	87 01       	movw	r16, r14
    1eb8:	ff 24       	eor	r15, r15
    1eba:	ee 24       	eor	r14, r14
    1ebc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ec0:	ab ad       	ldd	r26, Y+59	; 0x3b
    1ec2:	bc ad       	ldd	r27, Y+60	; 0x3c
    1ec4:	a0 70       	andi	r26, 0x00	; 0
    1ec6:	b0 70       	andi	r27, 0x00	; 0
    1ec8:	57 01       	movw	r10, r14
    1eca:	68 01       	movw	r12, r16
    1ecc:	a8 2a       	or	r10, r24
    1ece:	b9 2a       	or	r11, r25
    1ed0:	ca 2a       	or	r12, r26
    1ed2:	db 2a       	or	r13, r27
    1ed4:	a2 16       	cp	r10, r18
    1ed6:	b3 06       	cpc	r11, r19
    1ed8:	c4 06       	cpc	r12, r20
    1eda:	d5 06       	cpc	r13, r21
    1edc:	10 f5       	brcc	.+68     	; 0x1f22 <__moddi3+0xcea>
    1ede:	08 94       	sec
    1ee0:	61 08       	sbc	r6, r1
    1ee2:	71 08       	sbc	r7, r1
    1ee4:	81 08       	sbc	r8, r1
    1ee6:	91 08       	sbc	r9, r1
    1ee8:	25 96       	adiw	r28, 0x05	; 5
    1eea:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eec:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ef2:	25 97       	sbiw	r28, 0x05	; 5
    1ef4:	a6 0e       	add	r10, r22
    1ef6:	b7 1e       	adc	r11, r23
    1ef8:	c8 1e       	adc	r12, r24
    1efa:	d9 1e       	adc	r13, r25
    1efc:	a6 16       	cp	r10, r22
    1efe:	b7 06       	cpc	r11, r23
    1f00:	c8 06       	cpc	r12, r24
    1f02:	d9 06       	cpc	r13, r25
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__moddi3+0xcea>
    1f06:	a2 16       	cp	r10, r18
    1f08:	b3 06       	cpc	r11, r19
    1f0a:	c4 06       	cpc	r12, r20
    1f0c:	d5 06       	cpc	r13, r21
    1f0e:	48 f4       	brcc	.+18     	; 0x1f22 <__moddi3+0xcea>
    1f10:	08 94       	sec
    1f12:	61 08       	sbc	r6, r1
    1f14:	71 08       	sbc	r7, r1
    1f16:	81 08       	sbc	r8, r1
    1f18:	91 08       	sbc	r9, r1
    1f1a:	a6 0e       	add	r10, r22
    1f1c:	b7 1e       	adc	r11, r23
    1f1e:	c8 1e       	adc	r12, r24
    1f20:	d9 1e       	adc	r13, r25
    1f22:	d6 01       	movw	r26, r12
    1f24:	c5 01       	movw	r24, r10
    1f26:	82 1b       	sub	r24, r18
    1f28:	93 0b       	sbc	r25, r19
    1f2a:	a4 0b       	sbc	r26, r20
    1f2c:	b5 0b       	sbc	r27, r21
    1f2e:	89 ab       	std	Y+49, r24	; 0x31
    1f30:	9a ab       	std	Y+50, r25	; 0x32
    1f32:	ab ab       	std	Y+51, r26	; 0x33
    1f34:	bc ab       	std	Y+52, r27	; 0x34
    1f36:	d1 01       	movw	r26, r2
    1f38:	99 27       	eor	r25, r25
    1f3a:	88 27       	eor	r24, r24
    1f3c:	84 01       	movw	r16, r8
    1f3e:	73 01       	movw	r14, r6
    1f40:	e8 2a       	or	r14, r24
    1f42:	f9 2a       	or	r15, r25
    1f44:	0a 2b       	or	r16, r26
    1f46:	1b 2b       	or	r17, r27
    1f48:	8f ef       	ldi	r24, 0xFF	; 255
    1f4a:	a8 2e       	mov	r10, r24
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	b8 2e       	mov	r11, r24
    1f50:	c1 2c       	mov	r12, r1
    1f52:	d1 2c       	mov	r13, r1
    1f54:	ae 20       	and	r10, r14
    1f56:	bf 20       	and	r11, r15
    1f58:	c0 22       	and	r12, r16
    1f5a:	d1 22       	and	r13, r17
    1f5c:	78 01       	movw	r14, r16
    1f5e:	00 27       	eor	r16, r16
    1f60:	11 27       	eor	r17, r17
    1f62:	21 96       	adiw	r28, 0x01	; 1
    1f64:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f66:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f68:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f6a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f6c:	21 97       	sbiw	r28, 0x01	; 1
    1f6e:	2f ef       	ldi	r18, 0xFF	; 255
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	62 22       	and	r6, r18
    1f78:	73 22       	and	r7, r19
    1f7a:	84 22       	and	r8, r20
    1f7c:	95 22       	and	r9, r21
    1f7e:	21 96       	adiw	r28, 0x01	; 1
    1f80:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f82:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f84:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f86:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f88:	21 97       	sbiw	r28, 0x01	; 1
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	66 27       	eor	r22, r22
    1f8e:	77 27       	eor	r23, r23
    1f90:	ad 96       	adiw	r28, 0x2d	; 45
    1f92:	4c af       	std	Y+60, r20	; 0x3c
    1f94:	5d af       	std	Y+61, r21	; 0x3d
    1f96:	6e af       	std	Y+62, r22	; 0x3e
    1f98:	7f af       	std	Y+63, r23	; 0x3f
    1f9a:	ad 97       	sbiw	r28, 0x2d	; 45
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	b5 01       	movw	r22, r10
    1fa0:	a4 01       	movw	r20, r8
    1fa2:	93 01       	movw	r18, r6
    1fa4:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1fa8:	a9 96       	adiw	r28, 0x29	; 41
    1faa:	6c af       	std	Y+60, r22	; 0x3c
    1fac:	7d af       	std	Y+61, r23	; 0x3d
    1fae:	8e af       	std	Y+62, r24	; 0x3e
    1fb0:	9f af       	std	Y+63, r25	; 0x3f
    1fb2:	a9 97       	sbiw	r28, 0x29	; 41
    1fb4:	c6 01       	movw	r24, r12
    1fb6:	b5 01       	movw	r22, r10
    1fb8:	ad 96       	adiw	r28, 0x2d	; 45
    1fba:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fc2:	ad 97       	sbiw	r28, 0x2d	; 45
    1fc4:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1fc8:	1b 01       	movw	r2, r22
    1fca:	2c 01       	movw	r4, r24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	b7 01       	movw	r22, r14
    1fd0:	a4 01       	movw	r20, r8
    1fd2:	93 01       	movw	r18, r6
    1fd4:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1fd8:	5b 01       	movw	r10, r22
    1fda:	6c 01       	movw	r12, r24
    1fdc:	c8 01       	movw	r24, r16
    1fde:	b7 01       	movw	r22, r14
    1fe0:	ad 96       	adiw	r28, 0x2d	; 45
    1fe2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fe4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fe6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fe8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fea:	ad 97       	sbiw	r28, 0x2d	; 45
    1fec:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    1ff0:	7b 01       	movw	r14, r22
    1ff2:	8c 01       	movw	r16, r24
    1ff4:	a6 01       	movw	r20, r12
    1ff6:	95 01       	movw	r18, r10
    1ff8:	22 0d       	add	r18, r2
    1ffa:	33 1d       	adc	r19, r3
    1ffc:	44 1d       	adc	r20, r4
    1ffe:	55 1d       	adc	r21, r5
    2000:	a9 96       	adiw	r28, 0x29	; 41
    2002:	6c ac       	ldd	r6, Y+60	; 0x3c
    2004:	7d ac       	ldd	r7, Y+61	; 0x3d
    2006:	8e ac       	ldd	r8, Y+62	; 0x3e
    2008:	9f ac       	ldd	r9, Y+63	; 0x3f
    200a:	a9 97       	sbiw	r28, 0x29	; 41
    200c:	c4 01       	movw	r24, r8
    200e:	aa 27       	eor	r26, r26
    2010:	bb 27       	eor	r27, r27
    2012:	28 0f       	add	r18, r24
    2014:	39 1f       	adc	r19, r25
    2016:	4a 1f       	adc	r20, r26
    2018:	5b 1f       	adc	r21, r27
    201a:	2a 15       	cp	r18, r10
    201c:	3b 05       	cpc	r19, r11
    201e:	4c 05       	cpc	r20, r12
    2020:	5d 05       	cpc	r21, r13
    2022:	48 f4       	brcc	.+18     	; 0x2036 <__moddi3+0xdfe>
    2024:	81 2c       	mov	r8, r1
    2026:	91 2c       	mov	r9, r1
    2028:	e1 e0       	ldi	r30, 0x01	; 1
    202a:	ae 2e       	mov	r10, r30
    202c:	b1 2c       	mov	r11, r1
    202e:	e8 0c       	add	r14, r8
    2030:	f9 1c       	adc	r15, r9
    2032:	0a 1d       	adc	r16, r10
    2034:	1b 1d       	adc	r17, r11
    2036:	ca 01       	movw	r24, r20
    2038:	aa 27       	eor	r26, r26
    203a:	bb 27       	eor	r27, r27
    203c:	57 01       	movw	r10, r14
    203e:	68 01       	movw	r12, r16
    2040:	a8 0e       	add	r10, r24
    2042:	b9 1e       	adc	r11, r25
    2044:	ca 1e       	adc	r12, r26
    2046:	db 1e       	adc	r13, r27
    2048:	a9 01       	movw	r20, r18
    204a:	33 27       	eor	r19, r19
    204c:	22 27       	eor	r18, r18
    204e:	a9 96       	adiw	r28, 0x29	; 41
    2050:	8c ad       	ldd	r24, Y+60	; 0x3c
    2052:	9d ad       	ldd	r25, Y+61	; 0x3d
    2054:	ae ad       	ldd	r26, Y+62	; 0x3e
    2056:	bf ad       	ldd	r27, Y+63	; 0x3f
    2058:	a9 97       	sbiw	r28, 0x29	; 41
    205a:	a0 70       	andi	r26, 0x00	; 0
    205c:	b0 70       	andi	r27, 0x00	; 0
    205e:	28 0f       	add	r18, r24
    2060:	39 1f       	adc	r19, r25
    2062:	4a 1f       	adc	r20, r26
    2064:	5b 1f       	adc	r21, r27
    2066:	e9 a8       	ldd	r14, Y+49	; 0x31
    2068:	fa a8       	ldd	r15, Y+50	; 0x32
    206a:	0b a9       	ldd	r16, Y+51	; 0x33
    206c:	1c a9       	ldd	r17, Y+52	; 0x34
    206e:	ea 14       	cp	r14, r10
    2070:	fb 04       	cpc	r15, r11
    2072:	0c 05       	cpc	r16, r12
    2074:	1d 05       	cpc	r17, r13
    2076:	70 f0       	brcs	.+28     	; 0x2094 <__moddi3+0xe5c>
    2078:	ae 14       	cp	r10, r14
    207a:	bf 04       	cpc	r11, r15
    207c:	c0 06       	cpc	r12, r16
    207e:	d1 06       	cpc	r13, r17
    2080:	89 f5       	brne	.+98     	; 0x20e4 <__moddi3+0xeac>
    2082:	6d a9       	ldd	r22, Y+53	; 0x35
    2084:	7e a9       	ldd	r23, Y+54	; 0x36
    2086:	8f a9       	ldd	r24, Y+55	; 0x37
    2088:	98 ad       	ldd	r25, Y+56	; 0x38
    208a:	62 17       	cp	r22, r18
    208c:	73 07       	cpc	r23, r19
    208e:	84 07       	cpc	r24, r20
    2090:	95 07       	cpc	r25, r21
    2092:	40 f5       	brcc	.+80     	; 0x20e4 <__moddi3+0xeac>
    2094:	da 01       	movw	r26, r20
    2096:	c9 01       	movw	r24, r18
    2098:	21 96       	adiw	r28, 0x01	; 1
    209a:	6c ac       	ldd	r6, Y+60	; 0x3c
    209c:	7d ac       	ldd	r7, Y+61	; 0x3d
    209e:	8e ac       	ldd	r8, Y+62	; 0x3e
    20a0:	9f ac       	ldd	r9, Y+63	; 0x3f
    20a2:	21 97       	sbiw	r28, 0x01	; 1
    20a4:	86 19       	sub	r24, r6
    20a6:	97 09       	sbc	r25, r7
    20a8:	a8 09       	sbc	r26, r8
    20aa:	b9 09       	sbc	r27, r9
    20ac:	25 96       	adiw	r28, 0x05	; 5
    20ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    20b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    20b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    20b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    20b6:	25 97       	sbiw	r28, 0x05	; 5
    20b8:	ae 18       	sub	r10, r14
    20ba:	bf 08       	sbc	r11, r15
    20bc:	c0 0a       	sbc	r12, r16
    20be:	d1 0a       	sbc	r13, r17
    20c0:	ee 24       	eor	r14, r14
    20c2:	ff 24       	eor	r15, r15
    20c4:	87 01       	movw	r16, r14
    20c6:	28 17       	cp	r18, r24
    20c8:	39 07       	cpc	r19, r25
    20ca:	4a 07       	cpc	r20, r26
    20cc:	5b 07       	cpc	r21, r27
    20ce:	28 f4       	brcc	.+10     	; 0x20da <__moddi3+0xea2>
    20d0:	21 e0       	ldi	r18, 0x01	; 1
    20d2:	e2 2e       	mov	r14, r18
    20d4:	f1 2c       	mov	r15, r1
    20d6:	01 2d       	mov	r16, r1
    20d8:	11 2d       	mov	r17, r1
    20da:	ae 18       	sub	r10, r14
    20dc:	bf 08       	sbc	r11, r15
    20de:	c0 0a       	sbc	r12, r16
    20e0:	d1 0a       	sbc	r13, r17
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <__moddi3+0xeb0>
    20e4:	da 01       	movw	r26, r20
    20e6:	c9 01       	movw	r24, r18
    20e8:	6d a8       	ldd	r6, Y+53	; 0x35
    20ea:	7e a8       	ldd	r7, Y+54	; 0x36
    20ec:	8f a8       	ldd	r8, Y+55	; 0x37
    20ee:	98 ac       	ldd	r9, Y+56	; 0x38
    20f0:	68 1a       	sub	r6, r24
    20f2:	79 0a       	sbc	r7, r25
    20f4:	8a 0a       	sbc	r8, r26
    20f6:	9b 0a       	sbc	r9, r27
    20f8:	09 a9       	ldd	r16, Y+49	; 0x31
    20fa:	1a a9       	ldd	r17, Y+50	; 0x32
    20fc:	2b a9       	ldd	r18, Y+51	; 0x33
    20fe:	3c a9       	ldd	r19, Y+52	; 0x34
    2100:	0a 19       	sub	r16, r10
    2102:	1b 09       	sbc	r17, r11
    2104:	2c 09       	sbc	r18, r12
    2106:	3d 09       	sbc	r19, r13
    2108:	58 01       	movw	r10, r16
    210a:	69 01       	movw	r12, r18
    210c:	22 24       	eor	r2, r2
    210e:	33 24       	eor	r3, r3
    2110:	21 01       	movw	r4, r2
    2112:	2d a9       	ldd	r18, Y+53	; 0x35
    2114:	3e a9       	ldd	r19, Y+54	; 0x36
    2116:	4f a9       	ldd	r20, Y+55	; 0x37
    2118:	58 ad       	ldd	r21, Y+56	; 0x38
    211a:	26 15       	cp	r18, r6
    211c:	37 05       	cpc	r19, r7
    211e:	48 05       	cpc	r20, r8
    2120:	59 05       	cpc	r21, r9
    2122:	28 f4       	brcc	.+10     	; 0x212e <__moddi3+0xef6>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	28 2e       	mov	r2, r24
    2128:	31 2c       	mov	r3, r1
    212a:	41 2c       	mov	r4, r1
    212c:	51 2c       	mov	r5, r1
    212e:	86 01       	movw	r16, r12
    2130:	75 01       	movw	r14, r10
    2132:	e2 18       	sub	r14, r2
    2134:	f3 08       	sbc	r15, r3
    2136:	04 09       	sbc	r16, r4
    2138:	15 09       	sbc	r17, r5
    213a:	a8 01       	movw	r20, r16
    213c:	97 01       	movw	r18, r14
    213e:	e2 96       	adiw	r28, 0x32	; 50
    2140:	0f ac       	ldd	r0, Y+63	; 0x3f
    2142:	e2 97       	sbiw	r28, 0x32	; 50
    2144:	04 c0       	rjmp	.+8      	; 0x214e <__moddi3+0xf16>
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	44 1f       	adc	r20, r20
    214c:	55 1f       	adc	r21, r21
    214e:	0a 94       	dec	r0
    2150:	d2 f7       	brpl	.-12     	; 0x2146 <__moddi3+0xf0e>
    2152:	d4 01       	movw	r26, r8
    2154:	c3 01       	movw	r24, r6
    2156:	e3 96       	adiw	r28, 0x33	; 51
    2158:	0f ac       	ldd	r0, Y+63	; 0x3f
    215a:	e3 97       	sbiw	r28, 0x33	; 51
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <__moddi3+0xf2e>
    215e:	b6 95       	lsr	r27
    2160:	a7 95       	ror	r26
    2162:	97 95       	ror	r25
    2164:	87 95       	ror	r24
    2166:	0a 94       	dec	r0
    2168:	d2 f7       	brpl	.-12     	; 0x215e <__moddi3+0xf26>
    216a:	28 2b       	or	r18, r24
    216c:	39 2b       	or	r19, r25
    216e:	4a 2b       	or	r20, r26
    2170:	5b 2b       	or	r21, r27
    2172:	29 a7       	std	Y+41, r18	; 0x29
    2174:	3a a7       	std	Y+42, r19	; 0x2a
    2176:	4b a7       	std	Y+43, r20	; 0x2b
    2178:	5c a7       	std	Y+44, r21	; 0x2c
    217a:	e3 96       	adiw	r28, 0x33	; 51
    217c:	0f ac       	ldd	r0, Y+63	; 0x3f
    217e:	e3 97       	sbiw	r28, 0x33	; 51
    2180:	04 c0       	rjmp	.+8      	; 0x218a <__moddi3+0xf52>
    2182:	16 95       	lsr	r17
    2184:	07 95       	ror	r16
    2186:	f7 94       	ror	r15
    2188:	e7 94       	ror	r14
    218a:	0a 94       	dec	r0
    218c:	d2 f7       	brpl	.-12     	; 0x2182 <__moddi3+0xf4a>
    218e:	ed a6       	std	Y+45, r14	; 0x2d
    2190:	fe a6       	std	Y+46, r15	; 0x2e
    2192:	0f a7       	std	Y+47, r16	; 0x2f
    2194:	18 ab       	std	Y+48, r17	; 0x30
    2196:	29 8b       	std	Y+17, r18	; 0x11
    2198:	8a a5       	ldd	r24, Y+42	; 0x2a
    219a:	8a 8b       	std	Y+18, r24	; 0x12
    219c:	8b a5       	ldd	r24, Y+43	; 0x2b
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21a2:	8c 8b       	std	Y+20, r24	; 0x14
    21a4:	ed 8a       	std	Y+21, r14	; 0x15
    21a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    21a8:	8e 8b       	std	Y+22, r24	; 0x16
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	8f 8b       	std	Y+23, r24	; 0x17
    21ae:	88 a9       	ldd	r24, Y+48	; 0x30
    21b0:	88 8f       	std	Y+24, r24	; 0x18
    21b2:	e1 96       	adiw	r28, 0x31	; 49
    21b4:	4c ad       	ldd	r20, Y+60	; 0x3c
    21b6:	5d ad       	ldd	r21, Y+61	; 0x3d
    21b8:	6e ad       	ldd	r22, Y+62	; 0x3e
    21ba:	7f ad       	ldd	r23, Y+63	; 0x3f
    21bc:	e1 97       	sbiw	r28, 0x31	; 49
    21be:	41 15       	cp	r20, r1
    21c0:	51 05       	cpc	r21, r1
    21c2:	61 05       	cpc	r22, r1
    21c4:	71 05       	cpc	r23, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <__moddi3+0xf92>
    21c8:	67 c0       	rjmp	.+206    	; 0x2298 <__moddi3+0x1060>
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	2a 89       	ldd	r18, Y+18	; 0x12
    21ce:	3b 89       	ldd	r19, Y+19	; 0x13
    21d0:	4c 89       	ldd	r20, Y+20	; 0x14
    21d2:	5d 89       	ldd	r21, Y+21	; 0x15
    21d4:	ae 89       	ldd	r26, Y+22	; 0x16
    21d6:	bf 89       	ldd	r27, Y+23	; 0x17
    21d8:	18 8d       	ldd	r17, Y+24	; 0x18
    21da:	f8 2f       	mov	r31, r24
    21dc:	f1 95       	neg	r31
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	1f 16       	cp	r1, r31
    21e2:	08 f0       	brcs	.+2      	; 0x21e6 <__moddi3+0xfae>
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	82 2f       	mov	r24, r18
    21e8:	81 95       	neg	r24
    21ea:	21 e0       	ldi	r18, 0x01	; 1
    21ec:	18 16       	cp	r1, r24
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <__moddi3+0xfba>
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	e8 2f       	mov	r30, r24
    21f4:	e9 1b       	sub	r30, r25
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	8e 17       	cp	r24, r30
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <__moddi3+0xfc6>
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	29 2b       	or	r18, r25
    2200:	83 2f       	mov	r24, r19
    2202:	81 95       	neg	r24
    2204:	31 e0       	ldi	r19, 0x01	; 1
    2206:	18 16       	cp	r1, r24
    2208:	08 f0       	brcs	.+2      	; 0x220c <__moddi3+0xfd4>
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	78 2f       	mov	r23, r24
    220e:	72 1b       	sub	r23, r18
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	87 17       	cp	r24, r23
    2214:	08 f0       	brcs	.+2      	; 0x2218 <__moddi3+0xfe0>
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	39 2b       	or	r19, r25
    221a:	84 2f       	mov	r24, r20
    221c:	81 95       	neg	r24
    221e:	21 e0       	ldi	r18, 0x01	; 1
    2220:	18 16       	cp	r1, r24
    2222:	08 f0       	brcs	.+2      	; 0x2226 <__moddi3+0xfee>
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	68 2f       	mov	r22, r24
    2228:	63 1b       	sub	r22, r19
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	86 17       	cp	r24, r22
    222e:	08 f0       	brcs	.+2      	; 0x2232 <__moddi3+0xffa>
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	29 2b       	or	r18, r25
    2234:	85 2f       	mov	r24, r21
    2236:	81 95       	neg	r24
    2238:	31 e0       	ldi	r19, 0x01	; 1
    223a:	18 16       	cp	r1, r24
    223c:	08 f0       	brcs	.+2      	; 0x2240 <__moddi3+0x1008>
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	58 2f       	mov	r21, r24
    2242:	52 1b       	sub	r21, r18
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	85 17       	cp	r24, r21
    2248:	08 f0       	brcs	.+2      	; 0x224c <__moddi3+0x1014>
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	39 2b       	or	r19, r25
    224e:	8a 2f       	mov	r24, r26
    2250:	81 95       	neg	r24
    2252:	21 e0       	ldi	r18, 0x01	; 1
    2254:	18 16       	cp	r1, r24
    2256:	08 f0       	brcs	.+2      	; 0x225a <__moddi3+0x1022>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	48 2f       	mov	r20, r24
    225c:	43 1b       	sub	r20, r19
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	84 17       	cp	r24, r20
    2262:	08 f0       	brcs	.+2      	; 0x2266 <__moddi3+0x102e>
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	29 2b       	or	r18, r25
    2268:	8b 2f       	mov	r24, r27
    226a:	81 95       	neg	r24
    226c:	91 e0       	ldi	r25, 0x01	; 1
    226e:	18 16       	cp	r1, r24
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__moddi3+0x103c>
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	38 2f       	mov	r19, r24
    2276:	32 1b       	sub	r19, r18
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	83 17       	cp	r24, r19
    227c:	08 f0       	brcs	.+2      	; 0x2280 <__moddi3+0x1048>
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	92 2b       	or	r25, r18
    2282:	81 2f       	mov	r24, r17
    2284:	81 95       	neg	r24
    2286:	89 1b       	sub	r24, r25
    2288:	f9 8b       	std	Y+17, r31	; 0x11
    228a:	ea 8b       	std	Y+18, r30	; 0x12
    228c:	7b 8b       	std	Y+19, r23	; 0x13
    228e:	6c 8b       	std	Y+20, r22	; 0x14
    2290:	5d 8b       	std	Y+21, r21	; 0x15
    2292:	4e 8b       	std	Y+22, r20	; 0x16
    2294:	3f 8b       	std	Y+23, r19	; 0x17
    2296:	88 8f       	std	Y+24, r24	; 0x18
    2298:	29 89       	ldd	r18, Y+17	; 0x11
    229a:	3a 89       	ldd	r19, Y+18	; 0x12
    229c:	4b 89       	ldd	r20, Y+19	; 0x13
    229e:	5c 89       	ldd	r21, Y+20	; 0x14
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	c9 58       	subi	r28, 0x89	; 137
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	e2 e1       	ldi	r30, 0x12	; 18
    22ae:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

000022b2 <__udivdi3>:
    22b2:	ae e5       	ldi	r26, 0x5E	; 94
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e5       	ldi	r30, 0x5F	; 95
    22b8:	f1 e1       	ldi	r31, 0x11	; 17
    22ba:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
    22be:	a8 e0       	ldi	r26, 0x08	; 8
    22c0:	4e 01       	movw	r8, r28
    22c2:	08 94       	sec
    22c4:	81 1c       	adc	r8, r1
    22c6:	91 1c       	adc	r9, r1
    22c8:	f4 01       	movw	r30, r8
    22ca:	6a 2e       	mov	r6, r26
    22cc:	11 92       	st	Z+, r1
    22ce:	6a 94       	dec	r6
    22d0:	e9 f7       	brne	.-6      	; 0x22cc <__udivdi3+0x1a>
    22d2:	29 83       	std	Y+1, r18	; 0x01
    22d4:	3a 83       	std	Y+2, r19	; 0x02
    22d6:	4b 83       	std	Y+3, r20	; 0x03
    22d8:	5c 83       	std	Y+4, r21	; 0x04
    22da:	6d 83       	std	Y+5, r22	; 0x05
    22dc:	7e 83       	std	Y+6, r23	; 0x06
    22de:	8f 83       	std	Y+7, r24	; 0x07
    22e0:	98 87       	std	Y+8, r25	; 0x08
    22e2:	ce 01       	movw	r24, r28
    22e4:	09 96       	adiw	r24, 0x09	; 9
    22e6:	fc 01       	movw	r30, r24
    22e8:	11 92       	st	Z+, r1
    22ea:	aa 95       	dec	r26
    22ec:	e9 f7       	brne	.-6      	; 0x22e8 <__udivdi3+0x36>
    22ee:	a9 86       	std	Y+9, r10	; 0x09
    22f0:	ba 86       	std	Y+10, r11	; 0x0a
    22f2:	cb 86       	std	Y+11, r12	; 0x0b
    22f4:	dc 86       	std	Y+12, r13	; 0x0c
    22f6:	ed 86       	std	Y+13, r14	; 0x0d
    22f8:	fe 86       	std	Y+14, r15	; 0x0e
    22fa:	0f 87       	std	Y+15, r16	; 0x0f
    22fc:	18 8b       	std	Y+16, r17	; 0x10
    22fe:	29 84       	ldd	r2, Y+9	; 0x09
    2300:	3a 84       	ldd	r3, Y+10	; 0x0a
    2302:	4b 84       	ldd	r4, Y+11	; 0x0b
    2304:	5c 84       	ldd	r5, Y+12	; 0x0c
    2306:	ed 84       	ldd	r14, Y+13	; 0x0d
    2308:	fe 84       	ldd	r15, Y+14	; 0x0e
    230a:	0f 85       	ldd	r16, Y+15	; 0x0f
    230c:	18 89       	ldd	r17, Y+16	; 0x10
    230e:	69 80       	ldd	r6, Y+1	; 0x01
    2310:	7a 80       	ldd	r7, Y+2	; 0x02
    2312:	8b 80       	ldd	r8, Y+3	; 0x03
    2314:	9c 80       	ldd	r9, Y+4	; 0x04
    2316:	6d a6       	std	Y+45, r6	; 0x2d
    2318:	7e a6       	std	Y+46, r7	; 0x2e
    231a:	8f a6       	std	Y+47, r8	; 0x2f
    231c:	98 aa       	std	Y+48, r9	; 0x30
    231e:	6d 80       	ldd	r6, Y+5	; 0x05
    2320:	7e 80       	ldd	r7, Y+6	; 0x06
    2322:	8f 80       	ldd	r8, Y+7	; 0x07
    2324:	98 84       	ldd	r9, Y+8	; 0x08
    2326:	e1 14       	cp	r14, r1
    2328:	f1 04       	cpc	r15, r1
    232a:	01 05       	cpc	r16, r1
    232c:	11 05       	cpc	r17, r1
    232e:	09 f0       	breq	.+2      	; 0x2332 <__udivdi3+0x80>
    2330:	b3 c3       	rjmp	.+1894   	; 0x2a98 <__udivdi3+0x7e6>
    2332:	62 14       	cp	r6, r2
    2334:	73 04       	cpc	r7, r3
    2336:	84 04       	cpc	r8, r4
    2338:	95 04       	cpc	r9, r5
    233a:	08 f0       	brcs	.+2      	; 0x233e <__udivdi3+0x8c>
    233c:	3d c1       	rjmp	.+634    	; 0x25b8 <__udivdi3+0x306>
    233e:	00 e0       	ldi	r16, 0x00	; 0
    2340:	20 16       	cp	r2, r16
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	30 06       	cpc	r3, r16
    2346:	01 e0       	ldi	r16, 0x01	; 1
    2348:	40 06       	cpc	r4, r16
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	50 06       	cpc	r5, r16
    234e:	88 f4       	brcc	.+34     	; 0x2372 <__udivdi3+0xc0>
    2350:	1f ef       	ldi	r17, 0xFF	; 255
    2352:	21 16       	cp	r2, r17
    2354:	31 04       	cpc	r3, r1
    2356:	41 04       	cpc	r4, r1
    2358:	51 04       	cpc	r5, r1
    235a:	39 f0       	breq	.+14     	; 0x236a <__udivdi3+0xb8>
    235c:	30 f0       	brcs	.+12     	; 0x236a <__udivdi3+0xb8>
    235e:	48 e0       	ldi	r20, 0x08	; 8
    2360:	e4 2e       	mov	r14, r20
    2362:	f1 2c       	mov	r15, r1
    2364:	01 2d       	mov	r16, r1
    2366:	11 2d       	mov	r17, r1
    2368:	18 c0       	rjmp	.+48     	; 0x239a <__udivdi3+0xe8>
    236a:	ee 24       	eor	r14, r14
    236c:	ff 24       	eor	r15, r15
    236e:	87 01       	movw	r16, r14
    2370:	14 c0       	rjmp	.+40     	; 0x239a <__udivdi3+0xe8>
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	22 16       	cp	r2, r18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	32 06       	cpc	r3, r18
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	42 06       	cpc	r4, r18
    237e:	21 e0       	ldi	r18, 0x01	; 1
    2380:	52 06       	cpc	r5, r18
    2382:	30 f0       	brcs	.+12     	; 0x2390 <__udivdi3+0xde>
    2384:	38 e1       	ldi	r19, 0x18	; 24
    2386:	e3 2e       	mov	r14, r19
    2388:	f1 2c       	mov	r15, r1
    238a:	01 2d       	mov	r16, r1
    238c:	11 2d       	mov	r17, r1
    238e:	05 c0       	rjmp	.+10     	; 0x239a <__udivdi3+0xe8>
    2390:	20 e1       	ldi	r18, 0x10	; 16
    2392:	e2 2e       	mov	r14, r18
    2394:	f1 2c       	mov	r15, r1
    2396:	01 2d       	mov	r16, r1
    2398:	11 2d       	mov	r17, r1
    239a:	d2 01       	movw	r26, r4
    239c:	c1 01       	movw	r24, r2
    239e:	0e 2c       	mov	r0, r14
    23a0:	04 c0       	rjmp	.+8      	; 0x23aa <__udivdi3+0xf8>
    23a2:	b6 95       	lsr	r27
    23a4:	a7 95       	ror	r26
    23a6:	97 95       	ror	r25
    23a8:	87 95       	ror	r24
    23aa:	0a 94       	dec	r0
    23ac:	d2 f7       	brpl	.-12     	; 0x23a2 <__udivdi3+0xf0>
    23ae:	83 59       	subi	r24, 0x93	; 147
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	dc 01       	movw	r26, r24
    23b4:	2c 91       	ld	r18, X
    23b6:	80 e2       	ldi	r24, 0x20	; 32
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e0       	ldi	r26, 0x00	; 0
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	8e 19       	sub	r24, r14
    23c0:	9f 09       	sbc	r25, r15
    23c2:	a0 0b       	sbc	r26, r16
    23c4:	b1 0b       	sbc	r27, r17
    23c6:	7c 01       	movw	r14, r24
    23c8:	8d 01       	movw	r16, r26
    23ca:	e2 1a       	sub	r14, r18
    23cc:	f1 08       	sbc	r15, r1
    23ce:	01 09       	sbc	r16, r1
    23d0:	11 09       	sbc	r17, r1
    23d2:	e1 14       	cp	r14, r1
    23d4:	f1 04       	cpc	r15, r1
    23d6:	01 05       	cpc	r16, r1
    23d8:	11 05       	cpc	r17, r1
    23da:	a1 f1       	breq	.+104    	; 0x2444 <__udivdi3+0x192>
    23dc:	0e 2c       	mov	r0, r14
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__udivdi3+0x136>
    23e0:	22 0c       	add	r2, r2
    23e2:	33 1c       	adc	r3, r3
    23e4:	44 1c       	adc	r4, r4
    23e6:	55 1c       	adc	r5, r5
    23e8:	0a 94       	dec	r0
    23ea:	d2 f7       	brpl	.-12     	; 0x23e0 <__udivdi3+0x12e>
    23ec:	a4 01       	movw	r20, r8
    23ee:	93 01       	movw	r18, r6
    23f0:	0e 2c       	mov	r0, r14
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <__udivdi3+0x14a>
    23f4:	22 0f       	add	r18, r18
    23f6:	33 1f       	adc	r19, r19
    23f8:	44 1f       	adc	r20, r20
    23fa:	55 1f       	adc	r21, r21
    23fc:	0a 94       	dec	r0
    23fe:	d2 f7       	brpl	.-12     	; 0x23f4 <__udivdi3+0x142>
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	8e 19       	sub	r24, r14
    2406:	9f 09       	sbc	r25, r15
    2408:	6d a4       	ldd	r6, Y+45	; 0x2d
    240a:	7e a4       	ldd	r7, Y+46	; 0x2e
    240c:	8f a4       	ldd	r8, Y+47	; 0x2f
    240e:	98 a8       	ldd	r9, Y+48	; 0x30
    2410:	04 c0       	rjmp	.+8      	; 0x241a <__udivdi3+0x168>
    2412:	96 94       	lsr	r9
    2414:	87 94       	ror	r8
    2416:	77 94       	ror	r7
    2418:	67 94       	ror	r6
    241a:	8a 95       	dec	r24
    241c:	d2 f7       	brpl	.-12     	; 0x2412 <__udivdi3+0x160>
    241e:	62 2a       	or	r6, r18
    2420:	73 2a       	or	r7, r19
    2422:	84 2a       	or	r8, r20
    2424:	95 2a       	or	r9, r21
    2426:	ad a4       	ldd	r10, Y+45	; 0x2d
    2428:	be a4       	ldd	r11, Y+46	; 0x2e
    242a:	cf a4       	ldd	r12, Y+47	; 0x2f
    242c:	d8 a8       	ldd	r13, Y+48	; 0x30
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <__udivdi3+0x186>
    2430:	aa 0c       	add	r10, r10
    2432:	bb 1c       	adc	r11, r11
    2434:	cc 1c       	adc	r12, r12
    2436:	dd 1c       	adc	r13, r13
    2438:	ea 94       	dec	r14
    243a:	d2 f7       	brpl	.-12     	; 0x2430 <__udivdi3+0x17e>
    243c:	ad a6       	std	Y+45, r10	; 0x2d
    243e:	be a6       	std	Y+46, r11	; 0x2e
    2440:	cf a6       	std	Y+47, r12	; 0x2f
    2442:	d8 aa       	std	Y+48, r13	; 0x30
    2444:	62 01       	movw	r12, r4
    2446:	ee 24       	eor	r14, r14
    2448:	ff 24       	eor	r15, r15
    244a:	cd aa       	std	Y+53, r12	; 0x35
    244c:	de aa       	std	Y+54, r13	; 0x36
    244e:	ef aa       	std	Y+55, r14	; 0x37
    2450:	f8 ae       	std	Y+56, r15	; 0x38
    2452:	92 01       	movw	r18, r4
    2454:	81 01       	movw	r16, r2
    2456:	20 70       	andi	r18, 0x00	; 0
    2458:	30 70       	andi	r19, 0x00	; 0
    245a:	09 af       	std	Y+57, r16	; 0x39
    245c:	1a af       	std	Y+58, r17	; 0x3a
    245e:	2b af       	std	Y+59, r18	; 0x3b
    2460:	3c af       	std	Y+60, r19	; 0x3c
    2462:	c4 01       	movw	r24, r8
    2464:	b3 01       	movw	r22, r6
    2466:	a7 01       	movw	r20, r14
    2468:	96 01       	movw	r18, r12
    246a:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    246e:	7b 01       	movw	r14, r22
    2470:	8c 01       	movw	r16, r24
    2472:	c4 01       	movw	r24, r8
    2474:	b3 01       	movw	r22, r6
    2476:	2d a9       	ldd	r18, Y+53	; 0x35
    2478:	3e a9       	ldd	r19, Y+54	; 0x36
    247a:	4f a9       	ldd	r20, Y+55	; 0x37
    247c:	58 ad       	ldd	r21, Y+56	; 0x38
    247e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2482:	c9 01       	movw	r24, r18
    2484:	da 01       	movw	r26, r20
    2486:	3c 01       	movw	r6, r24
    2488:	4d 01       	movw	r8, r26
    248a:	c4 01       	movw	r24, r8
    248c:	b3 01       	movw	r22, r6
    248e:	29 ad       	ldd	r18, Y+57	; 0x39
    2490:	3a ad       	ldd	r19, Y+58	; 0x3a
    2492:	4b ad       	ldd	r20, Y+59	; 0x3b
    2494:	5c ad       	ldd	r21, Y+60	; 0x3c
    2496:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	87 01       	movw	r16, r14
    24a0:	ff 24       	eor	r15, r15
    24a2:	ee 24       	eor	r14, r14
    24a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    24a6:	be a4       	ldd	r11, Y+46	; 0x2e
    24a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    24aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    24ac:	c6 01       	movw	r24, r12
    24ae:	aa 27       	eor	r26, r26
    24b0:	bb 27       	eor	r27, r27
    24b2:	57 01       	movw	r10, r14
    24b4:	68 01       	movw	r12, r16
    24b6:	a8 2a       	or	r10, r24
    24b8:	b9 2a       	or	r11, r25
    24ba:	ca 2a       	or	r12, r26
    24bc:	db 2a       	or	r13, r27
    24be:	a2 16       	cp	r10, r18
    24c0:	b3 06       	cpc	r11, r19
    24c2:	c4 06       	cpc	r12, r20
    24c4:	d5 06       	cpc	r13, r21
    24c6:	e0 f4       	brcc	.+56     	; 0x2500 <__udivdi3+0x24e>
    24c8:	08 94       	sec
    24ca:	61 08       	sbc	r6, r1
    24cc:	71 08       	sbc	r7, r1
    24ce:	81 08       	sbc	r8, r1
    24d0:	91 08       	sbc	r9, r1
    24d2:	a2 0c       	add	r10, r2
    24d4:	b3 1c       	adc	r11, r3
    24d6:	c4 1c       	adc	r12, r4
    24d8:	d5 1c       	adc	r13, r5
    24da:	a2 14       	cp	r10, r2
    24dc:	b3 04       	cpc	r11, r3
    24de:	c4 04       	cpc	r12, r4
    24e0:	d5 04       	cpc	r13, r5
    24e2:	70 f0       	brcs	.+28     	; 0x2500 <__udivdi3+0x24e>
    24e4:	a2 16       	cp	r10, r18
    24e6:	b3 06       	cpc	r11, r19
    24e8:	c4 06       	cpc	r12, r20
    24ea:	d5 06       	cpc	r13, r21
    24ec:	48 f4       	brcc	.+18     	; 0x2500 <__udivdi3+0x24e>
    24ee:	08 94       	sec
    24f0:	61 08       	sbc	r6, r1
    24f2:	71 08       	sbc	r7, r1
    24f4:	81 08       	sbc	r8, r1
    24f6:	91 08       	sbc	r9, r1
    24f8:	a2 0c       	add	r10, r2
    24fa:	b3 1c       	adc	r11, r3
    24fc:	c4 1c       	adc	r12, r4
    24fe:	d5 1c       	adc	r13, r5
    2500:	a2 1a       	sub	r10, r18
    2502:	b3 0a       	sbc	r11, r19
    2504:	c4 0a       	sbc	r12, r20
    2506:	d5 0a       	sbc	r13, r21
    2508:	c6 01       	movw	r24, r12
    250a:	b5 01       	movw	r22, r10
    250c:	2d a9       	ldd	r18, Y+53	; 0x35
    250e:	3e a9       	ldd	r19, Y+54	; 0x36
    2510:	4f a9       	ldd	r20, Y+55	; 0x37
    2512:	58 ad       	ldd	r21, Y+56	; 0x38
    2514:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2518:	7b 01       	movw	r14, r22
    251a:	8c 01       	movw	r16, r24
    251c:	c6 01       	movw	r24, r12
    251e:	b5 01       	movw	r22, r10
    2520:	2d a9       	ldd	r18, Y+53	; 0x35
    2522:	3e a9       	ldd	r19, Y+54	; 0x36
    2524:	4f a9       	ldd	r20, Y+55	; 0x37
    2526:	58 ad       	ldd	r21, Y+56	; 0x38
    2528:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    252c:	c9 01       	movw	r24, r18
    252e:	da 01       	movw	r26, r20
    2530:	5c 01       	movw	r10, r24
    2532:	6d 01       	movw	r12, r26
    2534:	c6 01       	movw	r24, r12
    2536:	b5 01       	movw	r22, r10
    2538:	29 ad       	ldd	r18, Y+57	; 0x39
    253a:	3a ad       	ldd	r19, Y+58	; 0x3a
    253c:	4b ad       	ldd	r20, Y+59	; 0x3b
    253e:	5c ad       	ldd	r21, Y+60	; 0x3c
    2540:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	87 01       	movw	r16, r14
    254a:	ff 24       	eor	r15, r15
    254c:	ee 24       	eor	r14, r14
    254e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2550:	9e a5       	ldd	r25, Y+46	; 0x2e
    2552:	af a5       	ldd	r26, Y+47	; 0x2f
    2554:	b8 a9       	ldd	r27, Y+48	; 0x30
    2556:	a0 70       	andi	r26, 0x00	; 0
    2558:	b0 70       	andi	r27, 0x00	; 0
    255a:	e8 2a       	or	r14, r24
    255c:	f9 2a       	or	r15, r25
    255e:	0a 2b       	or	r16, r26
    2560:	1b 2b       	or	r17, r27
    2562:	e2 16       	cp	r14, r18
    2564:	f3 06       	cpc	r15, r19
    2566:	04 07       	cpc	r16, r20
    2568:	15 07       	cpc	r17, r21
    256a:	c0 f4       	brcc	.+48     	; 0x259c <__udivdi3+0x2ea>
    256c:	08 94       	sec
    256e:	a1 08       	sbc	r10, r1
    2570:	b1 08       	sbc	r11, r1
    2572:	c1 08       	sbc	r12, r1
    2574:	d1 08       	sbc	r13, r1
    2576:	e2 0c       	add	r14, r2
    2578:	f3 1c       	adc	r15, r3
    257a:	04 1d       	adc	r16, r4
    257c:	15 1d       	adc	r17, r5
    257e:	e2 14       	cp	r14, r2
    2580:	f3 04       	cpc	r15, r3
    2582:	04 05       	cpc	r16, r4
    2584:	15 05       	cpc	r17, r5
    2586:	50 f0       	brcs	.+20     	; 0x259c <__udivdi3+0x2ea>
    2588:	e2 16       	cp	r14, r18
    258a:	f3 06       	cpc	r15, r19
    258c:	04 07       	cpc	r16, r20
    258e:	15 07       	cpc	r17, r21
    2590:	28 f4       	brcc	.+10     	; 0x259c <__udivdi3+0x2ea>
    2592:	08 94       	sec
    2594:	a1 08       	sbc	r10, r1
    2596:	b1 08       	sbc	r11, r1
    2598:	c1 08       	sbc	r12, r1
    259a:	d1 08       	sbc	r13, r1
    259c:	d3 01       	movw	r26, r6
    259e:	99 27       	eor	r25, r25
    25a0:	88 27       	eor	r24, r24
    25a2:	86 01       	movw	r16, r12
    25a4:	75 01       	movw	r14, r10
    25a6:	e8 2a       	or	r14, r24
    25a8:	f9 2a       	or	r15, r25
    25aa:	0a 2b       	or	r16, r26
    25ac:	1b 2b       	or	r17, r27
    25ae:	e9 aa       	std	Y+49, r14	; 0x31
    25b0:	fa aa       	std	Y+50, r15	; 0x32
    25b2:	0b ab       	std	Y+51, r16	; 0x33
    25b4:	1c ab       	std	Y+52, r17	; 0x34
    25b6:	cf c4       	rjmp	.+2462   	; 0x2f56 <__udivdi3+0xca4>
    25b8:	21 14       	cp	r2, r1
    25ba:	31 04       	cpc	r3, r1
    25bc:	41 04       	cpc	r4, r1
    25be:	51 04       	cpc	r5, r1
    25c0:	71 f4       	brne	.+28     	; 0x25de <__udivdi3+0x32c>
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    25d6:	c9 01       	movw	r24, r18
    25d8:	da 01       	movw	r26, r20
    25da:	1c 01       	movw	r2, r24
    25dc:	2d 01       	movw	r4, r26
    25de:	00 e0       	ldi	r16, 0x00	; 0
    25e0:	20 16       	cp	r2, r16
    25e2:	00 e0       	ldi	r16, 0x00	; 0
    25e4:	30 06       	cpc	r3, r16
    25e6:	01 e0       	ldi	r16, 0x01	; 1
    25e8:	40 06       	cpc	r4, r16
    25ea:	00 e0       	ldi	r16, 0x00	; 0
    25ec:	50 06       	cpc	r5, r16
    25ee:	88 f4       	brcc	.+34     	; 0x2612 <__udivdi3+0x360>
    25f0:	1f ef       	ldi	r17, 0xFF	; 255
    25f2:	21 16       	cp	r2, r17
    25f4:	31 04       	cpc	r3, r1
    25f6:	41 04       	cpc	r4, r1
    25f8:	51 04       	cpc	r5, r1
    25fa:	31 f0       	breq	.+12     	; 0x2608 <__udivdi3+0x356>
    25fc:	28 f0       	brcs	.+10     	; 0x2608 <__udivdi3+0x356>
    25fe:	48 e0       	ldi	r20, 0x08	; 8
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e0       	ldi	r22, 0x00	; 0
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	17 c0       	rjmp	.+46     	; 0x2636 <__udivdi3+0x384>
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	12 c0       	rjmp	.+36     	; 0x2636 <__udivdi3+0x384>
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	22 16       	cp	r2, r18
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	32 06       	cpc	r3, r18
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	42 06       	cpc	r4, r18
    261e:	21 e0       	ldi	r18, 0x01	; 1
    2620:	52 06       	cpc	r5, r18
    2622:	28 f0       	brcs	.+10     	; 0x262e <__udivdi3+0x37c>
    2624:	48 e1       	ldi	r20, 0x18	; 24
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <__udivdi3+0x384>
    262e:	40 e1       	ldi	r20, 0x10	; 16
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	d2 01       	movw	r26, r4
    2638:	c1 01       	movw	r24, r2
    263a:	04 2e       	mov	r0, r20
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <__udivdi3+0x394>
    263e:	b6 95       	lsr	r27
    2640:	a7 95       	ror	r26
    2642:	97 95       	ror	r25
    2644:	87 95       	ror	r24
    2646:	0a 94       	dec	r0
    2648:	d2 f7       	brpl	.-12     	; 0x263e <__udivdi3+0x38c>
    264a:	83 59       	subi	r24, 0x93	; 147
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	dc 01       	movw	r26, r24
    2650:	2c 91       	ld	r18, X
    2652:	e0 e2       	ldi	r30, 0x20	; 32
    2654:	ee 2e       	mov	r14, r30
    2656:	f1 2c       	mov	r15, r1
    2658:	01 2d       	mov	r16, r1
    265a:	11 2d       	mov	r17, r1
    265c:	d8 01       	movw	r26, r16
    265e:	c7 01       	movw	r24, r14
    2660:	84 1b       	sub	r24, r20
    2662:	95 0b       	sbc	r25, r21
    2664:	a6 0b       	sbc	r26, r22
    2666:	b7 0b       	sbc	r27, r23
    2668:	82 1b       	sub	r24, r18
    266a:	91 09       	sbc	r25, r1
    266c:	a1 09       	sbc	r26, r1
    266e:	b1 09       	sbc	r27, r1
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	a1 05       	cpc	r26, r1
    2674:	b1 05       	cpc	r27, r1
    2676:	61 f4       	brne	.+24     	; 0x2690 <__udivdi3+0x3de>
    2678:	64 01       	movw	r12, r8
    267a:	53 01       	movw	r10, r6
    267c:	a2 18       	sub	r10, r2
    267e:	b3 08       	sbc	r11, r3
    2680:	c4 08       	sbc	r12, r4
    2682:	d5 08       	sbc	r13, r5
    2684:	31 e0       	ldi	r19, 0x01	; 1
    2686:	63 2e       	mov	r6, r19
    2688:	71 2c       	mov	r7, r1
    268a:	81 2c       	mov	r8, r1
    268c:	91 2c       	mov	r9, r1
    268e:	1e c1       	rjmp	.+572    	; 0x28cc <__udivdi3+0x61a>
    2690:	6f 96       	adiw	r28, 0x1f	; 31
    2692:	8f af       	std	Y+63, r24	; 0x3f
    2694:	6f 97       	sbiw	r28, 0x1f	; 31
    2696:	08 2e       	mov	r0, r24
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <__udivdi3+0x3f0>
    269a:	22 0c       	add	r2, r2
    269c:	33 1c       	adc	r3, r3
    269e:	44 1c       	adc	r4, r4
    26a0:	55 1c       	adc	r5, r5
    26a2:	0a 94       	dec	r0
    26a4:	d2 f7       	brpl	.-12     	; 0x269a <__udivdi3+0x3e8>
    26a6:	ee 2d       	mov	r30, r14
    26a8:	e8 1b       	sub	r30, r24
    26aa:	64 01       	movw	r12, r8
    26ac:	53 01       	movw	r10, r6
    26ae:	0e 2e       	mov	r0, r30
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__udivdi3+0x408>
    26b2:	d6 94       	lsr	r13
    26b4:	c7 94       	ror	r12
    26b6:	b7 94       	ror	r11
    26b8:	a7 94       	ror	r10
    26ba:	0a 94       	dec	r0
    26bc:	d2 f7       	brpl	.-12     	; 0x26b2 <__udivdi3+0x400>
    26be:	a4 01       	movw	r20, r8
    26c0:	93 01       	movw	r18, r6
    26c2:	6f 96       	adiw	r28, 0x1f	; 31
    26c4:	0f ac       	ldd	r0, Y+63	; 0x3f
    26c6:	6f 97       	sbiw	r28, 0x1f	; 31
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <__udivdi3+0x420>
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
    26ce:	44 1f       	adc	r20, r20
    26d0:	55 1f       	adc	r21, r21
    26d2:	0a 94       	dec	r0
    26d4:	d2 f7       	brpl	.-12     	; 0x26ca <__udivdi3+0x418>
    26d6:	6d a4       	ldd	r6, Y+45	; 0x2d
    26d8:	7e a4       	ldd	r7, Y+46	; 0x2e
    26da:	8f a4       	ldd	r8, Y+47	; 0x2f
    26dc:	98 a8       	ldd	r9, Y+48	; 0x30
    26de:	0e 2e       	mov	r0, r30
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <__udivdi3+0x438>
    26e2:	96 94       	lsr	r9
    26e4:	87 94       	ror	r8
    26e6:	77 94       	ror	r7
    26e8:	67 94       	ror	r6
    26ea:	0a 94       	dec	r0
    26ec:	d2 f7       	brpl	.-12     	; 0x26e2 <__udivdi3+0x430>
    26ee:	84 01       	movw	r16, r8
    26f0:	73 01       	movw	r14, r6
    26f2:	e2 2a       	or	r14, r18
    26f4:	f3 2a       	or	r15, r19
    26f6:	04 2b       	or	r16, r20
    26f8:	15 2b       	or	r17, r21
    26fa:	e9 a6       	std	Y+41, r14	; 0x29
    26fc:	fa a6       	std	Y+42, r15	; 0x2a
    26fe:	0b a7       	std	Y+43, r16	; 0x2b
    2700:	1c a7       	std	Y+44, r17	; 0x2c
    2702:	32 01       	movw	r6, r4
    2704:	88 24       	eor	r8, r8
    2706:	99 24       	eor	r9, r9
    2708:	92 01       	movw	r18, r4
    270a:	81 01       	movw	r16, r2
    270c:	20 70       	andi	r18, 0x00	; 0
    270e:	30 70       	andi	r19, 0x00	; 0
    2710:	21 96       	adiw	r28, 0x01	; 1
    2712:	0c af       	std	Y+60, r16	; 0x3c
    2714:	1d af       	std	Y+61, r17	; 0x3d
    2716:	2e af       	std	Y+62, r18	; 0x3e
    2718:	3f af       	std	Y+63, r19	; 0x3f
    271a:	21 97       	sbiw	r28, 0x01	; 1
    271c:	c6 01       	movw	r24, r12
    271e:	b5 01       	movw	r22, r10
    2720:	a4 01       	movw	r20, r8
    2722:	93 01       	movw	r18, r6
    2724:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2728:	7b 01       	movw	r14, r22
    272a:	8c 01       	movw	r16, r24
    272c:	c6 01       	movw	r24, r12
    272e:	b5 01       	movw	r22, r10
    2730:	a4 01       	movw	r20, r8
    2732:	93 01       	movw	r18, r6
    2734:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2738:	c9 01       	movw	r24, r18
    273a:	da 01       	movw	r26, r20
    273c:	25 96       	adiw	r28, 0x05	; 5
    273e:	8c af       	std	Y+60, r24	; 0x3c
    2740:	9d af       	std	Y+61, r25	; 0x3d
    2742:	ae af       	std	Y+62, r26	; 0x3e
    2744:	bf af       	std	Y+63, r27	; 0x3f
    2746:	25 97       	sbiw	r28, 0x05	; 5
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	21 96       	adiw	r28, 0x01	; 1
    274e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2750:	3d ad       	ldd	r19, Y+61	; 0x3d
    2752:	4e ad       	ldd	r20, Y+62	; 0x3e
    2754:	5f ad       	ldd	r21, Y+63	; 0x3f
    2756:	21 97       	sbiw	r28, 0x01	; 1
    2758:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	87 01       	movw	r16, r14
    2762:	ff 24       	eor	r15, r15
    2764:	ee 24       	eor	r14, r14
    2766:	a9 a4       	ldd	r10, Y+41	; 0x29
    2768:	ba a4       	ldd	r11, Y+42	; 0x2a
    276a:	cb a4       	ldd	r12, Y+43	; 0x2b
    276c:	dc a4       	ldd	r13, Y+44	; 0x2c
    276e:	c6 01       	movw	r24, r12
    2770:	aa 27       	eor	r26, r26
    2772:	bb 27       	eor	r27, r27
    2774:	5c 01       	movw	r10, r24
    2776:	6d 01       	movw	r12, r26
    2778:	ae 28       	or	r10, r14
    277a:	bf 28       	or	r11, r15
    277c:	c0 2a       	or	r12, r16
    277e:	d1 2a       	or	r13, r17
    2780:	a2 16       	cp	r10, r18
    2782:	b3 06       	cpc	r11, r19
    2784:	c4 06       	cpc	r12, r20
    2786:	d5 06       	cpc	r13, r21
    2788:	60 f5       	brcc	.+88     	; 0x27e2 <__udivdi3+0x530>
    278a:	25 96       	adiw	r28, 0x05	; 5
    278c:	6c ad       	ldd	r22, Y+60	; 0x3c
    278e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2790:	8e ad       	ldd	r24, Y+62	; 0x3e
    2792:	9f ad       	ldd	r25, Y+63	; 0x3f
    2794:	25 97       	sbiw	r28, 0x05	; 5
    2796:	61 50       	subi	r22, 0x01	; 1
    2798:	70 40       	sbci	r23, 0x00	; 0
    279a:	80 40       	sbci	r24, 0x00	; 0
    279c:	90 40       	sbci	r25, 0x00	; 0
    279e:	25 96       	adiw	r28, 0x05	; 5
    27a0:	6c af       	std	Y+60, r22	; 0x3c
    27a2:	7d af       	std	Y+61, r23	; 0x3d
    27a4:	8e af       	std	Y+62, r24	; 0x3e
    27a6:	9f af       	std	Y+63, r25	; 0x3f
    27a8:	25 97       	sbiw	r28, 0x05	; 5
    27aa:	a2 0c       	add	r10, r2
    27ac:	b3 1c       	adc	r11, r3
    27ae:	c4 1c       	adc	r12, r4
    27b0:	d5 1c       	adc	r13, r5
    27b2:	a2 14       	cp	r10, r2
    27b4:	b3 04       	cpc	r11, r3
    27b6:	c4 04       	cpc	r12, r4
    27b8:	d5 04       	cpc	r13, r5
    27ba:	98 f0       	brcs	.+38     	; 0x27e2 <__udivdi3+0x530>
    27bc:	a2 16       	cp	r10, r18
    27be:	b3 06       	cpc	r11, r19
    27c0:	c4 06       	cpc	r12, r20
    27c2:	d5 06       	cpc	r13, r21
    27c4:	70 f4       	brcc	.+28     	; 0x27e2 <__udivdi3+0x530>
    27c6:	61 50       	subi	r22, 0x01	; 1
    27c8:	70 40       	sbci	r23, 0x00	; 0
    27ca:	80 40       	sbci	r24, 0x00	; 0
    27cc:	90 40       	sbci	r25, 0x00	; 0
    27ce:	25 96       	adiw	r28, 0x05	; 5
    27d0:	6c af       	std	Y+60, r22	; 0x3c
    27d2:	7d af       	std	Y+61, r23	; 0x3d
    27d4:	8e af       	std	Y+62, r24	; 0x3e
    27d6:	9f af       	std	Y+63, r25	; 0x3f
    27d8:	25 97       	sbiw	r28, 0x05	; 5
    27da:	a2 0c       	add	r10, r2
    27dc:	b3 1c       	adc	r11, r3
    27de:	c4 1c       	adc	r12, r4
    27e0:	d5 1c       	adc	r13, r5
    27e2:	a2 1a       	sub	r10, r18
    27e4:	b3 0a       	sbc	r11, r19
    27e6:	c4 0a       	sbc	r12, r20
    27e8:	d5 0a       	sbc	r13, r21
    27ea:	c6 01       	movw	r24, r12
    27ec:	b5 01       	movw	r22, r10
    27ee:	a4 01       	movw	r20, r8
    27f0:	93 01       	movw	r18, r6
    27f2:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    27f6:	7b 01       	movw	r14, r22
    27f8:	8c 01       	movw	r16, r24
    27fa:	c6 01       	movw	r24, r12
    27fc:	b5 01       	movw	r22, r10
    27fe:	a4 01       	movw	r20, r8
    2800:	93 01       	movw	r18, r6
    2802:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2806:	c9 01       	movw	r24, r18
    2808:	da 01       	movw	r26, r20
    280a:	3c 01       	movw	r6, r24
    280c:	4d 01       	movw	r8, r26
    280e:	c4 01       	movw	r24, r8
    2810:	b3 01       	movw	r22, r6
    2812:	21 96       	adiw	r28, 0x01	; 1
    2814:	2c ad       	ldd	r18, Y+60	; 0x3c
    2816:	3d ad       	ldd	r19, Y+61	; 0x3d
    2818:	4e ad       	ldd	r20, Y+62	; 0x3e
    281a:	5f ad       	ldd	r21, Y+63	; 0x3f
    281c:	21 97       	sbiw	r28, 0x01	; 1
    281e:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	87 01       	movw	r16, r14
    2828:	ff 24       	eor	r15, r15
    282a:	ee 24       	eor	r14, r14
    282c:	89 a5       	ldd	r24, Y+41	; 0x29
    282e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2830:	ab a5       	ldd	r26, Y+43	; 0x2b
    2832:	bc a5       	ldd	r27, Y+44	; 0x2c
    2834:	a0 70       	andi	r26, 0x00	; 0
    2836:	b0 70       	andi	r27, 0x00	; 0
    2838:	57 01       	movw	r10, r14
    283a:	68 01       	movw	r12, r16
    283c:	a8 2a       	or	r10, r24
    283e:	b9 2a       	or	r11, r25
    2840:	ca 2a       	or	r12, r26
    2842:	db 2a       	or	r13, r27
    2844:	a2 16       	cp	r10, r18
    2846:	b3 06       	cpc	r11, r19
    2848:	c4 06       	cpc	r12, r20
    284a:	d5 06       	cpc	r13, r21
    284c:	e0 f4       	brcc	.+56     	; 0x2886 <__udivdi3+0x5d4>
    284e:	08 94       	sec
    2850:	61 08       	sbc	r6, r1
    2852:	71 08       	sbc	r7, r1
    2854:	81 08       	sbc	r8, r1
    2856:	91 08       	sbc	r9, r1
    2858:	a2 0c       	add	r10, r2
    285a:	b3 1c       	adc	r11, r3
    285c:	c4 1c       	adc	r12, r4
    285e:	d5 1c       	adc	r13, r5
    2860:	a2 14       	cp	r10, r2
    2862:	b3 04       	cpc	r11, r3
    2864:	c4 04       	cpc	r12, r4
    2866:	d5 04       	cpc	r13, r5
    2868:	70 f0       	brcs	.+28     	; 0x2886 <__udivdi3+0x5d4>
    286a:	a2 16       	cp	r10, r18
    286c:	b3 06       	cpc	r11, r19
    286e:	c4 06       	cpc	r12, r20
    2870:	d5 06       	cpc	r13, r21
    2872:	48 f4       	brcc	.+18     	; 0x2886 <__udivdi3+0x5d4>
    2874:	08 94       	sec
    2876:	61 08       	sbc	r6, r1
    2878:	71 08       	sbc	r7, r1
    287a:	81 08       	sbc	r8, r1
    287c:	91 08       	sbc	r9, r1
    287e:	a2 0c       	add	r10, r2
    2880:	b3 1c       	adc	r11, r3
    2882:	c4 1c       	adc	r12, r4
    2884:	d5 1c       	adc	r13, r5
    2886:	8d a5       	ldd	r24, Y+45	; 0x2d
    2888:	9e a5       	ldd	r25, Y+46	; 0x2e
    288a:	af a5       	ldd	r26, Y+47	; 0x2f
    288c:	b8 a9       	ldd	r27, Y+48	; 0x30
    288e:	6f 96       	adiw	r28, 0x1f	; 31
    2890:	0f ac       	ldd	r0, Y+63	; 0x3f
    2892:	6f 97       	sbiw	r28, 0x1f	; 31
    2894:	04 c0       	rjmp	.+8      	; 0x289e <__udivdi3+0x5ec>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	aa 1f       	adc	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	0a 94       	dec	r0
    28a0:	d2 f7       	brpl	.-12     	; 0x2896 <__udivdi3+0x5e4>
    28a2:	8d a7       	std	Y+45, r24	; 0x2d
    28a4:	9e a7       	std	Y+46, r25	; 0x2e
    28a6:	af a7       	std	Y+47, r26	; 0x2f
    28a8:	b8 ab       	std	Y+48, r27	; 0x30
    28aa:	a2 1a       	sub	r10, r18
    28ac:	b3 0a       	sbc	r11, r19
    28ae:	c4 0a       	sbc	r12, r20
    28b0:	d5 0a       	sbc	r13, r21
    28b2:	25 96       	adiw	r28, 0x05	; 5
    28b4:	ec ac       	ldd	r14, Y+60	; 0x3c
    28b6:	fd ac       	ldd	r15, Y+61	; 0x3d
    28b8:	0e ad       	ldd	r16, Y+62	; 0x3e
    28ba:	1f ad       	ldd	r17, Y+63	; 0x3f
    28bc:	25 97       	sbiw	r28, 0x05	; 5
    28be:	d7 01       	movw	r26, r14
    28c0:	99 27       	eor	r25, r25
    28c2:	88 27       	eor	r24, r24
    28c4:	68 2a       	or	r6, r24
    28c6:	79 2a       	or	r7, r25
    28c8:	8a 2a       	or	r8, r26
    28ca:	9b 2a       	or	r9, r27
    28cc:	82 01       	movw	r16, r4
    28ce:	22 27       	eor	r18, r18
    28d0:	33 27       	eor	r19, r19
    28d2:	29 96       	adiw	r28, 0x09	; 9
    28d4:	0c af       	std	Y+60, r16	; 0x3c
    28d6:	1d af       	std	Y+61, r17	; 0x3d
    28d8:	2e af       	std	Y+62, r18	; 0x3e
    28da:	3f af       	std	Y+63, r19	; 0x3f
    28dc:	29 97       	sbiw	r28, 0x09	; 9
    28de:	a2 01       	movw	r20, r4
    28e0:	91 01       	movw	r18, r2
    28e2:	40 70       	andi	r20, 0x00	; 0
    28e4:	50 70       	andi	r21, 0x00	; 0
    28e6:	2d 96       	adiw	r28, 0x0d	; 13
    28e8:	2c af       	std	Y+60, r18	; 0x3c
    28ea:	3d af       	std	Y+61, r19	; 0x3d
    28ec:	4e af       	std	Y+62, r20	; 0x3e
    28ee:	5f af       	std	Y+63, r21	; 0x3f
    28f0:	2d 97       	sbiw	r28, 0x0d	; 13
    28f2:	c6 01       	movw	r24, r12
    28f4:	b5 01       	movw	r22, r10
    28f6:	29 96       	adiw	r28, 0x09	; 9
    28f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    28fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    2900:	29 97       	sbiw	r28, 0x09	; 9
    2902:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2906:	7b 01       	movw	r14, r22
    2908:	8c 01       	movw	r16, r24
    290a:	c6 01       	movw	r24, r12
    290c:	b5 01       	movw	r22, r10
    290e:	29 96       	adiw	r28, 0x09	; 9
    2910:	2c ad       	ldd	r18, Y+60	; 0x3c
    2912:	3d ad       	ldd	r19, Y+61	; 0x3d
    2914:	4e ad       	ldd	r20, Y+62	; 0x3e
    2916:	5f ad       	ldd	r21, Y+63	; 0x3f
    2918:	29 97       	sbiw	r28, 0x09	; 9
    291a:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    291e:	c9 01       	movw	r24, r18
    2920:	da 01       	movw	r26, r20
    2922:	61 96       	adiw	r28, 0x11	; 17
    2924:	8c af       	std	Y+60, r24	; 0x3c
    2926:	9d af       	std	Y+61, r25	; 0x3d
    2928:	ae af       	std	Y+62, r26	; 0x3e
    292a:	bf af       	std	Y+63, r27	; 0x3f
    292c:	61 97       	sbiw	r28, 0x11	; 17
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	2d 96       	adiw	r28, 0x0d	; 13
    2934:	2c ad       	ldd	r18, Y+60	; 0x3c
    2936:	3d ad       	ldd	r19, Y+61	; 0x3d
    2938:	4e ad       	ldd	r20, Y+62	; 0x3e
    293a:	5f ad       	ldd	r21, Y+63	; 0x3f
    293c:	2d 97       	sbiw	r28, 0x0d	; 13
    293e:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2942:	9b 01       	movw	r18, r22
    2944:	ac 01       	movw	r20, r24
    2946:	87 01       	movw	r16, r14
    2948:	ff 24       	eor	r15, r15
    294a:	ee 24       	eor	r14, r14
    294c:	ad a4       	ldd	r10, Y+45	; 0x2d
    294e:	be a4       	ldd	r11, Y+46	; 0x2e
    2950:	cf a4       	ldd	r12, Y+47	; 0x2f
    2952:	d8 a8       	ldd	r13, Y+48	; 0x30
    2954:	c6 01       	movw	r24, r12
    2956:	aa 27       	eor	r26, r26
    2958:	bb 27       	eor	r27, r27
    295a:	57 01       	movw	r10, r14
    295c:	68 01       	movw	r12, r16
    295e:	a8 2a       	or	r10, r24
    2960:	b9 2a       	or	r11, r25
    2962:	ca 2a       	or	r12, r26
    2964:	db 2a       	or	r13, r27
    2966:	a2 16       	cp	r10, r18
    2968:	b3 06       	cpc	r11, r19
    296a:	c4 06       	cpc	r12, r20
    296c:	d5 06       	cpc	r13, r21
    296e:	60 f5       	brcc	.+88     	; 0x29c8 <__udivdi3+0x716>
    2970:	61 96       	adiw	r28, 0x11	; 17
    2972:	6c ad       	ldd	r22, Y+60	; 0x3c
    2974:	7d ad       	ldd	r23, Y+61	; 0x3d
    2976:	8e ad       	ldd	r24, Y+62	; 0x3e
    2978:	9f ad       	ldd	r25, Y+63	; 0x3f
    297a:	61 97       	sbiw	r28, 0x11	; 17
    297c:	61 50       	subi	r22, 0x01	; 1
    297e:	70 40       	sbci	r23, 0x00	; 0
    2980:	80 40       	sbci	r24, 0x00	; 0
    2982:	90 40       	sbci	r25, 0x00	; 0
    2984:	61 96       	adiw	r28, 0x11	; 17
    2986:	6c af       	std	Y+60, r22	; 0x3c
    2988:	7d af       	std	Y+61, r23	; 0x3d
    298a:	8e af       	std	Y+62, r24	; 0x3e
    298c:	9f af       	std	Y+63, r25	; 0x3f
    298e:	61 97       	sbiw	r28, 0x11	; 17
    2990:	a2 0c       	add	r10, r2
    2992:	b3 1c       	adc	r11, r3
    2994:	c4 1c       	adc	r12, r4
    2996:	d5 1c       	adc	r13, r5
    2998:	a2 14       	cp	r10, r2
    299a:	b3 04       	cpc	r11, r3
    299c:	c4 04       	cpc	r12, r4
    299e:	d5 04       	cpc	r13, r5
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__udivdi3+0x716>
    29a2:	a2 16       	cp	r10, r18
    29a4:	b3 06       	cpc	r11, r19
    29a6:	c4 06       	cpc	r12, r20
    29a8:	d5 06       	cpc	r13, r21
    29aa:	70 f4       	brcc	.+28     	; 0x29c8 <__udivdi3+0x716>
    29ac:	61 50       	subi	r22, 0x01	; 1
    29ae:	70 40       	sbci	r23, 0x00	; 0
    29b0:	80 40       	sbci	r24, 0x00	; 0
    29b2:	90 40       	sbci	r25, 0x00	; 0
    29b4:	61 96       	adiw	r28, 0x11	; 17
    29b6:	6c af       	std	Y+60, r22	; 0x3c
    29b8:	7d af       	std	Y+61, r23	; 0x3d
    29ba:	8e af       	std	Y+62, r24	; 0x3e
    29bc:	9f af       	std	Y+63, r25	; 0x3f
    29be:	61 97       	sbiw	r28, 0x11	; 17
    29c0:	a2 0c       	add	r10, r2
    29c2:	b3 1c       	adc	r11, r3
    29c4:	c4 1c       	adc	r12, r4
    29c6:	d5 1c       	adc	r13, r5
    29c8:	a2 1a       	sub	r10, r18
    29ca:	b3 0a       	sbc	r11, r19
    29cc:	c4 0a       	sbc	r12, r20
    29ce:	d5 0a       	sbc	r13, r21
    29d0:	c6 01       	movw	r24, r12
    29d2:	b5 01       	movw	r22, r10
    29d4:	29 96       	adiw	r28, 0x09	; 9
    29d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    29d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    29da:	4e ad       	ldd	r20, Y+62	; 0x3e
    29dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    29de:	29 97       	sbiw	r28, 0x09	; 9
    29e0:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    29e4:	7b 01       	movw	r14, r22
    29e6:	8c 01       	movw	r16, r24
    29e8:	c6 01       	movw	r24, r12
    29ea:	b5 01       	movw	r22, r10
    29ec:	29 96       	adiw	r28, 0x09	; 9
    29ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    29f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    29f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    29f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    29f6:	29 97       	sbiw	r28, 0x09	; 9
    29f8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    29fc:	c9 01       	movw	r24, r18
    29fe:	da 01       	movw	r26, r20
    2a00:	5c 01       	movw	r10, r24
    2a02:	6d 01       	movw	r12, r26
    2a04:	c6 01       	movw	r24, r12
    2a06:	b5 01       	movw	r22, r10
    2a08:	2d 96       	adiw	r28, 0x0d	; 13
    2a0a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a0c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2a0e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a10:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a12:	2d 97       	sbiw	r28, 0x0d	; 13
    2a14:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2a18:	9b 01       	movw	r18, r22
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	87 01       	movw	r16, r14
    2a1e:	ff 24       	eor	r15, r15
    2a20:	ee 24       	eor	r14, r14
    2a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a24:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a26:	af a5       	ldd	r26, Y+47	; 0x2f
    2a28:	b8 a9       	ldd	r27, Y+48	; 0x30
    2a2a:	a0 70       	andi	r26, 0x00	; 0
    2a2c:	b0 70       	andi	r27, 0x00	; 0
    2a2e:	e8 2a       	or	r14, r24
    2a30:	f9 2a       	or	r15, r25
    2a32:	0a 2b       	or	r16, r26
    2a34:	1b 2b       	or	r17, r27
    2a36:	e2 16       	cp	r14, r18
    2a38:	f3 06       	cpc	r15, r19
    2a3a:	04 07       	cpc	r16, r20
    2a3c:	15 07       	cpc	r17, r21
    2a3e:	c0 f4       	brcc	.+48     	; 0x2a70 <__udivdi3+0x7be>
    2a40:	08 94       	sec
    2a42:	a1 08       	sbc	r10, r1
    2a44:	b1 08       	sbc	r11, r1
    2a46:	c1 08       	sbc	r12, r1
    2a48:	d1 08       	sbc	r13, r1
    2a4a:	e2 0c       	add	r14, r2
    2a4c:	f3 1c       	adc	r15, r3
    2a4e:	04 1d       	adc	r16, r4
    2a50:	15 1d       	adc	r17, r5
    2a52:	e2 14       	cp	r14, r2
    2a54:	f3 04       	cpc	r15, r3
    2a56:	04 05       	cpc	r16, r4
    2a58:	15 05       	cpc	r17, r5
    2a5a:	50 f0       	brcs	.+20     	; 0x2a70 <__udivdi3+0x7be>
    2a5c:	e2 16       	cp	r14, r18
    2a5e:	f3 06       	cpc	r15, r19
    2a60:	04 07       	cpc	r16, r20
    2a62:	15 07       	cpc	r17, r21
    2a64:	28 f4       	brcc	.+10     	; 0x2a70 <__udivdi3+0x7be>
    2a66:	08 94       	sec
    2a68:	a1 08       	sbc	r10, r1
    2a6a:	b1 08       	sbc	r11, r1
    2a6c:	c1 08       	sbc	r12, r1
    2a6e:	d1 08       	sbc	r13, r1
    2a70:	61 96       	adiw	r28, 0x11	; 17
    2a72:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a74:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a76:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a78:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a7a:	61 97       	sbiw	r28, 0x11	; 17
    2a7c:	d7 01       	movw	r26, r14
    2a7e:	99 27       	eor	r25, r25
    2a80:	88 27       	eor	r24, r24
    2a82:	96 01       	movw	r18, r12
    2a84:	85 01       	movw	r16, r10
    2a86:	08 2b       	or	r16, r24
    2a88:	19 2b       	or	r17, r25
    2a8a:	2a 2b       	or	r18, r26
    2a8c:	3b 2b       	or	r19, r27
    2a8e:	09 ab       	std	Y+49, r16	; 0x31
    2a90:	1a ab       	std	Y+50, r17	; 0x32
    2a92:	2b ab       	std	Y+51, r18	; 0x33
    2a94:	3c ab       	std	Y+52, r19	; 0x34
    2a96:	62 c2       	rjmp	.+1220   	; 0x2f5c <__udivdi3+0xcaa>
    2a98:	6e 14       	cp	r6, r14
    2a9a:	7f 04       	cpc	r7, r15
    2a9c:	80 06       	cpc	r8, r16
    2a9e:	91 06       	cpc	r9, r17
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <__udivdi3+0x7f2>
    2aa2:	51 c2       	rjmp	.+1186   	; 0x2f46 <__udivdi3+0xc94>
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	e2 16       	cp	r14, r18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	f2 06       	cpc	r15, r18
    2aac:	21 e0       	ldi	r18, 0x01	; 1
    2aae:	02 07       	cpc	r16, r18
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	12 07       	cpc	r17, r18
    2ab4:	88 f4       	brcc	.+34     	; 0x2ad8 <__udivdi3+0x826>
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	e3 16       	cp	r14, r19
    2aba:	f1 04       	cpc	r15, r1
    2abc:	01 05       	cpc	r16, r1
    2abe:	11 05       	cpc	r17, r1
    2ac0:	31 f0       	breq	.+12     	; 0x2ace <__udivdi3+0x81c>
    2ac2:	28 f0       	brcs	.+10     	; 0x2ace <__udivdi3+0x81c>
    2ac4:	48 e0       	ldi	r20, 0x08	; 8
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	70 e0       	ldi	r23, 0x00	; 0
    2acc:	17 c0       	rjmp	.+46     	; 0x2afc <__udivdi3+0x84a>
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	12 c0       	rjmp	.+36     	; 0x2afc <__udivdi3+0x84a>
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	e4 16       	cp	r14, r20
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	f4 06       	cpc	r15, r20
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	04 07       	cpc	r16, r20
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	14 07       	cpc	r17, r20
    2ae8:	28 f0       	brcs	.+10     	; 0x2af4 <__udivdi3+0x842>
    2aea:	48 e1       	ldi	r20, 0x18	; 24
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	04 c0       	rjmp	.+8      	; 0x2afc <__udivdi3+0x84a>
    2af4:	40 e1       	ldi	r20, 0x10	; 16
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	d8 01       	movw	r26, r16
    2afe:	c7 01       	movw	r24, r14
    2b00:	04 2e       	mov	r0, r20
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <__udivdi3+0x85a>
    2b04:	b6 95       	lsr	r27
    2b06:	a7 95       	ror	r26
    2b08:	97 95       	ror	r25
    2b0a:	87 95       	ror	r24
    2b0c:	0a 94       	dec	r0
    2b0e:	d2 f7       	brpl	.-12     	; 0x2b04 <__udivdi3+0x852>
    2b10:	83 59       	subi	r24, 0x93	; 147
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	dc 01       	movw	r26, r24
    2b16:	2c 91       	ld	r18, X
    2b18:	30 e2       	ldi	r19, 0x20	; 32
    2b1a:	a3 2e       	mov	r10, r19
    2b1c:	b1 2c       	mov	r11, r1
    2b1e:	c1 2c       	mov	r12, r1
    2b20:	d1 2c       	mov	r13, r1
    2b22:	d6 01       	movw	r26, r12
    2b24:	c5 01       	movw	r24, r10
    2b26:	84 1b       	sub	r24, r20
    2b28:	95 0b       	sbc	r25, r21
    2b2a:	a6 0b       	sbc	r26, r22
    2b2c:	b7 0b       	sbc	r27, r23
    2b2e:	82 1b       	sub	r24, r18
    2b30:	91 09       	sbc	r25, r1
    2b32:	a1 09       	sbc	r26, r1
    2b34:	b1 09       	sbc	r27, r1
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	a1 05       	cpc	r26, r1
    2b3a:	b1 05       	cpc	r27, r1
    2b3c:	89 f4       	brne	.+34     	; 0x2b60 <__udivdi3+0x8ae>
    2b3e:	e6 14       	cp	r14, r6
    2b40:	f7 04       	cpc	r15, r7
    2b42:	08 05       	cpc	r16, r8
    2b44:	19 05       	cpc	r17, r9
    2b46:	08 f4       	brcc	.+2      	; 0x2b4a <__udivdi3+0x898>
    2b48:	f2 c1       	rjmp	.+996    	; 0x2f2e <__udivdi3+0xc7c>
    2b4a:	6d a4       	ldd	r6, Y+45	; 0x2d
    2b4c:	7e a4       	ldd	r7, Y+46	; 0x2e
    2b4e:	8f a4       	ldd	r8, Y+47	; 0x2f
    2b50:	98 a8       	ldd	r9, Y+48	; 0x30
    2b52:	62 14       	cp	r6, r2
    2b54:	73 04       	cpc	r7, r3
    2b56:	84 04       	cpc	r8, r4
    2b58:	95 04       	cpc	r9, r5
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <__udivdi3+0x8ac>
    2b5c:	e8 c1       	rjmp	.+976    	; 0x2f2e <__udivdi3+0xc7c>
    2b5e:	f3 c1       	rjmp	.+998    	; 0x2f46 <__udivdi3+0xc94>
    2b60:	6e 96       	adiw	r28, 0x1e	; 30
    2b62:	8f af       	std	Y+63, r24	; 0x3f
    2b64:	6e 97       	sbiw	r28, 0x1e	; 30
    2b66:	08 2e       	mov	r0, r24
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <__udivdi3+0x8c0>
    2b6a:	ee 0c       	add	r14, r14
    2b6c:	ff 1c       	adc	r15, r15
    2b6e:	00 1f       	adc	r16, r16
    2b70:	11 1f       	adc	r17, r17
    2b72:	0a 94       	dec	r0
    2b74:	d2 f7       	brpl	.-12     	; 0x2b6a <__udivdi3+0x8b8>
    2b76:	6a 2d       	mov	r22, r10
    2b78:	68 1b       	sub	r22, r24
    2b7a:	d2 01       	movw	r26, r4
    2b7c:	c1 01       	movw	r24, r2
    2b7e:	06 2e       	mov	r0, r22
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <__udivdi3+0x8d8>
    2b82:	b6 95       	lsr	r27
    2b84:	a7 95       	ror	r26
    2b86:	97 95       	ror	r25
    2b88:	87 95       	ror	r24
    2b8a:	0a 94       	dec	r0
    2b8c:	d2 f7       	brpl	.-12     	; 0x2b82 <__udivdi3+0x8d0>
    2b8e:	5c 01       	movw	r10, r24
    2b90:	6d 01       	movw	r12, r26
    2b92:	ae 28       	or	r10, r14
    2b94:	bf 28       	or	r11, r15
    2b96:	c0 2a       	or	r12, r16
    2b98:	d1 2a       	or	r13, r17
    2b9a:	ad a2       	std	Y+37, r10	; 0x25
    2b9c:	be a2       	std	Y+38, r11	; 0x26
    2b9e:	cf a2       	std	Y+39, r12	; 0x27
    2ba0:	d8 a6       	std	Y+40, r13	; 0x28
    2ba2:	72 01       	movw	r14, r4
    2ba4:	61 01       	movw	r12, r2
    2ba6:	6e 96       	adiw	r28, 0x1e	; 30
    2ba8:	0f ac       	ldd	r0, Y+63	; 0x3f
    2baa:	6e 97       	sbiw	r28, 0x1e	; 30
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <__udivdi3+0x904>
    2bae:	cc 0c       	add	r12, r12
    2bb0:	dd 1c       	adc	r13, r13
    2bb2:	ee 1c       	adc	r14, r14
    2bb4:	ff 1c       	adc	r15, r15
    2bb6:	0a 94       	dec	r0
    2bb8:	d2 f7       	brpl	.-12     	; 0x2bae <__udivdi3+0x8fc>
    2bba:	c9 a2       	std	Y+33, r12	; 0x21
    2bbc:	da a2       	std	Y+34, r13	; 0x22
    2bbe:	eb a2       	std	Y+35, r14	; 0x23
    2bc0:	fc a2       	std	Y+36, r15	; 0x24
    2bc2:	64 01       	movw	r12, r8
    2bc4:	53 01       	movw	r10, r6
    2bc6:	06 2e       	mov	r0, r22
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <__udivdi3+0x920>
    2bca:	d6 94       	lsr	r13
    2bcc:	c7 94       	ror	r12
    2bce:	b7 94       	ror	r11
    2bd0:	a7 94       	ror	r10
    2bd2:	0a 94       	dec	r0
    2bd4:	d2 f7       	brpl	.-12     	; 0x2bca <__udivdi3+0x918>
    2bd6:	d4 01       	movw	r26, r8
    2bd8:	c3 01       	movw	r24, r6
    2bda:	6e 96       	adiw	r28, 0x1e	; 30
    2bdc:	0f ac       	ldd	r0, Y+63	; 0x3f
    2bde:	6e 97       	sbiw	r28, 0x1e	; 30
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <__udivdi3+0x938>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	aa 1f       	adc	r26, r26
    2be8:	bb 1f       	adc	r27, r27
    2bea:	0a 94       	dec	r0
    2bec:	d2 f7       	brpl	.-12     	; 0x2be2 <__udivdi3+0x930>
    2bee:	ed a4       	ldd	r14, Y+45	; 0x2d
    2bf0:	fe a4       	ldd	r15, Y+46	; 0x2e
    2bf2:	0f a5       	ldd	r16, Y+47	; 0x2f
    2bf4:	18 a9       	ldd	r17, Y+48	; 0x30
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <__udivdi3+0x94e>
    2bf8:	16 95       	lsr	r17
    2bfa:	07 95       	ror	r16
    2bfc:	f7 94       	ror	r15
    2bfe:	e7 94       	ror	r14
    2c00:	6a 95       	dec	r22
    2c02:	d2 f7       	brpl	.-12     	; 0x2bf8 <__udivdi3+0x946>
    2c04:	37 01       	movw	r6, r14
    2c06:	48 01       	movw	r8, r16
    2c08:	68 2a       	or	r6, r24
    2c0a:	79 2a       	or	r7, r25
    2c0c:	8a 2a       	or	r8, r26
    2c0e:	9b 2a       	or	r9, r27
    2c10:	6d 8e       	std	Y+29, r6	; 0x1d
    2c12:	7e 8e       	std	Y+30, r7	; 0x1e
    2c14:	8f 8e       	std	Y+31, r8	; 0x1f
    2c16:	98 a2       	std	Y+32, r9	; 0x20
    2c18:	ed a0       	ldd	r14, Y+37	; 0x25
    2c1a:	fe a0       	ldd	r15, Y+38	; 0x26
    2c1c:	0f a1       	ldd	r16, Y+39	; 0x27
    2c1e:	18 a5       	ldd	r17, Y+40	; 0x28
    2c20:	38 01       	movw	r6, r16
    2c22:	88 24       	eor	r8, r8
    2c24:	99 24       	eor	r9, r9
    2c26:	98 01       	movw	r18, r16
    2c28:	87 01       	movw	r16, r14
    2c2a:	20 70       	andi	r18, 0x00	; 0
    2c2c:	30 70       	andi	r19, 0x00	; 0
    2c2e:	65 96       	adiw	r28, 0x15	; 21
    2c30:	0c af       	std	Y+60, r16	; 0x3c
    2c32:	1d af       	std	Y+61, r17	; 0x3d
    2c34:	2e af       	std	Y+62, r18	; 0x3e
    2c36:	3f af       	std	Y+63, r19	; 0x3f
    2c38:	65 97       	sbiw	r28, 0x15	; 21
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	b5 01       	movw	r22, r10
    2c3e:	a4 01       	movw	r20, r8
    2c40:	93 01       	movw	r18, r6
    2c42:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2c46:	7b 01       	movw	r14, r22
    2c48:	8c 01       	movw	r16, r24
    2c4a:	c6 01       	movw	r24, r12
    2c4c:	b5 01       	movw	r22, r10
    2c4e:	a4 01       	movw	r20, r8
    2c50:	93 01       	movw	r18, r6
    2c52:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2c56:	c9 01       	movw	r24, r18
    2c58:	da 01       	movw	r26, r20
    2c5a:	1c 01       	movw	r2, r24
    2c5c:	2d 01       	movw	r4, r26
    2c5e:	c2 01       	movw	r24, r4
    2c60:	b1 01       	movw	r22, r2
    2c62:	65 96       	adiw	r28, 0x15	; 21
    2c64:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c66:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c68:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c6a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c6c:	65 97       	sbiw	r28, 0x15	; 21
    2c6e:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2c72:	9b 01       	movw	r18, r22
    2c74:	ac 01       	movw	r20, r24
    2c76:	87 01       	movw	r16, r14
    2c78:	ff 24       	eor	r15, r15
    2c7a:	ee 24       	eor	r14, r14
    2c7c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2c7e:	be 8c       	ldd	r11, Y+30	; 0x1e
    2c80:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2c82:	d8 a0       	ldd	r13, Y+32	; 0x20
    2c84:	c6 01       	movw	r24, r12
    2c86:	aa 27       	eor	r26, r26
    2c88:	bb 27       	eor	r27, r27
    2c8a:	57 01       	movw	r10, r14
    2c8c:	68 01       	movw	r12, r16
    2c8e:	a8 2a       	or	r10, r24
    2c90:	b9 2a       	or	r11, r25
    2c92:	ca 2a       	or	r12, r26
    2c94:	db 2a       	or	r13, r27
    2c96:	a2 16       	cp	r10, r18
    2c98:	b3 06       	cpc	r11, r19
    2c9a:	c4 06       	cpc	r12, r20
    2c9c:	d5 06       	cpc	r13, r21
    2c9e:	00 f5       	brcc	.+64     	; 0x2ce0 <__udivdi3+0xa2e>
    2ca0:	08 94       	sec
    2ca2:	21 08       	sbc	r2, r1
    2ca4:	31 08       	sbc	r3, r1
    2ca6:	41 08       	sbc	r4, r1
    2ca8:	51 08       	sbc	r5, r1
    2caa:	ed a0       	ldd	r14, Y+37	; 0x25
    2cac:	fe a0       	ldd	r15, Y+38	; 0x26
    2cae:	0f a1       	ldd	r16, Y+39	; 0x27
    2cb0:	18 a5       	ldd	r17, Y+40	; 0x28
    2cb2:	ae 0c       	add	r10, r14
    2cb4:	bf 1c       	adc	r11, r15
    2cb6:	c0 1e       	adc	r12, r16
    2cb8:	d1 1e       	adc	r13, r17
    2cba:	ae 14       	cp	r10, r14
    2cbc:	bf 04       	cpc	r11, r15
    2cbe:	c0 06       	cpc	r12, r16
    2cc0:	d1 06       	cpc	r13, r17
    2cc2:	70 f0       	brcs	.+28     	; 0x2ce0 <__udivdi3+0xa2e>
    2cc4:	a2 16       	cp	r10, r18
    2cc6:	b3 06       	cpc	r11, r19
    2cc8:	c4 06       	cpc	r12, r20
    2cca:	d5 06       	cpc	r13, r21
    2ccc:	48 f4       	brcc	.+18     	; 0x2ce0 <__udivdi3+0xa2e>
    2cce:	08 94       	sec
    2cd0:	21 08       	sbc	r2, r1
    2cd2:	31 08       	sbc	r3, r1
    2cd4:	41 08       	sbc	r4, r1
    2cd6:	51 08       	sbc	r5, r1
    2cd8:	ae 0c       	add	r10, r14
    2cda:	bf 1c       	adc	r11, r15
    2cdc:	c0 1e       	adc	r12, r16
    2cde:	d1 1e       	adc	r13, r17
    2ce0:	a2 1a       	sub	r10, r18
    2ce2:	b3 0a       	sbc	r11, r19
    2ce4:	c4 0a       	sbc	r12, r20
    2ce6:	d5 0a       	sbc	r13, r21
    2ce8:	c6 01       	movw	r24, r12
    2cea:	b5 01       	movw	r22, r10
    2cec:	a4 01       	movw	r20, r8
    2cee:	93 01       	movw	r18, r6
    2cf0:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2cf4:	7b 01       	movw	r14, r22
    2cf6:	8c 01       	movw	r16, r24
    2cf8:	c6 01       	movw	r24, r12
    2cfa:	b5 01       	movw	r22, r10
    2cfc:	a4 01       	movw	r20, r8
    2cfe:	93 01       	movw	r18, r6
    2d00:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    2d04:	c9 01       	movw	r24, r18
    2d06:	da 01       	movw	r26, r20
    2d08:	3c 01       	movw	r6, r24
    2d0a:	4d 01       	movw	r8, r26
    2d0c:	c4 01       	movw	r24, r8
    2d0e:	b3 01       	movw	r22, r6
    2d10:	65 96       	adiw	r28, 0x15	; 21
    2d12:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d14:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d16:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d18:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d1a:	65 97       	sbiw	r28, 0x15	; 21
    2d1c:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	87 01       	movw	r16, r14
    2d26:	ff 24       	eor	r15, r15
    2d28:	ee 24       	eor	r14, r14
    2d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2e:	af 8d       	ldd	r26, Y+31	; 0x1f
    2d30:	b8 a1       	ldd	r27, Y+32	; 0x20
    2d32:	a0 70       	andi	r26, 0x00	; 0
    2d34:	b0 70       	andi	r27, 0x00	; 0
    2d36:	57 01       	movw	r10, r14
    2d38:	68 01       	movw	r12, r16
    2d3a:	a8 2a       	or	r10, r24
    2d3c:	b9 2a       	or	r11, r25
    2d3e:	ca 2a       	or	r12, r26
    2d40:	db 2a       	or	r13, r27
    2d42:	a2 16       	cp	r10, r18
    2d44:	b3 06       	cpc	r11, r19
    2d46:	c4 06       	cpc	r12, r20
    2d48:	d5 06       	cpc	r13, r21
    2d4a:	00 f5       	brcc	.+64     	; 0x2d8c <__udivdi3+0xada>
    2d4c:	08 94       	sec
    2d4e:	61 08       	sbc	r6, r1
    2d50:	71 08       	sbc	r7, r1
    2d52:	81 08       	sbc	r8, r1
    2d54:	91 08       	sbc	r9, r1
    2d56:	6d a1       	ldd	r22, Y+37	; 0x25
    2d58:	7e a1       	ldd	r23, Y+38	; 0x26
    2d5a:	8f a1       	ldd	r24, Y+39	; 0x27
    2d5c:	98 a5       	ldd	r25, Y+40	; 0x28
    2d5e:	a6 0e       	add	r10, r22
    2d60:	b7 1e       	adc	r11, r23
    2d62:	c8 1e       	adc	r12, r24
    2d64:	d9 1e       	adc	r13, r25
    2d66:	a6 16       	cp	r10, r22
    2d68:	b7 06       	cpc	r11, r23
    2d6a:	c8 06       	cpc	r12, r24
    2d6c:	d9 06       	cpc	r13, r25
    2d6e:	70 f0       	brcs	.+28     	; 0x2d8c <__udivdi3+0xada>
    2d70:	a2 16       	cp	r10, r18
    2d72:	b3 06       	cpc	r11, r19
    2d74:	c4 06       	cpc	r12, r20
    2d76:	d5 06       	cpc	r13, r21
    2d78:	48 f4       	brcc	.+18     	; 0x2d8c <__udivdi3+0xada>
    2d7a:	08 94       	sec
    2d7c:	61 08       	sbc	r6, r1
    2d7e:	71 08       	sbc	r7, r1
    2d80:	81 08       	sbc	r8, r1
    2d82:	91 08       	sbc	r9, r1
    2d84:	a6 0e       	add	r10, r22
    2d86:	b7 1e       	adc	r11, r23
    2d88:	c8 1e       	adc	r12, r24
    2d8a:	d9 1e       	adc	r13, r25
    2d8c:	d6 01       	movw	r26, r12
    2d8e:	c5 01       	movw	r24, r10
    2d90:	82 1b       	sub	r24, r18
    2d92:	93 0b       	sbc	r25, r19
    2d94:	a4 0b       	sbc	r26, r20
    2d96:	b5 0b       	sbc	r27, r21
    2d98:	89 8f       	std	Y+25, r24	; 0x19
    2d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d9e:	bc 8f       	std	Y+28, r27	; 0x1c
    2da0:	d1 01       	movw	r26, r2
    2da2:	99 27       	eor	r25, r25
    2da4:	88 27       	eor	r24, r24
    2da6:	64 01       	movw	r12, r8
    2da8:	53 01       	movw	r10, r6
    2daa:	a8 2a       	or	r10, r24
    2dac:	b9 2a       	or	r11, r25
    2dae:	ca 2a       	or	r12, r26
    2db0:	db 2a       	or	r13, r27
    2db2:	a9 aa       	std	Y+49, r10	; 0x31
    2db4:	ba aa       	std	Y+50, r11	; 0x32
    2db6:	cb aa       	std	Y+51, r12	; 0x33
    2db8:	dc aa       	std	Y+52, r13	; 0x34
    2dba:	86 01       	movw	r16, r12
    2dbc:	75 01       	movw	r14, r10
    2dbe:	2f ef       	ldi	r18, 0xFF	; 255
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	e2 22       	and	r14, r18
    2dc8:	f3 22       	and	r15, r19
    2dca:	04 23       	and	r16, r20
    2dcc:	15 23       	and	r17, r21
    2dce:	a6 01       	movw	r20, r12
    2dd0:	66 27       	eor	r22, r22
    2dd2:	77 27       	eor	r23, r23
    2dd4:	6d 96       	adiw	r28, 0x1d	; 29
    2dd6:	4c af       	std	Y+60, r20	; 0x3c
    2dd8:	5d af       	std	Y+61, r21	; 0x3d
    2dda:	6e af       	std	Y+62, r22	; 0x3e
    2ddc:	7f af       	std	Y+63, r23	; 0x3f
    2dde:	6d 97       	sbiw	r28, 0x1d	; 29
    2de0:	a9 a0       	ldd	r10, Y+33	; 0x21
    2de2:	ba a0       	ldd	r11, Y+34	; 0x22
    2de4:	cb a0       	ldd	r12, Y+35	; 0x23
    2de6:	dc a0       	ldd	r13, Y+36	; 0x24
    2de8:	6f ef       	ldi	r22, 0xFF	; 255
    2dea:	7f ef       	ldi	r23, 0xFF	; 255
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a6 22       	and	r10, r22
    2df2:	b7 22       	and	r11, r23
    2df4:	c8 22       	and	r12, r24
    2df6:	d9 22       	and	r13, r25
    2df8:	89 a1       	ldd	r24, Y+33	; 0x21
    2dfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2dfc:	ab a1       	ldd	r26, Y+35	; 0x23
    2dfe:	bc a1       	ldd	r27, Y+36	; 0x24
    2e00:	1d 01       	movw	r2, r26
    2e02:	44 24       	eor	r4, r4
    2e04:	55 24       	eor	r5, r5
    2e06:	c8 01       	movw	r24, r16
    2e08:	b7 01       	movw	r22, r14
    2e0a:	a6 01       	movw	r20, r12
    2e0c:	95 01       	movw	r18, r10
    2e0e:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2e12:	69 96       	adiw	r28, 0x19	; 25
    2e14:	6c af       	std	Y+60, r22	; 0x3c
    2e16:	7d af       	std	Y+61, r23	; 0x3d
    2e18:	8e af       	std	Y+62, r24	; 0x3e
    2e1a:	9f af       	std	Y+63, r25	; 0x3f
    2e1c:	69 97       	sbiw	r28, 0x19	; 25
    2e1e:	c8 01       	movw	r24, r16
    2e20:	b7 01       	movw	r22, r14
    2e22:	a2 01       	movw	r20, r4
    2e24:	91 01       	movw	r18, r2
    2e26:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2e2a:	3b 01       	movw	r6, r22
    2e2c:	4c 01       	movw	r8, r24
    2e2e:	6d 96       	adiw	r28, 0x1d	; 29
    2e30:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e32:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e34:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e36:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e38:	6d 97       	sbiw	r28, 0x1d	; 29
    2e3a:	a6 01       	movw	r20, r12
    2e3c:	95 01       	movw	r18, r10
    2e3e:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2e42:	7b 01       	movw	r14, r22
    2e44:	8c 01       	movw	r16, r24
    2e46:	6d 96       	adiw	r28, 0x1d	; 29
    2e48:	6c ad       	ldd	r22, Y+60	; 0x3c
    2e4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2e4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e50:	6d 97       	sbiw	r28, 0x1d	; 29
    2e52:	a2 01       	movw	r20, r4
    2e54:	91 01       	movw	r18, r2
    2e56:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    2e5a:	5b 01       	movw	r10, r22
    2e5c:	6c 01       	movw	r12, r24
    2e5e:	a8 01       	movw	r20, r16
    2e60:	97 01       	movw	r18, r14
    2e62:	26 0d       	add	r18, r6
    2e64:	37 1d       	adc	r19, r7
    2e66:	48 1d       	adc	r20, r8
    2e68:	59 1d       	adc	r21, r9
    2e6a:	69 96       	adiw	r28, 0x19	; 25
    2e6c:	6c ac       	ldd	r6, Y+60	; 0x3c
    2e6e:	7d ac       	ldd	r7, Y+61	; 0x3d
    2e70:	8e ac       	ldd	r8, Y+62	; 0x3e
    2e72:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e74:	69 97       	sbiw	r28, 0x19	; 25
    2e76:	c4 01       	movw	r24, r8
    2e78:	aa 27       	eor	r26, r26
    2e7a:	bb 27       	eor	r27, r27
    2e7c:	28 0f       	add	r18, r24
    2e7e:	39 1f       	adc	r19, r25
    2e80:	4a 1f       	adc	r20, r26
    2e82:	5b 1f       	adc	r21, r27
    2e84:	2e 15       	cp	r18, r14
    2e86:	3f 05       	cpc	r19, r15
    2e88:	40 07       	cpc	r20, r16
    2e8a:	51 07       	cpc	r21, r17
    2e8c:	48 f4       	brcc	.+18     	; 0x2ea0 <__udivdi3+0xbee>
    2e8e:	e1 2c       	mov	r14, r1
    2e90:	f1 2c       	mov	r15, r1
    2e92:	61 e0       	ldi	r22, 0x01	; 1
    2e94:	06 2f       	mov	r16, r22
    2e96:	11 2d       	mov	r17, r1
    2e98:	ae 0c       	add	r10, r14
    2e9a:	bf 1c       	adc	r11, r15
    2e9c:	c0 1e       	adc	r12, r16
    2e9e:	d1 1e       	adc	r13, r17
    2ea0:	ca 01       	movw	r24, r20
    2ea2:	aa 27       	eor	r26, r26
    2ea4:	bb 27       	eor	r27, r27
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	6a 0d       	add	r22, r10
    2eac:	7b 1d       	adc	r23, r11
    2eae:	8c 1d       	adc	r24, r12
    2eb0:	9d 1d       	adc	r25, r13
    2eb2:	69 8c       	ldd	r6, Y+25	; 0x19
    2eb4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    2eb6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2eb8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    2eba:	66 16       	cp	r6, r22
    2ebc:	77 06       	cpc	r7, r23
    2ebe:	88 06       	cpc	r8, r24
    2ec0:	99 06       	cpc	r9, r25
    2ec2:	40 f1       	brcs	.+80     	; 0x2f14 <__udivdi3+0xc62>
    2ec4:	66 15       	cp	r22, r6
    2ec6:	77 05       	cpc	r23, r7
    2ec8:	88 05       	cpc	r24, r8
    2eca:	99 05       	cpc	r25, r9
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <__udivdi3+0xc1e>
    2ece:	43 c0       	rjmp	.+134    	; 0x2f56 <__udivdi3+0xca4>
    2ed0:	d9 01       	movw	r26, r18
    2ed2:	99 27       	eor	r25, r25
    2ed4:	88 27       	eor	r24, r24
    2ed6:	69 96       	adiw	r28, 0x19	; 25
    2ed8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2eda:	3d ad       	ldd	r19, Y+61	; 0x3d
    2edc:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ede:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ee0:	69 97       	sbiw	r28, 0x19	; 25
    2ee2:	40 70       	andi	r20, 0x00	; 0
    2ee4:	50 70       	andi	r21, 0x00	; 0
    2ee6:	82 0f       	add	r24, r18
    2ee8:	93 1f       	adc	r25, r19
    2eea:	a4 1f       	adc	r26, r20
    2eec:	b5 1f       	adc	r27, r21
    2eee:	2d a5       	ldd	r18, Y+45	; 0x2d
    2ef0:	3e a5       	ldd	r19, Y+46	; 0x2e
    2ef2:	4f a5       	ldd	r20, Y+47	; 0x2f
    2ef4:	58 a9       	ldd	r21, Y+48	; 0x30
    2ef6:	6e 96       	adiw	r28, 0x1e	; 30
    2ef8:	0f ac       	ldd	r0, Y+63	; 0x3f
    2efa:	6e 97       	sbiw	r28, 0x1e	; 30
    2efc:	04 c0       	rjmp	.+8      	; 0x2f06 <__udivdi3+0xc54>
    2efe:	22 0f       	add	r18, r18
    2f00:	33 1f       	adc	r19, r19
    2f02:	44 1f       	adc	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	0a 94       	dec	r0
    2f08:	d2 f7       	brpl	.-12     	; 0x2efe <__udivdi3+0xc4c>
    2f0a:	28 17       	cp	r18, r24
    2f0c:	39 07       	cpc	r19, r25
    2f0e:	4a 07       	cpc	r20, r26
    2f10:	5b 07       	cpc	r21, r27
    2f12:	08 f5       	brcc	.+66     	; 0x2f56 <__udivdi3+0xca4>
    2f14:	09 a9       	ldd	r16, Y+49	; 0x31
    2f16:	1a a9       	ldd	r17, Y+50	; 0x32
    2f18:	2b a9       	ldd	r18, Y+51	; 0x33
    2f1a:	3c a9       	ldd	r19, Y+52	; 0x34
    2f1c:	01 50       	subi	r16, 0x01	; 1
    2f1e:	10 40       	sbci	r17, 0x00	; 0
    2f20:	20 40       	sbci	r18, 0x00	; 0
    2f22:	30 40       	sbci	r19, 0x00	; 0
    2f24:	09 ab       	std	Y+49, r16	; 0x31
    2f26:	1a ab       	std	Y+50, r17	; 0x32
    2f28:	2b ab       	std	Y+51, r18	; 0x33
    2f2a:	3c ab       	std	Y+52, r19	; 0x34
    2f2c:	14 c0       	rjmp	.+40     	; 0x2f56 <__udivdi3+0xca4>
    2f2e:	66 24       	eor	r6, r6
    2f30:	77 24       	eor	r7, r7
    2f32:	43 01       	movw	r8, r6
    2f34:	21 e0       	ldi	r18, 0x01	; 1
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	50 e0       	ldi	r21, 0x00	; 0
    2f3c:	29 ab       	std	Y+49, r18	; 0x31
    2f3e:	3a ab       	std	Y+50, r19	; 0x32
    2f40:	4b ab       	std	Y+51, r20	; 0x33
    2f42:	5c ab       	std	Y+52, r21	; 0x34
    2f44:	0b c0       	rjmp	.+22     	; 0x2f5c <__udivdi3+0xcaa>
    2f46:	66 24       	eor	r6, r6
    2f48:	77 24       	eor	r7, r7
    2f4a:	43 01       	movw	r8, r6
    2f4c:	19 aa       	std	Y+49, r1	; 0x31
    2f4e:	1a aa       	std	Y+50, r1	; 0x32
    2f50:	1b aa       	std	Y+51, r1	; 0x33
    2f52:	1c aa       	std	Y+52, r1	; 0x34
    2f54:	03 c0       	rjmp	.+6      	; 0x2f5c <__udivdi3+0xcaa>
    2f56:	66 24       	eor	r6, r6
    2f58:	77 24       	eor	r7, r7
    2f5a:	43 01       	movw	r8, r6
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	71 96       	adiw	r30, 0x11	; 17
    2f60:	88 e0       	ldi	r24, 0x08	; 8
    2f62:	df 01       	movw	r26, r30
    2f64:	1d 92       	st	X+, r1
    2f66:	8a 95       	dec	r24
    2f68:	e9 f7       	brne	.-6      	; 0x2f64 <__udivdi3+0xcb2>
    2f6a:	a9 a8       	ldd	r10, Y+49	; 0x31
    2f6c:	ba a8       	ldd	r11, Y+50	; 0x32
    2f6e:	cb a8       	ldd	r12, Y+51	; 0x33
    2f70:	dc a8       	ldd	r13, Y+52	; 0x34
    2f72:	a9 8a       	std	Y+17, r10	; 0x11
    2f74:	ba 8a       	std	Y+18, r11	; 0x12
    2f76:	cb 8a       	std	Y+19, r12	; 0x13
    2f78:	dc 8a       	std	Y+20, r13	; 0x14
    2f7a:	6d 8a       	std	Y+21, r6	; 0x15
    2f7c:	7e 8a       	std	Y+22, r7	; 0x16
    2f7e:	8f 8a       	std	Y+23, r8	; 0x17
    2f80:	98 8e       	std	Y+24, r9	; 0x18
    2f82:	29 a9       	ldd	r18, Y+49	; 0x31
    2f84:	3a 89       	ldd	r19, Y+18	; 0x12
    2f86:	4b 89       	ldd	r20, Y+19	; 0x13
    2f88:	5c 89       	ldd	r21, Y+20	; 0x14
    2f8a:	66 2d       	mov	r22, r6
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	c2 5a       	subi	r28, 0xA2	; 162
    2f94:	df 4f       	sbci	r29, 0xFF	; 255
    2f96:	e2 e1       	ldi	r30, 0x12	; 18
    2f98:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

00002f9c <__umoddi3>:
    2f9c:	ab e5       	ldi	r26, 0x5B	; 91
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e4 ed       	ldi	r30, 0xD4	; 212
    2fa2:	f7 e1       	ldi	r31, 0x17	; 23
    2fa4:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
    2fa8:	a8 e0       	ldi	r26, 0x08	; 8
    2faa:	4e 01       	movw	r8, r28
    2fac:	08 94       	sec
    2fae:	81 1c       	adc	r8, r1
    2fb0:	91 1c       	adc	r9, r1
    2fb2:	f4 01       	movw	r30, r8
    2fb4:	6a 2e       	mov	r6, r26
    2fb6:	11 92       	st	Z+, r1
    2fb8:	6a 94       	dec	r6
    2fba:	e9 f7       	brne	.-6      	; 0x2fb6 <__umoddi3+0x1a>
    2fbc:	29 83       	std	Y+1, r18	; 0x01
    2fbe:	3a 83       	std	Y+2, r19	; 0x02
    2fc0:	4b 83       	std	Y+3, r20	; 0x03
    2fc2:	5c 83       	std	Y+4, r21	; 0x04
    2fc4:	6d 83       	std	Y+5, r22	; 0x05
    2fc6:	7e 83       	std	Y+6, r23	; 0x06
    2fc8:	8f 83       	std	Y+7, r24	; 0x07
    2fca:	98 87       	std	Y+8, r25	; 0x08
    2fcc:	ce 01       	movw	r24, r28
    2fce:	09 96       	adiw	r24, 0x09	; 9
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	11 92       	st	Z+, r1
    2fd4:	aa 95       	dec	r26
    2fd6:	e9 f7       	brne	.-6      	; 0x2fd2 <__umoddi3+0x36>
    2fd8:	a9 86       	std	Y+9, r10	; 0x09
    2fda:	ba 86       	std	Y+10, r11	; 0x0a
    2fdc:	cb 86       	std	Y+11, r12	; 0x0b
    2fde:	dc 86       	std	Y+12, r13	; 0x0c
    2fe0:	ed 86       	std	Y+13, r14	; 0x0d
    2fe2:	fe 86       	std	Y+14, r15	; 0x0e
    2fe4:	0f 87       	std	Y+15, r16	; 0x0f
    2fe6:	18 8b       	std	Y+16, r17	; 0x10
    2fe8:	29 84       	ldd	r2, Y+9	; 0x09
    2fea:	3a 84       	ldd	r3, Y+10	; 0x0a
    2fec:	4b 84       	ldd	r4, Y+11	; 0x0b
    2fee:	5c 84       	ldd	r5, Y+12	; 0x0c
    2ff0:	ad 84       	ldd	r10, Y+13	; 0x0d
    2ff2:	be 84       	ldd	r11, Y+14	; 0x0e
    2ff4:	cf 84       	ldd	r12, Y+15	; 0x0f
    2ff6:	d8 88       	ldd	r13, Y+16	; 0x10
    2ff8:	29 81       	ldd	r18, Y+1	; 0x01
    2ffa:	3a 81       	ldd	r19, Y+2	; 0x02
    2ffc:	4b 81       	ldd	r20, Y+3	; 0x03
    2ffe:	5c 81       	ldd	r21, Y+4	; 0x04
    3000:	69 96       	adiw	r28, 0x19	; 25
    3002:	2f af       	std	Y+63, r18	; 0x3f
    3004:	69 97       	sbiw	r28, 0x19	; 25
    3006:	6a 96       	adiw	r28, 0x1a	; 26
    3008:	3f af       	std	Y+63, r19	; 0x3f
    300a:	6a 97       	sbiw	r28, 0x1a	; 26
    300c:	6b 96       	adiw	r28, 0x1b	; 27
    300e:	4f af       	std	Y+63, r20	; 0x3f
    3010:	6b 97       	sbiw	r28, 0x1b	; 27
    3012:	6c 96       	adiw	r28, 0x1c	; 28
    3014:	5f af       	std	Y+63, r21	; 0x3f
    3016:	6c 97       	sbiw	r28, 0x1c	; 28
    3018:	6c 96       	adiw	r28, 0x1c	; 28
    301a:	6c ac       	ldd	r6, Y+60	; 0x3c
    301c:	7d ac       	ldd	r7, Y+61	; 0x3d
    301e:	8e ac       	ldd	r8, Y+62	; 0x3e
    3020:	9f ac       	ldd	r9, Y+63	; 0x3f
    3022:	6c 97       	sbiw	r28, 0x1c	; 28
    3024:	69 aa       	std	Y+49, r6	; 0x31
    3026:	7a aa       	std	Y+50, r7	; 0x32
    3028:	8b aa       	std	Y+51, r8	; 0x33
    302a:	9c aa       	std	Y+52, r9	; 0x34
    302c:	6d 81       	ldd	r22, Y+5	; 0x05
    302e:	7e 81       	ldd	r23, Y+6	; 0x06
    3030:	8f 81       	ldd	r24, Y+7	; 0x07
    3032:	98 85       	ldd	r25, Y+8	; 0x08
    3034:	3b 01       	movw	r6, r22
    3036:	4c 01       	movw	r8, r24
    3038:	6d aa       	std	Y+53, r6	; 0x35
    303a:	7e aa       	std	Y+54, r7	; 0x36
    303c:	8f aa       	std	Y+55, r8	; 0x37
    303e:	98 ae       	std	Y+56, r9	; 0x38
    3040:	a1 14       	cp	r10, r1
    3042:	b1 04       	cpc	r11, r1
    3044:	c1 04       	cpc	r12, r1
    3046:	d1 04       	cpc	r13, r1
    3048:	09 f0       	breq	.+2      	; 0x304c <__umoddi3+0xb0>
    304a:	04 c3       	rjmp	.+1544   	; 0x3654 <__umoddi3+0x6b8>
    304c:	62 14       	cp	r6, r2
    304e:	73 04       	cpc	r7, r3
    3050:	84 04       	cpc	r8, r4
    3052:	95 04       	cpc	r9, r5
    3054:	08 f0       	brcs	.+2      	; 0x3058 <__umoddi3+0xbc>
    3056:	00 c1       	rjmp	.+512    	; 0x3258 <__umoddi3+0x2bc>
    3058:	00 e0       	ldi	r16, 0x00	; 0
    305a:	20 16       	cp	r2, r16
    305c:	00 e0       	ldi	r16, 0x00	; 0
    305e:	30 06       	cpc	r3, r16
    3060:	01 e0       	ldi	r16, 0x01	; 1
    3062:	40 06       	cpc	r4, r16
    3064:	00 e0       	ldi	r16, 0x00	; 0
    3066:	50 06       	cpc	r5, r16
    3068:	88 f4       	brcc	.+34     	; 0x308c <__umoddi3+0xf0>
    306a:	1f ef       	ldi	r17, 0xFF	; 255
    306c:	21 16       	cp	r2, r17
    306e:	31 04       	cpc	r3, r1
    3070:	41 04       	cpc	r4, r1
    3072:	51 04       	cpc	r5, r1
    3074:	39 f0       	breq	.+14     	; 0x3084 <__umoddi3+0xe8>
    3076:	30 f0       	brcs	.+12     	; 0x3084 <__umoddi3+0xe8>
    3078:	88 e0       	ldi	r24, 0x08	; 8
    307a:	e8 2e       	mov	r14, r24
    307c:	f1 2c       	mov	r15, r1
    307e:	01 2d       	mov	r16, r1
    3080:	11 2d       	mov	r17, r1
    3082:	18 c0       	rjmp	.+48     	; 0x30b4 <__umoddi3+0x118>
    3084:	ee 24       	eor	r14, r14
    3086:	ff 24       	eor	r15, r15
    3088:	87 01       	movw	r16, r14
    308a:	14 c0       	rjmp	.+40     	; 0x30b4 <__umoddi3+0x118>
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	24 16       	cp	r2, r20
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	34 06       	cpc	r3, r20
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	44 06       	cpc	r4, r20
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	54 06       	cpc	r5, r20
    309c:	30 f0       	brcs	.+12     	; 0x30aa <__umoddi3+0x10e>
    309e:	b8 e1       	ldi	r27, 0x18	; 24
    30a0:	eb 2e       	mov	r14, r27
    30a2:	f1 2c       	mov	r15, r1
    30a4:	01 2d       	mov	r16, r1
    30a6:	11 2d       	mov	r17, r1
    30a8:	05 c0       	rjmp	.+10     	; 0x30b4 <__umoddi3+0x118>
    30aa:	a0 e1       	ldi	r26, 0x10	; 16
    30ac:	ea 2e       	mov	r14, r26
    30ae:	f1 2c       	mov	r15, r1
    30b0:	01 2d       	mov	r16, r1
    30b2:	11 2d       	mov	r17, r1
    30b4:	d2 01       	movw	r26, r4
    30b6:	c1 01       	movw	r24, r2
    30b8:	0e 2c       	mov	r0, r14
    30ba:	04 c0       	rjmp	.+8      	; 0x30c4 <__umoddi3+0x128>
    30bc:	b6 95       	lsr	r27
    30be:	a7 95       	ror	r26
    30c0:	97 95       	ror	r25
    30c2:	87 95       	ror	r24
    30c4:	0a 94       	dec	r0
    30c6:	d2 f7       	brpl	.-12     	; 0x30bc <__umoddi3+0x120>
    30c8:	83 59       	subi	r24, 0x93	; 147
    30ca:	9f 4f       	sbci	r25, 0xFF	; 255
    30cc:	dc 01       	movw	r26, r24
    30ce:	2c 91       	ld	r18, X
    30d0:	80 e2       	ldi	r24, 0x20	; 32
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e0       	ldi	r26, 0x00	; 0
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	8e 19       	sub	r24, r14
    30da:	9f 09       	sbc	r25, r15
    30dc:	a0 0b       	sbc	r26, r16
    30de:	b1 0b       	sbc	r27, r17
    30e0:	5c 01       	movw	r10, r24
    30e2:	6d 01       	movw	r12, r26
    30e4:	a2 1a       	sub	r10, r18
    30e6:	b1 08       	sbc	r11, r1
    30e8:	c1 08       	sbc	r12, r1
    30ea:	d1 08       	sbc	r13, r1
    30ec:	a9 ae       	std	Y+57, r10	; 0x39
    30ee:	ba ae       	std	Y+58, r11	; 0x3a
    30f0:	cb ae       	std	Y+59, r12	; 0x3b
    30f2:	dc ae       	std	Y+60, r13	; 0x3c
    30f4:	a1 14       	cp	r10, r1
    30f6:	b1 04       	cpc	r11, r1
    30f8:	c1 04       	cpc	r12, r1
    30fa:	d1 04       	cpc	r13, r1
    30fc:	09 f4       	brne	.+2      	; 0x3100 <__umoddi3+0x164>
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <__umoddi3+0x1e2>
    3100:	69 ad       	ldd	r22, Y+57	; 0x39
    3102:	06 2e       	mov	r0, r22
    3104:	04 c0       	rjmp	.+8      	; 0x310e <__umoddi3+0x172>
    3106:	22 0c       	add	r2, r2
    3108:	33 1c       	adc	r3, r3
    310a:	44 1c       	adc	r4, r4
    310c:	55 1c       	adc	r5, r5
    310e:	0a 94       	dec	r0
    3110:	d2 f7       	brpl	.-12     	; 0x3106 <__umoddi3+0x16a>
    3112:	a4 01       	movw	r20, r8
    3114:	93 01       	movw	r18, r6
    3116:	06 2e       	mov	r0, r22
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <__umoddi3+0x186>
    311a:	22 0f       	add	r18, r18
    311c:	33 1f       	adc	r19, r19
    311e:	44 1f       	adc	r20, r20
    3120:	55 1f       	adc	r21, r21
    3122:	0a 94       	dec	r0
    3124:	d2 f7       	brpl	.-12     	; 0x311a <__umoddi3+0x17e>
    3126:	80 e2       	ldi	r24, 0x20	; 32
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	8a 19       	sub	r24, r10
    312c:	9b 09       	sbc	r25, r11
    312e:	6c 96       	adiw	r28, 0x1c	; 28
    3130:	cc ac       	ldd	r12, Y+60	; 0x3c
    3132:	dd ac       	ldd	r13, Y+61	; 0x3d
    3134:	ee ac       	ldd	r14, Y+62	; 0x3e
    3136:	ff ac       	ldd	r15, Y+63	; 0x3f
    3138:	6c 97       	sbiw	r28, 0x1c	; 28
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <__umoddi3+0x1a8>
    313c:	f6 94       	lsr	r15
    313e:	e7 94       	ror	r14
    3140:	d7 94       	ror	r13
    3142:	c7 94       	ror	r12
    3144:	8a 95       	dec	r24
    3146:	d2 f7       	brpl	.-12     	; 0x313c <__umoddi3+0x1a0>
    3148:	87 01       	movw	r16, r14
    314a:	76 01       	movw	r14, r12
    314c:	e2 2a       	or	r14, r18
    314e:	f3 2a       	or	r15, r19
    3150:	04 2b       	or	r16, r20
    3152:	15 2b       	or	r17, r21
    3154:	ed aa       	std	Y+53, r14	; 0x35
    3156:	fe aa       	std	Y+54, r15	; 0x36
    3158:	0f ab       	std	Y+55, r16	; 0x37
    315a:	18 af       	std	Y+56, r17	; 0x38
    315c:	6c 96       	adiw	r28, 0x1c	; 28
    315e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3160:	9d ad       	ldd	r25, Y+61	; 0x3d
    3162:	ae ad       	ldd	r26, Y+62	; 0x3e
    3164:	bf ad       	ldd	r27, Y+63	; 0x3f
    3166:	6c 97       	sbiw	r28, 0x1c	; 28
    3168:	04 c0       	rjmp	.+8      	; 0x3172 <__umoddi3+0x1d6>
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	aa 1f       	adc	r26, r26
    3170:	bb 1f       	adc	r27, r27
    3172:	6a 95       	dec	r22
    3174:	d2 f7       	brpl	.-12     	; 0x316a <__umoddi3+0x1ce>
    3176:	89 ab       	std	Y+49, r24	; 0x31
    3178:	9a ab       	std	Y+50, r25	; 0x32
    317a:	ab ab       	std	Y+51, r26	; 0x33
    317c:	bc ab       	std	Y+52, r27	; 0x34
    317e:	32 01       	movw	r6, r4
    3180:	88 24       	eor	r8, r8
    3182:	99 24       	eor	r9, r9
    3184:	b2 01       	movw	r22, r4
    3186:	a1 01       	movw	r20, r2
    3188:	60 70       	andi	r22, 0x00	; 0
    318a:	70 70       	andi	r23, 0x00	; 0
    318c:	21 96       	adiw	r28, 0x01	; 1
    318e:	4c af       	std	Y+60, r20	; 0x3c
    3190:	5d af       	std	Y+61, r21	; 0x3d
    3192:	6e af       	std	Y+62, r22	; 0x3e
    3194:	7f af       	std	Y+63, r23	; 0x3f
    3196:	21 97       	sbiw	r28, 0x01	; 1
    3198:	6d a9       	ldd	r22, Y+53	; 0x35
    319a:	7e a9       	ldd	r23, Y+54	; 0x36
    319c:	8f a9       	ldd	r24, Y+55	; 0x37
    319e:	98 ad       	ldd	r25, Y+56	; 0x38
    31a0:	a4 01       	movw	r20, r8
    31a2:	93 01       	movw	r18, r6
    31a4:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    31a8:	7b 01       	movw	r14, r22
    31aa:	8c 01       	movw	r16, r24
    31ac:	6d a9       	ldd	r22, Y+53	; 0x35
    31ae:	7e a9       	ldd	r23, Y+54	; 0x36
    31b0:	8f a9       	ldd	r24, Y+55	; 0x37
    31b2:	98 ad       	ldd	r25, Y+56	; 0x38
    31b4:	a4 01       	movw	r20, r8
    31b6:	93 01       	movw	r18, r6
    31b8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    31bc:	ca 01       	movw	r24, r20
    31be:	b9 01       	movw	r22, r18
    31c0:	21 96       	adiw	r28, 0x01	; 1
    31c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    31c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    31c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    31c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    31ca:	21 97       	sbiw	r28, 0x01	; 1
    31cc:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    31d0:	9b 01       	movw	r18, r22
    31d2:	ac 01       	movw	r20, r24
    31d4:	87 01       	movw	r16, r14
    31d6:	ff 24       	eor	r15, r15
    31d8:	ee 24       	eor	r14, r14
    31da:	a9 a8       	ldd	r10, Y+49	; 0x31
    31dc:	ba a8       	ldd	r11, Y+50	; 0x32
    31de:	cb a8       	ldd	r12, Y+51	; 0x33
    31e0:	dc a8       	ldd	r13, Y+52	; 0x34
    31e2:	c6 01       	movw	r24, r12
    31e4:	aa 27       	eor	r26, r26
    31e6:	bb 27       	eor	r27, r27
    31e8:	57 01       	movw	r10, r14
    31ea:	68 01       	movw	r12, r16
    31ec:	a8 2a       	or	r10, r24
    31ee:	b9 2a       	or	r11, r25
    31f0:	ca 2a       	or	r12, r26
    31f2:	db 2a       	or	r13, r27
    31f4:	a2 16       	cp	r10, r18
    31f6:	b3 06       	cpc	r11, r19
    31f8:	c4 06       	cpc	r12, r20
    31fa:	d5 06       	cpc	r13, r21
    31fc:	90 f4       	brcc	.+36     	; 0x3222 <__umoddi3+0x286>
    31fe:	a2 0c       	add	r10, r2
    3200:	b3 1c       	adc	r11, r3
    3202:	c4 1c       	adc	r12, r4
    3204:	d5 1c       	adc	r13, r5
    3206:	a2 14       	cp	r10, r2
    3208:	b3 04       	cpc	r11, r3
    320a:	c4 04       	cpc	r12, r4
    320c:	d5 04       	cpc	r13, r5
    320e:	48 f0       	brcs	.+18     	; 0x3222 <__umoddi3+0x286>
    3210:	a2 16       	cp	r10, r18
    3212:	b3 06       	cpc	r11, r19
    3214:	c4 06       	cpc	r12, r20
    3216:	d5 06       	cpc	r13, r21
    3218:	20 f4       	brcc	.+8      	; 0x3222 <__umoddi3+0x286>
    321a:	a2 0c       	add	r10, r2
    321c:	b3 1c       	adc	r11, r3
    321e:	c4 1c       	adc	r12, r4
    3220:	d5 1c       	adc	r13, r5
    3222:	a2 1a       	sub	r10, r18
    3224:	b3 0a       	sbc	r11, r19
    3226:	c4 0a       	sbc	r12, r20
    3228:	d5 0a       	sbc	r13, r21
    322a:	c6 01       	movw	r24, r12
    322c:	b5 01       	movw	r22, r10
    322e:	a4 01       	movw	r20, r8
    3230:	93 01       	movw	r18, r6
    3232:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3236:	7b 01       	movw	r14, r22
    3238:	8c 01       	movw	r16, r24
    323a:	c6 01       	movw	r24, r12
    323c:	b5 01       	movw	r22, r10
    323e:	a4 01       	movw	r20, r8
    3240:	93 01       	movw	r18, r6
    3242:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3246:	ca 01       	movw	r24, r20
    3248:	b9 01       	movw	r22, r18
    324a:	21 96       	adiw	r28, 0x01	; 1
    324c:	2c ad       	ldd	r18, Y+60	; 0x3c
    324e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3250:	4e ad       	ldd	r20, Y+62	; 0x3e
    3252:	5f ad       	ldd	r21, Y+63	; 0x3f
    3254:	21 97       	sbiw	r28, 0x01	; 1
    3256:	ba c1       	rjmp	.+884    	; 0x35cc <__umoddi3+0x630>
    3258:	21 14       	cp	r2, r1
    325a:	31 04       	cpc	r3, r1
    325c:	41 04       	cpc	r4, r1
    325e:	51 04       	cpc	r5, r1
    3260:	71 f4       	brne	.+28     	; 0x327e <__umoddi3+0x2e2>
    3262:	61 e0       	ldi	r22, 0x01	; 1
    3264:	70 e0       	ldi	r23, 0x00	; 0
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3276:	c9 01       	movw	r24, r18
    3278:	da 01       	movw	r26, r20
    327a:	1c 01       	movw	r2, r24
    327c:	2d 01       	movw	r4, r26
    327e:	00 e0       	ldi	r16, 0x00	; 0
    3280:	20 16       	cp	r2, r16
    3282:	00 e0       	ldi	r16, 0x00	; 0
    3284:	30 06       	cpc	r3, r16
    3286:	01 e0       	ldi	r16, 0x01	; 1
    3288:	40 06       	cpc	r4, r16
    328a:	00 e0       	ldi	r16, 0x00	; 0
    328c:	50 06       	cpc	r5, r16
    328e:	88 f4       	brcc	.+34     	; 0x32b2 <__umoddi3+0x316>
    3290:	1f ef       	ldi	r17, 0xFF	; 255
    3292:	21 16       	cp	r2, r17
    3294:	31 04       	cpc	r3, r1
    3296:	41 04       	cpc	r4, r1
    3298:	51 04       	cpc	r5, r1
    329a:	39 f0       	breq	.+14     	; 0x32aa <__umoddi3+0x30e>
    329c:	30 f0       	brcs	.+12     	; 0x32aa <__umoddi3+0x30e>
    329e:	68 e0       	ldi	r22, 0x08	; 8
    32a0:	e6 2e       	mov	r14, r22
    32a2:	f1 2c       	mov	r15, r1
    32a4:	01 2d       	mov	r16, r1
    32a6:	11 2d       	mov	r17, r1
    32a8:	18 c0       	rjmp	.+48     	; 0x32da <__umoddi3+0x33e>
    32aa:	ee 24       	eor	r14, r14
    32ac:	ff 24       	eor	r15, r15
    32ae:	87 01       	movw	r16, r14
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <__umoddi3+0x33e>
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	24 16       	cp	r2, r20
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	34 06       	cpc	r3, r20
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	44 06       	cpc	r4, r20
    32be:	41 e0       	ldi	r20, 0x01	; 1
    32c0:	54 06       	cpc	r5, r20
    32c2:	30 f0       	brcs	.+12     	; 0x32d0 <__umoddi3+0x334>
    32c4:	58 e1       	ldi	r21, 0x18	; 24
    32c6:	e5 2e       	mov	r14, r21
    32c8:	f1 2c       	mov	r15, r1
    32ca:	01 2d       	mov	r16, r1
    32cc:	11 2d       	mov	r17, r1
    32ce:	05 c0       	rjmp	.+10     	; 0x32da <__umoddi3+0x33e>
    32d0:	40 e1       	ldi	r20, 0x10	; 16
    32d2:	e4 2e       	mov	r14, r20
    32d4:	f1 2c       	mov	r15, r1
    32d6:	01 2d       	mov	r16, r1
    32d8:	11 2d       	mov	r17, r1
    32da:	d2 01       	movw	r26, r4
    32dc:	c1 01       	movw	r24, r2
    32de:	0e 2c       	mov	r0, r14
    32e0:	04 c0       	rjmp	.+8      	; 0x32ea <__umoddi3+0x34e>
    32e2:	b6 95       	lsr	r27
    32e4:	a7 95       	ror	r26
    32e6:	97 95       	ror	r25
    32e8:	87 95       	ror	r24
    32ea:	0a 94       	dec	r0
    32ec:	d2 f7       	brpl	.-12     	; 0x32e2 <__umoddi3+0x346>
    32ee:	83 59       	subi	r24, 0x93	; 147
    32f0:	9f 4f       	sbci	r25, 0xFF	; 255
    32f2:	dc 01       	movw	r26, r24
    32f4:	2c 91       	ld	r18, X
    32f6:	30 e2       	ldi	r19, 0x20	; 32
    32f8:	a3 2e       	mov	r10, r19
    32fa:	b1 2c       	mov	r11, r1
    32fc:	c1 2c       	mov	r12, r1
    32fe:	d1 2c       	mov	r13, r1
    3300:	d6 01       	movw	r26, r12
    3302:	c5 01       	movw	r24, r10
    3304:	8e 19       	sub	r24, r14
    3306:	9f 09       	sbc	r25, r15
    3308:	a0 0b       	sbc	r26, r16
    330a:	b1 0b       	sbc	r27, r17
    330c:	7c 01       	movw	r14, r24
    330e:	8d 01       	movw	r16, r26
    3310:	e2 1a       	sub	r14, r18
    3312:	f1 08       	sbc	r15, r1
    3314:	01 09       	sbc	r16, r1
    3316:	11 09       	sbc	r17, r1
    3318:	e9 ae       	std	Y+57, r14	; 0x39
    331a:	fa ae       	std	Y+58, r15	; 0x3a
    331c:	0b af       	std	Y+59, r16	; 0x3b
    331e:	1c af       	std	Y+60, r17	; 0x3c
    3320:	e1 14       	cp	r14, r1
    3322:	f1 04       	cpc	r15, r1
    3324:	01 05       	cpc	r16, r1
    3326:	11 05       	cpc	r17, r1
    3328:	39 f4       	brne	.+14     	; 0x3338 <__umoddi3+0x39c>
    332a:	64 01       	movw	r12, r8
    332c:	53 01       	movw	r10, r6
    332e:	a2 18       	sub	r10, r2
    3330:	b3 08       	sbc	r11, r3
    3332:	c4 08       	sbc	r12, r4
    3334:	d5 08       	sbc	r13, r5
    3336:	e2 c0       	rjmp	.+452    	; 0x34fc <__umoddi3+0x560>
    3338:	f9 ac       	ldd	r15, Y+57	; 0x39
    333a:	68 96       	adiw	r28, 0x18	; 24
    333c:	ff ae       	std	Y+63, r15	; 0x3f
    333e:	68 97       	sbiw	r28, 0x18	; 24
    3340:	0f 2c       	mov	r0, r15
    3342:	04 c0       	rjmp	.+8      	; 0x334c <__umoddi3+0x3b0>
    3344:	22 0c       	add	r2, r2
    3346:	33 1c       	adc	r3, r3
    3348:	44 1c       	adc	r4, r4
    334a:	55 1c       	adc	r5, r5
    334c:	0a 94       	dec	r0
    334e:	d2 f7       	brpl	.-12     	; 0x3344 <__umoddi3+0x3a8>
    3350:	8a 2d       	mov	r24, r10
    3352:	8f 19       	sub	r24, r15
    3354:	64 01       	movw	r12, r8
    3356:	53 01       	movw	r10, r6
    3358:	08 2e       	mov	r0, r24
    335a:	04 c0       	rjmp	.+8      	; 0x3364 <__umoddi3+0x3c8>
    335c:	d6 94       	lsr	r13
    335e:	c7 94       	ror	r12
    3360:	b7 94       	ror	r11
    3362:	a7 94       	ror	r10
    3364:	0a 94       	dec	r0
    3366:	d2 f7       	brpl	.-12     	; 0x335c <__umoddi3+0x3c0>
    3368:	a4 01       	movw	r20, r8
    336a:	93 01       	movw	r18, r6
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <__umoddi3+0x3da>
    336e:	22 0f       	add	r18, r18
    3370:	33 1f       	adc	r19, r19
    3372:	44 1f       	adc	r20, r20
    3374:	55 1f       	adc	r21, r21
    3376:	fa 94       	dec	r15
    3378:	d2 f7       	brpl	.-12     	; 0x336e <__umoddi3+0x3d2>
    337a:	6c 96       	adiw	r28, 0x1c	; 28
    337c:	6c ac       	ldd	r6, Y+60	; 0x3c
    337e:	7d ac       	ldd	r7, Y+61	; 0x3d
    3380:	8e ac       	ldd	r8, Y+62	; 0x3e
    3382:	9f ac       	ldd	r9, Y+63	; 0x3f
    3384:	6c 97       	sbiw	r28, 0x1c	; 28
    3386:	04 c0       	rjmp	.+8      	; 0x3390 <__umoddi3+0x3f4>
    3388:	96 94       	lsr	r9
    338a:	87 94       	ror	r8
    338c:	77 94       	ror	r7
    338e:	67 94       	ror	r6
    3390:	8a 95       	dec	r24
    3392:	d2 f7       	brpl	.-12     	; 0x3388 <__umoddi3+0x3ec>
    3394:	84 01       	movw	r16, r8
    3396:	73 01       	movw	r14, r6
    3398:	e2 2a       	or	r14, r18
    339a:	f3 2a       	or	r15, r19
    339c:	04 2b       	or	r16, r20
    339e:	15 2b       	or	r17, r21
    33a0:	ed a6       	std	Y+45, r14	; 0x2d
    33a2:	fe a6       	std	Y+46, r15	; 0x2e
    33a4:	0f a7       	std	Y+47, r16	; 0x2f
    33a6:	18 ab       	std	Y+48, r17	; 0x30
    33a8:	32 01       	movw	r6, r4
    33aa:	88 24       	eor	r8, r8
    33ac:	99 24       	eor	r9, r9
    33ae:	b2 01       	movw	r22, r4
    33b0:	a1 01       	movw	r20, r2
    33b2:	60 70       	andi	r22, 0x00	; 0
    33b4:	70 70       	andi	r23, 0x00	; 0
    33b6:	25 96       	adiw	r28, 0x05	; 5
    33b8:	4c af       	std	Y+60, r20	; 0x3c
    33ba:	5d af       	std	Y+61, r21	; 0x3d
    33bc:	6e af       	std	Y+62, r22	; 0x3e
    33be:	7f af       	std	Y+63, r23	; 0x3f
    33c0:	25 97       	sbiw	r28, 0x05	; 5
    33c2:	c6 01       	movw	r24, r12
    33c4:	b5 01       	movw	r22, r10
    33c6:	a4 01       	movw	r20, r8
    33c8:	93 01       	movw	r18, r6
    33ca:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    33ce:	7b 01       	movw	r14, r22
    33d0:	8c 01       	movw	r16, r24
    33d2:	c6 01       	movw	r24, r12
    33d4:	b5 01       	movw	r22, r10
    33d6:	a4 01       	movw	r20, r8
    33d8:	93 01       	movw	r18, r6
    33da:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    33de:	ca 01       	movw	r24, r20
    33e0:	b9 01       	movw	r22, r18
    33e2:	25 96       	adiw	r28, 0x05	; 5
    33e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    33e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    33e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    33ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    33ec:	25 97       	sbiw	r28, 0x05	; 5
    33ee:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    33f2:	9b 01       	movw	r18, r22
    33f4:	ac 01       	movw	r20, r24
    33f6:	87 01       	movw	r16, r14
    33f8:	ff 24       	eor	r15, r15
    33fa:	ee 24       	eor	r14, r14
    33fc:	ad a4       	ldd	r10, Y+45	; 0x2d
    33fe:	be a4       	ldd	r11, Y+46	; 0x2e
    3400:	cf a4       	ldd	r12, Y+47	; 0x2f
    3402:	d8 a8       	ldd	r13, Y+48	; 0x30
    3404:	c6 01       	movw	r24, r12
    3406:	aa 27       	eor	r26, r26
    3408:	bb 27       	eor	r27, r27
    340a:	5c 01       	movw	r10, r24
    340c:	6d 01       	movw	r12, r26
    340e:	ae 28       	or	r10, r14
    3410:	bf 28       	or	r11, r15
    3412:	c0 2a       	or	r12, r16
    3414:	d1 2a       	or	r13, r17
    3416:	a2 16       	cp	r10, r18
    3418:	b3 06       	cpc	r11, r19
    341a:	c4 06       	cpc	r12, r20
    341c:	d5 06       	cpc	r13, r21
    341e:	90 f4       	brcc	.+36     	; 0x3444 <__umoddi3+0x4a8>
    3420:	a2 0c       	add	r10, r2
    3422:	b3 1c       	adc	r11, r3
    3424:	c4 1c       	adc	r12, r4
    3426:	d5 1c       	adc	r13, r5
    3428:	a2 14       	cp	r10, r2
    342a:	b3 04       	cpc	r11, r3
    342c:	c4 04       	cpc	r12, r4
    342e:	d5 04       	cpc	r13, r5
    3430:	48 f0       	brcs	.+18     	; 0x3444 <__umoddi3+0x4a8>
    3432:	a2 16       	cp	r10, r18
    3434:	b3 06       	cpc	r11, r19
    3436:	c4 06       	cpc	r12, r20
    3438:	d5 06       	cpc	r13, r21
    343a:	20 f4       	brcc	.+8      	; 0x3444 <__umoddi3+0x4a8>
    343c:	a2 0c       	add	r10, r2
    343e:	b3 1c       	adc	r11, r3
    3440:	c4 1c       	adc	r12, r4
    3442:	d5 1c       	adc	r13, r5
    3444:	a2 1a       	sub	r10, r18
    3446:	b3 0a       	sbc	r11, r19
    3448:	c4 0a       	sbc	r12, r20
    344a:	d5 0a       	sbc	r13, r21
    344c:	c6 01       	movw	r24, r12
    344e:	b5 01       	movw	r22, r10
    3450:	a4 01       	movw	r20, r8
    3452:	93 01       	movw	r18, r6
    3454:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3458:	7b 01       	movw	r14, r22
    345a:	8c 01       	movw	r16, r24
    345c:	c6 01       	movw	r24, r12
    345e:	b5 01       	movw	r22, r10
    3460:	a4 01       	movw	r20, r8
    3462:	93 01       	movw	r18, r6
    3464:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3468:	ca 01       	movw	r24, r20
    346a:	b9 01       	movw	r22, r18
    346c:	25 96       	adiw	r28, 0x05	; 5
    346e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3470:	3d ad       	ldd	r19, Y+61	; 0x3d
    3472:	4e ad       	ldd	r20, Y+62	; 0x3e
    3474:	5f ad       	ldd	r21, Y+63	; 0x3f
    3476:	25 97       	sbiw	r28, 0x05	; 5
    3478:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	87 01       	movw	r16, r14
    3482:	ff 24       	eor	r15, r15
    3484:	ee 24       	eor	r14, r14
    3486:	8d a5       	ldd	r24, Y+45	; 0x2d
    3488:	9e a5       	ldd	r25, Y+46	; 0x2e
    348a:	af a5       	ldd	r26, Y+47	; 0x2f
    348c:	b8 a9       	ldd	r27, Y+48	; 0x30
    348e:	a0 70       	andi	r26, 0x00	; 0
    3490:	b0 70       	andi	r27, 0x00	; 0
    3492:	57 01       	movw	r10, r14
    3494:	68 01       	movw	r12, r16
    3496:	a8 2a       	or	r10, r24
    3498:	b9 2a       	or	r11, r25
    349a:	ca 2a       	or	r12, r26
    349c:	db 2a       	or	r13, r27
    349e:	a2 16       	cp	r10, r18
    34a0:	b3 06       	cpc	r11, r19
    34a2:	c4 06       	cpc	r12, r20
    34a4:	d5 06       	cpc	r13, r21
    34a6:	90 f4       	brcc	.+36     	; 0x34cc <__umoddi3+0x530>
    34a8:	a2 0c       	add	r10, r2
    34aa:	b3 1c       	adc	r11, r3
    34ac:	c4 1c       	adc	r12, r4
    34ae:	d5 1c       	adc	r13, r5
    34b0:	a2 14       	cp	r10, r2
    34b2:	b3 04       	cpc	r11, r3
    34b4:	c4 04       	cpc	r12, r4
    34b6:	d5 04       	cpc	r13, r5
    34b8:	48 f0       	brcs	.+18     	; 0x34cc <__umoddi3+0x530>
    34ba:	a2 16       	cp	r10, r18
    34bc:	b3 06       	cpc	r11, r19
    34be:	c4 06       	cpc	r12, r20
    34c0:	d5 06       	cpc	r13, r21
    34c2:	20 f4       	brcc	.+8      	; 0x34cc <__umoddi3+0x530>
    34c4:	a2 0c       	add	r10, r2
    34c6:	b3 1c       	adc	r11, r3
    34c8:	c4 1c       	adc	r12, r4
    34ca:	d5 1c       	adc	r13, r5
    34cc:	6c 96       	adiw	r28, 0x1c	; 28
    34ce:	ec ac       	ldd	r14, Y+60	; 0x3c
    34d0:	fd ac       	ldd	r15, Y+61	; 0x3d
    34d2:	0e ad       	ldd	r16, Y+62	; 0x3e
    34d4:	1f ad       	ldd	r17, Y+63	; 0x3f
    34d6:	6c 97       	sbiw	r28, 0x1c	; 28
    34d8:	68 96       	adiw	r28, 0x18	; 24
    34da:	0f ac       	ldd	r0, Y+63	; 0x3f
    34dc:	68 97       	sbiw	r28, 0x18	; 24
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <__umoddi3+0x54c>
    34e0:	ee 0c       	add	r14, r14
    34e2:	ff 1c       	adc	r15, r15
    34e4:	00 1f       	adc	r16, r16
    34e6:	11 1f       	adc	r17, r17
    34e8:	0a 94       	dec	r0
    34ea:	d2 f7       	brpl	.-12     	; 0x34e0 <__umoddi3+0x544>
    34ec:	e9 aa       	std	Y+49, r14	; 0x31
    34ee:	fa aa       	std	Y+50, r15	; 0x32
    34f0:	0b ab       	std	Y+51, r16	; 0x33
    34f2:	1c ab       	std	Y+52, r17	; 0x34
    34f4:	a2 1a       	sub	r10, r18
    34f6:	b3 0a       	sbc	r11, r19
    34f8:	c4 0a       	sbc	r12, r20
    34fa:	d5 0a       	sbc	r13, r21
    34fc:	32 01       	movw	r6, r4
    34fe:	88 24       	eor	r8, r8
    3500:	99 24       	eor	r9, r9
    3502:	b2 01       	movw	r22, r4
    3504:	a1 01       	movw	r20, r2
    3506:	60 70       	andi	r22, 0x00	; 0
    3508:	70 70       	andi	r23, 0x00	; 0
    350a:	29 96       	adiw	r28, 0x09	; 9
    350c:	4c af       	std	Y+60, r20	; 0x3c
    350e:	5d af       	std	Y+61, r21	; 0x3d
    3510:	6e af       	std	Y+62, r22	; 0x3e
    3512:	7f af       	std	Y+63, r23	; 0x3f
    3514:	29 97       	sbiw	r28, 0x09	; 9
    3516:	c6 01       	movw	r24, r12
    3518:	b5 01       	movw	r22, r10
    351a:	a4 01       	movw	r20, r8
    351c:	93 01       	movw	r18, r6
    351e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3522:	7b 01       	movw	r14, r22
    3524:	8c 01       	movw	r16, r24
    3526:	c6 01       	movw	r24, r12
    3528:	b5 01       	movw	r22, r10
    352a:	a4 01       	movw	r20, r8
    352c:	93 01       	movw	r18, r6
    352e:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3532:	ca 01       	movw	r24, r20
    3534:	b9 01       	movw	r22, r18
    3536:	29 96       	adiw	r28, 0x09	; 9
    3538:	2c ad       	ldd	r18, Y+60	; 0x3c
    353a:	3d ad       	ldd	r19, Y+61	; 0x3d
    353c:	4e ad       	ldd	r20, Y+62	; 0x3e
    353e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3540:	29 97       	sbiw	r28, 0x09	; 9
    3542:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3546:	9b 01       	movw	r18, r22
    3548:	ac 01       	movw	r20, r24
    354a:	87 01       	movw	r16, r14
    354c:	ff 24       	eor	r15, r15
    354e:	ee 24       	eor	r14, r14
    3550:	a9 a8       	ldd	r10, Y+49	; 0x31
    3552:	ba a8       	ldd	r11, Y+50	; 0x32
    3554:	cb a8       	ldd	r12, Y+51	; 0x33
    3556:	dc a8       	ldd	r13, Y+52	; 0x34
    3558:	c6 01       	movw	r24, r12
    355a:	aa 27       	eor	r26, r26
    355c:	bb 27       	eor	r27, r27
    355e:	57 01       	movw	r10, r14
    3560:	68 01       	movw	r12, r16
    3562:	a8 2a       	or	r10, r24
    3564:	b9 2a       	or	r11, r25
    3566:	ca 2a       	or	r12, r26
    3568:	db 2a       	or	r13, r27
    356a:	a2 16       	cp	r10, r18
    356c:	b3 06       	cpc	r11, r19
    356e:	c4 06       	cpc	r12, r20
    3570:	d5 06       	cpc	r13, r21
    3572:	90 f4       	brcc	.+36     	; 0x3598 <__umoddi3+0x5fc>
    3574:	a2 0c       	add	r10, r2
    3576:	b3 1c       	adc	r11, r3
    3578:	c4 1c       	adc	r12, r4
    357a:	d5 1c       	adc	r13, r5
    357c:	a2 14       	cp	r10, r2
    357e:	b3 04       	cpc	r11, r3
    3580:	c4 04       	cpc	r12, r4
    3582:	d5 04       	cpc	r13, r5
    3584:	48 f0       	brcs	.+18     	; 0x3598 <__umoddi3+0x5fc>
    3586:	a2 16       	cp	r10, r18
    3588:	b3 06       	cpc	r11, r19
    358a:	c4 06       	cpc	r12, r20
    358c:	d5 06       	cpc	r13, r21
    358e:	20 f4       	brcc	.+8      	; 0x3598 <__umoddi3+0x5fc>
    3590:	a2 0c       	add	r10, r2
    3592:	b3 1c       	adc	r11, r3
    3594:	c4 1c       	adc	r12, r4
    3596:	d5 1c       	adc	r13, r5
    3598:	a2 1a       	sub	r10, r18
    359a:	b3 0a       	sbc	r11, r19
    359c:	c4 0a       	sbc	r12, r20
    359e:	d5 0a       	sbc	r13, r21
    35a0:	c6 01       	movw	r24, r12
    35a2:	b5 01       	movw	r22, r10
    35a4:	a4 01       	movw	r20, r8
    35a6:	93 01       	movw	r18, r6
    35a8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    35ac:	7b 01       	movw	r14, r22
    35ae:	8c 01       	movw	r16, r24
    35b0:	c6 01       	movw	r24, r12
    35b2:	b5 01       	movw	r22, r10
    35b4:	a4 01       	movw	r20, r8
    35b6:	93 01       	movw	r18, r6
    35b8:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    35bc:	ca 01       	movw	r24, r20
    35be:	b9 01       	movw	r22, r18
    35c0:	29 96       	adiw	r28, 0x09	; 9
    35c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    35c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    35c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    35c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    35ca:	29 97       	sbiw	r28, 0x09	; 9
    35cc:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    35d0:	9b 01       	movw	r18, r22
    35d2:	ac 01       	movw	r20, r24
    35d4:	87 01       	movw	r16, r14
    35d6:	ff 24       	eor	r15, r15
    35d8:	ee 24       	eor	r14, r14
    35da:	89 a9       	ldd	r24, Y+49	; 0x31
    35dc:	9a a9       	ldd	r25, Y+50	; 0x32
    35de:	ab a9       	ldd	r26, Y+51	; 0x33
    35e0:	bc a9       	ldd	r27, Y+52	; 0x34
    35e2:	a0 70       	andi	r26, 0x00	; 0
    35e4:	b0 70       	andi	r27, 0x00	; 0
    35e6:	e8 2a       	or	r14, r24
    35e8:	f9 2a       	or	r15, r25
    35ea:	0a 2b       	or	r16, r26
    35ec:	1b 2b       	or	r17, r27
    35ee:	e2 16       	cp	r14, r18
    35f0:	f3 06       	cpc	r15, r19
    35f2:	04 07       	cpc	r16, r20
    35f4:	15 07       	cpc	r17, r21
    35f6:	90 f4       	brcc	.+36     	; 0x361c <__umoddi3+0x680>
    35f8:	e2 0c       	add	r14, r2
    35fa:	f3 1c       	adc	r15, r3
    35fc:	04 1d       	adc	r16, r4
    35fe:	15 1d       	adc	r17, r5
    3600:	e2 14       	cp	r14, r2
    3602:	f3 04       	cpc	r15, r3
    3604:	04 05       	cpc	r16, r4
    3606:	15 05       	cpc	r17, r5
    3608:	48 f0       	brcs	.+18     	; 0x361c <__umoddi3+0x680>
    360a:	e2 16       	cp	r14, r18
    360c:	f3 06       	cpc	r15, r19
    360e:	04 07       	cpc	r16, r20
    3610:	15 07       	cpc	r17, r21
    3612:	20 f4       	brcc	.+8      	; 0x361c <__umoddi3+0x680>
    3614:	e2 0c       	add	r14, r2
    3616:	f3 1c       	adc	r15, r3
    3618:	04 1d       	adc	r16, r4
    361a:	15 1d       	adc	r17, r5
    361c:	e2 1a       	sub	r14, r18
    361e:	f3 0a       	sbc	r15, r19
    3620:	04 0b       	sbc	r16, r20
    3622:	15 0b       	sbc	r17, r21
    3624:	d8 01       	movw	r26, r16
    3626:	c7 01       	movw	r24, r14
    3628:	09 ac       	ldd	r0, Y+57	; 0x39
    362a:	04 c0       	rjmp	.+8      	; 0x3634 <__umoddi3+0x698>
    362c:	b6 95       	lsr	r27
    362e:	a7 95       	ror	r26
    3630:	97 95       	ror	r25
    3632:	87 95       	ror	r24
    3634:	0a 94       	dec	r0
    3636:	d2 f7       	brpl	.-12     	; 0x362c <__umoddi3+0x690>
    3638:	89 8b       	std	Y+17, r24	; 0x11
    363a:	9a 8b       	std	Y+18, r25	; 0x12
    363c:	ab 8b       	std	Y+19, r26	; 0x13
    363e:	bc 8b       	std	Y+20, r27	; 0x14
    3640:	1d 8a       	std	Y+21, r1	; 0x15
    3642:	1e 8a       	std	Y+22, r1	; 0x16
    3644:	1f 8a       	std	Y+23, r1	; 0x17
    3646:	18 8e       	std	Y+24, r1	; 0x18
    3648:	28 2f       	mov	r18, r24
    364a:	3a 89       	ldd	r19, Y+18	; 0x12
    364c:	4b 89       	ldd	r20, Y+19	; 0x13
    364e:	5c 89       	ldd	r21, Y+20	; 0x14
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	0c c3       	rjmp	.+1560   	; 0x3c6c <__umoddi3+0xcd0>
    3654:	6a 14       	cp	r6, r10
    3656:	7b 04       	cpc	r7, r11
    3658:	8c 04       	cpc	r8, r12
    365a:	9d 04       	cpc	r9, r13
    365c:	08 f4       	brcc	.+2      	; 0x3660 <__umoddi3+0x6c4>
    365e:	09 c3       	rjmp	.+1554   	; 0x3c72 <__umoddi3+0xcd6>
    3660:	00 e0       	ldi	r16, 0x00	; 0
    3662:	a0 16       	cp	r10, r16
    3664:	00 e0       	ldi	r16, 0x00	; 0
    3666:	b0 06       	cpc	r11, r16
    3668:	01 e0       	ldi	r16, 0x01	; 1
    366a:	c0 06       	cpc	r12, r16
    366c:	00 e0       	ldi	r16, 0x00	; 0
    366e:	d0 06       	cpc	r13, r16
    3670:	88 f4       	brcc	.+34     	; 0x3694 <__umoddi3+0x6f8>
    3672:	1f ef       	ldi	r17, 0xFF	; 255
    3674:	a1 16       	cp	r10, r17
    3676:	b1 04       	cpc	r11, r1
    3678:	c1 04       	cpc	r12, r1
    367a:	d1 04       	cpc	r13, r1
    367c:	39 f0       	breq	.+14     	; 0x368c <__umoddi3+0x6f0>
    367e:	30 f0       	brcs	.+12     	; 0x368c <__umoddi3+0x6f0>
    3680:	28 e0       	ldi	r18, 0x08	; 8
    3682:	e2 2e       	mov	r14, r18
    3684:	f1 2c       	mov	r15, r1
    3686:	01 2d       	mov	r16, r1
    3688:	11 2d       	mov	r17, r1
    368a:	18 c0       	rjmp	.+48     	; 0x36bc <__umoddi3+0x720>
    368c:	ee 24       	eor	r14, r14
    368e:	ff 24       	eor	r15, r15
    3690:	87 01       	movw	r16, r14
    3692:	14 c0       	rjmp	.+40     	; 0x36bc <__umoddi3+0x720>
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	a4 16       	cp	r10, r20
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	b4 06       	cpc	r11, r20
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	c4 06       	cpc	r12, r20
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	d4 06       	cpc	r13, r20
    36a4:	30 f0       	brcs	.+12     	; 0x36b2 <__umoddi3+0x716>
    36a6:	98 e1       	ldi	r25, 0x18	; 24
    36a8:	e9 2e       	mov	r14, r25
    36aa:	f1 2c       	mov	r15, r1
    36ac:	01 2d       	mov	r16, r1
    36ae:	11 2d       	mov	r17, r1
    36b0:	05 c0       	rjmp	.+10     	; 0x36bc <__umoddi3+0x720>
    36b2:	80 e1       	ldi	r24, 0x10	; 16
    36b4:	e8 2e       	mov	r14, r24
    36b6:	f1 2c       	mov	r15, r1
    36b8:	01 2d       	mov	r16, r1
    36ba:	11 2d       	mov	r17, r1
    36bc:	d6 01       	movw	r26, r12
    36be:	c5 01       	movw	r24, r10
    36c0:	0e 2c       	mov	r0, r14
    36c2:	04 c0       	rjmp	.+8      	; 0x36cc <__umoddi3+0x730>
    36c4:	b6 95       	lsr	r27
    36c6:	a7 95       	ror	r26
    36c8:	97 95       	ror	r25
    36ca:	87 95       	ror	r24
    36cc:	0a 94       	dec	r0
    36ce:	d2 f7       	brpl	.-12     	; 0x36c4 <__umoddi3+0x728>
    36d0:	83 59       	subi	r24, 0x93	; 147
    36d2:	9f 4f       	sbci	r25, 0xFF	; 255
    36d4:	dc 01       	movw	r26, r24
    36d6:	2c 91       	ld	r18, X
    36d8:	80 e2       	ldi	r24, 0x20	; 32
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a0 e0       	ldi	r26, 0x00	; 0
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	8e 19       	sub	r24, r14
    36e2:	9f 09       	sbc	r25, r15
    36e4:	a0 0b       	sbc	r26, r16
    36e6:	b1 0b       	sbc	r27, r17
    36e8:	82 1b       	sub	r24, r18
    36ea:	91 09       	sbc	r25, r1
    36ec:	a1 09       	sbc	r26, r1
    36ee:	b1 09       	sbc	r27, r1
    36f0:	00 97       	sbiw	r24, 0x00	; 0
    36f2:	a1 05       	cpc	r26, r1
    36f4:	b1 05       	cpc	r27, r1
    36f6:	09 f0       	breq	.+2      	; 0x36fa <__umoddi3+0x75e>
    36f8:	4f c0       	rjmp	.+158    	; 0x3798 <__umoddi3+0x7fc>
    36fa:	a6 14       	cp	r10, r6
    36fc:	b7 04       	cpc	r11, r7
    36fe:	c8 04       	cpc	r12, r8
    3700:	d9 04       	cpc	r13, r9
    3702:	58 f0       	brcs	.+22     	; 0x371a <__umoddi3+0x77e>
    3704:	6c 96       	adiw	r28, 0x1c	; 28
    3706:	ec ac       	ldd	r14, Y+60	; 0x3c
    3708:	fd ac       	ldd	r15, Y+61	; 0x3d
    370a:	0e ad       	ldd	r16, Y+62	; 0x3e
    370c:	1f ad       	ldd	r17, Y+63	; 0x3f
    370e:	6c 97       	sbiw	r28, 0x1c	; 28
    3710:	e2 14       	cp	r14, r2
    3712:	f3 04       	cpc	r15, r3
    3714:	04 05       	cpc	r16, r4
    3716:	15 05       	cpc	r17, r5
    3718:	68 f1       	brcs	.+90     	; 0x3774 <__umoddi3+0x7d8>
    371a:	6c 96       	adiw	r28, 0x1c	; 28
    371c:	ec ac       	ldd	r14, Y+60	; 0x3c
    371e:	fd ac       	ldd	r15, Y+61	; 0x3d
    3720:	0e ad       	ldd	r16, Y+62	; 0x3e
    3722:	1f ad       	ldd	r17, Y+63	; 0x3f
    3724:	6c 97       	sbiw	r28, 0x1c	; 28
    3726:	e2 18       	sub	r14, r2
    3728:	f3 08       	sbc	r15, r3
    372a:	04 09       	sbc	r16, r4
    372c:	15 09       	sbc	r17, r5
    372e:	a4 01       	movw	r20, r8
    3730:	93 01       	movw	r18, r6
    3732:	2a 19       	sub	r18, r10
    3734:	3b 09       	sbc	r19, r11
    3736:	4c 09       	sbc	r20, r12
    3738:	5d 09       	sbc	r21, r13
    373a:	aa 24       	eor	r10, r10
    373c:	bb 24       	eor	r11, r11
    373e:	65 01       	movw	r12, r10
    3740:	6c 96       	adiw	r28, 0x1c	; 28
    3742:	6c ad       	ldd	r22, Y+60	; 0x3c
    3744:	7d ad       	ldd	r23, Y+61	; 0x3d
    3746:	8e ad       	ldd	r24, Y+62	; 0x3e
    3748:	9f ad       	ldd	r25, Y+63	; 0x3f
    374a:	6c 97       	sbiw	r28, 0x1c	; 28
    374c:	6e 15       	cp	r22, r14
    374e:	7f 05       	cpc	r23, r15
    3750:	80 07       	cpc	r24, r16
    3752:	91 07       	cpc	r25, r17
    3754:	28 f4       	brcc	.+10     	; 0x3760 <__umoddi3+0x7c4>
    3756:	b1 e0       	ldi	r27, 0x01	; 1
    3758:	ab 2e       	mov	r10, r27
    375a:	b1 2c       	mov	r11, r1
    375c:	c1 2c       	mov	r12, r1
    375e:	d1 2c       	mov	r13, r1
    3760:	da 01       	movw	r26, r20
    3762:	c9 01       	movw	r24, r18
    3764:	8a 19       	sub	r24, r10
    3766:	9b 09       	sbc	r25, r11
    3768:	ac 09       	sbc	r26, r12
    376a:	bd 09       	sbc	r27, r13
    376c:	8d ab       	std	Y+53, r24	; 0x35
    376e:	9e ab       	std	Y+54, r25	; 0x36
    3770:	af ab       	std	Y+55, r26	; 0x37
    3772:	b8 af       	std	Y+56, r27	; 0x38
    3774:	e9 8a       	std	Y+17, r14	; 0x11
    3776:	fa 8a       	std	Y+18, r15	; 0x12
    3778:	0b 8b       	std	Y+19, r16	; 0x13
    377a:	1c 8b       	std	Y+20, r17	; 0x14
    377c:	6d a8       	ldd	r6, Y+53	; 0x35
    377e:	7e a8       	ldd	r7, Y+54	; 0x36
    3780:	8f a8       	ldd	r8, Y+55	; 0x37
    3782:	98 ac       	ldd	r9, Y+56	; 0x38
    3784:	6d 8a       	std	Y+21, r6	; 0x15
    3786:	7e 8a       	std	Y+22, r7	; 0x16
    3788:	8f 8a       	std	Y+23, r8	; 0x17
    378a:	98 8e       	std	Y+24, r9	; 0x18
    378c:	2e 2d       	mov	r18, r14
    378e:	3a 89       	ldd	r19, Y+18	; 0x12
    3790:	4b 89       	ldd	r20, Y+19	; 0x13
    3792:	5c 89       	ldd	r21, Y+20	; 0x14
    3794:	6d a9       	ldd	r22, Y+53	; 0x35
    3796:	6a c2       	rjmp	.+1236   	; 0x3c6c <__umoddi3+0xcd0>
    3798:	67 96       	adiw	r28, 0x17	; 23
    379a:	8f af       	std	Y+63, r24	; 0x3f
    379c:	67 97       	sbiw	r28, 0x17	; 23
    379e:	a6 01       	movw	r20, r12
    37a0:	95 01       	movw	r18, r10
    37a2:	08 2e       	mov	r0, r24
    37a4:	04 c0       	rjmp	.+8      	; 0x37ae <__umoddi3+0x812>
    37a6:	22 0f       	add	r18, r18
    37a8:	33 1f       	adc	r19, r19
    37aa:	44 1f       	adc	r20, r20
    37ac:	55 1f       	adc	r21, r21
    37ae:	0a 94       	dec	r0
    37b0:	d2 f7       	brpl	.-12     	; 0x37a6 <__umoddi3+0x80a>
    37b2:	a0 e2       	ldi	r26, 0x20	; 32
    37b4:	aa 2e       	mov	r10, r26
    37b6:	a8 1a       	sub	r10, r24
    37b8:	66 96       	adiw	r28, 0x16	; 22
    37ba:	af ae       	std	Y+63, r10	; 0x3f
    37bc:	66 97       	sbiw	r28, 0x16	; 22
    37be:	d2 01       	movw	r26, r4
    37c0:	c1 01       	movw	r24, r2
    37c2:	04 c0       	rjmp	.+8      	; 0x37cc <__umoddi3+0x830>
    37c4:	b6 95       	lsr	r27
    37c6:	a7 95       	ror	r26
    37c8:	97 95       	ror	r25
    37ca:	87 95       	ror	r24
    37cc:	aa 94       	dec	r10
    37ce:	d2 f7       	brpl	.-12     	; 0x37c4 <__umoddi3+0x828>
    37d0:	6c 01       	movw	r12, r24
    37d2:	7d 01       	movw	r14, r26
    37d4:	c2 2a       	or	r12, r18
    37d6:	d3 2a       	or	r13, r19
    37d8:	e4 2a       	or	r14, r20
    37da:	f5 2a       	or	r15, r21
    37dc:	c9 a6       	std	Y+41, r12	; 0x29
    37de:	da a6       	std	Y+42, r13	; 0x2a
    37e0:	eb a6       	std	Y+43, r14	; 0x2b
    37e2:	fc a6       	std	Y+44, r15	; 0x2c
    37e4:	82 01       	movw	r16, r4
    37e6:	71 01       	movw	r14, r2
    37e8:	67 96       	adiw	r28, 0x17	; 23
    37ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    37ec:	67 97       	sbiw	r28, 0x17	; 23
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__umoddi3+0x85c>
    37f0:	ee 0c       	add	r14, r14
    37f2:	ff 1c       	adc	r15, r15
    37f4:	00 1f       	adc	r16, r16
    37f6:	11 1f       	adc	r17, r17
    37f8:	0a 94       	dec	r0
    37fa:	d2 f7       	brpl	.-12     	; 0x37f0 <__umoddi3+0x854>
    37fc:	ed a2       	std	Y+37, r14	; 0x25
    37fe:	fe a2       	std	Y+38, r15	; 0x26
    3800:	0f a3       	std	Y+39, r16	; 0x27
    3802:	18 a7       	std	Y+40, r17	; 0x28
    3804:	64 01       	movw	r12, r8
    3806:	53 01       	movw	r10, r6
    3808:	66 96       	adiw	r28, 0x16	; 22
    380a:	0f ac       	ldd	r0, Y+63	; 0x3f
    380c:	66 97       	sbiw	r28, 0x16	; 22
    380e:	04 c0       	rjmp	.+8      	; 0x3818 <__umoddi3+0x87c>
    3810:	d6 94       	lsr	r13
    3812:	c7 94       	ror	r12
    3814:	b7 94       	ror	r11
    3816:	a7 94       	ror	r10
    3818:	0a 94       	dec	r0
    381a:	d2 f7       	brpl	.-12     	; 0x3810 <__umoddi3+0x874>
    381c:	a4 01       	movw	r20, r8
    381e:	93 01       	movw	r18, r6
    3820:	67 96       	adiw	r28, 0x17	; 23
    3822:	0f ac       	ldd	r0, Y+63	; 0x3f
    3824:	67 97       	sbiw	r28, 0x17	; 23
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <__umoddi3+0x894>
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	44 1f       	adc	r20, r20
    382e:	55 1f       	adc	r21, r21
    3830:	0a 94       	dec	r0
    3832:	d2 f7       	brpl	.-12     	; 0x3828 <__umoddi3+0x88c>
    3834:	6c 96       	adiw	r28, 0x1c	; 28
    3836:	8c ad       	ldd	r24, Y+60	; 0x3c
    3838:	9d ad       	ldd	r25, Y+61	; 0x3d
    383a:	ae ad       	ldd	r26, Y+62	; 0x3e
    383c:	bf ad       	ldd	r27, Y+63	; 0x3f
    383e:	6c 97       	sbiw	r28, 0x1c	; 28
    3840:	66 96       	adiw	r28, 0x16	; 22
    3842:	0f ac       	ldd	r0, Y+63	; 0x3f
    3844:	66 97       	sbiw	r28, 0x16	; 22
    3846:	04 c0       	rjmp	.+8      	; 0x3850 <__umoddi3+0x8b4>
    3848:	b6 95       	lsr	r27
    384a:	a7 95       	ror	r26
    384c:	97 95       	ror	r25
    384e:	87 95       	ror	r24
    3850:	0a 94       	dec	r0
    3852:	d2 f7       	brpl	.-12     	; 0x3848 <__umoddi3+0x8ac>
    3854:	3c 01       	movw	r6, r24
    3856:	4d 01       	movw	r8, r26
    3858:	62 2a       	or	r6, r18
    385a:	73 2a       	or	r7, r19
    385c:	84 2a       	or	r8, r20
    385e:	95 2a       	or	r9, r21
    3860:	69 a2       	std	Y+33, r6	; 0x21
    3862:	7a a2       	std	Y+34, r7	; 0x22
    3864:	8b a2       	std	Y+35, r8	; 0x23
    3866:	9c a2       	std	Y+36, r9	; 0x24
    3868:	6c 96       	adiw	r28, 0x1c	; 28
    386a:	ec ac       	ldd	r14, Y+60	; 0x3c
    386c:	fd ac       	ldd	r15, Y+61	; 0x3d
    386e:	0e ad       	ldd	r16, Y+62	; 0x3e
    3870:	1f ad       	ldd	r17, Y+63	; 0x3f
    3872:	6c 97       	sbiw	r28, 0x1c	; 28
    3874:	67 96       	adiw	r28, 0x17	; 23
    3876:	0f ac       	ldd	r0, Y+63	; 0x3f
    3878:	67 97       	sbiw	r28, 0x17	; 23
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <__umoddi3+0x8e8>
    387c:	ee 0c       	add	r14, r14
    387e:	ff 1c       	adc	r15, r15
    3880:	00 1f       	adc	r16, r16
    3882:	11 1f       	adc	r17, r17
    3884:	0a 94       	dec	r0
    3886:	d2 f7       	brpl	.-12     	; 0x387c <__umoddi3+0x8e0>
    3888:	ed 8e       	std	Y+29, r14	; 0x1d
    388a:	fe 8e       	std	Y+30, r15	; 0x1e
    388c:	0f 8f       	std	Y+31, r16	; 0x1f
    388e:	18 a3       	std	Y+32, r17	; 0x20
    3890:	49 a5       	ldd	r20, Y+41	; 0x29
    3892:	5a a5       	ldd	r21, Y+42	; 0x2a
    3894:	6b a5       	ldd	r22, Y+43	; 0x2b
    3896:	7c a5       	ldd	r23, Y+44	; 0x2c
    3898:	3b 01       	movw	r6, r22
    389a:	88 24       	eor	r8, r8
    389c:	99 24       	eor	r9, r9
    389e:	60 70       	andi	r22, 0x00	; 0
    38a0:	70 70       	andi	r23, 0x00	; 0
    38a2:	2d 96       	adiw	r28, 0x0d	; 13
    38a4:	4c af       	std	Y+60, r20	; 0x3c
    38a6:	5d af       	std	Y+61, r21	; 0x3d
    38a8:	6e af       	std	Y+62, r22	; 0x3e
    38aa:	7f af       	std	Y+63, r23	; 0x3f
    38ac:	2d 97       	sbiw	r28, 0x0d	; 13
    38ae:	c6 01       	movw	r24, r12
    38b0:	b5 01       	movw	r22, r10
    38b2:	a4 01       	movw	r20, r8
    38b4:	93 01       	movw	r18, r6
    38b6:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    38ba:	7b 01       	movw	r14, r22
    38bc:	8c 01       	movw	r16, r24
    38be:	c6 01       	movw	r24, r12
    38c0:	b5 01       	movw	r22, r10
    38c2:	a4 01       	movw	r20, r8
    38c4:	93 01       	movw	r18, r6
    38c6:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    38ca:	c9 01       	movw	r24, r18
    38cc:	da 01       	movw	r26, r20
    38ce:	1c 01       	movw	r2, r24
    38d0:	2d 01       	movw	r4, r26
    38d2:	c2 01       	movw	r24, r4
    38d4:	b1 01       	movw	r22, r2
    38d6:	2d 96       	adiw	r28, 0x0d	; 13
    38d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    38da:	3d ad       	ldd	r19, Y+61	; 0x3d
    38dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    38de:	5f ad       	ldd	r21, Y+63	; 0x3f
    38e0:	2d 97       	sbiw	r28, 0x0d	; 13
    38e2:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    38e6:	9b 01       	movw	r18, r22
    38e8:	ac 01       	movw	r20, r24
    38ea:	87 01       	movw	r16, r14
    38ec:	ff 24       	eor	r15, r15
    38ee:	ee 24       	eor	r14, r14
    38f0:	a9 a0       	ldd	r10, Y+33	; 0x21
    38f2:	ba a0       	ldd	r11, Y+34	; 0x22
    38f4:	cb a0       	ldd	r12, Y+35	; 0x23
    38f6:	dc a0       	ldd	r13, Y+36	; 0x24
    38f8:	c6 01       	movw	r24, r12
    38fa:	aa 27       	eor	r26, r26
    38fc:	bb 27       	eor	r27, r27
    38fe:	57 01       	movw	r10, r14
    3900:	68 01       	movw	r12, r16
    3902:	a8 2a       	or	r10, r24
    3904:	b9 2a       	or	r11, r25
    3906:	ca 2a       	or	r12, r26
    3908:	db 2a       	or	r13, r27
    390a:	a2 16       	cp	r10, r18
    390c:	b3 06       	cpc	r11, r19
    390e:	c4 06       	cpc	r12, r20
    3910:	d5 06       	cpc	r13, r21
    3912:	00 f5       	brcc	.+64     	; 0x3954 <__umoddi3+0x9b8>
    3914:	08 94       	sec
    3916:	21 08       	sbc	r2, r1
    3918:	31 08       	sbc	r3, r1
    391a:	41 08       	sbc	r4, r1
    391c:	51 08       	sbc	r5, r1
    391e:	e9 a4       	ldd	r14, Y+41	; 0x29
    3920:	fa a4       	ldd	r15, Y+42	; 0x2a
    3922:	0b a5       	ldd	r16, Y+43	; 0x2b
    3924:	1c a5       	ldd	r17, Y+44	; 0x2c
    3926:	ae 0c       	add	r10, r14
    3928:	bf 1c       	adc	r11, r15
    392a:	c0 1e       	adc	r12, r16
    392c:	d1 1e       	adc	r13, r17
    392e:	ae 14       	cp	r10, r14
    3930:	bf 04       	cpc	r11, r15
    3932:	c0 06       	cpc	r12, r16
    3934:	d1 06       	cpc	r13, r17
    3936:	70 f0       	brcs	.+28     	; 0x3954 <__umoddi3+0x9b8>
    3938:	a2 16       	cp	r10, r18
    393a:	b3 06       	cpc	r11, r19
    393c:	c4 06       	cpc	r12, r20
    393e:	d5 06       	cpc	r13, r21
    3940:	48 f4       	brcc	.+18     	; 0x3954 <__umoddi3+0x9b8>
    3942:	08 94       	sec
    3944:	21 08       	sbc	r2, r1
    3946:	31 08       	sbc	r3, r1
    3948:	41 08       	sbc	r4, r1
    394a:	51 08       	sbc	r5, r1
    394c:	ae 0c       	add	r10, r14
    394e:	bf 1c       	adc	r11, r15
    3950:	c0 1e       	adc	r12, r16
    3952:	d1 1e       	adc	r13, r17
    3954:	a2 1a       	sub	r10, r18
    3956:	b3 0a       	sbc	r11, r19
    3958:	c4 0a       	sbc	r12, r20
    395a:	d5 0a       	sbc	r13, r21
    395c:	c6 01       	movw	r24, r12
    395e:	b5 01       	movw	r22, r10
    3960:	a4 01       	movw	r20, r8
    3962:	93 01       	movw	r18, r6
    3964:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3968:	7b 01       	movw	r14, r22
    396a:	8c 01       	movw	r16, r24
    396c:	c6 01       	movw	r24, r12
    396e:	b5 01       	movw	r22, r10
    3970:	a4 01       	movw	r20, r8
    3972:	93 01       	movw	r18, r6
    3974:	0e 94 d1 3c 	call	0x79a2	; 0x79a2 <__udivmodsi4>
    3978:	c9 01       	movw	r24, r18
    397a:	da 01       	movw	r26, r20
    397c:	3c 01       	movw	r6, r24
    397e:	4d 01       	movw	r8, r26
    3980:	c4 01       	movw	r24, r8
    3982:	b3 01       	movw	r22, r6
    3984:	2d 96       	adiw	r28, 0x0d	; 13
    3986:	2c ad       	ldd	r18, Y+60	; 0x3c
    3988:	3d ad       	ldd	r19, Y+61	; 0x3d
    398a:	4e ad       	ldd	r20, Y+62	; 0x3e
    398c:	5f ad       	ldd	r21, Y+63	; 0x3f
    398e:	2d 97       	sbiw	r28, 0x0d	; 13
    3990:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3994:	9b 01       	movw	r18, r22
    3996:	ac 01       	movw	r20, r24
    3998:	87 01       	movw	r16, r14
    399a:	ff 24       	eor	r15, r15
    399c:	ee 24       	eor	r14, r14
    399e:	89 a1       	ldd	r24, Y+33	; 0x21
    39a0:	9a a1       	ldd	r25, Y+34	; 0x22
    39a2:	ab a1       	ldd	r26, Y+35	; 0x23
    39a4:	bc a1       	ldd	r27, Y+36	; 0x24
    39a6:	a0 70       	andi	r26, 0x00	; 0
    39a8:	b0 70       	andi	r27, 0x00	; 0
    39aa:	57 01       	movw	r10, r14
    39ac:	68 01       	movw	r12, r16
    39ae:	a8 2a       	or	r10, r24
    39b0:	b9 2a       	or	r11, r25
    39b2:	ca 2a       	or	r12, r26
    39b4:	db 2a       	or	r13, r27
    39b6:	a2 16       	cp	r10, r18
    39b8:	b3 06       	cpc	r11, r19
    39ba:	c4 06       	cpc	r12, r20
    39bc:	d5 06       	cpc	r13, r21
    39be:	00 f5       	brcc	.+64     	; 0x3a00 <__umoddi3+0xa64>
    39c0:	08 94       	sec
    39c2:	61 08       	sbc	r6, r1
    39c4:	71 08       	sbc	r7, r1
    39c6:	81 08       	sbc	r8, r1
    39c8:	91 08       	sbc	r9, r1
    39ca:	69 a5       	ldd	r22, Y+41	; 0x29
    39cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    39ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    39d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    39d2:	a6 0e       	add	r10, r22
    39d4:	b7 1e       	adc	r11, r23
    39d6:	c8 1e       	adc	r12, r24
    39d8:	d9 1e       	adc	r13, r25
    39da:	a6 16       	cp	r10, r22
    39dc:	b7 06       	cpc	r11, r23
    39de:	c8 06       	cpc	r12, r24
    39e0:	d9 06       	cpc	r13, r25
    39e2:	70 f0       	brcs	.+28     	; 0x3a00 <__umoddi3+0xa64>
    39e4:	a2 16       	cp	r10, r18
    39e6:	b3 06       	cpc	r11, r19
    39e8:	c4 06       	cpc	r12, r20
    39ea:	d5 06       	cpc	r13, r21
    39ec:	48 f4       	brcc	.+18     	; 0x3a00 <__umoddi3+0xa64>
    39ee:	08 94       	sec
    39f0:	61 08       	sbc	r6, r1
    39f2:	71 08       	sbc	r7, r1
    39f4:	81 08       	sbc	r8, r1
    39f6:	91 08       	sbc	r9, r1
    39f8:	a6 0e       	add	r10, r22
    39fa:	b7 1e       	adc	r11, r23
    39fc:	c8 1e       	adc	r12, r24
    39fe:	d9 1e       	adc	r13, r25
    3a00:	d6 01       	movw	r26, r12
    3a02:	c5 01       	movw	r24, r10
    3a04:	82 1b       	sub	r24, r18
    3a06:	93 0b       	sbc	r25, r19
    3a08:	a4 0b       	sbc	r26, r20
    3a0a:	b5 0b       	sbc	r27, r21
    3a0c:	89 8f       	std	Y+25, r24	; 0x19
    3a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    3a10:	ab 8f       	std	Y+27, r26	; 0x1b
    3a12:	bc 8f       	std	Y+28, r27	; 0x1c
    3a14:	d1 01       	movw	r26, r2
    3a16:	99 27       	eor	r25, r25
    3a18:	88 27       	eor	r24, r24
    3a1a:	84 01       	movw	r16, r8
    3a1c:	73 01       	movw	r14, r6
    3a1e:	e8 2a       	or	r14, r24
    3a20:	f9 2a       	or	r15, r25
    3a22:	0a 2b       	or	r16, r26
    3a24:	1b 2b       	or	r17, r27
    3a26:	4f ef       	ldi	r20, 0xFF	; 255
    3a28:	a4 2e       	mov	r10, r20
    3a2a:	4f ef       	ldi	r20, 0xFF	; 255
    3a2c:	b4 2e       	mov	r11, r20
    3a2e:	c1 2c       	mov	r12, r1
    3a30:	d1 2c       	mov	r13, r1
    3a32:	ae 20       	and	r10, r14
    3a34:	bf 20       	and	r11, r15
    3a36:	c0 22       	and	r12, r16
    3a38:	d1 22       	and	r13, r17
    3a3a:	78 01       	movw	r14, r16
    3a3c:	00 27       	eor	r16, r16
    3a3e:	11 27       	eor	r17, r17
    3a40:	6d a0       	ldd	r6, Y+37	; 0x25
    3a42:	7e a0       	ldd	r7, Y+38	; 0x26
    3a44:	8f a0       	ldd	r8, Y+39	; 0x27
    3a46:	98 a4       	ldd	r9, Y+40	; 0x28
    3a48:	4f ef       	ldi	r20, 0xFF	; 255
    3a4a:	5f ef       	ldi	r21, 0xFF	; 255
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	70 e0       	ldi	r23, 0x00	; 0
    3a50:	64 22       	and	r6, r20
    3a52:	75 22       	and	r7, r21
    3a54:	86 22       	and	r8, r22
    3a56:	97 22       	and	r9, r23
    3a58:	8d a1       	ldd	r24, Y+37	; 0x25
    3a5a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a5c:	af a1       	ldd	r26, Y+39	; 0x27
    3a5e:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a60:	bd 01       	movw	r22, r26
    3a62:	88 27       	eor	r24, r24
    3a64:	99 27       	eor	r25, r25
    3a66:	65 96       	adiw	r28, 0x15	; 21
    3a68:	6c af       	std	Y+60, r22	; 0x3c
    3a6a:	7d af       	std	Y+61, r23	; 0x3d
    3a6c:	8e af       	std	Y+62, r24	; 0x3e
    3a6e:	9f af       	std	Y+63, r25	; 0x3f
    3a70:	65 97       	sbiw	r28, 0x15	; 21
    3a72:	c6 01       	movw	r24, r12
    3a74:	b5 01       	movw	r22, r10
    3a76:	a4 01       	movw	r20, r8
    3a78:	93 01       	movw	r18, r6
    3a7a:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3a7e:	61 96       	adiw	r28, 0x11	; 17
    3a80:	6c af       	std	Y+60, r22	; 0x3c
    3a82:	7d af       	std	Y+61, r23	; 0x3d
    3a84:	8e af       	std	Y+62, r24	; 0x3e
    3a86:	9f af       	std	Y+63, r25	; 0x3f
    3a88:	61 97       	sbiw	r28, 0x11	; 17
    3a8a:	c6 01       	movw	r24, r12
    3a8c:	b5 01       	movw	r22, r10
    3a8e:	65 96       	adiw	r28, 0x15	; 21
    3a90:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a92:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a94:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a96:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a98:	65 97       	sbiw	r28, 0x15	; 21
    3a9a:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3a9e:	1b 01       	movw	r2, r22
    3aa0:	2c 01       	movw	r4, r24
    3aa2:	c8 01       	movw	r24, r16
    3aa4:	b7 01       	movw	r22, r14
    3aa6:	a4 01       	movw	r20, r8
    3aa8:	93 01       	movw	r18, r6
    3aaa:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3aae:	5b 01       	movw	r10, r22
    3ab0:	6c 01       	movw	r12, r24
    3ab2:	c8 01       	movw	r24, r16
    3ab4:	b7 01       	movw	r22, r14
    3ab6:	65 96       	adiw	r28, 0x15	; 21
    3ab8:	2c ad       	ldd	r18, Y+60	; 0x3c
    3aba:	3d ad       	ldd	r19, Y+61	; 0x3d
    3abc:	4e ad       	ldd	r20, Y+62	; 0x3e
    3abe:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ac0:	65 97       	sbiw	r28, 0x15	; 21
    3ac2:	0e 94 b2 3c 	call	0x7964	; 0x7964 <__mulsi3>
    3ac6:	7b 01       	movw	r14, r22
    3ac8:	8c 01       	movw	r16, r24
    3aca:	a6 01       	movw	r20, r12
    3acc:	95 01       	movw	r18, r10
    3ace:	22 0d       	add	r18, r2
    3ad0:	33 1d       	adc	r19, r3
    3ad2:	44 1d       	adc	r20, r4
    3ad4:	55 1d       	adc	r21, r5
    3ad6:	61 96       	adiw	r28, 0x11	; 17
    3ad8:	6c ac       	ldd	r6, Y+60	; 0x3c
    3ada:	7d ac       	ldd	r7, Y+61	; 0x3d
    3adc:	8e ac       	ldd	r8, Y+62	; 0x3e
    3ade:	9f ac       	ldd	r9, Y+63	; 0x3f
    3ae0:	61 97       	sbiw	r28, 0x11	; 17
    3ae2:	c4 01       	movw	r24, r8
    3ae4:	aa 27       	eor	r26, r26
    3ae6:	bb 27       	eor	r27, r27
    3ae8:	28 0f       	add	r18, r24
    3aea:	39 1f       	adc	r19, r25
    3aec:	4a 1f       	adc	r20, r26
    3aee:	5b 1f       	adc	r21, r27
    3af0:	2a 15       	cp	r18, r10
    3af2:	3b 05       	cpc	r19, r11
    3af4:	4c 05       	cpc	r20, r12
    3af6:	5d 05       	cpc	r21, r13
    3af8:	48 f4       	brcc	.+18     	; 0x3b0c <__umoddi3+0xb70>
    3afa:	81 2c       	mov	r8, r1
    3afc:	91 2c       	mov	r9, r1
    3afe:	e1 e0       	ldi	r30, 0x01	; 1
    3b00:	ae 2e       	mov	r10, r30
    3b02:	b1 2c       	mov	r11, r1
    3b04:	e8 0c       	add	r14, r8
    3b06:	f9 1c       	adc	r15, r9
    3b08:	0a 1d       	adc	r16, r10
    3b0a:	1b 1d       	adc	r17, r11
    3b0c:	ca 01       	movw	r24, r20
    3b0e:	aa 27       	eor	r26, r26
    3b10:	bb 27       	eor	r27, r27
    3b12:	57 01       	movw	r10, r14
    3b14:	68 01       	movw	r12, r16
    3b16:	a8 0e       	add	r10, r24
    3b18:	b9 1e       	adc	r11, r25
    3b1a:	ca 1e       	adc	r12, r26
    3b1c:	db 1e       	adc	r13, r27
    3b1e:	a9 01       	movw	r20, r18
    3b20:	33 27       	eor	r19, r19
    3b22:	22 27       	eor	r18, r18
    3b24:	61 96       	adiw	r28, 0x11	; 17
    3b26:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b28:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b2e:	61 97       	sbiw	r28, 0x11	; 17
    3b30:	a0 70       	andi	r26, 0x00	; 0
    3b32:	b0 70       	andi	r27, 0x00	; 0
    3b34:	28 0f       	add	r18, r24
    3b36:	39 1f       	adc	r19, r25
    3b38:	4a 1f       	adc	r20, r26
    3b3a:	5b 1f       	adc	r21, r27
    3b3c:	e9 8c       	ldd	r14, Y+25	; 0x19
    3b3e:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3b40:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3b42:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3b44:	ea 14       	cp	r14, r10
    3b46:	fb 04       	cpc	r15, r11
    3b48:	0c 05       	cpc	r16, r12
    3b4a:	1d 05       	cpc	r17, r13
    3b4c:	70 f0       	brcs	.+28     	; 0x3b6a <__umoddi3+0xbce>
    3b4e:	ae 14       	cp	r10, r14
    3b50:	bf 04       	cpc	r11, r15
    3b52:	c0 06       	cpc	r12, r16
    3b54:	d1 06       	cpc	r13, r17
    3b56:	69 f5       	brne	.+90     	; 0x3bb2 <__umoddi3+0xc16>
    3b58:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b5a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b5e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b60:	62 17       	cp	r22, r18
    3b62:	73 07       	cpc	r23, r19
    3b64:	84 07       	cpc	r24, r20
    3b66:	95 07       	cpc	r25, r21
    3b68:	20 f5       	brcc	.+72     	; 0x3bb2 <__umoddi3+0xc16>
    3b6a:	da 01       	movw	r26, r20
    3b6c:	c9 01       	movw	r24, r18
    3b6e:	6d a0       	ldd	r6, Y+37	; 0x25
    3b70:	7e a0       	ldd	r7, Y+38	; 0x26
    3b72:	8f a0       	ldd	r8, Y+39	; 0x27
    3b74:	98 a4       	ldd	r9, Y+40	; 0x28
    3b76:	86 19       	sub	r24, r6
    3b78:	97 09       	sbc	r25, r7
    3b7a:	a8 09       	sbc	r26, r8
    3b7c:	b9 09       	sbc	r27, r9
    3b7e:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b80:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b82:	0b a5       	ldd	r16, Y+43	; 0x2b
    3b84:	1c a5       	ldd	r17, Y+44	; 0x2c
    3b86:	ae 18       	sub	r10, r14
    3b88:	bf 08       	sbc	r11, r15
    3b8a:	c0 0a       	sbc	r12, r16
    3b8c:	d1 0a       	sbc	r13, r17
    3b8e:	ee 24       	eor	r14, r14
    3b90:	ff 24       	eor	r15, r15
    3b92:	87 01       	movw	r16, r14
    3b94:	28 17       	cp	r18, r24
    3b96:	39 07       	cpc	r19, r25
    3b98:	4a 07       	cpc	r20, r26
    3b9a:	5b 07       	cpc	r21, r27
    3b9c:	28 f4       	brcc	.+10     	; 0x3ba8 <__umoddi3+0xc0c>
    3b9e:	21 e0       	ldi	r18, 0x01	; 1
    3ba0:	e2 2e       	mov	r14, r18
    3ba2:	f1 2c       	mov	r15, r1
    3ba4:	01 2d       	mov	r16, r1
    3ba6:	11 2d       	mov	r17, r1
    3ba8:	ae 18       	sub	r10, r14
    3baa:	bf 08       	sbc	r11, r15
    3bac:	c0 0a       	sbc	r12, r16
    3bae:	d1 0a       	sbc	r13, r17
    3bb0:	02 c0       	rjmp	.+4      	; 0x3bb6 <__umoddi3+0xc1a>
    3bb2:	da 01       	movw	r26, r20
    3bb4:	c9 01       	movw	r24, r18
    3bb6:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3bb8:	7e 8c       	ldd	r7, Y+30	; 0x1e
    3bba:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3bbc:	98 a0       	ldd	r9, Y+32	; 0x20
    3bbe:	68 1a       	sub	r6, r24
    3bc0:	79 0a       	sbc	r7, r25
    3bc2:	8a 0a       	sbc	r8, r26
    3bc4:	9b 0a       	sbc	r9, r27
    3bc6:	49 8d       	ldd	r20, Y+25	; 0x19
    3bc8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3bca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3bcc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3bce:	4a 19       	sub	r20, r10
    3bd0:	5b 09       	sbc	r21, r11
    3bd2:	6c 09       	sbc	r22, r12
    3bd4:	7d 09       	sbc	r23, r13
    3bd6:	5a 01       	movw	r10, r20
    3bd8:	6b 01       	movw	r12, r22
    3bda:	22 24       	eor	r2, r2
    3bdc:	33 24       	eor	r3, r3
    3bde:	21 01       	movw	r4, r2
    3be0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3be2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3be4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3be6:	98 a1       	ldd	r25, Y+32	; 0x20
    3be8:	66 15       	cp	r22, r6
    3bea:	77 05       	cpc	r23, r7
    3bec:	88 05       	cpc	r24, r8
    3bee:	99 05       	cpc	r25, r9
    3bf0:	28 f4       	brcc	.+10     	; 0x3bfc <__umoddi3+0xc60>
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	28 2e       	mov	r2, r24
    3bf6:	31 2c       	mov	r3, r1
    3bf8:	41 2c       	mov	r4, r1
    3bfa:	51 2c       	mov	r5, r1
    3bfc:	86 01       	movw	r16, r12
    3bfe:	75 01       	movw	r14, r10
    3c00:	e2 18       	sub	r14, r2
    3c02:	f3 08       	sbc	r15, r3
    3c04:	04 09       	sbc	r16, r4
    3c06:	15 09       	sbc	r17, r5
    3c08:	a8 01       	movw	r20, r16
    3c0a:	97 01       	movw	r18, r14
    3c0c:	66 96       	adiw	r28, 0x16	; 22
    3c0e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c10:	66 97       	sbiw	r28, 0x16	; 22
    3c12:	04 c0       	rjmp	.+8      	; 0x3c1c <__umoddi3+0xc80>
    3c14:	22 0f       	add	r18, r18
    3c16:	33 1f       	adc	r19, r19
    3c18:	44 1f       	adc	r20, r20
    3c1a:	55 1f       	adc	r21, r21
    3c1c:	0a 94       	dec	r0
    3c1e:	d2 f7       	brpl	.-12     	; 0x3c14 <__umoddi3+0xc78>
    3c20:	d4 01       	movw	r26, r8
    3c22:	c3 01       	movw	r24, r6
    3c24:	67 96       	adiw	r28, 0x17	; 23
    3c26:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c28:	67 97       	sbiw	r28, 0x17	; 23
    3c2a:	04 c0       	rjmp	.+8      	; 0x3c34 <__umoddi3+0xc98>
    3c2c:	b6 95       	lsr	r27
    3c2e:	a7 95       	ror	r26
    3c30:	97 95       	ror	r25
    3c32:	87 95       	ror	r24
    3c34:	0a 94       	dec	r0
    3c36:	d2 f7       	brpl	.-12     	; 0x3c2c <__umoddi3+0xc90>
    3c38:	28 2b       	or	r18, r24
    3c3a:	39 2b       	or	r19, r25
    3c3c:	4a 2b       	or	r20, r26
    3c3e:	5b 2b       	or	r21, r27
    3c40:	29 8b       	std	Y+17, r18	; 0x11
    3c42:	3a 8b       	std	Y+18, r19	; 0x12
    3c44:	4b 8b       	std	Y+19, r20	; 0x13
    3c46:	5c 8b       	std	Y+20, r21	; 0x14
    3c48:	67 96       	adiw	r28, 0x17	; 23
    3c4a:	0f ac       	ldd	r0, Y+63	; 0x3f
    3c4c:	67 97       	sbiw	r28, 0x17	; 23
    3c4e:	04 c0       	rjmp	.+8      	; 0x3c58 <__umoddi3+0xcbc>
    3c50:	16 95       	lsr	r17
    3c52:	07 95       	ror	r16
    3c54:	f7 94       	ror	r15
    3c56:	e7 94       	ror	r14
    3c58:	0a 94       	dec	r0
    3c5a:	d2 f7       	brpl	.-12     	; 0x3c50 <__umoddi3+0xcb4>
    3c5c:	ed 8a       	std	Y+21, r14	; 0x15
    3c5e:	fe 8a       	std	Y+22, r15	; 0x16
    3c60:	0f 8b       	std	Y+23, r16	; 0x17
    3c62:	18 8f       	std	Y+24, r17	; 0x18
    3c64:	3a 89       	ldd	r19, Y+18	; 0x12
    3c66:	4b 89       	ldd	r20, Y+19	; 0x13
    3c68:	5c 89       	ldd	r21, Y+20	; 0x14
    3c6a:	6e 2d       	mov	r22, r14
    3c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c70:	98 8d       	ldd	r25, Y+24	; 0x18
    3c72:	c5 5a       	subi	r28, 0xA5	; 165
    3c74:	df 4f       	sbci	r29, 0xFF	; 255
    3c76:	e2 e1       	ldi	r30, 0x12	; 18
    3c78:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

00003c7c <_fpadd_parts>:
    3c7c:	a0 e0       	ldi	r26, 0x00	; 0
    3c7e:	b0 e0       	ldi	r27, 0x00	; 0
    3c80:	e4 e4       	ldi	r30, 0x44	; 68
    3c82:	fe e1       	ldi	r31, 0x1E	; 30
    3c84:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	2b 01       	movw	r4, r22
    3c8c:	fa 01       	movw	r30, r20
    3c8e:	9c 91       	ld	r25, X
    3c90:	92 30       	cpi	r25, 0x02	; 2
    3c92:	08 f4       	brcc	.+2      	; 0x3c96 <_fpadd_parts+0x1a>
    3c94:	39 c1       	rjmp	.+626    	; 0x3f08 <_fpadd_parts+0x28c>
    3c96:	eb 01       	movw	r28, r22
    3c98:	88 81       	ld	r24, Y
    3c9a:	82 30       	cpi	r24, 0x02	; 2
    3c9c:	08 f4       	brcc	.+2      	; 0x3ca0 <_fpadd_parts+0x24>
    3c9e:	33 c1       	rjmp	.+614    	; 0x3f06 <_fpadd_parts+0x28a>
    3ca0:	94 30       	cpi	r25, 0x04	; 4
    3ca2:	69 f4       	brne	.+26     	; 0x3cbe <_fpadd_parts+0x42>
    3ca4:	84 30       	cpi	r24, 0x04	; 4
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <_fpadd_parts+0x2e>
    3ca8:	2f c1       	rjmp	.+606    	; 0x3f08 <_fpadd_parts+0x28c>
    3caa:	11 96       	adiw	r26, 0x01	; 1
    3cac:	9c 91       	ld	r25, X
    3cae:	11 97       	sbiw	r26, 0x01	; 1
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	98 17       	cp	r25, r24
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <_fpadd_parts+0x3c>
    3cb6:	28 c1       	rjmp	.+592    	; 0x3f08 <_fpadd_parts+0x28c>
    3cb8:	a5 e6       	ldi	r26, 0x65	; 101
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	25 c1       	rjmp	.+586    	; 0x3f08 <_fpadd_parts+0x28c>
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <_fpadd_parts+0x48>
    3cc2:	21 c1       	rjmp	.+578    	; 0x3f06 <_fpadd_parts+0x28a>
    3cc4:	82 30       	cpi	r24, 0x02	; 2
    3cc6:	a9 f4       	brne	.+42     	; 0x3cf2 <_fpadd_parts+0x76>
    3cc8:	92 30       	cpi	r25, 0x02	; 2
    3cca:	09 f0       	breq	.+2      	; 0x3cce <_fpadd_parts+0x52>
    3ccc:	1d c1       	rjmp	.+570    	; 0x3f08 <_fpadd_parts+0x28c>
    3cce:	9a 01       	movw	r18, r20
    3cd0:	ad 01       	movw	r20, r26
    3cd2:	88 e0       	ldi	r24, 0x08	; 8
    3cd4:	ea 01       	movw	r28, r20
    3cd6:	09 90       	ld	r0, Y+
    3cd8:	ae 01       	movw	r20, r28
    3cda:	e9 01       	movw	r28, r18
    3cdc:	09 92       	st	Y+, r0
    3cde:	9e 01       	movw	r18, r28
    3ce0:	81 50       	subi	r24, 0x01	; 1
    3ce2:	c1 f7       	brne	.-16     	; 0x3cd4 <_fpadd_parts+0x58>
    3ce4:	e2 01       	movw	r28, r4
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 91       	ld	r25, X
    3cec:	89 23       	and	r24, r25
    3cee:	81 83       	std	Z+1, r24	; 0x01
    3cf0:	08 c1       	rjmp	.+528    	; 0x3f02 <_fpadd_parts+0x286>
    3cf2:	92 30       	cpi	r25, 0x02	; 2
    3cf4:	09 f4       	brne	.+2      	; 0x3cf8 <_fpadd_parts+0x7c>
    3cf6:	07 c1       	rjmp	.+526    	; 0x3f06 <_fpadd_parts+0x28a>
    3cf8:	12 96       	adiw	r26, 0x02	; 2
    3cfa:	2d 90       	ld	r2, X+
    3cfc:	3c 90       	ld	r3, X
    3cfe:	13 97       	sbiw	r26, 0x03	; 3
    3d00:	eb 01       	movw	r28, r22
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	9b 81       	ldd	r25, Y+3	; 0x03
    3d06:	14 96       	adiw	r26, 0x04	; 4
    3d08:	ad 90       	ld	r10, X+
    3d0a:	bd 90       	ld	r11, X+
    3d0c:	cd 90       	ld	r12, X+
    3d0e:	dc 90       	ld	r13, X
    3d10:	17 97       	sbiw	r26, 0x07	; 7
    3d12:	ec 80       	ldd	r14, Y+4	; 0x04
    3d14:	fd 80       	ldd	r15, Y+5	; 0x05
    3d16:	0e 81       	ldd	r16, Y+6	; 0x06
    3d18:	1f 81       	ldd	r17, Y+7	; 0x07
    3d1a:	91 01       	movw	r18, r2
    3d1c:	28 1b       	sub	r18, r24
    3d1e:	39 0b       	sbc	r19, r25
    3d20:	b9 01       	movw	r22, r18
    3d22:	37 ff       	sbrs	r19, 7
    3d24:	04 c0       	rjmp	.+8      	; 0x3d2e <_fpadd_parts+0xb2>
    3d26:	66 27       	eor	r22, r22
    3d28:	77 27       	eor	r23, r23
    3d2a:	62 1b       	sub	r22, r18
    3d2c:	73 0b       	sbc	r23, r19
    3d2e:	60 32       	cpi	r22, 0x20	; 32
    3d30:	71 05       	cpc	r23, r1
    3d32:	0c f0       	brlt	.+2      	; 0x3d36 <_fpadd_parts+0xba>
    3d34:	61 c0       	rjmp	.+194    	; 0x3df8 <_fpadd_parts+0x17c>
    3d36:	12 16       	cp	r1, r18
    3d38:	13 06       	cpc	r1, r19
    3d3a:	6c f5       	brge	.+90     	; 0x3d96 <_fpadd_parts+0x11a>
    3d3c:	37 01       	movw	r6, r14
    3d3e:	48 01       	movw	r8, r16
    3d40:	06 2e       	mov	r0, r22
    3d42:	04 c0       	rjmp	.+8      	; 0x3d4c <_fpadd_parts+0xd0>
    3d44:	96 94       	lsr	r9
    3d46:	87 94       	ror	r8
    3d48:	77 94       	ror	r7
    3d4a:	67 94       	ror	r6
    3d4c:	0a 94       	dec	r0
    3d4e:	d2 f7       	brpl	.-12     	; 0x3d44 <_fpadd_parts+0xc8>
    3d50:	21 e0       	ldi	r18, 0x01	; 1
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	50 e0       	ldi	r21, 0x00	; 0
    3d58:	04 c0       	rjmp	.+8      	; 0x3d62 <_fpadd_parts+0xe6>
    3d5a:	22 0f       	add	r18, r18
    3d5c:	33 1f       	adc	r19, r19
    3d5e:	44 1f       	adc	r20, r20
    3d60:	55 1f       	adc	r21, r21
    3d62:	6a 95       	dec	r22
    3d64:	d2 f7       	brpl	.-12     	; 0x3d5a <_fpadd_parts+0xde>
    3d66:	21 50       	subi	r18, 0x01	; 1
    3d68:	30 40       	sbci	r19, 0x00	; 0
    3d6a:	40 40       	sbci	r20, 0x00	; 0
    3d6c:	50 40       	sbci	r21, 0x00	; 0
    3d6e:	2e 21       	and	r18, r14
    3d70:	3f 21       	and	r19, r15
    3d72:	40 23       	and	r20, r16
    3d74:	51 23       	and	r21, r17
    3d76:	21 15       	cp	r18, r1
    3d78:	31 05       	cpc	r19, r1
    3d7a:	41 05       	cpc	r20, r1
    3d7c:	51 05       	cpc	r21, r1
    3d7e:	21 f0       	breq	.+8      	; 0x3d88 <_fpadd_parts+0x10c>
    3d80:	21 e0       	ldi	r18, 0x01	; 1
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	79 01       	movw	r14, r18
    3d8a:	8a 01       	movw	r16, r20
    3d8c:	e6 28       	or	r14, r6
    3d8e:	f7 28       	or	r15, r7
    3d90:	08 29       	or	r16, r8
    3d92:	19 29       	or	r17, r9
    3d94:	3c c0       	rjmp	.+120    	; 0x3e0e <_fpadd_parts+0x192>
    3d96:	23 2b       	or	r18, r19
    3d98:	d1 f1       	breq	.+116    	; 0x3e0e <_fpadd_parts+0x192>
    3d9a:	26 0e       	add	r2, r22
    3d9c:	37 1e       	adc	r3, r23
    3d9e:	35 01       	movw	r6, r10
    3da0:	46 01       	movw	r8, r12
    3da2:	06 2e       	mov	r0, r22
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <_fpadd_parts+0x132>
    3da6:	96 94       	lsr	r9
    3da8:	87 94       	ror	r8
    3daa:	77 94       	ror	r7
    3dac:	67 94       	ror	r6
    3dae:	0a 94       	dec	r0
    3db0:	d2 f7       	brpl	.-12     	; 0x3da6 <_fpadd_parts+0x12a>
    3db2:	21 e0       	ldi	r18, 0x01	; 1
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	04 c0       	rjmp	.+8      	; 0x3dc4 <_fpadd_parts+0x148>
    3dbc:	22 0f       	add	r18, r18
    3dbe:	33 1f       	adc	r19, r19
    3dc0:	44 1f       	adc	r20, r20
    3dc2:	55 1f       	adc	r21, r21
    3dc4:	6a 95       	dec	r22
    3dc6:	d2 f7       	brpl	.-12     	; 0x3dbc <_fpadd_parts+0x140>
    3dc8:	21 50       	subi	r18, 0x01	; 1
    3dca:	30 40       	sbci	r19, 0x00	; 0
    3dcc:	40 40       	sbci	r20, 0x00	; 0
    3dce:	50 40       	sbci	r21, 0x00	; 0
    3dd0:	2a 21       	and	r18, r10
    3dd2:	3b 21       	and	r19, r11
    3dd4:	4c 21       	and	r20, r12
    3dd6:	5d 21       	and	r21, r13
    3dd8:	21 15       	cp	r18, r1
    3dda:	31 05       	cpc	r19, r1
    3ddc:	41 05       	cpc	r20, r1
    3dde:	51 05       	cpc	r21, r1
    3de0:	21 f0       	breq	.+8      	; 0x3dea <_fpadd_parts+0x16e>
    3de2:	21 e0       	ldi	r18, 0x01	; 1
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e0       	ldi	r20, 0x00	; 0
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	59 01       	movw	r10, r18
    3dec:	6a 01       	movw	r12, r20
    3dee:	a6 28       	or	r10, r6
    3df0:	b7 28       	or	r11, r7
    3df2:	c8 28       	or	r12, r8
    3df4:	d9 28       	or	r13, r9
    3df6:	0b c0       	rjmp	.+22     	; 0x3e0e <_fpadd_parts+0x192>
    3df8:	82 15       	cp	r24, r2
    3dfa:	93 05       	cpc	r25, r3
    3dfc:	2c f0       	brlt	.+10     	; 0x3e08 <_fpadd_parts+0x18c>
    3dfe:	1c 01       	movw	r2, r24
    3e00:	aa 24       	eor	r10, r10
    3e02:	bb 24       	eor	r11, r11
    3e04:	65 01       	movw	r12, r10
    3e06:	03 c0       	rjmp	.+6      	; 0x3e0e <_fpadd_parts+0x192>
    3e08:	ee 24       	eor	r14, r14
    3e0a:	ff 24       	eor	r15, r15
    3e0c:	87 01       	movw	r16, r14
    3e0e:	11 96       	adiw	r26, 0x01	; 1
    3e10:	9c 91       	ld	r25, X
    3e12:	d2 01       	movw	r26, r4
    3e14:	11 96       	adiw	r26, 0x01	; 1
    3e16:	8c 91       	ld	r24, X
    3e18:	98 17       	cp	r25, r24
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <_fpadd_parts+0x1a2>
    3e1c:	45 c0       	rjmp	.+138    	; 0x3ea8 <_fpadd_parts+0x22c>
    3e1e:	99 23       	and	r25, r25
    3e20:	39 f0       	breq	.+14     	; 0x3e30 <_fpadd_parts+0x1b4>
    3e22:	a8 01       	movw	r20, r16
    3e24:	97 01       	movw	r18, r14
    3e26:	2a 19       	sub	r18, r10
    3e28:	3b 09       	sbc	r19, r11
    3e2a:	4c 09       	sbc	r20, r12
    3e2c:	5d 09       	sbc	r21, r13
    3e2e:	06 c0       	rjmp	.+12     	; 0x3e3c <_fpadd_parts+0x1c0>
    3e30:	a6 01       	movw	r20, r12
    3e32:	95 01       	movw	r18, r10
    3e34:	2e 19       	sub	r18, r14
    3e36:	3f 09       	sbc	r19, r15
    3e38:	40 0b       	sbc	r20, r16
    3e3a:	51 0b       	sbc	r21, r17
    3e3c:	57 fd       	sbrc	r21, 7
    3e3e:	08 c0       	rjmp	.+16     	; 0x3e50 <_fpadd_parts+0x1d4>
    3e40:	11 82       	std	Z+1, r1	; 0x01
    3e42:	33 82       	std	Z+3, r3	; 0x03
    3e44:	22 82       	std	Z+2, r2	; 0x02
    3e46:	24 83       	std	Z+4, r18	; 0x04
    3e48:	35 83       	std	Z+5, r19	; 0x05
    3e4a:	46 83       	std	Z+6, r20	; 0x06
    3e4c:	57 83       	std	Z+7, r21	; 0x07
    3e4e:	1d c0       	rjmp	.+58     	; 0x3e8a <_fpadd_parts+0x20e>
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	81 83       	std	Z+1, r24	; 0x01
    3e54:	33 82       	std	Z+3, r3	; 0x03
    3e56:	22 82       	std	Z+2, r2	; 0x02
    3e58:	88 27       	eor	r24, r24
    3e5a:	99 27       	eor	r25, r25
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	82 1b       	sub	r24, r18
    3e60:	93 0b       	sbc	r25, r19
    3e62:	a4 0b       	sbc	r26, r20
    3e64:	b5 0b       	sbc	r27, r21
    3e66:	84 83       	std	Z+4, r24	; 0x04
    3e68:	95 83       	std	Z+5, r25	; 0x05
    3e6a:	a6 83       	std	Z+6, r26	; 0x06
    3e6c:	b7 83       	std	Z+7, r27	; 0x07
    3e6e:	0d c0       	rjmp	.+26     	; 0x3e8a <_fpadd_parts+0x20e>
    3e70:	22 0f       	add	r18, r18
    3e72:	33 1f       	adc	r19, r19
    3e74:	44 1f       	adc	r20, r20
    3e76:	55 1f       	adc	r21, r21
    3e78:	24 83       	std	Z+4, r18	; 0x04
    3e7a:	35 83       	std	Z+5, r19	; 0x05
    3e7c:	46 83       	std	Z+6, r20	; 0x06
    3e7e:	57 83       	std	Z+7, r21	; 0x07
    3e80:	82 81       	ldd	r24, Z+2	; 0x02
    3e82:	93 81       	ldd	r25, Z+3	; 0x03
    3e84:	01 97       	sbiw	r24, 0x01	; 1
    3e86:	93 83       	std	Z+3, r25	; 0x03
    3e88:	82 83       	std	Z+2, r24	; 0x02
    3e8a:	24 81       	ldd	r18, Z+4	; 0x04
    3e8c:	35 81       	ldd	r19, Z+5	; 0x05
    3e8e:	46 81       	ldd	r20, Z+6	; 0x06
    3e90:	57 81       	ldd	r21, Z+7	; 0x07
    3e92:	da 01       	movw	r26, r20
    3e94:	c9 01       	movw	r24, r18
    3e96:	01 97       	sbiw	r24, 0x01	; 1
    3e98:	a1 09       	sbc	r26, r1
    3e9a:	b1 09       	sbc	r27, r1
    3e9c:	8f 5f       	subi	r24, 0xFF	; 255
    3e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea0:	af 4f       	sbci	r26, 0xFF	; 255
    3ea2:	bf 43       	sbci	r27, 0x3F	; 63
    3ea4:	28 f3       	brcs	.-54     	; 0x3e70 <_fpadd_parts+0x1f4>
    3ea6:	0b c0       	rjmp	.+22     	; 0x3ebe <_fpadd_parts+0x242>
    3ea8:	91 83       	std	Z+1, r25	; 0x01
    3eaa:	33 82       	std	Z+3, r3	; 0x03
    3eac:	22 82       	std	Z+2, r2	; 0x02
    3eae:	ea 0c       	add	r14, r10
    3eb0:	fb 1c       	adc	r15, r11
    3eb2:	0c 1d       	adc	r16, r12
    3eb4:	1d 1d       	adc	r17, r13
    3eb6:	e4 82       	std	Z+4, r14	; 0x04
    3eb8:	f5 82       	std	Z+5, r15	; 0x05
    3eba:	06 83       	std	Z+6, r16	; 0x06
    3ebc:	17 83       	std	Z+7, r17	; 0x07
    3ebe:	83 e0       	ldi	r24, 0x03	; 3
    3ec0:	80 83       	st	Z, r24
    3ec2:	24 81       	ldd	r18, Z+4	; 0x04
    3ec4:	35 81       	ldd	r19, Z+5	; 0x05
    3ec6:	46 81       	ldd	r20, Z+6	; 0x06
    3ec8:	57 81       	ldd	r21, Z+7	; 0x07
    3eca:	57 ff       	sbrs	r21, 7
    3ecc:	1a c0       	rjmp	.+52     	; 0x3f02 <_fpadd_parts+0x286>
    3ece:	c9 01       	movw	r24, r18
    3ed0:	aa 27       	eor	r26, r26
    3ed2:	97 fd       	sbrc	r25, 7
    3ed4:	a0 95       	com	r26
    3ed6:	ba 2f       	mov	r27, r26
    3ed8:	81 70       	andi	r24, 0x01	; 1
    3eda:	90 70       	andi	r25, 0x00	; 0
    3edc:	a0 70       	andi	r26, 0x00	; 0
    3ede:	b0 70       	andi	r27, 0x00	; 0
    3ee0:	56 95       	lsr	r21
    3ee2:	47 95       	ror	r20
    3ee4:	37 95       	ror	r19
    3ee6:	27 95       	ror	r18
    3ee8:	82 2b       	or	r24, r18
    3eea:	93 2b       	or	r25, r19
    3eec:	a4 2b       	or	r26, r20
    3eee:	b5 2b       	or	r27, r21
    3ef0:	84 83       	std	Z+4, r24	; 0x04
    3ef2:	95 83       	std	Z+5, r25	; 0x05
    3ef4:	a6 83       	std	Z+6, r26	; 0x06
    3ef6:	b7 83       	std	Z+7, r27	; 0x07
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	93 83       	std	Z+3, r25	; 0x03
    3f00:	82 83       	std	Z+2, r24	; 0x02
    3f02:	df 01       	movw	r26, r30
    3f04:	01 c0       	rjmp	.+2      	; 0x3f08 <_fpadd_parts+0x28c>
    3f06:	d2 01       	movw	r26, r4
    3f08:	cd 01       	movw	r24, r26
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	e2 e1       	ldi	r30, 0x12	; 18
    3f10:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

00003f14 <__subsf3>:
    3f14:	a0 e2       	ldi	r26, 0x20	; 32
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	e0 e9       	ldi	r30, 0x90	; 144
    3f1a:	ff e1       	ldi	r31, 0x1F	; 31
    3f1c:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__prologue_saves__+0x18>
    3f20:	69 83       	std	Y+1, r22	; 0x01
    3f22:	7a 83       	std	Y+2, r23	; 0x02
    3f24:	8b 83       	std	Y+3, r24	; 0x03
    3f26:	9c 83       	std	Y+4, r25	; 0x04
    3f28:	2d 83       	std	Y+5, r18	; 0x05
    3f2a:	3e 83       	std	Y+6, r19	; 0x06
    3f2c:	4f 83       	std	Y+7, r20	; 0x07
    3f2e:	58 87       	std	Y+8, r21	; 0x08
    3f30:	e9 e0       	ldi	r30, 0x09	; 9
    3f32:	ee 2e       	mov	r14, r30
    3f34:	f1 2c       	mov	r15, r1
    3f36:	ec 0e       	add	r14, r28
    3f38:	fd 1e       	adc	r15, r29
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	01 96       	adiw	r24, 0x01	; 1
    3f3e:	b7 01       	movw	r22, r14
    3f40:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3f44:	8e 01       	movw	r16, r28
    3f46:	0f 5e       	subi	r16, 0xEF	; 239
    3f48:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	05 96       	adiw	r24, 0x05	; 5
    3f4e:	b8 01       	movw	r22, r16
    3f50:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3f54:	8a 89       	ldd	r24, Y+18	; 0x12
    3f56:	91 e0       	ldi	r25, 0x01	; 1
    3f58:	89 27       	eor	r24, r25
    3f5a:	8a 8b       	std	Y+18, r24	; 0x12
    3f5c:	c7 01       	movw	r24, r14
    3f5e:	b8 01       	movw	r22, r16
    3f60:	ae 01       	movw	r20, r28
    3f62:	47 5e       	subi	r20, 0xE7	; 231
    3f64:	5f 4f       	sbci	r21, 0xFF	; 255
    3f66:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_fpadd_parts>
    3f6a:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    3f6e:	a0 96       	adiw	r28, 0x20	; 32
    3f70:	e6 e0       	ldi	r30, 0x06	; 6
    3f72:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__epilogue_restores__+0x18>

00003f76 <__addsf3>:
    3f76:	a0 e2       	ldi	r26, 0x20	; 32
    3f78:	b0 e0       	ldi	r27, 0x00	; 0
    3f7a:	e1 ec       	ldi	r30, 0xC1	; 193
    3f7c:	ff e1       	ldi	r31, 0x1F	; 31
    3f7e:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__prologue_saves__+0x18>
    3f82:	69 83       	std	Y+1, r22	; 0x01
    3f84:	7a 83       	std	Y+2, r23	; 0x02
    3f86:	8b 83       	std	Y+3, r24	; 0x03
    3f88:	9c 83       	std	Y+4, r25	; 0x04
    3f8a:	2d 83       	std	Y+5, r18	; 0x05
    3f8c:	3e 83       	std	Y+6, r19	; 0x06
    3f8e:	4f 83       	std	Y+7, r20	; 0x07
    3f90:	58 87       	std	Y+8, r21	; 0x08
    3f92:	f9 e0       	ldi	r31, 0x09	; 9
    3f94:	ef 2e       	mov	r14, r31
    3f96:	f1 2c       	mov	r15, r1
    3f98:	ec 0e       	add	r14, r28
    3f9a:	fd 1e       	adc	r15, r29
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	01 96       	adiw	r24, 0x01	; 1
    3fa0:	b7 01       	movw	r22, r14
    3fa2:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3fa6:	8e 01       	movw	r16, r28
    3fa8:	0f 5e       	subi	r16, 0xEF	; 239
    3faa:	1f 4f       	sbci	r17, 0xFF	; 255
    3fac:	ce 01       	movw	r24, r28
    3fae:	05 96       	adiw	r24, 0x05	; 5
    3fb0:	b8 01       	movw	r22, r16
    3fb2:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3fb6:	c7 01       	movw	r24, r14
    3fb8:	b8 01       	movw	r22, r16
    3fba:	ae 01       	movw	r20, r28
    3fbc:	47 5e       	subi	r20, 0xE7	; 231
    3fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <_fpadd_parts>
    3fc4:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    3fc8:	a0 96       	adiw	r28, 0x20	; 32
    3fca:	e6 e0       	ldi	r30, 0x06	; 6
    3fcc:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__epilogue_restores__+0x18>

00003fd0 <__mulsf3>:
    3fd0:	a0 e2       	ldi	r26, 0x20	; 32
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	ee ee       	ldi	r30, 0xEE	; 238
    3fd6:	ff e1       	ldi	r31, 0x1F	; 31
    3fd8:	0c 94 f3 3c 	jmp	0x79e6	; 0x79e6 <__prologue_saves__>
    3fdc:	69 83       	std	Y+1, r22	; 0x01
    3fde:	7a 83       	std	Y+2, r23	; 0x02
    3fe0:	8b 83       	std	Y+3, r24	; 0x03
    3fe2:	9c 83       	std	Y+4, r25	; 0x04
    3fe4:	2d 83       	std	Y+5, r18	; 0x05
    3fe6:	3e 83       	std	Y+6, r19	; 0x06
    3fe8:	4f 83       	std	Y+7, r20	; 0x07
    3fea:	58 87       	std	Y+8, r21	; 0x08
    3fec:	ce 01       	movw	r24, r28
    3fee:	01 96       	adiw	r24, 0x01	; 1
    3ff0:	be 01       	movw	r22, r28
    3ff2:	67 5f       	subi	r22, 0xF7	; 247
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    3ffa:	ce 01       	movw	r24, r28
    3ffc:	05 96       	adiw	r24, 0x05	; 5
    3ffe:	be 01       	movw	r22, r28
    4000:	6f 5e       	subi	r22, 0xEF	; 239
    4002:	7f 4f       	sbci	r23, 0xFF	; 255
    4004:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4008:	99 85       	ldd	r25, Y+9	; 0x09
    400a:	92 30       	cpi	r25, 0x02	; 2
    400c:	88 f0       	brcs	.+34     	; 0x4030 <__mulsf3+0x60>
    400e:	89 89       	ldd	r24, Y+17	; 0x11
    4010:	82 30       	cpi	r24, 0x02	; 2
    4012:	c8 f0       	brcs	.+50     	; 0x4046 <__mulsf3+0x76>
    4014:	94 30       	cpi	r25, 0x04	; 4
    4016:	19 f4       	brne	.+6      	; 0x401e <__mulsf3+0x4e>
    4018:	82 30       	cpi	r24, 0x02	; 2
    401a:	51 f4       	brne	.+20     	; 0x4030 <__mulsf3+0x60>
    401c:	04 c0       	rjmp	.+8      	; 0x4026 <__mulsf3+0x56>
    401e:	84 30       	cpi	r24, 0x04	; 4
    4020:	29 f4       	brne	.+10     	; 0x402c <__mulsf3+0x5c>
    4022:	92 30       	cpi	r25, 0x02	; 2
    4024:	81 f4       	brne	.+32     	; 0x4046 <__mulsf3+0x76>
    4026:	85 e6       	ldi	r24, 0x65	; 101
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	c6 c0       	rjmp	.+396    	; 0x41b8 <__mulsf3+0x1e8>
    402c:	92 30       	cpi	r25, 0x02	; 2
    402e:	49 f4       	brne	.+18     	; 0x4042 <__mulsf3+0x72>
    4030:	20 e0       	ldi	r18, 0x00	; 0
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	8a 89       	ldd	r24, Y+18	; 0x12
    4036:	98 13       	cpse	r25, r24
    4038:	21 e0       	ldi	r18, 0x01	; 1
    403a:	2a 87       	std	Y+10, r18	; 0x0a
    403c:	ce 01       	movw	r24, r28
    403e:	09 96       	adiw	r24, 0x09	; 9
    4040:	bb c0       	rjmp	.+374    	; 0x41b8 <__mulsf3+0x1e8>
    4042:	82 30       	cpi	r24, 0x02	; 2
    4044:	49 f4       	brne	.+18     	; 0x4058 <__mulsf3+0x88>
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	8a 89       	ldd	r24, Y+18	; 0x12
    404c:	98 13       	cpse	r25, r24
    404e:	21 e0       	ldi	r18, 0x01	; 1
    4050:	2a 8b       	std	Y+18, r18	; 0x12
    4052:	ce 01       	movw	r24, r28
    4054:	41 96       	adiw	r24, 0x11	; 17
    4056:	b0 c0       	rjmp	.+352    	; 0x41b8 <__mulsf3+0x1e8>
    4058:	2d 84       	ldd	r2, Y+13	; 0x0d
    405a:	3e 84       	ldd	r3, Y+14	; 0x0e
    405c:	4f 84       	ldd	r4, Y+15	; 0x0f
    405e:	58 88       	ldd	r5, Y+16	; 0x10
    4060:	6d 88       	ldd	r6, Y+21	; 0x15
    4062:	7e 88       	ldd	r7, Y+22	; 0x16
    4064:	8f 88       	ldd	r8, Y+23	; 0x17
    4066:	98 8c       	ldd	r9, Y+24	; 0x18
    4068:	ee 24       	eor	r14, r14
    406a:	ff 24       	eor	r15, r15
    406c:	87 01       	movw	r16, r14
    406e:	aa 24       	eor	r10, r10
    4070:	bb 24       	eor	r11, r11
    4072:	65 01       	movw	r12, r10
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	e0 e0       	ldi	r30, 0x00	; 0
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	c1 01       	movw	r24, r2
    4082:	81 70       	andi	r24, 0x01	; 1
    4084:	90 70       	andi	r25, 0x00	; 0
    4086:	89 2b       	or	r24, r25
    4088:	e9 f0       	breq	.+58     	; 0x40c4 <__mulsf3+0xf4>
    408a:	e6 0c       	add	r14, r6
    408c:	f7 1c       	adc	r15, r7
    408e:	08 1d       	adc	r16, r8
    4090:	19 1d       	adc	r17, r9
    4092:	9a 01       	movw	r18, r20
    4094:	ab 01       	movw	r20, r22
    4096:	2a 0d       	add	r18, r10
    4098:	3b 1d       	adc	r19, r11
    409a:	4c 1d       	adc	r20, r12
    409c:	5d 1d       	adc	r21, r13
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	a0 e0       	ldi	r26, 0x00	; 0
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	e6 14       	cp	r14, r6
    40a8:	f7 04       	cpc	r15, r7
    40aa:	08 05       	cpc	r16, r8
    40ac:	19 05       	cpc	r17, r9
    40ae:	20 f4       	brcc	.+8      	; 0x40b8 <__mulsf3+0xe8>
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	a0 e0       	ldi	r26, 0x00	; 0
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	ba 01       	movw	r22, r20
    40ba:	a9 01       	movw	r20, r18
    40bc:	48 0f       	add	r20, r24
    40be:	59 1f       	adc	r21, r25
    40c0:	6a 1f       	adc	r22, r26
    40c2:	7b 1f       	adc	r23, r27
    40c4:	aa 0c       	add	r10, r10
    40c6:	bb 1c       	adc	r11, r11
    40c8:	cc 1c       	adc	r12, r12
    40ca:	dd 1c       	adc	r13, r13
    40cc:	97 fe       	sbrs	r9, 7
    40ce:	08 c0       	rjmp	.+16     	; 0x40e0 <__mulsf3+0x110>
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	a0 e0       	ldi	r26, 0x00	; 0
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	a8 2a       	or	r10, r24
    40da:	b9 2a       	or	r11, r25
    40dc:	ca 2a       	or	r12, r26
    40de:	db 2a       	or	r13, r27
    40e0:	31 96       	adiw	r30, 0x01	; 1
    40e2:	e0 32       	cpi	r30, 0x20	; 32
    40e4:	f1 05       	cpc	r31, r1
    40e6:	49 f0       	breq	.+18     	; 0x40fa <__mulsf3+0x12a>
    40e8:	66 0c       	add	r6, r6
    40ea:	77 1c       	adc	r7, r7
    40ec:	88 1c       	adc	r8, r8
    40ee:	99 1c       	adc	r9, r9
    40f0:	56 94       	lsr	r5
    40f2:	47 94       	ror	r4
    40f4:	37 94       	ror	r3
    40f6:	27 94       	ror	r2
    40f8:	c3 cf       	rjmp	.-122    	; 0x4080 <__mulsf3+0xb0>
    40fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    40fc:	ea 89       	ldd	r30, Y+18	; 0x12
    40fe:	2b 89       	ldd	r18, Y+19	; 0x13
    4100:	3c 89       	ldd	r19, Y+20	; 0x14
    4102:	8b 85       	ldd	r24, Y+11	; 0x0b
    4104:	9c 85       	ldd	r25, Y+12	; 0x0c
    4106:	28 0f       	add	r18, r24
    4108:	39 1f       	adc	r19, r25
    410a:	2e 5f       	subi	r18, 0xFE	; 254
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	17 c0       	rjmp	.+46     	; 0x413e <__mulsf3+0x16e>
    4110:	ca 01       	movw	r24, r20
    4112:	81 70       	andi	r24, 0x01	; 1
    4114:	90 70       	andi	r25, 0x00	; 0
    4116:	89 2b       	or	r24, r25
    4118:	61 f0       	breq	.+24     	; 0x4132 <__mulsf3+0x162>
    411a:	16 95       	lsr	r17
    411c:	07 95       	ror	r16
    411e:	f7 94       	ror	r15
    4120:	e7 94       	ror	r14
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a0 e0       	ldi	r26, 0x00	; 0
    4128:	b0 e8       	ldi	r27, 0x80	; 128
    412a:	e8 2a       	or	r14, r24
    412c:	f9 2a       	or	r15, r25
    412e:	0a 2b       	or	r16, r26
    4130:	1b 2b       	or	r17, r27
    4132:	76 95       	lsr	r23
    4134:	67 95       	ror	r22
    4136:	57 95       	ror	r21
    4138:	47 95       	ror	r20
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
    413e:	77 fd       	sbrc	r23, 7
    4140:	e7 cf       	rjmp	.-50     	; 0x4110 <__mulsf3+0x140>
    4142:	0c c0       	rjmp	.+24     	; 0x415c <__mulsf3+0x18c>
    4144:	44 0f       	add	r20, r20
    4146:	55 1f       	adc	r21, r21
    4148:	66 1f       	adc	r22, r22
    414a:	77 1f       	adc	r23, r23
    414c:	17 fd       	sbrc	r17, 7
    414e:	41 60       	ori	r20, 0x01	; 1
    4150:	ee 0c       	add	r14, r14
    4152:	ff 1c       	adc	r15, r15
    4154:	00 1f       	adc	r16, r16
    4156:	11 1f       	adc	r17, r17
    4158:	21 50       	subi	r18, 0x01	; 1
    415a:	30 40       	sbci	r19, 0x00	; 0
    415c:	40 30       	cpi	r20, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	59 07       	cpc	r21, r25
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	69 07       	cpc	r22, r25
    4166:	90 e4       	ldi	r25, 0x40	; 64
    4168:	79 07       	cpc	r23, r25
    416a:	60 f3       	brcs	.-40     	; 0x4144 <__mulsf3+0x174>
    416c:	2b 8f       	std	Y+27, r18	; 0x1b
    416e:	3c 8f       	std	Y+28, r19	; 0x1c
    4170:	db 01       	movw	r26, r22
    4172:	ca 01       	movw	r24, r20
    4174:	8f 77       	andi	r24, 0x7F	; 127
    4176:	90 70       	andi	r25, 0x00	; 0
    4178:	a0 70       	andi	r26, 0x00	; 0
    417a:	b0 70       	andi	r27, 0x00	; 0
    417c:	80 34       	cpi	r24, 0x40	; 64
    417e:	91 05       	cpc	r25, r1
    4180:	a1 05       	cpc	r26, r1
    4182:	b1 05       	cpc	r27, r1
    4184:	61 f4       	brne	.+24     	; 0x419e <__mulsf3+0x1ce>
    4186:	47 fd       	sbrc	r20, 7
    4188:	0a c0       	rjmp	.+20     	; 0x419e <__mulsf3+0x1ce>
    418a:	e1 14       	cp	r14, r1
    418c:	f1 04       	cpc	r15, r1
    418e:	01 05       	cpc	r16, r1
    4190:	11 05       	cpc	r17, r1
    4192:	29 f0       	breq	.+10     	; 0x419e <__mulsf3+0x1ce>
    4194:	40 5c       	subi	r20, 0xC0	; 192
    4196:	5f 4f       	sbci	r21, 0xFF	; 255
    4198:	6f 4f       	sbci	r22, 0xFF	; 255
    419a:	7f 4f       	sbci	r23, 0xFF	; 255
    419c:	40 78       	andi	r20, 0x80	; 128
    419e:	1a 8e       	std	Y+26, r1	; 0x1a
    41a0:	fe 17       	cp	r31, r30
    41a2:	11 f0       	breq	.+4      	; 0x41a8 <__mulsf3+0x1d8>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	8a 8f       	std	Y+26, r24	; 0x1a
    41a8:	4d 8f       	std	Y+29, r20	; 0x1d
    41aa:	5e 8f       	std	Y+30, r21	; 0x1e
    41ac:	6f 8f       	std	Y+31, r22	; 0x1f
    41ae:	78 a3       	std	Y+32, r23	; 0x20
    41b0:	83 e0       	ldi	r24, 0x03	; 3
    41b2:	89 8f       	std	Y+25, r24	; 0x19
    41b4:	ce 01       	movw	r24, r28
    41b6:	49 96       	adiw	r24, 0x19	; 25
    41b8:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    41bc:	a0 96       	adiw	r28, 0x20	; 32
    41be:	e2 e1       	ldi	r30, 0x12	; 18
    41c0:	0c 94 0f 3d 	jmp	0x7a1e	; 0x7a1e <__epilogue_restores__>

000041c4 <__gesf2>:
    41c4:	a8 e1       	ldi	r26, 0x18	; 24
    41c6:	b0 e0       	ldi	r27, 0x00	; 0
    41c8:	e8 ee       	ldi	r30, 0xE8	; 232
    41ca:	f0 e2       	ldi	r31, 0x20	; 32
    41cc:	0c 94 ff 3c 	jmp	0x79fe	; 0x79fe <__prologue_saves__+0x18>
    41d0:	69 83       	std	Y+1, r22	; 0x01
    41d2:	7a 83       	std	Y+2, r23	; 0x02
    41d4:	8b 83       	std	Y+3, r24	; 0x03
    41d6:	9c 83       	std	Y+4, r25	; 0x04
    41d8:	2d 83       	std	Y+5, r18	; 0x05
    41da:	3e 83       	std	Y+6, r19	; 0x06
    41dc:	4f 83       	std	Y+7, r20	; 0x07
    41de:	58 87       	std	Y+8, r21	; 0x08
    41e0:	89 e0       	ldi	r24, 0x09	; 9
    41e2:	e8 2e       	mov	r14, r24
    41e4:	f1 2c       	mov	r15, r1
    41e6:	ec 0e       	add	r14, r28
    41e8:	fd 1e       	adc	r15, r29
    41ea:	ce 01       	movw	r24, r28
    41ec:	01 96       	adiw	r24, 0x01	; 1
    41ee:	b7 01       	movw	r22, r14
    41f0:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    41f4:	8e 01       	movw	r16, r28
    41f6:	0f 5e       	subi	r16, 0xEF	; 239
    41f8:	1f 4f       	sbci	r17, 0xFF	; 255
    41fa:	ce 01       	movw	r24, r28
    41fc:	05 96       	adiw	r24, 0x05	; 5
    41fe:	b8 01       	movw	r22, r16
    4200:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4204:	89 85       	ldd	r24, Y+9	; 0x09
    4206:	82 30       	cpi	r24, 0x02	; 2
    4208:	40 f0       	brcs	.+16     	; 0x421a <__gesf2+0x56>
    420a:	89 89       	ldd	r24, Y+17	; 0x11
    420c:	82 30       	cpi	r24, 0x02	; 2
    420e:	28 f0       	brcs	.+10     	; 0x421a <__gesf2+0x56>
    4210:	c7 01       	movw	r24, r14
    4212:	b8 01       	movw	r22, r16
    4214:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <__fpcmp_parts_f>
    4218:	01 c0       	rjmp	.+2      	; 0x421c <__gesf2+0x58>
    421a:	8f ef       	ldi	r24, 0xFF	; 255
    421c:	68 96       	adiw	r28, 0x18	; 24
    421e:	e6 e0       	ldi	r30, 0x06	; 6
    4220:	0c 94 1b 3d 	jmp	0x7a36	; 0x7a36 <__epilogue_restores__+0x18>

00004224 <__fixsfsi>:
    4224:	ac e0       	ldi	r26, 0x0C	; 12
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	e8 e1       	ldi	r30, 0x18	; 24
    422a:	f1 e2       	ldi	r31, 0x21	; 33
    422c:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <__prologue_saves__+0x20>
    4230:	69 83       	std	Y+1, r22	; 0x01
    4232:	7a 83       	std	Y+2, r23	; 0x02
    4234:	8b 83       	std	Y+3, r24	; 0x03
    4236:	9c 83       	std	Y+4, r25	; 0x04
    4238:	ce 01       	movw	r24, r28
    423a:	01 96       	adiw	r24, 0x01	; 1
    423c:	be 01       	movw	r22, r28
    423e:	6b 5f       	subi	r22, 0xFB	; 251
    4240:	7f 4f       	sbci	r23, 0xFF	; 255
    4242:	0e 94 03 23 	call	0x4606	; 0x4606 <__unpack_f>
    4246:	8d 81       	ldd	r24, Y+5	; 0x05
    4248:	82 30       	cpi	r24, 0x02	; 2
    424a:	61 f1       	breq	.+88     	; 0x42a4 <__fixsfsi+0x80>
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	50 f1       	brcs	.+84     	; 0x42a4 <__fixsfsi+0x80>
    4250:	84 30       	cpi	r24, 0x04	; 4
    4252:	21 f4       	brne	.+8      	; 0x425c <__fixsfsi+0x38>
    4254:	8e 81       	ldd	r24, Y+6	; 0x06
    4256:	88 23       	and	r24, r24
    4258:	51 f1       	breq	.+84     	; 0x42ae <__fixsfsi+0x8a>
    425a:	2e c0       	rjmp	.+92     	; 0x42b8 <__fixsfsi+0x94>
    425c:	2f 81       	ldd	r18, Y+7	; 0x07
    425e:	38 85       	ldd	r19, Y+8	; 0x08
    4260:	37 fd       	sbrc	r19, 7
    4262:	20 c0       	rjmp	.+64     	; 0x42a4 <__fixsfsi+0x80>
    4264:	6e 81       	ldd	r22, Y+6	; 0x06
    4266:	2f 31       	cpi	r18, 0x1F	; 31
    4268:	31 05       	cpc	r19, r1
    426a:	1c f0       	brlt	.+6      	; 0x4272 <__fixsfsi+0x4e>
    426c:	66 23       	and	r22, r22
    426e:	f9 f0       	breq	.+62     	; 0x42ae <__fixsfsi+0x8a>
    4270:	23 c0       	rjmp	.+70     	; 0x42b8 <__fixsfsi+0x94>
    4272:	8e e1       	ldi	r24, 0x1E	; 30
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	82 1b       	sub	r24, r18
    4278:	93 0b       	sbc	r25, r19
    427a:	29 85       	ldd	r18, Y+9	; 0x09
    427c:	3a 85       	ldd	r19, Y+10	; 0x0a
    427e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4280:	5c 85       	ldd	r21, Y+12	; 0x0c
    4282:	04 c0       	rjmp	.+8      	; 0x428c <__fixsfsi+0x68>
    4284:	56 95       	lsr	r21
    4286:	47 95       	ror	r20
    4288:	37 95       	ror	r19
    428a:	27 95       	ror	r18
    428c:	8a 95       	dec	r24
    428e:	d2 f7       	brpl	.-12     	; 0x4284 <__fixsfsi+0x60>
    4290:	66 23       	and	r22, r22
    4292:	b1 f0       	breq	.+44     	; 0x42c0 <__fixsfsi+0x9c>
    4294:	50 95       	com	r21
    4296:	40 95       	com	r20
    4298:	30 95       	com	r19
    429a:	21 95       	neg	r18
    429c:	3f 4f       	sbci	r19, 0xFF	; 255
    429e:	4f 4f       	sbci	r20, 0xFF	; 255
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	0e c0       	rjmp	.+28     	; 0x42c0 <__fixsfsi+0x9c>
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	40 e0       	ldi	r20, 0x00	; 0
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	09 c0       	rjmp	.+18     	; 0x42c0 <__fixsfsi+0x9c>
    42ae:	2f ef       	ldi	r18, 0xFF	; 255
    42b0:	3f ef       	ldi	r19, 0xFF	; 255
    42b2:	4f ef       	ldi	r20, 0xFF	; 255
    42b4:	5f e7       	ldi	r21, 0x7F	; 127
    42b6:	04 c0       	rjmp	.+8      	; 0x42c0 <__fixsfsi+0x9c>
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	50 e8       	ldi	r21, 0x80	; 128
    42c0:	b9 01       	movw	r22, r18
    42c2:	ca 01       	movw	r24, r20
    42c4:	2c 96       	adiw	r28, 0x0c	; 12
    42c6:	e2 e0       	ldi	r30, 0x02	; 2
    42c8:	0c 94 1f 3d 	jmp	0x7a3e	; 0x7a3e <__epilogue_restores__+0x20>

000042cc <__floatunsisf>:
    42cc:	a8 e0       	ldi	r26, 0x08	; 8
    42ce:	b0 e0       	ldi	r27, 0x00	; 0
    42d0:	ec e6       	ldi	r30, 0x6C	; 108
    42d2:	f1 e2       	ldi	r31, 0x21	; 33
    42d4:	0c 94 fb 3c 	jmp	0x79f6	; 0x79f6 <__prologue_saves__+0x10>
    42d8:	7b 01       	movw	r14, r22
    42da:	8c 01       	movw	r16, r24
    42dc:	61 15       	cp	r22, r1
    42de:	71 05       	cpc	r23, r1
    42e0:	81 05       	cpc	r24, r1
    42e2:	91 05       	cpc	r25, r1
    42e4:	19 f4       	brne	.+6      	; 0x42ec <__floatunsisf+0x20>
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	89 83       	std	Y+1, r24	; 0x01
    42ea:	60 c0       	rjmp	.+192    	; 0x43ac <__floatunsisf+0xe0>
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	8e e1       	ldi	r24, 0x1E	; 30
    42f2:	c8 2e       	mov	r12, r24
    42f4:	d1 2c       	mov	r13, r1
    42f6:	dc 82       	std	Y+4, r13	; 0x04
    42f8:	cb 82       	std	Y+3, r12	; 0x03
    42fa:	ed 82       	std	Y+5, r14	; 0x05
    42fc:	fe 82       	std	Y+6, r15	; 0x06
    42fe:	0f 83       	std	Y+7, r16	; 0x07
    4300:	18 87       	std	Y+8, r17	; 0x08
    4302:	c8 01       	movw	r24, r16
    4304:	b7 01       	movw	r22, r14
    4306:	0e 94 df 21 	call	0x43be	; 0x43be <__clzsi2>
    430a:	fc 01       	movw	r30, r24
    430c:	31 97       	sbiw	r30, 0x01	; 1
    430e:	f7 ff       	sbrs	r31, 7
    4310:	3b c0       	rjmp	.+118    	; 0x4388 <__floatunsisf+0xbc>
    4312:	22 27       	eor	r18, r18
    4314:	33 27       	eor	r19, r19
    4316:	2e 1b       	sub	r18, r30
    4318:	3f 0b       	sbc	r19, r31
    431a:	57 01       	movw	r10, r14
    431c:	68 01       	movw	r12, r16
    431e:	02 2e       	mov	r0, r18
    4320:	04 c0       	rjmp	.+8      	; 0x432a <__floatunsisf+0x5e>
    4322:	d6 94       	lsr	r13
    4324:	c7 94       	ror	r12
    4326:	b7 94       	ror	r11
    4328:	a7 94       	ror	r10
    432a:	0a 94       	dec	r0
    432c:	d2 f7       	brpl	.-12     	; 0x4322 <__floatunsisf+0x56>
    432e:	40 e0       	ldi	r20, 0x00	; 0
    4330:	50 e0       	ldi	r21, 0x00	; 0
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	70 e0       	ldi	r23, 0x00	; 0
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	a0 e0       	ldi	r26, 0x00	; 0
    433c:	b0 e0       	ldi	r27, 0x00	; 0
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <__floatunsisf+0x7c>
    4340:	88 0f       	add	r24, r24
    4342:	99 1f       	adc	r25, r25
    4344:	aa 1f       	adc	r26, r26
    4346:	bb 1f       	adc	r27, r27
    4348:	2a 95       	dec	r18
    434a:	d2 f7       	brpl	.-12     	; 0x4340 <__floatunsisf+0x74>
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	a1 09       	sbc	r26, r1
    4350:	b1 09       	sbc	r27, r1
    4352:	8e 21       	and	r24, r14
    4354:	9f 21       	and	r25, r15
    4356:	a0 23       	and	r26, r16
    4358:	b1 23       	and	r27, r17
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	a1 05       	cpc	r26, r1
    435e:	b1 05       	cpc	r27, r1
    4360:	21 f0       	breq	.+8      	; 0x436a <__floatunsisf+0x9e>
    4362:	41 e0       	ldi	r20, 0x01	; 1
    4364:	50 e0       	ldi	r21, 0x00	; 0
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	4a 29       	or	r20, r10
    436c:	5b 29       	or	r21, r11
    436e:	6c 29       	or	r22, r12
    4370:	7d 29       	or	r23, r13
    4372:	4d 83       	std	Y+5, r20	; 0x05
    4374:	5e 83       	std	Y+6, r21	; 0x06
    4376:	6f 83       	std	Y+7, r22	; 0x07
    4378:	78 87       	std	Y+8, r23	; 0x08
    437a:	8e e1       	ldi	r24, 0x1E	; 30
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	8e 1b       	sub	r24, r30
    4380:	9f 0b       	sbc	r25, r31
    4382:	9c 83       	std	Y+4, r25	; 0x04
    4384:	8b 83       	std	Y+3, r24	; 0x03
    4386:	12 c0       	rjmp	.+36     	; 0x43ac <__floatunsisf+0xe0>
    4388:	30 97       	sbiw	r30, 0x00	; 0
    438a:	81 f0       	breq	.+32     	; 0x43ac <__floatunsisf+0xe0>
    438c:	0e 2e       	mov	r0, r30
    438e:	04 c0       	rjmp	.+8      	; 0x4398 <__floatunsisf+0xcc>
    4390:	ee 0c       	add	r14, r14
    4392:	ff 1c       	adc	r15, r15
    4394:	00 1f       	adc	r16, r16
    4396:	11 1f       	adc	r17, r17
    4398:	0a 94       	dec	r0
    439a:	d2 f7       	brpl	.-12     	; 0x4390 <__floatunsisf+0xc4>
    439c:	ed 82       	std	Y+5, r14	; 0x05
    439e:	fe 82       	std	Y+6, r15	; 0x06
    43a0:	0f 83       	std	Y+7, r16	; 0x07
    43a2:	18 87       	std	Y+8, r17	; 0x08
    43a4:	ce 1a       	sub	r12, r30
    43a6:	df 0a       	sbc	r13, r31
    43a8:	dc 82       	std	Y+4, r13	; 0x04
    43aa:	cb 82       	std	Y+3, r12	; 0x03
    43ac:	1a 82       	std	Y+2, r1	; 0x02
    43ae:	ce 01       	movw	r24, r28
    43b0:	01 96       	adiw	r24, 0x01	; 1
    43b2:	0e 94 2e 22 	call	0x445c	; 0x445c <__pack_f>
    43b6:	28 96       	adiw	r28, 0x08	; 8
    43b8:	ea e0       	ldi	r30, 0x0A	; 10
    43ba:	0c 94 17 3d 	jmp	0x7a2e	; 0x7a2e <__epilogue_restores__+0x10>

000043be <__clzsi2>:
    43be:	ef 92       	push	r14
    43c0:	ff 92       	push	r15
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	7b 01       	movw	r14, r22
    43c8:	8c 01       	movw	r16, r24
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	e8 16       	cp	r14, r24
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	f8 06       	cpc	r15, r24
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	08 07       	cpc	r16, r24
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	18 07       	cpc	r17, r24
    43da:	88 f4       	brcc	.+34     	; 0x43fe <__clzsi2+0x40>
    43dc:	8f ef       	ldi	r24, 0xFF	; 255
    43de:	e8 16       	cp	r14, r24
    43e0:	f1 04       	cpc	r15, r1
    43e2:	01 05       	cpc	r16, r1
    43e4:	11 05       	cpc	r17, r1
    43e6:	31 f0       	breq	.+12     	; 0x43f4 <__clzsi2+0x36>
    43e8:	28 f0       	brcs	.+10     	; 0x43f4 <__clzsi2+0x36>
    43ea:	88 e0       	ldi	r24, 0x08	; 8
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	a0 e0       	ldi	r26, 0x00	; 0
    43f0:	b0 e0       	ldi	r27, 0x00	; 0
    43f2:	17 c0       	rjmp	.+46     	; 0x4422 <__clzsi2+0x64>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	a0 e0       	ldi	r26, 0x00	; 0
    43fa:	b0 e0       	ldi	r27, 0x00	; 0
    43fc:	12 c0       	rjmp	.+36     	; 0x4422 <__clzsi2+0x64>
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	e8 16       	cp	r14, r24
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	f8 06       	cpc	r15, r24
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	08 07       	cpc	r16, r24
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	18 07       	cpc	r17, r24
    440e:	28 f0       	brcs	.+10     	; 0x441a <__clzsi2+0x5c>
    4410:	88 e1       	ldi	r24, 0x18	; 24
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e0       	ldi	r26, 0x00	; 0
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	04 c0       	rjmp	.+8      	; 0x4422 <__clzsi2+0x64>
    441a:	80 e1       	ldi	r24, 0x10	; 16
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	a0 e0       	ldi	r26, 0x00	; 0
    4420:	b0 e0       	ldi	r27, 0x00	; 0
    4422:	20 e2       	ldi	r18, 0x20	; 32
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e0       	ldi	r20, 0x00	; 0
    4428:	50 e0       	ldi	r21, 0x00	; 0
    442a:	28 1b       	sub	r18, r24
    442c:	39 0b       	sbc	r19, r25
    442e:	4a 0b       	sbc	r20, r26
    4430:	5b 0b       	sbc	r21, r27
    4432:	04 c0       	rjmp	.+8      	; 0x443c <__clzsi2+0x7e>
    4434:	16 95       	lsr	r17
    4436:	07 95       	ror	r16
    4438:	f7 94       	ror	r15
    443a:	e7 94       	ror	r14
    443c:	8a 95       	dec	r24
    443e:	d2 f7       	brpl	.-12     	; 0x4434 <__clzsi2+0x76>
    4440:	f7 01       	movw	r30, r14
    4442:	e3 59       	subi	r30, 0x93	; 147
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	28 1b       	sub	r18, r24
    444a:	31 09       	sbc	r19, r1
    444c:	41 09       	sbc	r20, r1
    444e:	51 09       	sbc	r21, r1
    4450:	c9 01       	movw	r24, r18
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	ff 90       	pop	r15
    4458:	ef 90       	pop	r14
    445a:	08 95       	ret

0000445c <__pack_f>:
    445c:	df 92       	push	r13
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	fc 01       	movw	r30, r24
    4468:	e4 80       	ldd	r14, Z+4	; 0x04
    446a:	f5 80       	ldd	r15, Z+5	; 0x05
    446c:	06 81       	ldd	r16, Z+6	; 0x06
    446e:	17 81       	ldd	r17, Z+7	; 0x07
    4470:	d1 80       	ldd	r13, Z+1	; 0x01
    4472:	80 81       	ld	r24, Z
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	48 f4       	brcc	.+18     	; 0x448a <__pack_f+0x2e>
    4478:	80 e0       	ldi	r24, 0x00	; 0
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	a0 e1       	ldi	r26, 0x10	; 16
    447e:	b0 e0       	ldi	r27, 0x00	; 0
    4480:	e8 2a       	or	r14, r24
    4482:	f9 2a       	or	r15, r25
    4484:	0a 2b       	or	r16, r26
    4486:	1b 2b       	or	r17, r27
    4488:	a5 c0       	rjmp	.+330    	; 0x45d4 <__pack_f+0x178>
    448a:	84 30       	cpi	r24, 0x04	; 4
    448c:	09 f4       	brne	.+2      	; 0x4490 <__pack_f+0x34>
    448e:	9f c0       	rjmp	.+318    	; 0x45ce <__pack_f+0x172>
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	21 f4       	brne	.+8      	; 0x449c <__pack_f+0x40>
    4494:	ee 24       	eor	r14, r14
    4496:	ff 24       	eor	r15, r15
    4498:	87 01       	movw	r16, r14
    449a:	05 c0       	rjmp	.+10     	; 0x44a6 <__pack_f+0x4a>
    449c:	e1 14       	cp	r14, r1
    449e:	f1 04       	cpc	r15, r1
    44a0:	01 05       	cpc	r16, r1
    44a2:	11 05       	cpc	r17, r1
    44a4:	19 f4       	brne	.+6      	; 0x44ac <__pack_f+0x50>
    44a6:	e0 e0       	ldi	r30, 0x00	; 0
    44a8:	f0 e0       	ldi	r31, 0x00	; 0
    44aa:	96 c0       	rjmp	.+300    	; 0x45d8 <__pack_f+0x17c>
    44ac:	62 81       	ldd	r22, Z+2	; 0x02
    44ae:	73 81       	ldd	r23, Z+3	; 0x03
    44b0:	9f ef       	ldi	r25, 0xFF	; 255
    44b2:	62 38       	cpi	r22, 0x82	; 130
    44b4:	79 07       	cpc	r23, r25
    44b6:	0c f0       	brlt	.+2      	; 0x44ba <__pack_f+0x5e>
    44b8:	5b c0       	rjmp	.+182    	; 0x4570 <__pack_f+0x114>
    44ba:	22 e8       	ldi	r18, 0x82	; 130
    44bc:	3f ef       	ldi	r19, 0xFF	; 255
    44be:	26 1b       	sub	r18, r22
    44c0:	37 0b       	sbc	r19, r23
    44c2:	2a 31       	cpi	r18, 0x1A	; 26
    44c4:	31 05       	cpc	r19, r1
    44c6:	2c f0       	brlt	.+10     	; 0x44d2 <__pack_f+0x76>
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	40 e0       	ldi	r20, 0x00	; 0
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	2a c0       	rjmp	.+84     	; 0x4526 <__pack_f+0xca>
    44d2:	b8 01       	movw	r22, r16
    44d4:	a7 01       	movw	r20, r14
    44d6:	02 2e       	mov	r0, r18
    44d8:	04 c0       	rjmp	.+8      	; 0x44e2 <__pack_f+0x86>
    44da:	76 95       	lsr	r23
    44dc:	67 95       	ror	r22
    44de:	57 95       	ror	r21
    44e0:	47 95       	ror	r20
    44e2:	0a 94       	dec	r0
    44e4:	d2 f7       	brpl	.-12     	; 0x44da <__pack_f+0x7e>
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	a0 e0       	ldi	r26, 0x00	; 0
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	04 c0       	rjmp	.+8      	; 0x44f8 <__pack_f+0x9c>
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	aa 1f       	adc	r26, r26
    44f6:	bb 1f       	adc	r27, r27
    44f8:	2a 95       	dec	r18
    44fa:	d2 f7       	brpl	.-12     	; 0x44f0 <__pack_f+0x94>
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	a1 09       	sbc	r26, r1
    4500:	b1 09       	sbc	r27, r1
    4502:	8e 21       	and	r24, r14
    4504:	9f 21       	and	r25, r15
    4506:	a0 23       	and	r26, r16
    4508:	b1 23       	and	r27, r17
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	a1 05       	cpc	r26, r1
    450e:	b1 05       	cpc	r27, r1
    4510:	21 f0       	breq	.+8      	; 0x451a <__pack_f+0xbe>
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	a0 e0       	ldi	r26, 0x00	; 0
    4518:	b0 e0       	ldi	r27, 0x00	; 0
    451a:	9a 01       	movw	r18, r20
    451c:	ab 01       	movw	r20, r22
    451e:	28 2b       	or	r18, r24
    4520:	39 2b       	or	r19, r25
    4522:	4a 2b       	or	r20, r26
    4524:	5b 2b       	or	r21, r27
    4526:	da 01       	movw	r26, r20
    4528:	c9 01       	movw	r24, r18
    452a:	8f 77       	andi	r24, 0x7F	; 127
    452c:	90 70       	andi	r25, 0x00	; 0
    452e:	a0 70       	andi	r26, 0x00	; 0
    4530:	b0 70       	andi	r27, 0x00	; 0
    4532:	80 34       	cpi	r24, 0x40	; 64
    4534:	91 05       	cpc	r25, r1
    4536:	a1 05       	cpc	r26, r1
    4538:	b1 05       	cpc	r27, r1
    453a:	39 f4       	brne	.+14     	; 0x454a <__pack_f+0xee>
    453c:	27 ff       	sbrs	r18, 7
    453e:	09 c0       	rjmp	.+18     	; 0x4552 <__pack_f+0xf6>
    4540:	20 5c       	subi	r18, 0xC0	; 192
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	4f 4f       	sbci	r20, 0xFF	; 255
    4546:	5f 4f       	sbci	r21, 0xFF	; 255
    4548:	04 c0       	rjmp	.+8      	; 0x4552 <__pack_f+0xf6>
    454a:	21 5c       	subi	r18, 0xC1	; 193
    454c:	3f 4f       	sbci	r19, 0xFF	; 255
    454e:	4f 4f       	sbci	r20, 0xFF	; 255
    4550:	5f 4f       	sbci	r21, 0xFF	; 255
    4552:	e0 e0       	ldi	r30, 0x00	; 0
    4554:	f0 e0       	ldi	r31, 0x00	; 0
    4556:	20 30       	cpi	r18, 0x00	; 0
    4558:	a0 e0       	ldi	r26, 0x00	; 0
    455a:	3a 07       	cpc	r19, r26
    455c:	a0 e0       	ldi	r26, 0x00	; 0
    455e:	4a 07       	cpc	r20, r26
    4560:	a0 e4       	ldi	r26, 0x40	; 64
    4562:	5a 07       	cpc	r21, r26
    4564:	10 f0       	brcs	.+4      	; 0x456a <__pack_f+0x10e>
    4566:	e1 e0       	ldi	r30, 0x01	; 1
    4568:	f0 e0       	ldi	r31, 0x00	; 0
    456a:	79 01       	movw	r14, r18
    456c:	8a 01       	movw	r16, r20
    456e:	27 c0       	rjmp	.+78     	; 0x45be <__pack_f+0x162>
    4570:	60 38       	cpi	r22, 0x80	; 128
    4572:	71 05       	cpc	r23, r1
    4574:	64 f5       	brge	.+88     	; 0x45ce <__pack_f+0x172>
    4576:	fb 01       	movw	r30, r22
    4578:	e1 58       	subi	r30, 0x81	; 129
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	d8 01       	movw	r26, r16
    457e:	c7 01       	movw	r24, r14
    4580:	8f 77       	andi	r24, 0x7F	; 127
    4582:	90 70       	andi	r25, 0x00	; 0
    4584:	a0 70       	andi	r26, 0x00	; 0
    4586:	b0 70       	andi	r27, 0x00	; 0
    4588:	80 34       	cpi	r24, 0x40	; 64
    458a:	91 05       	cpc	r25, r1
    458c:	a1 05       	cpc	r26, r1
    458e:	b1 05       	cpc	r27, r1
    4590:	39 f4       	brne	.+14     	; 0x45a0 <__pack_f+0x144>
    4592:	e7 fe       	sbrs	r14, 7
    4594:	0d c0       	rjmp	.+26     	; 0x45b0 <__pack_f+0x154>
    4596:	80 e4       	ldi	r24, 0x40	; 64
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	a0 e0       	ldi	r26, 0x00	; 0
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	04 c0       	rjmp	.+8      	; 0x45a8 <__pack_f+0x14c>
    45a0:	8f e3       	ldi	r24, 0x3F	; 63
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	a0 e0       	ldi	r26, 0x00	; 0
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e8 0e       	add	r14, r24
    45aa:	f9 1e       	adc	r15, r25
    45ac:	0a 1f       	adc	r16, r26
    45ae:	1b 1f       	adc	r17, r27
    45b0:	17 ff       	sbrs	r17, 7
    45b2:	05 c0       	rjmp	.+10     	; 0x45be <__pack_f+0x162>
    45b4:	16 95       	lsr	r17
    45b6:	07 95       	ror	r16
    45b8:	f7 94       	ror	r15
    45ba:	e7 94       	ror	r14
    45bc:	31 96       	adiw	r30, 0x01	; 1
    45be:	87 e0       	ldi	r24, 0x07	; 7
    45c0:	16 95       	lsr	r17
    45c2:	07 95       	ror	r16
    45c4:	f7 94       	ror	r15
    45c6:	e7 94       	ror	r14
    45c8:	8a 95       	dec	r24
    45ca:	d1 f7       	brne	.-12     	; 0x45c0 <__pack_f+0x164>
    45cc:	05 c0       	rjmp	.+10     	; 0x45d8 <__pack_f+0x17c>
    45ce:	ee 24       	eor	r14, r14
    45d0:	ff 24       	eor	r15, r15
    45d2:	87 01       	movw	r16, r14
    45d4:	ef ef       	ldi	r30, 0xFF	; 255
    45d6:	f0 e0       	ldi	r31, 0x00	; 0
    45d8:	6e 2f       	mov	r22, r30
    45da:	67 95       	ror	r22
    45dc:	66 27       	eor	r22, r22
    45de:	67 95       	ror	r22
    45e0:	90 2f       	mov	r25, r16
    45e2:	9f 77       	andi	r25, 0x7F	; 127
    45e4:	d7 94       	ror	r13
    45e6:	dd 24       	eor	r13, r13
    45e8:	d7 94       	ror	r13
    45ea:	8e 2f       	mov	r24, r30
    45ec:	86 95       	lsr	r24
    45ee:	49 2f       	mov	r20, r25
    45f0:	46 2b       	or	r20, r22
    45f2:	58 2f       	mov	r21, r24
    45f4:	5d 29       	or	r21, r13
    45f6:	b7 01       	movw	r22, r14
    45f8:	ca 01       	movw	r24, r20
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	08 95       	ret

00004606 <__unpack_f>:
    4606:	fc 01       	movw	r30, r24
    4608:	db 01       	movw	r26, r22
    460a:	40 81       	ld	r20, Z
    460c:	51 81       	ldd	r21, Z+1	; 0x01
    460e:	22 81       	ldd	r18, Z+2	; 0x02
    4610:	62 2f       	mov	r22, r18
    4612:	6f 77       	andi	r22, 0x7F	; 127
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	22 1f       	adc	r18, r18
    4618:	22 27       	eor	r18, r18
    461a:	22 1f       	adc	r18, r18
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	89 2f       	mov	r24, r25
    4620:	88 0f       	add	r24, r24
    4622:	82 2b       	or	r24, r18
    4624:	28 2f       	mov	r18, r24
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	99 1f       	adc	r25, r25
    462a:	99 27       	eor	r25, r25
    462c:	99 1f       	adc	r25, r25
    462e:	11 96       	adiw	r26, 0x01	; 1
    4630:	9c 93       	st	X, r25
    4632:	11 97       	sbiw	r26, 0x01	; 1
    4634:	21 15       	cp	r18, r1
    4636:	31 05       	cpc	r19, r1
    4638:	a9 f5       	brne	.+106    	; 0x46a4 <__unpack_f+0x9e>
    463a:	41 15       	cp	r20, r1
    463c:	51 05       	cpc	r21, r1
    463e:	61 05       	cpc	r22, r1
    4640:	71 05       	cpc	r23, r1
    4642:	11 f4       	brne	.+4      	; 0x4648 <__unpack_f+0x42>
    4644:	82 e0       	ldi	r24, 0x02	; 2
    4646:	37 c0       	rjmp	.+110    	; 0x46b6 <__unpack_f+0xb0>
    4648:	82 e8       	ldi	r24, 0x82	; 130
    464a:	9f ef       	ldi	r25, 0xFF	; 255
    464c:	13 96       	adiw	r26, 0x03	; 3
    464e:	9c 93       	st	X, r25
    4650:	8e 93       	st	-X, r24
    4652:	12 97       	sbiw	r26, 0x02	; 2
    4654:	9a 01       	movw	r18, r20
    4656:	ab 01       	movw	r20, r22
    4658:	67 e0       	ldi	r22, 0x07	; 7
    465a:	22 0f       	add	r18, r18
    465c:	33 1f       	adc	r19, r19
    465e:	44 1f       	adc	r20, r20
    4660:	55 1f       	adc	r21, r21
    4662:	6a 95       	dec	r22
    4664:	d1 f7       	brne	.-12     	; 0x465a <__unpack_f+0x54>
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	8c 93       	st	X, r24
    466a:	0d c0       	rjmp	.+26     	; 0x4686 <__unpack_f+0x80>
    466c:	22 0f       	add	r18, r18
    466e:	33 1f       	adc	r19, r19
    4670:	44 1f       	adc	r20, r20
    4672:	55 1f       	adc	r21, r21
    4674:	12 96       	adiw	r26, 0x02	; 2
    4676:	8d 91       	ld	r24, X+
    4678:	9c 91       	ld	r25, X
    467a:	13 97       	sbiw	r26, 0x03	; 3
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	13 96       	adiw	r26, 0x03	; 3
    4680:	9c 93       	st	X, r25
    4682:	8e 93       	st	-X, r24
    4684:	12 97       	sbiw	r26, 0x02	; 2
    4686:	20 30       	cpi	r18, 0x00	; 0
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	38 07       	cpc	r19, r24
    468c:	80 e0       	ldi	r24, 0x00	; 0
    468e:	48 07       	cpc	r20, r24
    4690:	80 e4       	ldi	r24, 0x40	; 64
    4692:	58 07       	cpc	r21, r24
    4694:	58 f3       	brcs	.-42     	; 0x466c <__unpack_f+0x66>
    4696:	14 96       	adiw	r26, 0x04	; 4
    4698:	2d 93       	st	X+, r18
    469a:	3d 93       	st	X+, r19
    469c:	4d 93       	st	X+, r20
    469e:	5c 93       	st	X, r21
    46a0:	17 97       	sbiw	r26, 0x07	; 7
    46a2:	08 95       	ret
    46a4:	2f 3f       	cpi	r18, 0xFF	; 255
    46a6:	31 05       	cpc	r19, r1
    46a8:	79 f4       	brne	.+30     	; 0x46c8 <__unpack_f+0xc2>
    46aa:	41 15       	cp	r20, r1
    46ac:	51 05       	cpc	r21, r1
    46ae:	61 05       	cpc	r22, r1
    46b0:	71 05       	cpc	r23, r1
    46b2:	19 f4       	brne	.+6      	; 0x46ba <__unpack_f+0xb4>
    46b4:	84 e0       	ldi	r24, 0x04	; 4
    46b6:	8c 93       	st	X, r24
    46b8:	08 95       	ret
    46ba:	64 ff       	sbrs	r22, 4
    46bc:	03 c0       	rjmp	.+6      	; 0x46c4 <__unpack_f+0xbe>
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	8c 93       	st	X, r24
    46c2:	12 c0       	rjmp	.+36     	; 0x46e8 <__unpack_f+0xe2>
    46c4:	1c 92       	st	X, r1
    46c6:	10 c0       	rjmp	.+32     	; 0x46e8 <__unpack_f+0xe2>
    46c8:	2f 57       	subi	r18, 0x7F	; 127
    46ca:	30 40       	sbci	r19, 0x00	; 0
    46cc:	13 96       	adiw	r26, 0x03	; 3
    46ce:	3c 93       	st	X, r19
    46d0:	2e 93       	st	-X, r18
    46d2:	12 97       	sbiw	r26, 0x02	; 2
    46d4:	83 e0       	ldi	r24, 0x03	; 3
    46d6:	8c 93       	st	X, r24
    46d8:	87 e0       	ldi	r24, 0x07	; 7
    46da:	44 0f       	add	r20, r20
    46dc:	55 1f       	adc	r21, r21
    46de:	66 1f       	adc	r22, r22
    46e0:	77 1f       	adc	r23, r23
    46e2:	8a 95       	dec	r24
    46e4:	d1 f7       	brne	.-12     	; 0x46da <__unpack_f+0xd4>
    46e6:	70 64       	ori	r23, 0x40	; 64
    46e8:	14 96       	adiw	r26, 0x04	; 4
    46ea:	4d 93       	st	X+, r20
    46ec:	5d 93       	st	X+, r21
    46ee:	6d 93       	st	X+, r22
    46f0:	7c 93       	st	X, r23
    46f2:	17 97       	sbiw	r26, 0x07	; 7
    46f4:	08 95       	ret

000046f6 <__fpcmp_parts_f>:
    46f6:	1f 93       	push	r17
    46f8:	dc 01       	movw	r26, r24
    46fa:	fb 01       	movw	r30, r22
    46fc:	9c 91       	ld	r25, X
    46fe:	92 30       	cpi	r25, 0x02	; 2
    4700:	08 f4       	brcc	.+2      	; 0x4704 <__fpcmp_parts_f+0xe>
    4702:	47 c0       	rjmp	.+142    	; 0x4792 <__fpcmp_parts_f+0x9c>
    4704:	80 81       	ld	r24, Z
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	08 f4       	brcc	.+2      	; 0x470c <__fpcmp_parts_f+0x16>
    470a:	43 c0       	rjmp	.+134    	; 0x4792 <__fpcmp_parts_f+0x9c>
    470c:	94 30       	cpi	r25, 0x04	; 4
    470e:	51 f4       	brne	.+20     	; 0x4724 <__fpcmp_parts_f+0x2e>
    4710:	11 96       	adiw	r26, 0x01	; 1
    4712:	1c 91       	ld	r17, X
    4714:	84 30       	cpi	r24, 0x04	; 4
    4716:	99 f5       	brne	.+102    	; 0x477e <__fpcmp_parts_f+0x88>
    4718:	81 81       	ldd	r24, Z+1	; 0x01
    471a:	68 2f       	mov	r22, r24
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	61 1b       	sub	r22, r17
    4720:	71 09       	sbc	r23, r1
    4722:	3f c0       	rjmp	.+126    	; 0x47a2 <__fpcmp_parts_f+0xac>
    4724:	84 30       	cpi	r24, 0x04	; 4
    4726:	21 f0       	breq	.+8      	; 0x4730 <__fpcmp_parts_f+0x3a>
    4728:	92 30       	cpi	r25, 0x02	; 2
    472a:	31 f4       	brne	.+12     	; 0x4738 <__fpcmp_parts_f+0x42>
    472c:	82 30       	cpi	r24, 0x02	; 2
    472e:	b9 f1       	breq	.+110    	; 0x479e <__fpcmp_parts_f+0xa8>
    4730:	81 81       	ldd	r24, Z+1	; 0x01
    4732:	88 23       	and	r24, r24
    4734:	89 f1       	breq	.+98     	; 0x4798 <__fpcmp_parts_f+0xa2>
    4736:	2d c0       	rjmp	.+90     	; 0x4792 <__fpcmp_parts_f+0x9c>
    4738:	11 96       	adiw	r26, 0x01	; 1
    473a:	1c 91       	ld	r17, X
    473c:	11 97       	sbiw	r26, 0x01	; 1
    473e:	82 30       	cpi	r24, 0x02	; 2
    4740:	f1 f0       	breq	.+60     	; 0x477e <__fpcmp_parts_f+0x88>
    4742:	81 81       	ldd	r24, Z+1	; 0x01
    4744:	18 17       	cp	r17, r24
    4746:	d9 f4       	brne	.+54     	; 0x477e <__fpcmp_parts_f+0x88>
    4748:	12 96       	adiw	r26, 0x02	; 2
    474a:	2d 91       	ld	r18, X+
    474c:	3c 91       	ld	r19, X
    474e:	13 97       	sbiw	r26, 0x03	; 3
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	82 17       	cp	r24, r18
    4756:	93 07       	cpc	r25, r19
    4758:	94 f0       	brlt	.+36     	; 0x477e <__fpcmp_parts_f+0x88>
    475a:	28 17       	cp	r18, r24
    475c:	39 07       	cpc	r19, r25
    475e:	bc f0       	brlt	.+46     	; 0x478e <__fpcmp_parts_f+0x98>
    4760:	14 96       	adiw	r26, 0x04	; 4
    4762:	8d 91       	ld	r24, X+
    4764:	9d 91       	ld	r25, X+
    4766:	0d 90       	ld	r0, X+
    4768:	bc 91       	ld	r27, X
    476a:	a0 2d       	mov	r26, r0
    476c:	24 81       	ldd	r18, Z+4	; 0x04
    476e:	35 81       	ldd	r19, Z+5	; 0x05
    4770:	46 81       	ldd	r20, Z+6	; 0x06
    4772:	57 81       	ldd	r21, Z+7	; 0x07
    4774:	28 17       	cp	r18, r24
    4776:	39 07       	cpc	r19, r25
    4778:	4a 07       	cpc	r20, r26
    477a:	5b 07       	cpc	r21, r27
    477c:	18 f4       	brcc	.+6      	; 0x4784 <__fpcmp_parts_f+0x8e>
    477e:	11 23       	and	r17, r17
    4780:	41 f0       	breq	.+16     	; 0x4792 <__fpcmp_parts_f+0x9c>
    4782:	0a c0       	rjmp	.+20     	; 0x4798 <__fpcmp_parts_f+0xa2>
    4784:	82 17       	cp	r24, r18
    4786:	93 07       	cpc	r25, r19
    4788:	a4 07       	cpc	r26, r20
    478a:	b5 07       	cpc	r27, r21
    478c:	40 f4       	brcc	.+16     	; 0x479e <__fpcmp_parts_f+0xa8>
    478e:	11 23       	and	r17, r17
    4790:	19 f0       	breq	.+6      	; 0x4798 <__fpcmp_parts_f+0xa2>
    4792:	61 e0       	ldi	r22, 0x01	; 1
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	05 c0       	rjmp	.+10     	; 0x47a2 <__fpcmp_parts_f+0xac>
    4798:	6f ef       	ldi	r22, 0xFF	; 255
    479a:	7f ef       	ldi	r23, 0xFF	; 255
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <__fpcmp_parts_f+0xac>
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	70 e0       	ldi	r23, 0x00	; 0
    47a2:	cb 01       	movw	r24, r22
    47a4:	1f 91       	pop	r17
    47a6:	08 95       	ret

000047a8 <USART_voidInit>:
	/* Calculate the baud rate from the equation*/
	u16 Local_u16UBR= (u16)(SYSTEM_FREQUENCY / (16*USART_BAUD_RATE) - 1);

	/* Set Baud Rate */
	/* Write in UBRRH then UBRRL */
	UBRRH = (u8)(Local_u16UBR>>8);
    47a8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)(Local_u16UBR);
    47aa:	83 e3       	ldi	r24, 0x33	; 51
    47ac:	89 b9       	out	0x09, r24	; 9

	/************* Check 3 Modes ***************/
	#if ( (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1))
		CLR_BIT(UCSRA,UCSRA_U2X);
    47ae:	59 98       	cbi	0x0b, 1	; 11
	#endif


	/* Multi_processor Mode */
	#if USART_MPCM	== DISABLE
			CLR_BIT(UCSRA,UCSRA_MPCM);
    47b0:	58 98       	cbi	0x0b, 0	; 11

	/*Set Data Size*/
	#if	UART_DATA_SIZE == DATA_SIZE_5_BIT
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
			CLR_BIT(UCSRB,UCSRB_UCSZ2);
    47b2:	52 98       	cbi	0x0a, 2	; 10
	#else
		#error "WRONG USART_CLOCK_POLARITY configuration parameters"
	#endif

	/* Store the local variable in UCSRC Register*/
	UCSRC = Local_u8UCSRC;
    47b4:	10 bc       	out	0x20, r1	; 32

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXCIE);
	#elif USART_TX_COMPLETE_INTERRUPT == ENABLE
			SET_BIT(UCSRB,UCSRB_TXCIE);
    47b6:	56 9a       	sbi	0x0a, 6	; 10
	#else
		#error "WRONG USART_TX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    47b8:	57 98       	cbi	0x0a, 7	; 10
	#else
		#error "WRONG USART_RX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    47ba:	55 98       	cbi	0x0a, 5	; 10
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXEN);
	#elif USART_RECEIVER_ENABLE == ENABLE
			SET_BIT(UCSRB,UCSRB_RXEN);
    47bc:	54 9a       	sbi	0x0a, 4	; 10
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXEN);
	#elif USART_TRANSMITTER_ENABLE == ENABLE
			SET_BIT(UCSRB,UCSRB_TXEN);
    47be:	53 9a       	sbi	0x0a, 3	; 10
	#else
		#error "WRONG USART_TRANSMITTER_ENABLE configuration parameters"
	#endif

}
    47c0:	08 95       	ret

000047c2 <USART_u8SendData>:

u8 USART_u8SendData(u8 copy_u8Data)
{
    47c2:	28 2f       	mov	r18, r24
	u8 Local_u8ErrorState = E_OK;
	u32 Local_u32TimeoutCounter = 0;

	if(USART_u8State == IDLE )
    47c4:	80 91 82 01 	lds	r24, 0x0182
    47c8:	88 23       	and	r24, r24
    47ca:	11 f0       	breq	.+4      	; 0x47d0 <USART_u8SendData+0xe>
    47cc:	84 e0       	ldi	r24, 0x04	; 4
    47ce:	08 95       	ret
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	07 c0       	rjmp	.+14     	; 0x47e4 <USART_u8SendData+0x22>
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
		{
			Local_u32TimeoutCounter++;
    47d6:	01 96       	adiw	r24, 0x01	; 1

	if(USART_u8State == IDLE )
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
    47d8:	37 e2       	ldi	r19, 0x27	; 39
    47da:	80 31       	cpi	r24, 0x10	; 16
    47dc:	93 07       	cpc	r25, r19
    47de:	11 f4       	brne	.+4      	; 0x47e4 <USART_u8SendData+0x22>
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	06 c0       	rjmp	.+12     	; 0x47f0 <USART_u8SendData+0x2e>
    47e4:	5d 9b       	sbis	0x0b, 5	; 11
    47e6:	f7 cf       	rjmp	.-18     	; 0x47d6 <USART_u8SendData+0x14>
    47e8:	06 c0       	rjmp	.+12     	; 0x47f6 <USART_u8SendData+0x34>
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
			while(GET_BIT(UCSRA,UCSRA_TXC) == 0);
    47ea:	5e 9b       	sbis	0x0b, 6	; 11
    47ec:	fe cf       	rjmp	.-4      	; 0x47ea <USART_u8SendData+0x28>
    47ee:	80 e0       	ldi	r24, 0x00	; 0
		}

		USART_u8State = IDLE;
    47f0:	10 92 82 01 	sts	0x0182, r1
		Local_u8ErrorState = E_NOK_BUSY;
	}

	return Local_u8ErrorState;

}
    47f4:	08 95       	ret
		{
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
    47f6:	2c b9       	out	0x0c, r18	; 12
    47f8:	f8 cf       	rjmp	.-16     	; 0x47ea <USART_u8SendData+0x28>

000047fa <USART_u8RecevieData>:
	return Local_u8ErrorState;

}

u8 USART_u8RecevieData(u8 * Copy_u8ReceviedData)
{
    47fa:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK;
		u32 Local_u32TimeoutCounter = 0;

		if(USART_u8State == IDLE )
    47fc:	80 91 82 01 	lds	r24, 0x0182
    4800:	88 23       	and	r24, r24
    4802:	11 f0       	breq	.+4      	; 0x4808 <USART_u8RecevieData+0xe>
    4804:	84 e0       	ldi	r24, 0x04	; 4
    4806:	08 95       	ret
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	05 c0       	rjmp	.+10     	; 0x4818 <USART_u8RecevieData+0x1e>
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
			{
				Local_u32TimeoutCounter++;
    480e:	01 96       	adiw	r24, 0x01	; 1

		if(USART_u8State == IDLE )
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
    4810:	27 e2       	ldi	r18, 0x27	; 39
    4812:	80 31       	cpi	r24, 0x10	; 16
    4814:	92 07       	cpc	r25, r18
    4816:	19 f0       	breq	.+6      	; 0x481e <USART_u8RecevieData+0x24>
    4818:	5f 9b       	sbis	0x0b, 7	; 11
    481a:	f9 cf       	rjmp	.-14     	; 0x480e <USART_u8RecevieData+0x14>
    481c:	04 c0       	rjmp	.+8      	; 0x4826 <USART_u8RecevieData+0x2c>
    481e:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				*Copy_u8ReceviedData = UDR;
			}

			USART_u8State = IDLE;
    4820:	10 92 82 01 	sts	0x0182, r1
			Local_u8ErrorState = E_NOK_BUSY;
		}

		return Local_u8ErrorState;

}
    4824:	08 95       	ret
			{
				Local_u8ErrorState= E_NOK;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
    4826:	8c b1       	in	r24, 0x0c	; 12
    4828:	80 83       	st	Z, r24
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	f9 cf       	rjmp	.-14     	; 0x4820 <USART_u8RecevieData+0x26>

0000482e <USART_u8SendStringSynch>:

		return Local_u8ErrorState;

}
u8 USART_u8SendStringSynch(const u8 * Copy_pchString)
{
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	11 f4       	brne	.+4      	; 0x483a <USART_u8SendStringSynch+0xc>
    4836:	82 e0       	ldi	r24, 0x02	; 2
    4838:	0a c0       	rjmp	.+20     	; 0x484e <USART_u8SendStringSynch+0x20>
    483a:	ec 01       	movw	r28, r24
    483c:	05 c0       	rjmp	.+10     	; 0x4848 <USART_u8SendStringSynch+0x1a>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    483e:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <USART_u8SendData>
    4842:	21 96       	adiw	r28, 0x01	; 1
			Local_u32Index++ ;
			if (Local_u8ErrorState != E_OK)
    4844:	88 23       	and	r24, r24
    4846:	19 f4       	brne	.+6      	; 0x484e <USART_u8SendStringSynch+0x20>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    4848:	88 81       	ld	r24, Y
    484a:	88 23       	and	r24, r24
    484c:	c1 f7       	brne	.-16     	; 0x483e <USART_u8SendStringSynch+0x10>
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	08 95       	ret

00004854 <USART_u8SendStringAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendStringAsynch(const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    4854:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    4856:	80 91 82 01 	lds	r24, 0x0182
    485a:	88 23       	and	r24, r24
    485c:	11 f0       	breq	.+4      	; 0x4862 <USART_u8SendStringAsynch+0xe>
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4862:	30 97       	sbiw	r30, 0x00	; 0
    4864:	a9 f0       	breq	.+42     	; 0x4890 <USART_u8SendStringAsynch+0x3c>
    4866:	61 15       	cp	r22, r1
    4868:	71 05       	cpc	r23, r1
    486a:	91 f0       	breq	.+36     	; 0x4890 <USART_u8SendStringAsynch+0x3c>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	80 93 82 01 	sts	0x0182, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString ;
    4872:	f0 93 81 01 	sts	0x0181, r31
    4876:	e0 93 80 01 	sts	0x0180, r30
			USART_pvNotificationFunc = NotificationFunc ;
    487a:	70 93 84 01 	sts	0x0184, r23
    487e:	60 93 83 01 	sts	0x0183, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    4882:	10 92 88 01 	sts	0x0188, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index] ;
    4886:	80 81       	ld	r24, Z
    4888:	8c b9       	out	0x0c, r24	; 12

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    488a:	56 9a       	sbi	0x0a, 6	; 10
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4890:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4892:	08 95       	ret

00004894 <USART_u8ReceiveBufferSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferSynch(u8 * Copy_pchString , u32 Copy_u32BufferSize)
{
    4894:	ef 92       	push	r14
    4896:	ff 92       	push	r15
    4898:	0f 93       	push	r16
    489a:	1f 93       	push	r17
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	8c 01       	movw	r16, r24
    48a2:	7b 01       	movw	r14, r22
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    48a4:	00 97       	sbiw	r24, 0x00	; 0
    48a6:	11 f4       	brne	.+4      	; 0x48ac <USART_u8ReceiveBufferSynch+0x18>
    48a8:	82 e0       	ldi	r24, 0x02	; 2
    48aa:	0f c0       	rjmp	.+30     	; 0x48ca <USART_u8ReceiveBufferSynch+0x36>
    48ac:	c0 e0       	ldi	r28, 0x00	; 0
    48ae:	d0 e0       	ldi	r29, 0x00	; 0
    48b0:	08 c0       	rjmp	.+16     	; 0x48c2 <USART_u8ReceiveBufferSynch+0x2e>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    48b2:	c8 01       	movw	r24, r16
    48b4:	8c 0f       	add	r24, r28
    48b6:	9d 1f       	adc	r25, r29
    48b8:	0e 94 fd 23 	call	0x47fa	; 0x47fa <USART_u8RecevieData>
			Local_u32Index++ ;

			if (Local_u8ErrorState != E_OK)
    48bc:	88 23       	and	r24, r24
    48be:	29 f4       	brne	.+10     	; 0x48ca <USART_u8ReceiveBufferSynch+0x36>
	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
			Local_u32Index++ ;
    48c0:	21 96       	adiw	r28, 0x01	; 1

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    48c2:	ce 15       	cp	r28, r14
    48c4:	df 05       	cpc	r29, r15
    48c6:	a8 f3       	brcs	.-22     	; 0x48b2 <USART_u8ReceiveBufferSynch+0x1e>
    48c8:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    48ca:	df 91       	pop	r29
    48cc:	cf 91       	pop	r28
    48ce:	1f 91       	pop	r17
    48d0:	0f 91       	pop	r16
    48d2:	ff 90       	pop	r15
    48d4:	ef 90       	pop	r14
    48d6:	08 95       	ret

000048d8 <USART_u8ReceiveBufferAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferAsynch(u8 * Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    48d8:	9c 01       	movw	r18, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    48da:	80 91 82 01 	lds	r24, 0x0182
    48de:	88 23       	and	r24, r24
    48e0:	11 f0       	breq	.+4      	; 0x48e6 <USART_u8ReceiveBufferAsynch+0xe>
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    48e6:	21 15       	cp	r18, r1
    48e8:	31 05       	cpc	r19, r1
    48ea:	a9 f0       	breq	.+42     	; 0x4916 <USART_u8ReceiveBufferAsynch+0x3e>
    48ec:	41 15       	cp	r20, r1
    48ee:	51 05       	cpc	r21, r1
    48f0:	91 f0       	breq	.+36     	; 0x4916 <USART_u8ReceiveBufferAsynch+0x3e>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	80 93 82 01 	sts	0x0182, r24

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString ;
    48f8:	30 93 86 01 	sts	0x0186, r19
    48fc:	20 93 85 01 	sts	0x0185, r18
			USART_pvNotificationFunc = NotificationFunc ;
    4900:	50 93 84 01 	sts	0x0184, r21
    4904:	40 93 83 01 	sts	0x0183, r20
			USART_u8BufferSize = Copy_u32BufferSize;
    4908:	60 93 87 01 	sts	0x0187, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    490c:	10 92 88 01 	sts	0x0188, r1

			/*USART Recieve Interrupt Enable */
			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    4910:	57 9a       	sbi	0x0a, 7	; 10
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4916:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4918:	08 95       	ret

0000491a <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    491a:	1f 92       	push	r1
    491c:	0f 92       	push	r0
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	0f 92       	push	r0
    4922:	11 24       	eor	r1, r1
    4924:	2f 93       	push	r18
    4926:	3f 93       	push	r19
    4928:	4f 93       	push	r20
    492a:	5f 93       	push	r21
    492c:	6f 93       	push	r22
    492e:	7f 93       	push	r23
    4930:	8f 93       	push	r24
    4932:	9f 93       	push	r25
    4934:	af 93       	push	r26
    4936:	bf 93       	push	r27
    4938:	ef 93       	push	r30
    493a:	ff 93       	push	r31
		/*Receive next Data*/
		USART_pu8ReceiveData[USART_u8Index] = UDR ;
    493c:	90 91 88 01 	lds	r25, 0x0188
    4940:	8c b1       	in	r24, 0x0c	; 12
    4942:	e0 91 85 01 	lds	r30, 0x0185
    4946:	f0 91 86 01 	lds	r31, 0x0186
    494a:	e9 0f       	add	r30, r25
    494c:	f1 1d       	adc	r31, r1
    494e:	80 83       	st	Z, r24

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    4950:	9f 5f       	subi	r25, 0xFF	; 255
    4952:	90 93 88 01 	sts	0x0188, r25

		if (USART_u8Index == USART_u8BufferSize)
    4956:	80 91 87 01 	lds	r24, 0x0187
    495a:	98 17       	cp	r25, r24
    495c:	51 f4       	brne	.+20     	; 0x4972 <__vector_13+0x58>
		{
			/*Send Data Complete*/

			USART_u8Index=0;
    495e:	10 92 88 01 	sts	0x0188, r1
			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    4962:	10 92 82 01 	sts	0x0182, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    4966:	e0 91 83 01 	lds	r30, 0x0183
    496a:	f0 91 84 01 	lds	r31, 0x0184
    496e:	09 95       	icall

			/*USART Recieve Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    4970:	57 98       	cbi	0x0a, 7	; 10
		else
		{
			/*Do Noting*/
		}

}
    4972:	ff 91       	pop	r31
    4974:	ef 91       	pop	r30
    4976:	bf 91       	pop	r27
    4978:	af 91       	pop	r26
    497a:	9f 91       	pop	r25
    497c:	8f 91       	pop	r24
    497e:	7f 91       	pop	r23
    4980:	6f 91       	pop	r22
    4982:	5f 91       	pop	r21
    4984:	4f 91       	pop	r20
    4986:	3f 91       	pop	r19
    4988:	2f 91       	pop	r18
    498a:	0f 90       	pop	r0
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	0f 90       	pop	r0
    4990:	1f 90       	pop	r1
    4992:	18 95       	reti

00004994 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	2f 93       	push	r18
    49a0:	3f 93       	push	r19
    49a2:	4f 93       	push	r20
    49a4:	5f 93       	push	r21
    49a6:	6f 93       	push	r22
    49a8:	7f 93       	push	r23
    49aa:	8f 93       	push	r24
    49ac:	9f 93       	push	r25
    49ae:	af 93       	push	r26
    49b0:	bf 93       	push	r27
    49b2:	ef 93       	push	r30
    49b4:	ff 93       	push	r31

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    49b6:	80 91 88 01 	lds	r24, 0x0188
    49ba:	8f 5f       	subi	r24, 0xFF	; 255
    49bc:	80 93 88 01 	sts	0x0188, r24

		if (USART_pu8SendData[USART_u8Index] == '\0')
    49c0:	e0 91 80 01 	lds	r30, 0x0180
    49c4:	f0 91 81 01 	lds	r31, 0x0181
    49c8:	e8 0f       	add	r30, r24
    49ca:	f1 1d       	adc	r31, r1
    49cc:	e0 81       	ld	r30, Z
    49ce:	ee 23       	and	r30, r30
    49d0:	59 f4       	brne	.+22     	; 0x49e8 <__vector_15+0x54>
		{
			/*Receive Data Complete*/
			USART_u8Index=0;
    49d2:	10 92 88 01 	sts	0x0188, r1

			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    49d6:	10 92 82 01 	sts	0x0182, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    49da:	e0 91 83 01 	lds	r30, 0x0183
    49de:	f0 91 84 01 	lds	r31, 0x0184
    49e2:	09 95       	icall

			/*USART Transmit Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    49e4:	56 98       	cbi	0x0a, 6	; 10
    49e6:	01 c0       	rjmp	.+2      	; 0x49ea <__vector_15+0x56>
		}
		else
		{
			/*Send Data not Complete*/
			/*Send next Data*/
			UDR = USART_pu8SendData[USART_u8Index] ;
    49e8:	ec b9       	out	0x0c, r30	; 12
		}

}
    49ea:	ff 91       	pop	r31
    49ec:	ef 91       	pop	r30
    49ee:	bf 91       	pop	r27
    49f0:	af 91       	pop	r26
    49f2:	9f 91       	pop	r25
    49f4:	8f 91       	pop	r24
    49f6:	7f 91       	pop	r23
    49f8:	6f 91       	pop	r22
    49fa:	5f 91       	pop	r21
    49fc:	4f 91       	pop	r20
    49fe:	3f 91       	pop	r19
    4a00:	2f 91       	pop	r18
    4a02:	0f 90       	pop	r0
    4a04:	0f be       	out	0x3f, r0	; 63
    4a06:	0f 90       	pop	r0
    4a08:	1f 90       	pop	r1
    4a0a:	18 95       	reti

00004a0c <TIMER0_voidInit>:
{
	/*Set Configurable Modes*/
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

		/*Initialize Waveform Generation Mode as Normal Mode*/
		CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    4a0c:	83 b7       	in	r24, 0x33	; 51
    4a0e:	8f 7b       	andi	r24, 0xBF	; 191
    4a10:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    4a12:	83 b7       	in	r24, 0x33	; 51
    4a14:	87 7f       	andi	r24, 0xF7	; 247
    4a16:	83 bf       	out	0x33, r24	; 51

		/*Set the Required Preload Value*/
		TCNT0 = TIMER0_PRELOAD_VAL ;
    4a18:	12 be       	out	0x32, r1	; 50

		/*Timer0 Overflow Interrupt Enable*/
		#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
			CLR_BIT(TIMSK , TIMSK_TOIE0) ;
		#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
			SET_BIT(TIMSK , TIMSK_TOIE0) ;
    4a1a:	89 b7       	in	r24, 0x39	; 57
    4a1c:	81 60       	ori	r24, 0x01	; 1
    4a1e:	89 bf       	out	0x39, r24	; 57
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

	#endif

		/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    4a20:	83 b7       	in	r24, 0x33	; 51
    4a22:	88 7f       	andi	r24, 0xF8	; 248
    4a24:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    4a26:	83 b7       	in	r24, 0x33	; 51
    4a28:	84 60       	ori	r24, 0x04	; 4
    4a2a:	83 bf       	out	0x33, r24	; 51
}
    4a2c:	08 95       	ret

00004a2e <TIMER0_voidSetPreload>:

void TIMER0_voidSetPreload(u8 copy_u8Preload)
{
	TCNT0 = copy_u8Preload ;
    4a2e:	82 bf       	out	0x32, r24	; 50
}
    4a30:	08 95       	ret

00004a32 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC(u8 copy_u8CTC)
{
	OCR0 = copy_u8CTC ;
    4a32:	8c bf       	out	0x3c, r24	; 60
}
    4a34:	08 95       	ret

00004a36 <TIMER0_voidSetFastPWM>:
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
	#endif
}
    4a36:	08 95       	ret

00004a38 <TIMER0_voidSetPhaseCorrectPWM>:
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
	#endif
}
    4a38:	08 95       	ret

00004a3a <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue(void)
{

	return TCNT0 ;
    4a3a:	82 b7       	in	r24, 0x32	; 50
}
    4a3c:	08 95       	ret

00004a3e <TIMER1_voidInit>:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
		SET_BIT(TCCR1A,TCCR1A_WGM11);
		SET_BIT(TCCR1B,TCCR1B_WGM12);
		SET_BIT(TCCR1B,TCCR1B_WGM13);
	#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4a3e:	8f b5       	in	r24, 0x2f	; 47
    4a40:	8e 7f       	andi	r24, 0xFE	; 254
    4a42:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    4a44:	8f b5       	in	r24, 0x2f	; 47
    4a46:	82 60       	ori	r24, 0x02	; 2
    4a48:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    4a4a:	8e b5       	in	r24, 0x2e	; 46
    4a4c:	88 60       	ori	r24, 0x08	; 8
    4a4e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    4a50:	8e b5       	in	r24, 0x2e	; 46
    4a52:	80 61       	ori	r24, 0x10	; 16
    4a54:	8e bd       	out	0x2e, r24	; 46
	#else
	#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
	#endif

	/*Set the require CTC Values*/
	OCR1AL = (u8)TIMER1_CTCA_VAL ;
    4a56:	84 ef       	ldi	r24, 0xF4	; 244
    4a58:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (TIMER1_CTCA_VAL>>8) ;
    4a5a:	8b b5       	in	r24, 0x2b	; 43
    4a5c:	81 60       	ori	r24, 0x01	; 1
    4a5e:	8b bd       	out	0x2b, r24	; 43

	OCR1BL = TIMER1_CTCB_VAL ;
    4a60:	18 bc       	out	0x28, r1	; 40
	OCR1BH |= (TIMER1_CTCB_VAL>>8) ;
    4a62:	89 b5       	in	r24, 0x29	; 41
    4a64:	89 bd       	out	0x29, r24	; 41
		/*Set ICR1*/
	#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		ICR1L = (u8)TIMER1_ICR1_VAL ;
    4a66:	80 e2       	ldi	r24, 0x20	; 32
    4a68:	86 bd       	out	0x26, r24	; 38
		ICR1H = (TIMER1_ICR1_VAL>>8) ;
    4a6a:	8e e4       	ldi	r24, 0x4E	; 78
    4a6c:	87 bd       	out	0x27, r24	; 39
		#if TIMER1_ICR_EDGE == RISING_EDGE
			SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    4a6e:	8e b5       	in	r24, 0x2e	; 46
    4a70:	80 64       	ori	r24, 0x40	; 64
    4a72:	8e bd       	out	0x2e, r24	; 46
		/*Set OCR1A mode*/
	#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
	#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    4a74:	8f b5       	in	r24, 0x2f	; 47
    4a76:	8f 7b       	andi	r24, 0xBF	; 191
    4a78:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    4a7a:	8f b5       	in	r24, 0x2f	; 47
    4a7c:	80 68       	ori	r24, 0x80	; 128
    4a7e:	8f bd       	out	0x2f, r24	; 47
		/*Set OCR1B mode*/
	#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
	#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    4a80:	8f b5       	in	r24, 0x2f	; 47
    4a82:	8f 7e       	andi	r24, 0xEF	; 239
    4a84:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    4a86:	8f b5       	in	r24, 0x2f	; 47
    4a88:	80 62       	ori	r24, 0x20	; 32
    4a8a:	8f bd       	out	0x2f, r24	; 47
	#error "Wrong TIMER1_OCR1B_MODE Config"
	#endif

		/*Timer1 PWM Interrupt Enable*/
	#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    4a8c:	89 b7       	in	r24, 0x39	; 57
    4a8e:	8b 7f       	andi	r24, 0xFB	; 251
    4a90:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
	#endif

	#if TIMER1_CTCA_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    4a92:	89 b7       	in	r24, 0x39	; 57
    4a94:	8f 7e       	andi	r24, 0xEF	; 239
    4a96:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCA_INTERRUPT Config"
	#endif

	#if TIMER1_CTCB_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    4a98:	89 b7       	in	r24, 0x39	; 57
    4a9a:	87 7f       	andi	r24, 0xF7	; 247
    4a9c:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCB_INTERRUPT Config"
	#endif

	#if TIMER1_ICR_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    4a9e:	89 b7       	in	r24, 0x39	; 57
    4aa0:	8f 7d       	andi	r24, 0xDF	; 223
    4aa2:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    4aa4:	8e b5       	in	r24, 0x2e	; 46
    4aa6:	88 7f       	andi	r24, 0xF8	; 248
    4aa8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    4aaa:	8e b5       	in	r24, 0x2e	; 46
    4aac:	82 60       	ori	r24, 0x02	; 2
    4aae:	8e bd       	out	0x2e, r24	; 46
}
    4ab0:	08 95       	ret

00004ab2 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload(u16 copy_u8Preload)
{
	TCNT1L = copy_u8Preload ;
    4ab2:	8c bd       	out	0x2c, r24	; 44
	TCNT1H |= (copy_u8Preload>>8) ;
    4ab4:	8d b5       	in	r24, 0x2d	; 45
    4ab6:	89 2b       	or	r24, r25
    4ab8:	8d bd       	out	0x2d, r24	; 45
}
    4aba:	08 95       	ret

00004abc <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA(u16 copy_u8CTCA)
{
	OCR1AL = copy_u8CTCA ;
    4abc:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (copy_u8CTCA>>8) ;
    4abe:	8b b5       	in	r24, 0x2b	; 43
    4ac0:	89 2b       	or	r24, r25
    4ac2:	8b bd       	out	0x2b, r24	; 43
}
    4ac4:	08 95       	ret

00004ac6 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB(u16 copy_u8CTCB)
{
	OCR1BL = copy_u8CTCB ;
    4ac6:	88 bd       	out	0x28, r24	; 40
	OCR1BH |= (copy_u8CTCB>>8) ;
    4ac8:	89 b5       	in	r24, 0x29	; 41
    4aca:	89 2b       	or	r24, r25
    4acc:	89 bd       	out	0x29, r24	; 41
}
    4ace:	08 95       	ret

00004ad0 <TIMER1_u8GetTimerCounterValue>:

u16 TIMER1_u8GetTimerCounterValue(void)
{
	u16 Local_Var;
	Local_Var = TCNT1L;
    4ad0:	2c b5       	in	r18, 0x2c	; 44
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
	Local_Var |= (TCNT1H<<8);
    4ad4:	4d b5       	in	r20, 0x2d	; 45
    4ad6:	94 2f       	mov	r25, r20
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	28 2b       	or	r18, r24
    4adc:	39 2b       	or	r19, r25

	return Local_Var;
}
    4ade:	c9 01       	movw	r24, r18
    4ae0:	08 95       	ret

00004ae2 <TIMER2_voidInit>:
	OCR2 = TIMER2_CTC_VAL ;

#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

	/*Initialize Waveform Generation Mode as CTC Mode*/
	CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    4ae2:	85 b5       	in	r24, 0x25	; 37
    4ae4:	8f 7b       	andi	r24, 0xBF	; 191
    4ae6:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2 , TCCR2_WGM21) ;
    4ae8:	85 b5       	in	r24, 0x25	; 37
    4aea:	88 60       	ori	r24, 0x08	; 8
    4aec:	85 bd       	out	0x25, r24	; 37

	/*Set the Required CTC Value*/
	OCR2 = TIMER2_CTC_VAL ;
    4aee:	8f ef       	ldi	r24, 0xFF	; 255
    4af0:	83 bd       	out	0x23, r24	; 35

		/*Set CTC PWM MODE*/
	#if TIMER2_OC2_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR2 , TCCR2_COM20) ;
    4af2:	85 b5       	in	r24, 0x25	; 37
    4af4:	8f 7e       	andi	r24, 0xEF	; 239
    4af6:	85 bd       	out	0x25, r24	; 37
		CLR_BIT(TCCR2 , TCCR2_COM21) ;
    4af8:	85 b5       	in	r24, 0x25	; 37
    4afa:	8f 7d       	andi	r24, 0xDF	; 223
    4afc:	85 bd       	out	0x25, r24	; 37

		/*Timer2 Compare Match Interrupt Enable*/
	#if TIMER2_CTC_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE2) ;
	#elif TIMER2_CTC_INTERRUPT == ENABLE
		SET_BIT(TIMSK , TIMSK_OCIE2) ;
    4afe:	89 b7       	in	r24, 0x39	; 57
    4b00:	80 68       	ori	r24, 0x80	; 128
    4b02:	89 bf       	out	0x39, r24	; 57
#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    4b04:	85 b5       	in	r24, 0x25	; 37
    4b06:	88 7f       	andi	r24, 0xF8	; 248
    4b08:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    4b0a:	85 b5       	in	r24, 0x25	; 37
    4b0c:	87 60       	ori	r24, 0x07	; 7
    4b0e:	85 bd       	out	0x25, r24	; 37
}
    4b10:	08 95       	ret

00004b12 <TIMER2_voidSetPreload>:

void TIMER2_voidSetPreload(u8 copy_u8Preload)
{
	TCNT2 = copy_u8Preload ;
    4b12:	84 bd       	out	0x24, r24	; 36
}
    4b14:	08 95       	ret

00004b16 <TIMER2_voidSetCTC>:
void TIMER2_voidSetCTC(u8 copy_u8CTC)
{
	OCR2 = copy_u8CTC ;
    4b16:	83 bd       	out	0x23, r24	; 35
}
    4b18:	08 95       	ret

00004b1a <TIMER2_voidSetFastPWM>:
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    4b1a:	08 95       	ret

00004b1c <TIMER2_voidSetPhaseCorrectPWM>:
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    4b1c:	08 95       	ret

00004b1e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue(void)
{
	return TCNT2 ;
    4b1e:	84 b5       	in	r24, 0x24	; 36
}
    4b20:	08 95       	ret

00004b22 <TIMER_voidICUInitEnable>:


void TIMER_voidICUInitEnable(void)
{
	#if TIMER_ICP_INIT_STATE == TIMER_ICP_RISING_EDGE
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4b22:	8e b5       	in	r24, 0x2e	; 46
    4b24:	80 64       	ori	r24, 0x40	; 64
    4b26:	8e bd       	out	0x2e, r24	; 46
	#else
		#error "Wrong TIMER_ICP_INIT_STATE Config"
	#endif

	/* Enable interrupt of ICU*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4b28:	89 b7       	in	r24, 0x39	; 57
    4b2a:	80 62       	ori	r24, 0x20	; 32
    4b2c:	89 bf       	out	0x39, r24	; 57

}
    4b2e:	08 95       	ret

00004b30 <TIMER_voidICUSetTriggerEdge>:

u8 TIMER_voidICUSetTriggerEdge(u8 copy_u8Edge)
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    4b30:	81 30       	cpi	r24, 0x01	; 1
    4b32:	11 f0       	breq	.+4      	; 0x4b38 <TIMER_voidICUSetTriggerEdge+0x8>
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	08 95       	ret
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4b38:	8e b5       	in	r24, 0x2e	; 46
    4b3a:	80 64       	ori	r24, 0x40	; 64
    4b3c:	8e bd       	out	0x2e, r24	; 46
    4b3e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;

}
    4b40:	08 95       	ret

00004b42 <TIMER_voidICUEnableInterrupt>:

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4b42:	89 b7       	in	r24, 0x39	; 57
    4b44:	80 62       	ori	r24, 0x20	; 32
    4b46:	89 bf       	out	0x39, r24	; 57
}
    4b48:	08 95       	ret

00004b4a <TIMER_voidICUDisableInterrupt>:

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    4b4a:	89 b7       	in	r24, 0x39	; 57
    4b4c:	8f 7d       	andi	r24, 0xDF	; 223
    4b4e:	89 bf       	out	0x39, r24	; 57
}
    4b50:	08 95       	ret

00004b52 <TIMER_u16GetICR>:

u16 TIMER_u16GetICR(void)
{
	u16 Local_u16ICRValue;
	Local_u16ICRValue = ICR1L;
    4b52:	26 b5       	in	r18, 0x26	; 38
    4b54:	30 e0       	ldi	r19, 0x00	; 0
	Local_u16ICRValue |= (ICR1H<<8);
    4b56:	47 b5       	in	r20, 0x27	; 39
    4b58:	94 2f       	mov	r25, r20
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	28 2b       	or	r18, r24
    4b5e:	39 2b       	or	r19, r25


	return Local_u16ICRValue;

}
    4b60:	c9 01       	movw	r24, r18
    4b62:	08 95       	ret

00004b64 <TIMER_voidWDTSleep>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    4b64:	81 b5       	in	r24, 0x21	; 33
    4b66:	88 7f       	andi	r24, 0xF8	; 248
    4b68:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    4b6a:	81 b5       	in	r24, 0x21	; 33
    4b6c:	86 60       	ori	r24, 0x06	; 6
    4b6e:	81 bd       	out	0x21, r24	; 33
}
    4b70:	08 95       	ret

00004b72 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    4b72:	81 b5       	in	r24, 0x21	; 33
    4b74:	88 60       	ori	r24, 0x08	; 8
    4b76:	81 bd       	out	0x21, r24	; 33
}
    4b78:	08 95       	ret

00004b7a <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    4b7a:	81 b5       	in	r24, 0x21	; 33
    4b7c:	88 61       	ori	r24, 0x18	; 24
    4b7e:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    4b80:	11 bc       	out	0x21, r1	; 33
}
    4b82:	08 95       	ret

00004b84 <TIMER_u8SetCallBack>:

/*****************************************************************************************************/
u8 TIMER_u8SetCallBack(void(*copy_ptfCallBackFunc)(void),u8 copy_u8VectorID)
{
	u8 Local_u8ErrorState = E_OK;
	if((copy_u8VectorID<=TIMER0_OVF_VECTOR_ID) && (copy_u8VectorID>=TIMER2_CTC_VECTOR_ID))
    4b84:	64 50       	subi	r22, 0x04	; 4
    4b86:	68 30       	cpi	r22, 0x08	; 8
    4b88:	10 f0       	brcs	.+4      	; 0x4b8e <TIMER_u8SetCallBack+0xa>
    4b8a:	83 e0       	ldi	r24, 0x03	; 3
    4b8c:	08 95       	ret
	{
		u8 Local_u8ArrayIndex = copy_u8VectorID - CBF_OFFSET ;
		if(copy_ptfCallBackFunc!= NULL)
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	11 f4       	brne	.+4      	; 0x4b96 <TIMER_u8SetCallBack+0x12>
    4b92:	82 e0       	ldi	r24, 0x02	; 2
    4b94:	08 95       	ret
		{
			TIMERS_ptfCallBackFuncArr[Local_u8ArrayIndex]= copy_ptfCallBackFunc;
    4b96:	e6 2f       	mov	r30, r22
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	ee 0f       	add	r30, r30
    4b9c:	ff 1f       	adc	r31, r31
    4b9e:	e7 57       	subi	r30, 0x77	; 119
    4ba0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ba2:	91 83       	std	Z+1, r25	; 0x01
    4ba4:	80 83       	st	Z, r24
    4ba6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_OUT_OF_RANGE;
	}

	return Local_u8ErrorState;
}
    4ba8:	08 95       	ret

00004baa <__vector_11>:


/***************TIMER0 OVF************************/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	2f 93       	push	r18
    4bb6:	3f 93       	push	r19
    4bb8:	4f 93       	push	r20
    4bba:	5f 93       	push	r21
    4bbc:	6f 93       	push	r22
    4bbe:	7f 93       	push	r23
    4bc0:	8f 93       	push	r24
    4bc2:	9f 93       	push	r25
    4bc4:	af 93       	push	r26
    4bc6:	bf 93       	push	r27
    4bc8:	ef 93       	push	r30
    4bca:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4bcc:	e0 91 97 01 	lds	r30, 0x0197
    4bd0:	f0 91 98 01 	lds	r31, 0x0198
    4bd4:	30 97       	sbiw	r30, 0x00	; 0
    4bd6:	09 f0       	breq	.+2      	; 0x4bda <__vector_11+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET]();
    4bd8:	09 95       	icall
	}
}
    4bda:	ff 91       	pop	r31
    4bdc:	ef 91       	pop	r30
    4bde:	bf 91       	pop	r27
    4be0:	af 91       	pop	r26
    4be2:	9f 91       	pop	r25
    4be4:	8f 91       	pop	r24
    4be6:	7f 91       	pop	r23
    4be8:	6f 91       	pop	r22
    4bea:	5f 91       	pop	r21
    4bec:	4f 91       	pop	r20
    4bee:	3f 91       	pop	r19
    4bf0:	2f 91       	pop	r18
    4bf2:	0f 90       	pop	r0
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	0f 90       	pop	r0
    4bf8:	1f 90       	pop	r1
    4bfa:	18 95       	reti

00004bfc <__vector_10>:


/***************TIMER0 CTC************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    4bfc:	1f 92       	push	r1
    4bfe:	0f 92       	push	r0
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	0f 92       	push	r0
    4c04:	11 24       	eor	r1, r1
    4c06:	2f 93       	push	r18
    4c08:	3f 93       	push	r19
    4c0a:	4f 93       	push	r20
    4c0c:	5f 93       	push	r21
    4c0e:	6f 93       	push	r22
    4c10:	7f 93       	push	r23
    4c12:	8f 93       	push	r24
    4c14:	9f 93       	push	r25
    4c16:	af 93       	push	r26
    4c18:	bf 93       	push	r27
    4c1a:	ef 93       	push	r30
    4c1c:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    4c1e:	e0 91 95 01 	lds	r30, 0x0195
    4c22:	f0 91 96 01 	lds	r31, 0x0196
    4c26:	30 97       	sbiw	r30, 0x00	; 0
    4c28:	09 f0       	breq	.+2      	; 0x4c2c <__vector_10+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET]();
    4c2a:	09 95       	icall
	}
}
    4c2c:	ff 91       	pop	r31
    4c2e:	ef 91       	pop	r30
    4c30:	bf 91       	pop	r27
    4c32:	af 91       	pop	r26
    4c34:	9f 91       	pop	r25
    4c36:	8f 91       	pop	r24
    4c38:	7f 91       	pop	r23
    4c3a:	6f 91       	pop	r22
    4c3c:	5f 91       	pop	r21
    4c3e:	4f 91       	pop	r20
    4c40:	3f 91       	pop	r19
    4c42:	2f 91       	pop	r18
    4c44:	0f 90       	pop	r0
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	0f 90       	pop	r0
    4c4a:	1f 90       	pop	r1
    4c4c:	18 95       	reti

00004c4e <__vector_9>:


/***************TIMER1 OVF************************/
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    4c4e:	1f 92       	push	r1
    4c50:	0f 92       	push	r0
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	0f 92       	push	r0
    4c56:	11 24       	eor	r1, r1
    4c58:	2f 93       	push	r18
    4c5a:	3f 93       	push	r19
    4c5c:	4f 93       	push	r20
    4c5e:	5f 93       	push	r21
    4c60:	6f 93       	push	r22
    4c62:	7f 93       	push	r23
    4c64:	8f 93       	push	r24
    4c66:	9f 93       	push	r25
    4c68:	af 93       	push	r26
    4c6a:	bf 93       	push	r27
    4c6c:	ef 93       	push	r30
    4c6e:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4c70:	e0 91 93 01 	lds	r30, 0x0193
    4c74:	f0 91 94 01 	lds	r31, 0x0194
    4c78:	30 97       	sbiw	r30, 0x00	; 0
    4c7a:	09 f0       	breq	.+2      	; 0x4c7e <__vector_9+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET]();
    4c7c:	09 95       	icall
	}
}
    4c7e:	ff 91       	pop	r31
    4c80:	ef 91       	pop	r30
    4c82:	bf 91       	pop	r27
    4c84:	af 91       	pop	r26
    4c86:	9f 91       	pop	r25
    4c88:	8f 91       	pop	r24
    4c8a:	7f 91       	pop	r23
    4c8c:	6f 91       	pop	r22
    4c8e:	5f 91       	pop	r21
    4c90:	4f 91       	pop	r20
    4c92:	3f 91       	pop	r19
    4c94:	2f 91       	pop	r18
    4c96:	0f 90       	pop	r0
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	0f 90       	pop	r0
    4c9c:	1f 90       	pop	r1
    4c9e:	18 95       	reti

00004ca0 <__vector_8>:


/***************TIMER1 CTCB***********************/
void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    4ca0:	1f 92       	push	r1
    4ca2:	0f 92       	push	r0
    4ca4:	0f b6       	in	r0, 0x3f	; 63
    4ca6:	0f 92       	push	r0
    4ca8:	11 24       	eor	r1, r1
    4caa:	2f 93       	push	r18
    4cac:	3f 93       	push	r19
    4cae:	4f 93       	push	r20
    4cb0:	5f 93       	push	r21
    4cb2:	6f 93       	push	r22
    4cb4:	7f 93       	push	r23
    4cb6:	8f 93       	push	r24
    4cb8:	9f 93       	push	r25
    4cba:	af 93       	push	r26
    4cbc:	bf 93       	push	r27
    4cbe:	ef 93       	push	r30
    4cc0:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET] != NULL)
    4cc2:	e0 91 91 01 	lds	r30, 0x0191
    4cc6:	f0 91 92 01 	lds	r31, 0x0192
    4cca:	30 97       	sbiw	r30, 0x00	; 0
    4ccc:	09 f0       	breq	.+2      	; 0x4cd0 <__vector_8+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET]();
    4cce:	09 95       	icall
	}
}
    4cd0:	ff 91       	pop	r31
    4cd2:	ef 91       	pop	r30
    4cd4:	bf 91       	pop	r27
    4cd6:	af 91       	pop	r26
    4cd8:	9f 91       	pop	r25
    4cda:	8f 91       	pop	r24
    4cdc:	7f 91       	pop	r23
    4cde:	6f 91       	pop	r22
    4ce0:	5f 91       	pop	r21
    4ce2:	4f 91       	pop	r20
    4ce4:	3f 91       	pop	r19
    4ce6:	2f 91       	pop	r18
    4ce8:	0f 90       	pop	r0
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	0f 90       	pop	r0
    4cee:	1f 90       	pop	r1
    4cf0:	18 95       	reti

00004cf2 <__vector_6>:


/***************TIMER1 ICU************************/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    4cf2:	1f 92       	push	r1
    4cf4:	0f 92       	push	r0
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	0f 92       	push	r0
    4cfa:	11 24       	eor	r1, r1
    4cfc:	2f 93       	push	r18
    4cfe:	3f 93       	push	r19
    4d00:	4f 93       	push	r20
    4d02:	5f 93       	push	r21
    4d04:	6f 93       	push	r22
    4d06:	7f 93       	push	r23
    4d08:	8f 93       	push	r24
    4d0a:	9f 93       	push	r25
    4d0c:	af 93       	push	r26
    4d0e:	bf 93       	push	r27
    4d10:	ef 93       	push	r30
    4d12:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET] != NULL)
    4d14:	e0 91 8d 01 	lds	r30, 0x018D
    4d18:	f0 91 8e 01 	lds	r31, 0x018E
    4d1c:	30 97       	sbiw	r30, 0x00	; 0
    4d1e:	09 f0       	breq	.+2      	; 0x4d22 <__vector_6+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET]();
    4d20:	09 95       	icall
	}
}
    4d22:	ff 91       	pop	r31
    4d24:	ef 91       	pop	r30
    4d26:	bf 91       	pop	r27
    4d28:	af 91       	pop	r26
    4d2a:	9f 91       	pop	r25
    4d2c:	8f 91       	pop	r24
    4d2e:	7f 91       	pop	r23
    4d30:	6f 91       	pop	r22
    4d32:	5f 91       	pop	r21
    4d34:	4f 91       	pop	r20
    4d36:	3f 91       	pop	r19
    4d38:	2f 91       	pop	r18
    4d3a:	0f 90       	pop	r0
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	0f 90       	pop	r0
    4d40:	1f 90       	pop	r1
    4d42:	18 95       	reti

00004d44 <__vector_5>:

/***************TIMER2 OVF************************/
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    4d44:	1f 92       	push	r1
    4d46:	0f 92       	push	r0
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	0f 92       	push	r0
    4d4c:	11 24       	eor	r1, r1
    4d4e:	2f 93       	push	r18
    4d50:	3f 93       	push	r19
    4d52:	4f 93       	push	r20
    4d54:	5f 93       	push	r21
    4d56:	6f 93       	push	r22
    4d58:	7f 93       	push	r23
    4d5a:	8f 93       	push	r24
    4d5c:	9f 93       	push	r25
    4d5e:	af 93       	push	r26
    4d60:	bf 93       	push	r27
    4d62:	ef 93       	push	r30
    4d64:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4d66:	e0 91 8b 01 	lds	r30, 0x018B
    4d6a:	f0 91 8c 01 	lds	r31, 0x018C
    4d6e:	30 97       	sbiw	r30, 0x00	; 0
    4d70:	09 f0       	breq	.+2      	; 0x4d74 <__vector_5+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET]();
    4d72:	09 95       	icall
	}
}
    4d74:	ff 91       	pop	r31
    4d76:	ef 91       	pop	r30
    4d78:	bf 91       	pop	r27
    4d7a:	af 91       	pop	r26
    4d7c:	9f 91       	pop	r25
    4d7e:	8f 91       	pop	r24
    4d80:	7f 91       	pop	r23
    4d82:	6f 91       	pop	r22
    4d84:	5f 91       	pop	r21
    4d86:	4f 91       	pop	r20
    4d88:	3f 91       	pop	r19
    4d8a:	2f 91       	pop	r18
    4d8c:	0f 90       	pop	r0
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	0f 90       	pop	r0
    4d92:	1f 90       	pop	r1
    4d94:	18 95       	reti

00004d96 <__vector_4>:


/***************TIMER2 CTC************************/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    4d96:	1f 92       	push	r1
    4d98:	0f 92       	push	r0
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	0f 92       	push	r0
    4d9e:	11 24       	eor	r1, r1
    4da0:	2f 93       	push	r18
    4da2:	3f 93       	push	r19
    4da4:	4f 93       	push	r20
    4da6:	5f 93       	push	r21
    4da8:	6f 93       	push	r22
    4daa:	7f 93       	push	r23
    4dac:	8f 93       	push	r24
    4dae:	9f 93       	push	r25
    4db0:	af 93       	push	r26
    4db2:	bf 93       	push	r27
    4db4:	ef 93       	push	r30
    4db6:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    4db8:	e0 91 89 01 	lds	r30, 0x0189
    4dbc:	f0 91 8a 01 	lds	r31, 0x018A
    4dc0:	30 97       	sbiw	r30, 0x00	; 0
    4dc2:	09 f0       	breq	.+2      	; 0x4dc6 <__vector_4+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET]();
    4dc4:	09 95       	icall
	}
}
    4dc6:	ff 91       	pop	r31
    4dc8:	ef 91       	pop	r30
    4dca:	bf 91       	pop	r27
    4dcc:	af 91       	pop	r26
    4dce:	9f 91       	pop	r25
    4dd0:	8f 91       	pop	r24
    4dd2:	7f 91       	pop	r23
    4dd4:	6f 91       	pop	r22
    4dd6:	5f 91       	pop	r21
    4dd8:	4f 91       	pop	r20
    4dda:	3f 91       	pop	r19
    4ddc:	2f 91       	pop	r18
    4dde:	0f 90       	pop	r0
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	0f 90       	pop	r0
    4de4:	1f 90       	pop	r1
    4de6:	18 95       	reti

00004de8 <SPI_VoidInit>:
{
	/*Data Order*/
	#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
		SET_BIT(SPCR , SPCR_DORD) ;
	#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
		CLR_BIT(SPCR , SPCR_DORD) ;
    4de8:	6d 98       	cbi	0x0d, 5	; 13

	/*Master/Slave Select*/
	#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
		SET_BIT(SPCR , SPCR_MSTR) ;
	#elif SPI_MASTER_SLAVE_SELECT == SPI_SLAVE
		CLR_BIT(SPCR , SPCR_MSTR) ;
    4dea:	6c 98       	cbi	0x0d, 4	; 13
		#error "wrong SPI_MASTER_SLAVE_SELECT config"
	#endif

	/*Clock Polarity*/
	#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
		CLR_BIT(SPCR , SPCR_CPOL) ;
    4dec:	6b 98       	cbi	0x0d, 3	; 13
		#error "wrong SPI_CLOCK_POLARITY config"
	#endif

	/*Clock Phase*/
	#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
		CLR_BIT(SPCR , SPCR_CPHA) ;
    4dee:	6a 98       	cbi	0x0d, 2	; 13
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
		SET_BIT(SPCR , SPCR_SPR0) ;
		CLR_BIT(SPCR , SPCR_SPR1) ;
		SET_BIT(SPSR , SPSR_SPI2X) ;
	#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
		SET_BIT(SPCR , SPCR_SPR0) ;
    4df0:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR , SPCR_SPR1) ;
    4df2:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR , SPSR_SPI2X) ;
    4df4:	70 98       	cbi	0x0e, 0	; 14
		#error "wrong SPI_CLOCK_RATE config"
	#endif

	/*SPI Interrupt Enable*/
	#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
		CLR_BIT(SPCR , SPCR_SPIE) ;
    4df6:	6f 98       	cbi	0x0d, 7	; 13

	/*SPI Enable*/
	#if SPI_ENABLE_MODE == SPI_DISABLE
		CLR_BIT(SPCR , SPCR_SPE) ;
	#elif SPI_ENABLE_MODE == SPI_ENABLE
		SET_BIT(SPCR , SPCR_SPE) ;
    4df8:	6e 9a       	sbi	0x0d, 6	; 13
	#else
		#error "wrong SPI_ENABLE_MODE config"
	#endif

}
    4dfa:	08 95       	ret

00004dfc <SPI_u8InitConfig>:


*/

u8 SPI_u8InitConfig (SPI_CONFIG * spi)
{
    4dfc:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if ((spi != NULL) && (spi->SPI_u8ClockPhase != 0) && (spi->SPI_u8ClockPolarity != 0) && (spi->SPI_u8ClockRate != 0) && (spi->SPI_u8DataOrder != 0) && (spi->SPI_u8InterruptEnable != 0) && (spi->SPI_u8MasterSlaveSelect != 0) && (spi->SPI_u8SPIEnable != 0))
    4dfe:	00 97       	sbiw	r24, 0x00	; 0
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <SPI_u8InitConfig+0x8>
    4e02:	78 c0       	rjmp	.+240    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e04:	35 81       	ldd	r19, Z+5	; 0x05
    4e06:	33 23       	and	r19, r19
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <SPI_u8InitConfig+0x10>
    4e0a:	74 c0       	rjmp	.+232    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e0c:	44 81       	ldd	r20, Z+4	; 0x04
    4e0e:	44 23       	and	r20, r20
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <SPI_u8InitConfig+0x18>
    4e12:	70 c0       	rjmp	.+224    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e14:	26 81       	ldd	r18, Z+6	; 0x06
    4e16:	22 23       	and	r18, r18
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <SPI_u8InitConfig+0x20>
    4e1a:	6c c0       	rjmp	.+216    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e1c:	52 81       	ldd	r21, Z+2	; 0x02
    4e1e:	55 23       	and	r21, r21
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <SPI_u8InitConfig+0x28>
    4e22:	68 c0       	rjmp	.+208    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e24:	70 81       	ld	r23, Z
    4e26:	77 23       	and	r23, r23
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <SPI_u8InitConfig+0x30>
    4e2a:	64 c0       	rjmp	.+200    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e2c:	63 81       	ldd	r22, Z+3	; 0x03
    4e2e:	66 23       	and	r22, r22
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <SPI_u8InitConfig+0x38>
    4e32:	60 c0       	rjmp	.+192    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
    4e34:	91 81       	ldd	r25, Z+1	; 0x01
    4e36:	99 23       	and	r25, r25
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <SPI_u8InitConfig+0x40>
    4e3a:	5c c0       	rjmp	.+184    	; 0x4ef4 <SPI_u8InitConfig+0xf8>
	{
		switch (spi->SPI_u8ClockPhase)
    4e3c:	31 30       	cpi	r19, 0x01	; 1
    4e3e:	21 f0       	breq	.+8      	; 0x4e48 <SPI_u8InitConfig+0x4c>
    4e40:	32 30       	cpi	r19, 0x02	; 2
    4e42:	21 f0       	breq	.+8      	; 0x4e4c <SPI_u8InitConfig+0x50>
    4e44:	81 e0       	ldi	r24, 0x01	; 1
    4e46:	04 c0       	rjmp	.+8      	; 0x4e50 <SPI_u8InitConfig+0x54>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING: CLR_BIT(SPCR,SPCR_CPHA) ; break ;
    4e48:	6a 98       	cbi	0x0d, 2	; 13
    4e4a:	01 c0       	rjmp	.+2      	; 0x4e4e <SPI_u8InitConfig+0x52>
		case SPI_SETUP_LEADING_SAMPLE_TRAILING: SET_BIT(SPCR,SPCR_CPHA) ; break ;
    4e4c:	6a 9a       	sbi	0x0d, 2	; 13
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
		default: 								Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockPolarity)
    4e50:	41 30       	cpi	r20, 0x01	; 1
    4e52:	21 f0       	breq	.+8      	; 0x4e5c <SPI_u8InitConfig+0x60>
    4e54:	42 30       	cpi	r20, 0x02	; 2
    4e56:	21 f0       	breq	.+8      	; 0x4e60 <SPI_u8InitConfig+0x64>
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	03 c0       	rjmp	.+6      	; 0x4e62 <SPI_u8InitConfig+0x66>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING: CLR_BIT(SPCR , SPCR_CPOL) ; break ;
    4e5c:	6b 98       	cbi	0x0d, 3	; 13
    4e5e:	01 c0       	rjmp	.+2      	; 0x4e62 <SPI_u8InitConfig+0x66>
		case SPI_FALLING_LEADING_RISING_TRAILING: SET_BIT(SPCR , SPCR_CPOL) ; break ;
    4e60:	6b 9a       	sbi	0x0d, 3	; 13
		default:								  Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8ClockRate)
    4e62:	23 30       	cpi	r18, 0x03	; 3
    4e64:	b9 f0       	breq	.+46     	; 0x4e94 <SPI_u8InitConfig+0x98>
    4e66:	24 30       	cpi	r18, 0x04	; 4
    4e68:	28 f4       	brcc	.+10     	; 0x4e74 <SPI_u8InitConfig+0x78>
    4e6a:	21 30       	cpi	r18, 0x01	; 1
    4e6c:	69 f0       	breq	.+26     	; 0x4e88 <SPI_u8InitConfig+0x8c>
    4e6e:	22 30       	cpi	r18, 0x02	; 2
    4e70:	68 f4       	brcc	.+26     	; 0x4e8c <SPI_u8InitConfig+0x90>
    4e72:	08 c0       	rjmp	.+16     	; 0x4e84 <SPI_u8InitConfig+0x88>
    4e74:	25 30       	cpi	r18, 0x05	; 5
    4e76:	a1 f0       	breq	.+40     	; 0x4ea0 <SPI_u8InitConfig+0xa4>
    4e78:	25 30       	cpi	r18, 0x05	; 5
    4e7a:	78 f0       	brcs	.+30     	; 0x4e9a <SPI_u8InitConfig+0x9e>
    4e7c:	26 30       	cpi	r18, 0x06	; 6
    4e7e:	91 f0       	breq	.+36     	; 0x4ea4 <SPI_u8InitConfig+0xa8>
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	13 c0       	rjmp	.+38     	; 0x4eaa <SPI_u8InitConfig+0xae>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    4e84:	68 98       	cbi	0x0d, 0	; 13
    4e86:	03 c0       	rjmp	.+6      	; 0x4e8e <SPI_u8InitConfig+0x92>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    4e88:	68 98       	cbi	0x0d, 0	; 13
    4e8a:	05 c0       	rjmp	.+10     	; 0x4e96 <SPI_u8InitConfig+0x9a>
			CLR_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR , SPCR_SPR0) ;
    4e8c:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    4e8e:	69 98       	cbi	0x0d, 1	; 13
			SET_BIT(SPSR , SPSR_SPI2X) ;
    4e90:	70 9a       	sbi	0x0e, 0	; 14
    4e92:	0b c0       	rjmp	.+22     	; 0x4eaa <SPI_u8InitConfig+0xae>
			break ;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR , SPCR_SPR0) ;
    4e94:	68 9a       	sbi	0x0d, 0	; 13
			CLR_BIT(SPCR , SPCR_SPR1) ;
    4e96:	69 98       	cbi	0x0d, 1	; 13
    4e98:	07 c0       	rjmp	.+14     	; 0x4ea8 <SPI_u8InitConfig+0xac>
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    4e9a:	68 98       	cbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    4e9c:	69 9a       	sbi	0x0d, 1	; 13
    4e9e:	f8 cf       	rjmp	.-16     	; 0x4e90 <SPI_u8InitConfig+0x94>
			SET_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR , SPCR_SPR0) ;
    4ea0:	68 98       	cbi	0x0d, 0	; 13
    4ea2:	01 c0       	rjmp	.+2      	; 0x4ea6 <SPI_u8InitConfig+0xaa>
			SET_BIT(SPCR , SPCR_SPR1) ;
			CLR_BIT(SPSR , SPSR_SPI2X) ;
			break ;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR , SPCR_SPR0) ;
    4ea4:	68 9a       	sbi	0x0d, 0	; 13
			SET_BIT(SPCR , SPCR_SPR1) ;
    4ea6:	69 9a       	sbi	0x0d, 1	; 13
			CLR_BIT(SPSR , SPSR_SPI2X) ;
    4ea8:	70 98       	cbi	0x0e, 0	; 14
			break ;
		default:
			Local_u8ErrorState = E_NOK ;
			break ;
		}
		switch (spi->SPI_u8DataOrder)
    4eaa:	51 30       	cpi	r21, 0x01	; 1
    4eac:	31 f0       	breq	.+12     	; 0x4eba <SPI_u8InitConfig+0xbe>
    4eae:	52 30       	cpi	r21, 0x02	; 2
    4eb0:	11 f0       	breq	.+4      	; 0x4eb6 <SPI_u8InitConfig+0xba>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <SPI_u8InitConfig+0xc0>
		{
		case SPI_DATA_MSP_FIRST: CLR_BIT(SPCR , SPCR_DORD) ; break ;
    4eb6:	6d 98       	cbi	0x0d, 5	; 13
    4eb8:	01 c0       	rjmp	.+2      	; 0x4ebc <SPI_u8InitConfig+0xc0>
		case SPI_DATA_LSB_FIRST: SET_BIT(SPCR , SPCR_DORD) ; break ;
    4eba:	6d 9a       	sbi	0x0d, 5	; 13
		default:				 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    4ebc:	61 30       	cpi	r22, 0x01	; 1
    4ebe:	21 f0       	breq	.+8      	; 0x4ec8 <SPI_u8InitConfig+0xcc>
    4ec0:	62 30       	cpi	r22, 0x02	; 2
    4ec2:	21 f0       	breq	.+8      	; 0x4ecc <SPI_u8InitConfig+0xd0>
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	03 c0       	rjmp	.+6      	; 0x4ece <SPI_u8InitConfig+0xd2>
		{
		case SPI_MASTER: SET_BIT(SPCR , SPCR_MSTR) ; break ;
    4ec8:	6c 9a       	sbi	0x0d, 4	; 13
    4eca:	01 c0       	rjmp	.+2      	; 0x4ece <SPI_u8InitConfig+0xd2>
		case SPI_SLAVE:  CLR_BIT(SPCR , SPCR_MSTR) ; break ;
    4ecc:	6c 98       	cbi	0x0d, 4	; 13
		default:		 Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8InterruptEnable)
    4ece:	71 30       	cpi	r23, 0x01	; 1
    4ed0:	21 f0       	breq	.+8      	; 0x4eda <SPI_u8InitConfig+0xde>
    4ed2:	72 30       	cpi	r23, 0x02	; 2
    4ed4:	21 f0       	breq	.+8      	; 0x4ede <SPI_u8InitConfig+0xe2>
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	03 c0       	rjmp	.+6      	; 0x4ee0 <SPI_u8InitConfig+0xe4>
		{
		case SPI_INTERRUPT_DISABLE: CLR_BIT(SPCR , SPCR_SPIE) ; break ;
    4eda:	6f 98       	cbi	0x0d, 7	; 13
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <SPI_u8InitConfig+0xe4>
		case SPI_INTERRUPT_ENABLE:  SET_BIT(SPCR , SPCR_SPIE) ; break ;
    4ede:	6f 9a       	sbi	0x0d, 7	; 13
		default:		 			Local_u8ErrorState = E_NOK ; break ;
		}
		switch (spi->SPI_u8SPIEnable)
    4ee0:	91 30       	cpi	r25, 0x01	; 1
    4ee2:	21 f0       	breq	.+8      	; 0x4eec <SPI_u8InitConfig+0xf0>
    4ee4:	92 30       	cpi	r25, 0x02	; 2
    4ee6:	21 f0       	breq	.+8      	; 0x4ef0 <SPI_u8InitConfig+0xf4>
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	08 95       	ret
		{
		case SPI_DISABLE: CLR_BIT(SPCR , SPCR_SPE) ; break ;
    4eec:	6e 98       	cbi	0x0d, 6	; 13
    4eee:	08 95       	ret
		case SPI_ENABLE:  SET_BIT(SPCR , SPCR_SPE) ; break ;
    4ef0:	6e 9a       	sbi	0x0d, 6	; 13
    4ef2:	08 95       	ret
    4ef4:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    4ef6:	08 95       	ret

00004ef8 <SPI_u8Tranceive>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8Tranceive (u8 Copy_u8TData , u8 * Copy_u8RData)
{
    4ef8:	98 2f       	mov	r25, r24
    4efa:	fb 01       	movw	r30, r22
	u8 Local_u8ErrorState = E_OK ;
	u32 Local_uint32TimeoutCounter = 0 ;

	if (SPI_u8State == IDLE)
    4efc:	80 91 9b 01 	lds	r24, 0x019B
    4f00:	88 23       	and	r24, r24
    4f02:	11 f0       	breq	.+4      	; 0x4f08 <SPI_u8Tranceive+0x10>
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	08 95       	ret
	{
		SPI_u8State = BUSY ;

		SPDR = Copy_u8TData ;
    4f08:	9f b9       	out	0x0f, r25	; 15

		while (((GET_BIT(SPSR , SPSR_SPIF)) == 0) && (Local_uint32TimeoutCounter < SPI_uint32TIMEOUT))
    4f0a:	77 9b       	sbis	0x0e, 7	; 14
    4f0c:	fe cf       	rjmp	.-4      	; 0x4f0a <SPI_u8Tranceive+0x12>
		{
			Local_u8ErrorState = E_NOK ;
		}
		else
		{
			* Copy_u8RData = SPDR ;
    4f0e:	8f b1       	in	r24, 0x0f	; 15
    4f10:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE ;
    4f12:	10 92 9b 01 	sts	0x019B, r1
    4f16:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    4f18:	08 95       	ret

00004f1a <SPI_u8BufferTranceiverSynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverSynch (u8 * Copy_u8TData , u8 * Copy_u8RData , u8 Copy_u8BufferSize)
{
    4f1a:	df 92       	push	r13
    4f1c:	ef 92       	push	r14
    4f1e:	ff 92       	push	r15
    4f20:	0f 93       	push	r16
    4f22:	1f 93       	push	r17
    4f24:	cf 93       	push	r28
    4f26:	df 93       	push	r29
    4f28:	7b 01       	movw	r14, r22
    4f2a:	d4 2e       	mov	r13, r20
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    4f2c:	00 97       	sbiw	r24, 0x00	; 0
    4f2e:	a1 f0       	breq	.+40     	; 0x4f58 <SPI_u8BufferTranceiverSynch+0x3e>
    4f30:	61 15       	cp	r22, r1
    4f32:	71 05       	cpc	r23, r1
    4f34:	89 f0       	breq	.+34     	; 0x4f58 <SPI_u8BufferTranceiverSynch+0x3e>
    4f36:	8c 01       	movw	r16, r24
    4f38:	c0 e0       	ldi	r28, 0x00	; 0
    4f3a:	d0 e0       	ldi	r29, 0x00	; 0
    4f3c:	09 c0       	rjmp	.+18     	; 0x4f50 <SPI_u8BufferTranceiverSynch+0x36>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter] , &Copy_u8RData[Local_u8Counter]) ;
    4f3e:	b7 01       	movw	r22, r14
    4f40:	6c 0f       	add	r22, r28
    4f42:	7d 1f       	adc	r23, r29
    4f44:	f8 01       	movw	r30, r16
    4f46:	81 91       	ld	r24, Z+
    4f48:	8f 01       	movw	r16, r30
    4f4a:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <SPI_u8Tranceive>
    4f4e:	21 96       	adiw	r28, 0x01	; 1
{
	u8 Local_u8ErrorState = E_OK ;
	u8 Local_u8Counter = 0 ;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    4f50:	cd 15       	cp	r28, r13
    4f52:	a8 f3       	brcs	.-22     	; 0x4f3e <SPI_u8BufferTranceiverSynch+0x24>
    4f54:	80 e0       	ldi	r24, 0x00	; 0
    4f56:	01 c0       	rjmp	.+2      	; 0x4f5a <SPI_u8BufferTranceiverSynch+0x40>
    4f58:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}
	return Local_u8ErrorState ;
}
    4f5a:	df 91       	pop	r29
    4f5c:	cf 91       	pop	r28
    4f5e:	1f 91       	pop	r17
    4f60:	0f 91       	pop	r16
    4f62:	ff 90       	pop	r15
    4f64:	ef 90       	pop	r14
    4f66:	df 90       	pop	r13
    4f68:	08 95       	ret

00004f6a <SPI_u8BufferTranceiverAsynch>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 SPI_u8BufferTranceiverAsynch (SPI_BUFFER * spi_buffer)
{
    4f6a:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
    4f6c:	80 91 9b 01 	lds	r24, 0x019B
    4f70:	88 23       	and	r24, r24
    4f72:	11 f0       	breq	.+4      	; 0x4f78 <SPI_u8BufferTranceiverAsynch+0xe>
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	08 95       	ret
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    4f78:	30 97       	sbiw	r30, 0x00	; 0
    4f7a:	39 f1       	breq	.+78     	; 0x4fca <SPI_u8BufferTranceiverAsynch+0x60>
    4f7c:	a0 81       	ld	r26, Z
    4f7e:	b1 81       	ldd	r27, Z+1	; 0x01
    4f80:	10 97       	sbiw	r26, 0x00	; 0
    4f82:	19 f1       	breq	.+70     	; 0x4fca <SPI_u8BufferTranceiverAsynch+0x60>
    4f84:	42 81       	ldd	r20, Z+2	; 0x02
    4f86:	53 81       	ldd	r21, Z+3	; 0x03
    4f88:	41 15       	cp	r20, r1
    4f8a:	51 05       	cpc	r21, r1
    4f8c:	f1 f0       	breq	.+60     	; 0x4fca <SPI_u8BufferTranceiverAsynch+0x60>
    4f8e:	25 81       	ldd	r18, Z+5	; 0x05
    4f90:	36 81       	ldd	r19, Z+6	; 0x06
    4f92:	21 15       	cp	r18, r1
    4f94:	31 05       	cpc	r19, r1
    4f96:	c9 f0       	breq	.+50     	; 0x4fca <SPI_u8BufferTranceiverAsynch+0x60>
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY ;
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	80 93 9b 01 	sts	0x019B, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData = spi_buffer->Copy_u8TData ;
    4f9e:	b0 93 9f 01 	sts	0x019F, r27
    4fa2:	a0 93 9e 01 	sts	0x019E, r26
			SPI_pu8RData = spi_buffer->Copy_u8RData ;
    4fa6:	50 93 9a 01 	sts	0x019A, r21
    4faa:	40 93 99 01 	sts	0x0199, r20
			SPI_u8BufferSize = spi_buffer->Copy_u8BufferSize ;
    4fae:	84 81       	ldd	r24, Z+4	; 0x04
    4fb0:	80 93 a0 01 	sts	0x01A0, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn ;
    4fb4:	30 93 9d 01 	sts	0x019D, r19
    4fb8:	20 93 9c 01 	sts	0x019C, r18

			/*Set Index to first element*/
			SPI_u8Index = 0 ;
    4fbc:	10 92 a1 01 	sts	0x01A1, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index] ;
    4fc0:	8c 91       	ld	r24, X
    4fc2:	8f b9       	out	0x0f, r24	; 15

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR , SPCR_SPIE) ;
    4fc4:	6f 9a       	sbi	0x0d, 7	; 13
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (SPI_u8State == IDLE)
	{
		if ((spi_buffer != NULL) && (spi_buffer->Copy_u8TData != NULL) && (spi_buffer->Copy_u8RData != NULL) && (spi_buffer->NotificationFuncn != NULL))
    4fca:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		Local_u8ErrorState = E_NOK ;
	}
	return Local_u8ErrorState ;
}
    4fcc:	08 95       	ret

00004fce <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12 (void)		__attribute__ ((signal)) ;
void __vector_12 (void)
{
    4fce:	1f 92       	push	r1
    4fd0:	0f 92       	push	r0
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	0f 92       	push	r0
    4fd6:	11 24       	eor	r1, r1
    4fd8:	2f 93       	push	r18
    4fda:	3f 93       	push	r19
    4fdc:	4f 93       	push	r20
    4fde:	5f 93       	push	r21
    4fe0:	6f 93       	push	r22
    4fe2:	7f 93       	push	r23
    4fe4:	8f 93       	push	r24
    4fe6:	9f 93       	push	r25
    4fe8:	af 93       	push	r26
    4fea:	bf 93       	push	r27
    4fec:	ef 93       	push	r30
    4fee:	ff 93       	push	r31
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR ;
    4ff0:	90 91 a1 01 	lds	r25, 0x01A1
    4ff4:	8f b1       	in	r24, 0x0f	; 15
    4ff6:	e0 91 99 01 	lds	r30, 0x0199
    4ffa:	f0 91 9a 01 	lds	r31, 0x019A
    4ffe:	e9 0f       	add	r30, r25
    5000:	f1 1d       	adc	r31, r1
    5002:	80 83       	st	Z, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++ ;
    5004:	9f 5f       	subi	r25, 0xFF	; 255
    5006:	90 93 a1 01 	sts	0x01A1, r25

	if (SPI_u8Index == SPI_u8BufferSize)
    500a:	80 91 a0 01 	lds	r24, 0x01A0
    500e:	98 17       	cp	r25, r24
    5010:	49 f4       	brne	.+18     	; 0x5024 <__vector_12+0x56>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE ;
    5012:	10 92 9b 01 	sts	0x019B, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR , SPCR_SPIE) ;
    5016:	6f 98       	cbi	0x0d, 7	; 13

		/*Call Notification Function*/
		SPI_pvNotificationFunc() ;
    5018:	e0 91 9c 01 	lds	r30, 0x019C
    501c:	f0 91 9d 01 	lds	r31, 0x019D
    5020:	09 95       	icall
    5022:	08 c0       	rjmp	.+16     	; 0x5034 <__vector_12+0x66>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index] ;
    5024:	e0 91 9e 01 	lds	r30, 0x019E
    5028:	f0 91 9f 01 	lds	r31, 0x019F
    502c:	e9 0f       	add	r30, r25
    502e:	f1 1d       	adc	r31, r1
    5030:	80 81       	ld	r24, Z
    5032:	8f b9       	out	0x0f, r24	; 15
	}
}
    5034:	ff 91       	pop	r31
    5036:	ef 91       	pop	r30
    5038:	bf 91       	pop	r27
    503a:	af 91       	pop	r26
    503c:	9f 91       	pop	r25
    503e:	8f 91       	pop	r24
    5040:	7f 91       	pop	r23
    5042:	6f 91       	pop	r22
    5044:	5f 91       	pop	r21
    5046:	4f 91       	pop	r20
    5048:	3f 91       	pop	r19
    504a:	2f 91       	pop	r18
    504c:	0f 90       	pop	r0
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	0f 90       	pop	r0
    5052:	1f 90       	pop	r1
    5054:	18 95       	reti

00005056 <Set_SleepMode>:
			CLR_BIT(MCUCR,SM0);
			SET_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);

	#elif POWER_MANAGEMENT_MODE == PWR_SAVE_MODE
			SET_BIT(MCUCR,SM0);
    5056:	85 b7       	in	r24, 0x35	; 53
    5058:	80 61       	ori	r24, 0x10	; 16
    505a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    505c:	85 b7       	in	r24, 0x35	; 53
    505e:	80 62       	ori	r24, 0x20	; 32
    5060:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    5062:	85 b7       	in	r24, 0x35	; 53
    5064:	8f 7b       	andi	r24, 0xBF	; 191
    5066:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
	#else
		#error "wrong POWER_MANAGEMENT_MODE Configuration Parameter"
	#endif

}
    5068:	08 95       	ret

0000506a <Change_SleepMode>:


void Change_SleepMode(u8 SleepMode)
{
	switch(SleepMode)
    506a:	83 30       	cpi	r24, 0x03	; 3
    506c:	e9 f0       	breq	.+58     	; 0x50a8 <Change_SleepMode+0x3e>
    506e:	84 30       	cpi	r24, 0x04	; 4
    5070:	28 f4       	brcc	.+10     	; 0x507c <Change_SleepMode+0x12>
    5072:	81 30       	cpi	r24, 0x01	; 1
    5074:	69 f0       	breq	.+26     	; 0x5090 <Change_SleepMode+0x26>
    5076:	82 30       	cpi	r24, 0x02	; 2
    5078:	a0 f4       	brcc	.+40     	; 0x50a2 <Change_SleepMode+0x38>
    507a:	07 c0       	rjmp	.+14     	; 0x508a <Change_SleepMode+0x20>
    507c:	85 30       	cpi	r24, 0x05	; 5
    507e:	01 f1       	breq	.+64     	; 0x50c0 <Change_SleepMode+0x56>
    5080:	85 30       	cpi	r24, 0x05	; 5
    5082:	c0 f0       	brcs	.+48     	; 0x50b4 <Change_SleepMode+0x4a>
    5084:	86 30       	cpi	r24, 0x06	; 6
    5086:	79 f5       	brne	.+94     	; 0x50e6 <Change_SleepMode+0x7c>
    5088:	25 c0       	rjmp	.+74     	; 0x50d4 <Change_SleepMode+0x6a>
		{
			case IDLE_MODE:
			CLR_BIT(MCUCR,SM0);
    508a:	85 b7       	in	r24, 0x35	; 53
    508c:	8f 7e       	andi	r24, 0xEF	; 239
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <Change_SleepMode+0x2a>
			CLR_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case ADC_NR_MODE:
			SET_BIT(MCUCR,SM0);
    5090:	85 b7       	in	r24, 0x35	; 53
    5092:	80 61       	ori	r24, 0x10	; 16
    5094:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    5096:	85 b7       	in	r24, 0x35	; 53
    5098:	8f 7d       	andi	r24, 0xDF	; 223
    509a:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    509c:	85 b7       	in	r24, 0x35	; 53
    509e:	8f 7b       	andi	r24, 0xBF	; 191
    50a0:	17 c0       	rjmp	.+46     	; 0x50d0 <Change_SleepMode+0x66>
			break;
			case PWR_DOWN_MODE:
			CLR_BIT(MCUCR,SM0);
    50a2:	85 b7       	in	r24, 0x35	; 53
    50a4:	8f 7e       	andi	r24, 0xEF	; 239
    50a6:	02 c0       	rjmp	.+4      	; 0x50ac <Change_SleepMode+0x42>
			SET_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case PWR_SAVE_MODE:
			SET_BIT(MCUCR,SM0);
    50a8:	85 b7       	in	r24, 0x35	; 53
    50aa:	80 61       	ori	r24, 0x10	; 16
    50ac:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    50ae:	85 b7       	in	r24, 0x35	; 53
    50b0:	80 62       	ori	r24, 0x20	; 32
    50b2:	f3 cf       	rjmp	.-26     	; 0x509a <Change_SleepMode+0x30>
			CLR_BIT(MCUCR,SM2);
			break;
			case RESERVED_MODE:
			CLR_BIT(MCUCR,SM0);
    50b4:	85 b7       	in	r24, 0x35	; 53
    50b6:	8f 7e       	andi	r24, 0xEF	; 239
    50b8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    50ba:	85 b7       	in	r24, 0x35	; 53
    50bc:	8f 7d       	andi	r24, 0xDF	; 223
    50be:	05 c0       	rjmp	.+10     	; 0x50ca <Change_SleepMode+0x60>
			SET_BIT(MCUCR,SM2);
			break;
			case STANDBY_MODE:
			CLR_BIT(MCUCR,SM0);
    50c0:	85 b7       	in	r24, 0x35	; 53
    50c2:	8f 7e       	andi	r24, 0xEF	; 239
    50c4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    50c6:	85 b7       	in	r24, 0x35	; 53
    50c8:	80 62       	ori	r24, 0x20	; 32
    50ca:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    50cc:	85 b7       	in	r24, 0x35	; 53
    50ce:	80 64       	ori	r24, 0x40	; 64
    50d0:	85 bf       	out	0x35, r24	; 53
    50d2:	08 95       	ret
			break;
			case EXT_STANDBY_MODE:
			SET_BIT(MCUCR,SM0);
    50d4:	85 b7       	in	r24, 0x35	; 53
    50d6:	80 61       	ori	r24, 0x10	; 16
    50d8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    50da:	85 b7       	in	r24, 0x35	; 53
    50dc:	80 62       	ori	r24, 0x20	; 32
    50de:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    50e0:	85 b7       	in	r24, 0x35	; 53
    50e2:	80 64       	ori	r24, 0x40	; 64
    50e4:	85 bf       	out	0x35, r24	; 53
    50e6:	08 95       	ret

000050e8 <CPU_SleepEnable>:
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    50e8:	85 b7       	in	r24, 0x35	; 53
    50ea:	80 68       	ori	r24, 0x80	; 128
    50ec:	85 bf       	out	0x35, r24	; 53
}
    50ee:	08 95       	ret

000050f0 <CPU_SleepDisable>:

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    50f0:	85 b7       	in	r24, 0x35	; 53
    50f2:	8f 77       	andi	r24, 0x7F	; 127
    50f4:	85 bf       	out	0x35, r24	; 53
}
    50f6:	08 95       	ret

000050f8 <Sleep_CPU>:

void Sleep_CPU(void)
{
	do
	{
		sleep();
    50f8:	88 95       	sleep
	} while (0);
}
    50fa:	08 95       	ret

000050fc <CPU_Sleep>:

void CPU_Sleep(void)
{
	Set_SleepMode();
    50fc:	0e 94 2b 28 	call	0x5056	; 0x5056 <Set_SleepMode>
	cli();
    5100:	f8 94       	cli
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    5102:	85 b7       	in	r24, 0x35	; 53
    5104:	80 68       	ori	r24, 0x80	; 128
    5106:	85 bf       	out	0x35, r24	; 53
void CPU_Sleep(void)
{
	Set_SleepMode();
	cli();
	CPU_SleepEnable();
	sei();
    5108:	78 94       	sei

void Sleep_CPU(void)
{
	do
	{
		sleep();
    510a:	88 95       	sleep
	SET_BIT(MCUCR,SE);
}

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    510c:	85 b7       	in	r24, 0x35	; 53
    510e:	8f 77       	andi	r24, 0x7F	; 127
    5110:	85 bf       	out	0x35, r24	; 53
	cli();
	CPU_SleepEnable();
	sei();
	Sleep_CPU();
	CPU_SleepDisable();
}
    5112:	08 95       	ret

00005114 <GIE_voidEnable>:
#include "GIE_Interface.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I_BIT);
    5114:	8f b7       	in	r24, 0x3f	; 63
    5116:	80 68       	ori	r24, 0x80	; 128
    5118:	8f bf       	out	0x3f, r24	; 63
}
    511a:	08 95       	ret

0000511c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
	CLR_BIT(SREG,SREG_I_BIT);
    511c:	8f b7       	in	r24, 0x3f	; 63
    511e:	8f 77       	andi	r24, 0x7F	; 127
    5120:	8f bf       	out	0x3f, r24	; 63
}
    5122:	08 95       	ret

00005124 <EXTI_voidInit>:
void EXTI_voidInit(void)
{
/***************** EXTI 0 *******************/
	#if	EXTI_INT0_ENABLE == ENABLE

		SET_BIT(GICR,GICR_INT0);
    5124:	8b b7       	in	r24, 0x3b	; 59
    5126:	80 64       	ori	r24, 0x40	; 64
    5128:	8b bf       	out	0x3b, r24	; 59

		#if EXTI_INT0_SC == FALLING_EDGE
			CLR_BIT(MCUCR,MCUCR_ISC00);
    512a:	85 b7       	in	r24, 0x35	; 53
    512c:	8e 7f       	andi	r24, 0xFE	; 254
    512e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
    5130:	85 b7       	in	r24, 0x35	; 53
    5132:	82 60       	ori	r24, 0x02	; 2
    5134:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT0_ENABLE Error Configuration Parameter"
	#endif

/***************** EXTI 1 *******************/
	#if	EXTI_INT1_ENABLE == ENABLE
		SET_BIT(GICR,GICR_INT1);
    5136:	8b b7       	in	r24, 0x3b	; 59
    5138:	80 68       	ori	r24, 0x80	; 128
    513a:	8b bf       	out	0x3b, r24	; 59
		#if EXTI_INT1_SC == FALLING_EDGE
			CLR_BIT(MCUCR,MCUCR_ISC10);
    513c:	85 b7       	in	r24, 0x35	; 53
    513e:	8b 7f       	andi	r24, 0xFB	; 251
    5140:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
    5142:	85 b7       	in	r24, 0x35	; 53
    5144:	88 60       	ori	r24, 0x08	; 8
    5146:	85 bf       	out	0x35, r24	; 53
		#error "EXTI_INT1_ENABLE Error Configuration Parameter"
	#endif

/***************** EXTI 2 *******************/
	#if	EXTI_INT2_ENABLE == ENABLE
		SET_BIT(GICR,GICR_INT2);
    5148:	8b b7       	in	r24, 0x3b	; 59
    514a:	80 62       	ori	r24, 0x20	; 32
    514c:	8b bf       	out	0x3b, r24	; 59
		#if EXTI_INT2_SC == FALLING_EDGE
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    514e:	84 b7       	in	r24, 0x34	; 52
    5150:	8f 7b       	andi	r24, 0xBF	; 191
    5152:	84 bf       	out	0x34, r24	; 52
			CLR_BIT(GICR,GICR_INT2);
	#else
		#error "EXTI_INT2_ENABLE Error Configuration Parameter"
	#endif

}
    5154:	08 95       	ret

00005156 <EXTI_u8SetInt0SC>:

u8 EXTI_u8SetInt0SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    5156:	82 30       	cpi	r24, 0x02	; 2
    5158:	71 f0       	breq	.+28     	; 0x5176 <EXTI_u8SetInt0SC+0x20>
    515a:	83 30       	cpi	r24, 0x03	; 3
    515c:	18 f4       	brcc	.+6      	; 0x5164 <EXTI_u8SetInt0SC+0xe>
    515e:	81 30       	cpi	r24, 0x01	; 1
    5160:	29 f4       	brne	.+10     	; 0x516c <EXTI_u8SetInt0SC+0x16>
    5162:	06 c0       	rjmp	.+12     	; 0x5170 <EXTI_u8SetInt0SC+0x1a>
    5164:	83 30       	cpi	r24, 0x03	; 3
    5166:	81 f0       	breq	.+32     	; 0x5188 <EXTI_u8SetInt0SC+0x32>
    5168:	84 30       	cpi	r24, 0x04	; 4
    516a:	59 f0       	breq	.+22     	; 0x5182 <EXTI_u8SetInt0SC+0x2c>
    516c:	91 e0       	ldi	r25, 0x01	; 1
    516e:	13 c0       	rjmp	.+38     	; 0x5196 <EXTI_u8SetInt0SC+0x40>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    5170:	85 b7       	in	r24, 0x35	; 53
    5172:	8e 7f       	andi	r24, 0xFE	; 254
    5174:	02 c0       	rjmp	.+4      	; 0x517a <EXTI_u8SetInt0SC+0x24>
			SET_BIT(MCUCR,MCUCR_ISC01);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    5176:	85 b7       	in	r24, 0x35	; 53
    5178:	81 60       	ori	r24, 0x01	; 1
    517a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
    517c:	85 b7       	in	r24, 0x35	; 53
    517e:	82 60       	ori	r24, 0x02	; 2
    5180:	08 c0       	rjmp	.+16     	; 0x5192 <EXTI_u8SetInt0SC+0x3c>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    5182:	85 b7       	in	r24, 0x35	; 53
    5184:	81 60       	ori	r24, 0x01	; 1
    5186:	02 c0       	rjmp	.+4      	; 0x518c <EXTI_u8SetInt0SC+0x36>
			CLR_BIT(MCUCR,MCUCR_ISC01);
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    5188:	85 b7       	in	r24, 0x35	; 53
    518a:	8e 7f       	andi	r24, 0xFE	; 254
    518c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC01);
    518e:	85 b7       	in	r24, 0x35	; 53
    5190:	8d 7f       	andi	r24, 0xFD	; 253
    5192:	85 bf       	out	0x35, r24	; 53
    5194:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT0);
    5196:	8b b7       	in	r24, 0x3b	; 59
    5198:	80 64       	ori	r24, 0x40	; 64
    519a:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;
}
    519c:	89 2f       	mov	r24, r25
    519e:	08 95       	ret

000051a0 <EXTI_u8SetInt1SC>:

u8 EXTI_u8SetInt1SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    51a0:	82 30       	cpi	r24, 0x02	; 2
    51a2:	71 f0       	breq	.+28     	; 0x51c0 <EXTI_u8SetInt1SC+0x20>
    51a4:	83 30       	cpi	r24, 0x03	; 3
    51a6:	18 f4       	brcc	.+6      	; 0x51ae <EXTI_u8SetInt1SC+0xe>
    51a8:	81 30       	cpi	r24, 0x01	; 1
    51aa:	29 f4       	brne	.+10     	; 0x51b6 <EXTI_u8SetInt1SC+0x16>
    51ac:	06 c0       	rjmp	.+12     	; 0x51ba <EXTI_u8SetInt1SC+0x1a>
    51ae:	83 30       	cpi	r24, 0x03	; 3
    51b0:	81 f0       	breq	.+32     	; 0x51d2 <EXTI_u8SetInt1SC+0x32>
    51b2:	84 30       	cpi	r24, 0x04	; 4
    51b4:	59 f0       	breq	.+22     	; 0x51cc <EXTI_u8SetInt1SC+0x2c>
    51b6:	91 e0       	ldi	r25, 0x01	; 1
    51b8:	13 c0       	rjmp	.+38     	; 0x51e0 <EXTI_u8SetInt1SC+0x40>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    51ba:	85 b7       	in	r24, 0x35	; 53
    51bc:	8b 7f       	andi	r24, 0xFB	; 251
    51be:	02 c0       	rjmp	.+4      	; 0x51c4 <EXTI_u8SetInt1SC+0x24>
			SET_BIT(MCUCR,MCUCR_ISC11);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    51c0:	85 b7       	in	r24, 0x35	; 53
    51c2:	84 60       	ori	r24, 0x04	; 4
    51c4:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
    51c6:	85 b7       	in	r24, 0x35	; 53
    51c8:	88 60       	ori	r24, 0x08	; 8
    51ca:	08 c0       	rjmp	.+16     	; 0x51dc <EXTI_u8SetInt1SC+0x3c>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    51cc:	85 b7       	in	r24, 0x35	; 53
    51ce:	84 60       	ori	r24, 0x04	; 4
    51d0:	02 c0       	rjmp	.+4      	; 0x51d6 <EXTI_u8SetInt1SC+0x36>
			CLR_BIT(MCUCR,MCUCR_ISC11);
			break;
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    51d2:	85 b7       	in	r24, 0x35	; 53
    51d4:	8b 7f       	andi	r24, 0xFB	; 251
    51d6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,MCUCR_ISC11);
    51d8:	85 b7       	in	r24, 0x35	; 53
    51da:	87 7f       	andi	r24, 0xF7	; 247
    51dc:	85 bf       	out	0x35, r24	; 53
    51de:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT1);
    51e0:	8b b7       	in	r24, 0x3b	; 59
    51e2:	80 68       	ori	r24, 0x80	; 128
    51e4:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;


}
    51e6:	89 2f       	mov	r24, r25
    51e8:	08 95       	ret

000051ea <EXTI_u8SetInt2SC>:

u8 EXTI_u8SetInt2SC(u8 copy_u8SenseControl)
{
	u8 Local_u8ErrorStatus = E_OK;
	switch(copy_u8SenseControl)
    51ea:	81 30       	cpi	r24, 0x01	; 1
    51ec:	21 f0       	breq	.+8      	; 0x51f6 <EXTI_u8SetInt2SC+0xc>
    51ee:	82 30       	cpi	r24, 0x02	; 2
    51f0:	29 f0       	breq	.+10     	; 0x51fc <EXTI_u8SetInt2SC+0x12>
    51f2:	91 e0       	ldi	r25, 0x01	; 1
    51f4:	07 c0       	rjmp	.+14     	; 0x5204 <EXTI_u8SetInt2SC+0x1a>
	{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    51f6:	84 b7       	in	r24, 0x34	; 52
    51f8:	8f 7b       	andi	r24, 0xBF	; 191
    51fa:	02 c0       	rjmp	.+4      	; 0x5200 <EXTI_u8SetInt2SC+0x16>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    51fc:	84 b7       	in	r24, 0x34	; 52
    51fe:	80 64       	ori	r24, 0x40	; 64
    5200:	84 bf       	out	0x34, r24	; 52
    5202:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			Local_u8ErrorStatus = E_NOK;
			break;
	}
	SET_BIT(GICR,GICR_INT2);
    5204:	8b b7       	in	r24, 0x3b	; 59
    5206:	80 62       	ori	r24, 0x20	; 32
    5208:	8b bf       	out	0x3b, r24	; 59
	return Local_u8ErrorStatus;
}
    520a:	89 2f       	mov	r24, r25
    520c:	08 95       	ret

0000520e <EXTI_u8INT0SetCallBack>:

u8 EXTI_u8INT0SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    520e:	00 97       	sbiw	r24, 0x00	; 0
    5210:	11 f4       	brne	.+4      	; 0x5216 <EXTI_u8INT0SetCallBack+0x8>
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI0 = copy_ptrToFunction;
    5216:	90 93 a7 01 	sts	0x01A7, r25
    521a:	80 93 a6 01 	sts	0x01A6, r24
    521e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    5220:	08 95       	ret

00005222 <EXTI_voidClearInt0Flag>:

void EXTI_voidClearInt0Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF0);
    5222:	8a b7       	in	r24, 0x3a	; 58
    5224:	80 64       	ori	r24, 0x40	; 64
    5226:	8a bf       	out	0x3a, r24	; 58

}
    5228:	08 95       	ret

0000522a <EXTI_voidClearInt1Flag>:
void EXTI_voidClearInt1Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF1);
    522a:	8a b7       	in	r24, 0x3a	; 58
    522c:	80 68       	ori	r24, 0x80	; 128
    522e:	8a bf       	out	0x3a, r24	; 58
}
    5230:	08 95       	ret

00005232 <EXTI_voidClearInt2Flag>:
void EXTI_voidClearInt2Flag(void)
{
	SET_BIT(GIFR,GIFR_INTF2);
    5232:	8a b7       	in	r24, 0x3a	; 58
    5234:	80 62       	ori	r24, 0x20	; 32
    5236:	8a bf       	out	0x3a, r24	; 58
}
    5238:	08 95       	ret

0000523a <EXTI_u8INT1SetCallBack>:

u8 EXTI_u8INT1SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    523a:	00 97       	sbiw	r24, 0x00	; 0
    523c:	11 f4       	brne	.+4      	; 0x5242 <EXTI_u8INT1SetCallBack+0x8>
    523e:	81 e0       	ldi	r24, 0x01	; 1
    5240:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI1 = copy_ptrToFunction;
    5242:	90 93 a5 01 	sts	0x01A5, r25
    5246:	80 93 a4 01 	sts	0x01A4, r24
    524a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    524c:	08 95       	ret

0000524e <EXTI_u8INT2SetCallBack>:

u8 EXTI_u8INT2SetCallBack(void(*copy_ptrToFunction)(void))
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_ptrToFunction != NULL)
    524e:	00 97       	sbiw	r24, 0x00	; 0
    5250:	11 f4       	brne	.+4      	; 0x5256 <EXTI_u8INT2SetCallBack+0x8>
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	08 95       	ret
	{
		GLOBAL_ptrToFuncEXTI2 = copy_ptrToFunction;
    5256:	90 93 a3 01 	sts	0x01A3, r25
    525a:	80 93 a2 01 	sts	0x01A2, r24
    525e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;
}
    5260:	08 95       	ret

00005262 <__vector_1>:

/*********** ISR **************************/
/****ISR EXTI0*****/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    5262:	1f 92       	push	r1
    5264:	0f 92       	push	r0
    5266:	0f b6       	in	r0, 0x3f	; 63
    5268:	0f 92       	push	r0
    526a:	11 24       	eor	r1, r1
    526c:	2f 93       	push	r18
    526e:	3f 93       	push	r19
    5270:	4f 93       	push	r20
    5272:	5f 93       	push	r21
    5274:	6f 93       	push	r22
    5276:	7f 93       	push	r23
    5278:	8f 93       	push	r24
    527a:	9f 93       	push	r25
    527c:	af 93       	push	r26
    527e:	bf 93       	push	r27
    5280:	ef 93       	push	r30
    5282:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI0 != NULL)
    5284:	e0 91 a6 01 	lds	r30, 0x01A6
    5288:	f0 91 a7 01 	lds	r31, 0x01A7
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	09 f0       	breq	.+2      	; 0x5292 <__vector_1+0x30>
	{
		GLOBAL_ptrToFuncEXTI0();
    5290:	09 95       	icall
	else
	{

	}

}
    5292:	ff 91       	pop	r31
    5294:	ef 91       	pop	r30
    5296:	bf 91       	pop	r27
    5298:	af 91       	pop	r26
    529a:	9f 91       	pop	r25
    529c:	8f 91       	pop	r24
    529e:	7f 91       	pop	r23
    52a0:	6f 91       	pop	r22
    52a2:	5f 91       	pop	r21
    52a4:	4f 91       	pop	r20
    52a6:	3f 91       	pop	r19
    52a8:	2f 91       	pop	r18
    52aa:	0f 90       	pop	r0
    52ac:	0f be       	out	0x3f, r0	; 63
    52ae:	0f 90       	pop	r0
    52b0:	1f 90       	pop	r1
    52b2:	18 95       	reti

000052b4 <__vector_2>:

/****ISR EXTI1*****/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    52b4:	1f 92       	push	r1
    52b6:	0f 92       	push	r0
    52b8:	0f b6       	in	r0, 0x3f	; 63
    52ba:	0f 92       	push	r0
    52bc:	11 24       	eor	r1, r1
    52be:	2f 93       	push	r18
    52c0:	3f 93       	push	r19
    52c2:	4f 93       	push	r20
    52c4:	5f 93       	push	r21
    52c6:	6f 93       	push	r22
    52c8:	7f 93       	push	r23
    52ca:	8f 93       	push	r24
    52cc:	9f 93       	push	r25
    52ce:	af 93       	push	r26
    52d0:	bf 93       	push	r27
    52d2:	ef 93       	push	r30
    52d4:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI1 != NULL)
    52d6:	e0 91 a4 01 	lds	r30, 0x01A4
    52da:	f0 91 a5 01 	lds	r31, 0x01A5
    52de:	30 97       	sbiw	r30, 0x00	; 0
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <__vector_2+0x30>
	{
		GLOBAL_ptrToFuncEXTI1();
    52e2:	09 95       	icall
	else
	{

	}

}
    52e4:	ff 91       	pop	r31
    52e6:	ef 91       	pop	r30
    52e8:	bf 91       	pop	r27
    52ea:	af 91       	pop	r26
    52ec:	9f 91       	pop	r25
    52ee:	8f 91       	pop	r24
    52f0:	7f 91       	pop	r23
    52f2:	6f 91       	pop	r22
    52f4:	5f 91       	pop	r21
    52f6:	4f 91       	pop	r20
    52f8:	3f 91       	pop	r19
    52fa:	2f 91       	pop	r18
    52fc:	0f 90       	pop	r0
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	0f 90       	pop	r0
    5302:	1f 90       	pop	r1
    5304:	18 95       	reti

00005306 <__vector_3>:

/****ISR EXTI2*****/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    5306:	1f 92       	push	r1
    5308:	0f 92       	push	r0
    530a:	0f b6       	in	r0, 0x3f	; 63
    530c:	0f 92       	push	r0
    530e:	11 24       	eor	r1, r1
    5310:	2f 93       	push	r18
    5312:	3f 93       	push	r19
    5314:	4f 93       	push	r20
    5316:	5f 93       	push	r21
    5318:	6f 93       	push	r22
    531a:	7f 93       	push	r23
    531c:	8f 93       	push	r24
    531e:	9f 93       	push	r25
    5320:	af 93       	push	r26
    5322:	bf 93       	push	r27
    5324:	ef 93       	push	r30
    5326:	ff 93       	push	r31
	if(GLOBAL_ptrToFuncEXTI2 != NULL)
    5328:	e0 91 a2 01 	lds	r30, 0x01A2
    532c:	f0 91 a3 01 	lds	r31, 0x01A3
    5330:	30 97       	sbiw	r30, 0x00	; 0
    5332:	09 f0       	breq	.+2      	; 0x5336 <__vector_3+0x30>
	{
		GLOBAL_ptrToFuncEXTI2();
    5334:	09 95       	icall
	else
	{

	}

}
    5336:	ff 91       	pop	r31
    5338:	ef 91       	pop	r30
    533a:	bf 91       	pop	r27
    533c:	af 91       	pop	r26
    533e:	9f 91       	pop	r25
    5340:	8f 91       	pop	r24
    5342:	7f 91       	pop	r23
    5344:	6f 91       	pop	r22
    5346:	5f 91       	pop	r21
    5348:	4f 91       	pop	r20
    534a:	3f 91       	pop	r19
    534c:	2f 91       	pop	r18
    534e:	0f 90       	pop	r0
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	0f 90       	pop	r0
    5354:	1f 90       	pop	r1
    5356:	18 95       	reti

00005358 <DIO_u8SetPortValue>:

/********************************** FUNCTION Implementation ****************************************/
ReturnType_State_t DIO_u8SetPortValue(u8 copy_u8Port , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    5358:	81 30       	cpi	r24, 0x01	; 1
    535a:	51 f0       	breq	.+20     	; 0x5370 <DIO_u8SetPortValue+0x18>
    535c:	81 30       	cpi	r24, 0x01	; 1
    535e:	30 f0       	brcs	.+12     	; 0x536c <DIO_u8SetPortValue+0x14>
    5360:	82 30       	cpi	r24, 0x02	; 2
    5362:	41 f0       	breq	.+16     	; 0x5374 <DIO_u8SetPortValue+0x1c>
    5364:	83 30       	cpi	r24, 0x03	; 3
    5366:	49 f0       	breq	.+18     	; 0x537a <DIO_u8SetPortValue+0x22>
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	08 95       	ret
	case DIO_PORTA:
		PORTA = copy_u8Value;
    536c:	6b bb       	out	0x1b, r22	; 27
    536e:	03 c0       	rjmp	.+6      	; 0x5376 <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTB:
		PORTB = copy_u8Value;
    5370:	68 bb       	out	0x18, r22	; 24
    5372:	01 c0       	rjmp	.+2      	; 0x5376 <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTC:
		PORTC = copy_u8Value;
    5374:	65 bb       	out	0x15, r22	; 21
    5376:	80 e0       	ldi	r24, 0x00	; 0
    5378:	08 95       	ret
	break;
	case DIO_PORTD:
		PORTD = copy_u8Value;
    537a:	62 bb       	out	0x12, r22	; 18
    537c:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    537e:	08 95       	ret

00005380 <DIO_u8SetPortDirection>:

ReturnType_State_t DIO_u8SetPortDirection(u8 copy_u8Port , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    5380:	81 30       	cpi	r24, 0x01	; 1
    5382:	51 f0       	breq	.+20     	; 0x5398 <DIO_u8SetPortDirection+0x18>
    5384:	81 30       	cpi	r24, 0x01	; 1
    5386:	30 f0       	brcs	.+12     	; 0x5394 <DIO_u8SetPortDirection+0x14>
    5388:	82 30       	cpi	r24, 0x02	; 2
    538a:	41 f0       	breq	.+16     	; 0x539c <DIO_u8SetPortDirection+0x1c>
    538c:	83 30       	cpi	r24, 0x03	; 3
    538e:	49 f0       	breq	.+18     	; 0x53a2 <DIO_u8SetPortDirection+0x22>
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	08 95       	ret
	case DIO_PORTA:
		DDRA = copy_u8Direction;
    5394:	6a bb       	out	0x1a, r22	; 26
    5396:	03 c0       	rjmp	.+6      	; 0x539e <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTB:
		DDRB = copy_u8Direction;
    5398:	67 bb       	out	0x17, r22	; 23
    539a:	01 c0       	rjmp	.+2      	; 0x539e <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTC:
		DDRC = copy_u8Direction;
    539c:	64 bb       	out	0x14, r22	; 20
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	08 95       	ret
	break;
	case DIO_PORTD:
		DDRD = copy_u8Direction;
    53a2:	61 bb       	out	0x11, r22	; 17
    53a4:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    53a6:	08 95       	ret

000053a8 <DIO_u8GetPortValue>:

ReturnType_State_t DIO_u8GetPortValue(u8 copy_u8Port , u8 *copy_u8Variable)
{
    53a8:	fb 01       	movw	r30, r22
	ReturnType_State_t Local_u8State = E_OK;
	if(copy_u8Variable != NULL)
    53aa:	61 15       	cp	r22, r1
    53ac:	71 05       	cpc	r23, r1
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <DIO_u8GetPortValue+0xc>
    53b0:	82 e0       	ldi	r24, 0x02	; 2
    53b2:	08 95       	ret
	{
		switch(copy_u8Port){
    53b4:	81 30       	cpi	r24, 0x01	; 1
    53b6:	51 f0       	breq	.+20     	; 0x53cc <DIO_u8GetPortValue+0x24>
    53b8:	81 30       	cpi	r24, 0x01	; 1
    53ba:	30 f0       	brcs	.+12     	; 0x53c8 <DIO_u8GetPortValue+0x20>
    53bc:	82 30       	cpi	r24, 0x02	; 2
    53be:	41 f0       	breq	.+16     	; 0x53d0 <DIO_u8GetPortValue+0x28>
    53c0:	83 30       	cpi	r24, 0x03	; 3
    53c2:	51 f0       	breq	.+20     	; 0x53d8 <DIO_u8GetPortValue+0x30>
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	08 95       	ret
		case DIO_PORTA:
			*copy_u8Variable = PINA;
    53c8:	89 b3       	in	r24, 0x19	; 25
    53ca:	03 c0       	rjmp	.+6      	; 0x53d2 <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTB:
			*copy_u8Variable = PINB;
    53cc:	86 b3       	in	r24, 0x16	; 22
    53ce:	01 c0       	rjmp	.+2      	; 0x53d2 <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTC:
			*copy_u8Variable = PINC;
    53d0:	83 b3       	in	r24, 0x13	; 19
    53d2:	80 83       	st	Z, r24
    53d4:	80 e0       	ldi	r24, 0x00	; 0
    53d6:	08 95       	ret
		break;
		case DIO_PORTD:
			*copy_u8Variable = PIND;
    53d8:	80 b3       	in	r24, 0x10	; 16
    53da:	80 83       	st	Z, r24
    53dc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8State = E_NOK_NULL_PTR;
	}
	return Local_u8State;
}
    53de:	08 95       	ret

000053e0 <DIO_u8SetPinValue>:

ReturnType_State_t DIO_u8SetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    53e0:	68 30       	cpi	r22, 0x08	; 8
    53e2:	08 f0       	brcs	.+2      	; 0x53e6 <DIO_u8SetPinValue+0x6>
    53e4:	74 c0       	rjmp	.+232    	; 0x54ce <DIO_u8SetPinValue+0xee>
	{
		if(copy_u8Value == DIO_PIN_LOW)
    53e6:	44 23       	and	r20, r20
    53e8:	d1 f5       	brne	.+116    	; 0x545e <DIO_u8SetPinValue+0x7e>
		{
			switch(copy_u8Port)
    53ea:	81 30       	cpi	r24, 0x01	; 1
    53ec:	a1 f0       	breq	.+40     	; 0x5416 <DIO_u8SetPinValue+0x36>
    53ee:	81 30       	cpi	r24, 0x01	; 1
    53f0:	30 f0       	brcs	.+12     	; 0x53fe <DIO_u8SetPinValue+0x1e>
    53f2:	82 30       	cpi	r24, 0x02	; 2
    53f4:	e1 f0       	breq	.+56     	; 0x542e <DIO_u8SetPinValue+0x4e>
    53f6:	83 30       	cpi	r24, 0x03	; 3
    53f8:	09 f0       	breq	.+2      	; 0x53fc <DIO_u8SetPinValue+0x1c>
    53fa:	69 c0       	rjmp	.+210    	; 0x54ce <DIO_u8SetPinValue+0xee>
    53fc:	24 c0       	rjmp	.+72     	; 0x5446 <DIO_u8SetPinValue+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA,copy_u8Pin);
    53fe:	2b b3       	in	r18, 0x1b	; 27
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	02 c0       	rjmp	.+4      	; 0x540a <DIO_u8SetPinValue+0x2a>
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	6a 95       	dec	r22
    540c:	e2 f7       	brpl	.-8      	; 0x5406 <DIO_u8SetPinValue+0x26>
    540e:	80 95       	com	r24
    5410:	82 23       	and	r24, r18
    5412:	8b bb       	out	0x1b, r24	; 27
    5414:	5a c0       	rjmp	.+180    	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(PORTB,copy_u8Pin);
    5416:	28 b3       	in	r18, 0x18	; 24
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	02 c0       	rjmp	.+4      	; 0x5422 <DIO_u8SetPinValue+0x42>
    541e:	88 0f       	add	r24, r24
    5420:	99 1f       	adc	r25, r25
    5422:	6a 95       	dec	r22
    5424:	e2 f7       	brpl	.-8      	; 0x541e <DIO_u8SetPinValue+0x3e>
    5426:	80 95       	com	r24
    5428:	82 23       	and	r24, r18
    542a:	88 bb       	out	0x18, r24	; 24
    542c:	4e c0       	rjmp	.+156    	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(PORTC,copy_u8Pin);
    542e:	25 b3       	in	r18, 0x15	; 21
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	02 c0       	rjmp	.+4      	; 0x543a <DIO_u8SetPinValue+0x5a>
    5436:	88 0f       	add	r24, r24
    5438:	99 1f       	adc	r25, r25
    543a:	6a 95       	dec	r22
    543c:	e2 f7       	brpl	.-8      	; 0x5436 <DIO_u8SetPinValue+0x56>
    543e:	80 95       	com	r24
    5440:	82 23       	and	r24, r18
    5442:	85 bb       	out	0x15, r24	; 21
    5444:	42 c0       	rjmp	.+132    	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(PORTD,copy_u8Pin);
    5446:	22 b3       	in	r18, 0x12	; 18
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	02 c0       	rjmp	.+4      	; 0x5452 <DIO_u8SetPinValue+0x72>
    544e:	88 0f       	add	r24, r24
    5450:	99 1f       	adc	r25, r25
    5452:	6a 95       	dec	r22
    5454:	e2 f7       	brpl	.-8      	; 0x544e <DIO_u8SetPinValue+0x6e>
    5456:	80 95       	com	r24
    5458:	82 23       	and	r24, r18
    545a:	82 bb       	out	0x12, r24	; 18
    545c:	36 c0       	rjmp	.+108    	; 0x54ca <DIO_u8SetPinValue+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Value == DIO_PIN_HIGH)
    545e:	41 30       	cpi	r20, 0x01	; 1
    5460:	a1 f5       	brne	.+104    	; 0x54ca <DIO_u8SetPinValue+0xea>
		{
			switch(copy_u8Port)
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	91 f0       	breq	.+36     	; 0x548a <DIO_u8SetPinValue+0xaa>
    5466:	81 30       	cpi	r24, 0x01	; 1
    5468:	28 f0       	brcs	.+10     	; 0x5474 <DIO_u8SetPinValue+0x94>
    546a:	82 30       	cpi	r24, 0x02	; 2
    546c:	c9 f0       	breq	.+50     	; 0x54a0 <DIO_u8SetPinValue+0xc0>
    546e:	83 30       	cpi	r24, 0x03	; 3
    5470:	71 f5       	brne	.+92     	; 0x54ce <DIO_u8SetPinValue+0xee>
    5472:	21 c0       	rjmp	.+66     	; 0x54b6 <DIO_u8SetPinValue+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(PORTA,copy_u8Pin);
    5474:	2b b3       	in	r18, 0x1b	; 27
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	02 c0       	rjmp	.+4      	; 0x5480 <DIO_u8SetPinValue+0xa0>
    547c:	88 0f       	add	r24, r24
    547e:	99 1f       	adc	r25, r25
    5480:	6a 95       	dec	r22
    5482:	e2 f7       	brpl	.-8      	; 0x547c <DIO_u8SetPinValue+0x9c>
    5484:	28 2b       	or	r18, r24
    5486:	2b bb       	out	0x1b, r18	; 27
    5488:	20 c0       	rjmp	.+64     	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(PORTB,copy_u8Pin);
    548a:	28 b3       	in	r18, 0x18	; 24
    548c:	81 e0       	ldi	r24, 0x01	; 1
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	02 c0       	rjmp	.+4      	; 0x5496 <DIO_u8SetPinValue+0xb6>
    5492:	88 0f       	add	r24, r24
    5494:	99 1f       	adc	r25, r25
    5496:	6a 95       	dec	r22
    5498:	e2 f7       	brpl	.-8      	; 0x5492 <DIO_u8SetPinValue+0xb2>
    549a:	28 2b       	or	r18, r24
    549c:	28 bb       	out	0x18, r18	; 24
    549e:	15 c0       	rjmp	.+42     	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(PORTC,copy_u8Pin);
    54a0:	25 b3       	in	r18, 0x15	; 21
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	02 c0       	rjmp	.+4      	; 0x54ac <DIO_u8SetPinValue+0xcc>
    54a8:	88 0f       	add	r24, r24
    54aa:	99 1f       	adc	r25, r25
    54ac:	6a 95       	dec	r22
    54ae:	e2 f7       	brpl	.-8      	; 0x54a8 <DIO_u8SetPinValue+0xc8>
    54b0:	28 2b       	or	r18, r24
    54b2:	25 bb       	out	0x15, r18	; 21
    54b4:	0a c0       	rjmp	.+20     	; 0x54ca <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(PORTD,copy_u8Pin);
    54b6:	22 b3       	in	r18, 0x12	; 18
    54b8:	81 e0       	ldi	r24, 0x01	; 1
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <DIO_u8SetPinValue+0xe2>
    54be:	88 0f       	add	r24, r24
    54c0:	99 1f       	adc	r25, r25
    54c2:	6a 95       	dec	r22
    54c4:	e2 f7       	brpl	.-8      	; 0x54be <DIO_u8SetPinValue+0xde>
    54c6:	28 2b       	or	r18, r24
    54c8:	22 bb       	out	0x12, r18	; 18
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	08 95       	ret
			break;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    54d0:	08 95       	ret

000054d2 <DIO_u8SetPinDirection>:

ReturnType_State_t DIO_u8SetPinDirection(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    54d2:	68 30       	cpi	r22, 0x08	; 8
    54d4:	08 f0       	brcs	.+2      	; 0x54d8 <DIO_u8SetPinDirection+0x6>
    54d6:	74 c0       	rjmp	.+232    	; 0x55c0 <DIO_u8SetPinDirection+0xee>
	{
		if(copy_u8Direction == DIO_PIN_INPUT)
    54d8:	44 23       	and	r20, r20
    54da:	d1 f5       	brne	.+116    	; 0x5550 <DIO_u8SetPinDirection+0x7e>
		{
			switch(copy_u8Port)
    54dc:	81 30       	cpi	r24, 0x01	; 1
    54de:	a1 f0       	breq	.+40     	; 0x5508 <DIO_u8SetPinDirection+0x36>
    54e0:	81 30       	cpi	r24, 0x01	; 1
    54e2:	30 f0       	brcs	.+12     	; 0x54f0 <DIO_u8SetPinDirection+0x1e>
    54e4:	82 30       	cpi	r24, 0x02	; 2
    54e6:	e1 f0       	breq	.+56     	; 0x5520 <DIO_u8SetPinDirection+0x4e>
    54e8:	83 30       	cpi	r24, 0x03	; 3
    54ea:	09 f0       	breq	.+2      	; 0x54ee <DIO_u8SetPinDirection+0x1c>
    54ec:	69 c0       	rjmp	.+210    	; 0x55c0 <DIO_u8SetPinDirection+0xee>
    54ee:	24 c0       	rjmp	.+72     	; 0x5538 <DIO_u8SetPinDirection+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,copy_u8Pin);
    54f0:	2a b3       	in	r18, 0x1a	; 26
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	02 c0       	rjmp	.+4      	; 0x54fc <DIO_u8SetPinDirection+0x2a>
    54f8:	88 0f       	add	r24, r24
    54fa:	99 1f       	adc	r25, r25
    54fc:	6a 95       	dec	r22
    54fe:	e2 f7       	brpl	.-8      	; 0x54f8 <DIO_u8SetPinDirection+0x26>
    5500:	80 95       	com	r24
    5502:	82 23       	and	r24, r18
    5504:	8a bb       	out	0x1a, r24	; 26
    5506:	5a c0       	rjmp	.+180    	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(DDRB,copy_u8Pin);
    5508:	27 b3       	in	r18, 0x17	; 23
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	02 c0       	rjmp	.+4      	; 0x5514 <DIO_u8SetPinDirection+0x42>
    5510:	88 0f       	add	r24, r24
    5512:	99 1f       	adc	r25, r25
    5514:	6a 95       	dec	r22
    5516:	e2 f7       	brpl	.-8      	; 0x5510 <DIO_u8SetPinDirection+0x3e>
    5518:	80 95       	com	r24
    551a:	82 23       	and	r24, r18
    551c:	87 bb       	out	0x17, r24	; 23
    551e:	4e c0       	rjmp	.+156    	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(DDRC,copy_u8Pin);
    5520:	24 b3       	in	r18, 0x14	; 20
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	02 c0       	rjmp	.+4      	; 0x552c <DIO_u8SetPinDirection+0x5a>
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	6a 95       	dec	r22
    552e:	e2 f7       	brpl	.-8      	; 0x5528 <DIO_u8SetPinDirection+0x56>
    5530:	80 95       	com	r24
    5532:	82 23       	and	r24, r18
    5534:	84 bb       	out	0x14, r24	; 20
    5536:	42 c0       	rjmp	.+132    	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(DDRD,copy_u8Pin);
    5538:	21 b3       	in	r18, 0x11	; 17
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	02 c0       	rjmp	.+4      	; 0x5544 <DIO_u8SetPinDirection+0x72>
    5540:	88 0f       	add	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	6a 95       	dec	r22
    5546:	e2 f7       	brpl	.-8      	; 0x5540 <DIO_u8SetPinDirection+0x6e>
    5548:	80 95       	com	r24
    554a:	82 23       	and	r24, r18
    554c:	81 bb       	out	0x11, r24	; 17
    554e:	36 c0       	rjmp	.+108    	; 0x55bc <DIO_u8SetPinDirection+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Direction == DIO_PIN_OUTPUT)
    5550:	41 30       	cpi	r20, 0x01	; 1
    5552:	a1 f5       	brne	.+104    	; 0x55bc <DIO_u8SetPinDirection+0xea>
		{
			switch(copy_u8Port)
    5554:	81 30       	cpi	r24, 0x01	; 1
    5556:	91 f0       	breq	.+36     	; 0x557c <DIO_u8SetPinDirection+0xaa>
    5558:	81 30       	cpi	r24, 0x01	; 1
    555a:	28 f0       	brcs	.+10     	; 0x5566 <DIO_u8SetPinDirection+0x94>
    555c:	82 30       	cpi	r24, 0x02	; 2
    555e:	c9 f0       	breq	.+50     	; 0x5592 <DIO_u8SetPinDirection+0xc0>
    5560:	83 30       	cpi	r24, 0x03	; 3
    5562:	71 f5       	brne	.+92     	; 0x55c0 <DIO_u8SetPinDirection+0xee>
    5564:	21 c0       	rjmp	.+66     	; 0x55a8 <DIO_u8SetPinDirection+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,copy_u8Pin);
    5566:	2a b3       	in	r18, 0x1a	; 26
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	02 c0       	rjmp	.+4      	; 0x5572 <DIO_u8SetPinDirection+0xa0>
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	6a 95       	dec	r22
    5574:	e2 f7       	brpl	.-8      	; 0x556e <DIO_u8SetPinDirection+0x9c>
    5576:	28 2b       	or	r18, r24
    5578:	2a bb       	out	0x1a, r18	; 26
    557a:	20 c0       	rjmp	.+64     	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(DDRB,copy_u8Pin);
    557c:	27 b3       	in	r18, 0x17	; 23
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	02 c0       	rjmp	.+4      	; 0x5588 <DIO_u8SetPinDirection+0xb6>
    5584:	88 0f       	add	r24, r24
    5586:	99 1f       	adc	r25, r25
    5588:	6a 95       	dec	r22
    558a:	e2 f7       	brpl	.-8      	; 0x5584 <DIO_u8SetPinDirection+0xb2>
    558c:	28 2b       	or	r18, r24
    558e:	27 bb       	out	0x17, r18	; 23
    5590:	15 c0       	rjmp	.+42     	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(DDRC,copy_u8Pin);
    5592:	24 b3       	in	r18, 0x14	; 20
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	02 c0       	rjmp	.+4      	; 0x559e <DIO_u8SetPinDirection+0xcc>
    559a:	88 0f       	add	r24, r24
    559c:	99 1f       	adc	r25, r25
    559e:	6a 95       	dec	r22
    55a0:	e2 f7       	brpl	.-8      	; 0x559a <DIO_u8SetPinDirection+0xc8>
    55a2:	28 2b       	or	r18, r24
    55a4:	24 bb       	out	0x14, r18	; 20
    55a6:	0a c0       	rjmp	.+20     	; 0x55bc <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(DDRD,copy_u8Pin);
    55a8:	21 b3       	in	r18, 0x11	; 17
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	90 e0       	ldi	r25, 0x00	; 0
    55ae:	02 c0       	rjmp	.+4      	; 0x55b4 <DIO_u8SetPinDirection+0xe2>
    55b0:	88 0f       	add	r24, r24
    55b2:	99 1f       	adc	r25, r25
    55b4:	6a 95       	dec	r22
    55b6:	e2 f7       	brpl	.-8      	; 0x55b0 <DIO_u8SetPinDirection+0xde>
    55b8:	28 2b       	or	r18, r24
    55ba:	21 bb       	out	0x11, r18	; 17
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	08 95       	ret
			break;
    55c0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    55c2:	08 95       	ret

000055c4 <DIO_u8GetPinValue>:

ReturnType_State_t DIO_u8GetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 *copy_u8Variable)
{
    55c4:	fa 01       	movw	r30, r20
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    55c6:	68 30       	cpi	r22, 0x08	; 8
    55c8:	d0 f4       	brcc	.+52     	; 0x55fe <DIO_u8GetPinValue+0x3a>
	{
			switch(copy_u8Port)
    55ca:	81 30       	cpi	r24, 0x01	; 1
    55cc:	49 f0       	breq	.+18     	; 0x55e0 <DIO_u8GetPinValue+0x1c>
    55ce:	81 30       	cpi	r24, 0x01	; 1
    55d0:	28 f0       	brcs	.+10     	; 0x55dc <DIO_u8GetPinValue+0x18>
    55d2:	82 30       	cpi	r24, 0x02	; 2
    55d4:	39 f0       	breq	.+14     	; 0x55e4 <DIO_u8GetPinValue+0x20>
    55d6:	83 30       	cpi	r24, 0x03	; 3
    55d8:	91 f4       	brne	.+36     	; 0x55fe <DIO_u8GetPinValue+0x3a>
    55da:	06 c0       	rjmp	.+12     	; 0x55e8 <DIO_u8GetPinValue+0x24>
			{
			case DIO_PORTA:
				*copy_u8Variable = GET_BIT(PINA,copy_u8Pin);
    55dc:	89 b3       	in	r24, 0x19	; 25
    55de:	05 c0       	rjmp	.+10     	; 0x55ea <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTB:
				*copy_u8Variable = GET_BIT(PINB,copy_u8Pin);
    55e0:	86 b3       	in	r24, 0x16	; 22
    55e2:	03 c0       	rjmp	.+6      	; 0x55ea <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTC:
				*copy_u8Variable = GET_BIT(PINC,copy_u8Pin);
    55e4:	83 b3       	in	r24, 0x13	; 19
    55e6:	01 c0       	rjmp	.+2      	; 0x55ea <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTD:
				*copy_u8Variable = GET_BIT(PIND,copy_u8Pin);
    55e8:	80 b3       	in	r24, 0x10	; 16
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	02 c0       	rjmp	.+4      	; 0x55f2 <DIO_u8GetPinValue+0x2e>
    55ee:	95 95       	asr	r25
    55f0:	87 95       	ror	r24
    55f2:	6a 95       	dec	r22
    55f4:	e2 f7       	brpl	.-8      	; 0x55ee <DIO_u8GetPinValue+0x2a>
    55f6:	81 70       	andi	r24, 0x01	; 1
    55f8:	80 83       	st	Z, r24
    55fa:	80 e0       	ldi	r24, 0x00	; 0
    55fc:	08 95       	ret
			break;
    55fe:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    5600:	08 95       	ret

00005602 <DIO_u8ConnectPullUP>:

ReturnType_State_t DIO_u8ConnectPullUP(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8ConnectPullUp)
{
    5602:	98 2f       	mov	r25, r24
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Port <= DIO_PORTD) && (copy_u8Pin <= DIO_PIN7) )
    5604:	84 30       	cpi	r24, 0x04	; 4
    5606:	08 f0       	brcs	.+2      	; 0x560a <DIO_u8ConnectPullUP+0x8>
    5608:	86 c0       	rjmp	.+268    	; 0x5716 <DIO_u8ConnectPullUP+0x114>
    560a:	68 30       	cpi	r22, 0x08	; 8
    560c:	08 f0       	brcs	.+2      	; 0x5610 <DIO_u8ConnectPullUP+0xe>
    560e:	83 c0       	rjmp	.+262    	; 0x5716 <DIO_u8ConnectPullUP+0x114>
	{
		CLR_BIT(SFIOR,PUD);
    5610:	80 b7       	in	r24, 0x30	; 48
    5612:	8b 7f       	andi	r24, 0xFB	; 251
    5614:	80 bf       	out	0x30, r24	; 48
		switch(copy_u8Port)
    5616:	91 30       	cpi	r25, 0x01	; 1
    5618:	31 f1       	breq	.+76     	; 0x5666 <DIO_u8ConnectPullUP+0x64>
    561a:	91 30       	cpi	r25, 0x01	; 1
    561c:	38 f0       	brcs	.+14     	; 0x562c <DIO_u8ConnectPullUP+0x2a>
    561e:	92 30       	cpi	r25, 0x02	; 2
    5620:	09 f4       	brne	.+2      	; 0x5624 <DIO_u8ConnectPullUP+0x22>
    5622:	3e c0       	rjmp	.+124    	; 0x56a0 <DIO_u8ConnectPullUP+0x9e>
    5624:	93 30       	cpi	r25, 0x03	; 3
    5626:	09 f0       	breq	.+2      	; 0x562a <DIO_u8ConnectPullUP+0x28>
    5628:	74 c0       	rjmp	.+232    	; 0x5712 <DIO_u8ConnectPullUP+0x110>
    562a:	57 c0       	rjmp	.+174    	; 0x56da <DIO_u8ConnectPullUP+0xd8>
		{
		case DIO_PORTA:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    562c:	41 30       	cpi	r20, 0x01	; 1
    562e:	79 f4       	brne	.+30     	; 0x564e <DIO_u8ConnectPullUP+0x4c>
			{
				CLR_BIT(DDRA,copy_u8Pin);
    5630:	3a b3       	in	r19, 0x1a	; 26
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	02 c0       	rjmp	.+4      	; 0x563c <DIO_u8ConnectPullUP+0x3a>
    5638:	88 0f       	add	r24, r24
    563a:	99 1f       	adc	r25, r25
    563c:	6a 95       	dec	r22
    563e:	e2 f7       	brpl	.-8      	; 0x5638 <DIO_u8ConnectPullUP+0x36>
    5640:	28 2f       	mov	r18, r24
    5642:	20 95       	com	r18
    5644:	23 23       	and	r18, r19
    5646:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA,copy_u8Pin);
    5648:	2b b3       	in	r18, 0x1b	; 27
    564a:	82 2b       	or	r24, r18
    564c:	0a c0       	rjmp	.+20     	; 0x5662 <DIO_u8ConnectPullUP+0x60>
			}
			else
			{
				CLR_BIT(PORTA,copy_u8Pin);
    564e:	2b b3       	in	r18, 0x1b	; 27
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	02 c0       	rjmp	.+4      	; 0x565a <DIO_u8ConnectPullUP+0x58>
    5656:	88 0f       	add	r24, r24
    5658:	99 1f       	adc	r25, r25
    565a:	6a 95       	dec	r22
    565c:	e2 f7       	brpl	.-8      	; 0x5656 <DIO_u8ConnectPullUP+0x54>
    565e:	80 95       	com	r24
    5660:	82 23       	and	r24, r18
    5662:	8b bb       	out	0x1b, r24	; 27
    5664:	56 c0       	rjmp	.+172    	; 0x5712 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTB:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    5666:	41 30       	cpi	r20, 0x01	; 1
    5668:	79 f4       	brne	.+30     	; 0x5688 <DIO_u8ConnectPullUP+0x86>
			{
				CLR_BIT(DDRB,copy_u8Pin);
    566a:	37 b3       	in	r19, 0x17	; 23
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	02 c0       	rjmp	.+4      	; 0x5676 <DIO_u8ConnectPullUP+0x74>
    5672:	88 0f       	add	r24, r24
    5674:	99 1f       	adc	r25, r25
    5676:	6a 95       	dec	r22
    5678:	e2 f7       	brpl	.-8      	; 0x5672 <DIO_u8ConnectPullUP+0x70>
    567a:	28 2f       	mov	r18, r24
    567c:	20 95       	com	r18
    567e:	23 23       	and	r18, r19
    5680:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB,copy_u8Pin);
    5682:	28 b3       	in	r18, 0x18	; 24
    5684:	82 2b       	or	r24, r18
    5686:	0a c0       	rjmp	.+20     	; 0x569c <DIO_u8ConnectPullUP+0x9a>
			}
			else
			{
				CLR_BIT(PORTB,copy_u8Pin);
    5688:	28 b3       	in	r18, 0x18	; 24
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	02 c0       	rjmp	.+4      	; 0x5694 <DIO_u8ConnectPullUP+0x92>
    5690:	88 0f       	add	r24, r24
    5692:	99 1f       	adc	r25, r25
    5694:	6a 95       	dec	r22
    5696:	e2 f7       	brpl	.-8      	; 0x5690 <DIO_u8ConnectPullUP+0x8e>
    5698:	80 95       	com	r24
    569a:	82 23       	and	r24, r18
    569c:	88 bb       	out	0x18, r24	; 24
    569e:	39 c0       	rjmp	.+114    	; 0x5712 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTC:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    56a0:	41 30       	cpi	r20, 0x01	; 1
    56a2:	79 f4       	brne	.+30     	; 0x56c2 <DIO_u8ConnectPullUP+0xc0>
			{
				CLR_BIT(DDRC,copy_u8Pin);
    56a4:	34 b3       	in	r19, 0x14	; 20
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	02 c0       	rjmp	.+4      	; 0x56b0 <DIO_u8ConnectPullUP+0xae>
    56ac:	88 0f       	add	r24, r24
    56ae:	99 1f       	adc	r25, r25
    56b0:	6a 95       	dec	r22
    56b2:	e2 f7       	brpl	.-8      	; 0x56ac <DIO_u8ConnectPullUP+0xaa>
    56b4:	28 2f       	mov	r18, r24
    56b6:	20 95       	com	r18
    56b8:	23 23       	and	r18, r19
    56ba:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC,copy_u8Pin);
    56bc:	25 b3       	in	r18, 0x15	; 21
    56be:	82 2b       	or	r24, r18
    56c0:	0a c0       	rjmp	.+20     	; 0x56d6 <DIO_u8ConnectPullUP+0xd4>
			}
			else
			{
				CLR_BIT(PORTC,copy_u8Pin);
    56c2:	25 b3       	in	r18, 0x15	; 21
    56c4:	81 e0       	ldi	r24, 0x01	; 1
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	02 c0       	rjmp	.+4      	; 0x56ce <DIO_u8ConnectPullUP+0xcc>
    56ca:	88 0f       	add	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	6a 95       	dec	r22
    56d0:	e2 f7       	brpl	.-8      	; 0x56ca <DIO_u8ConnectPullUP+0xc8>
    56d2:	80 95       	com	r24
    56d4:	82 23       	and	r24, r18
    56d6:	85 bb       	out	0x15, r24	; 21
    56d8:	1c c0       	rjmp	.+56     	; 0x5712 <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTD:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    56da:	41 30       	cpi	r20, 0x01	; 1
    56dc:	79 f4       	brne	.+30     	; 0x56fc <DIO_u8ConnectPullUP+0xfa>
			{
				CLR_BIT(DDRD,copy_u8Pin);
    56de:	31 b3       	in	r19, 0x11	; 17
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	02 c0       	rjmp	.+4      	; 0x56ea <DIO_u8ConnectPullUP+0xe8>
    56e6:	88 0f       	add	r24, r24
    56e8:	99 1f       	adc	r25, r25
    56ea:	6a 95       	dec	r22
    56ec:	e2 f7       	brpl	.-8      	; 0x56e6 <DIO_u8ConnectPullUP+0xe4>
    56ee:	28 2f       	mov	r18, r24
    56f0:	20 95       	com	r18
    56f2:	23 23       	and	r18, r19
    56f4:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD,copy_u8Pin);
    56f6:	22 b3       	in	r18, 0x12	; 18
    56f8:	82 2b       	or	r24, r18
    56fa:	0a c0       	rjmp	.+20     	; 0x5710 <DIO_u8ConnectPullUP+0x10e>
			}
			else
			{
				CLR_BIT(PORTD,copy_u8Pin);
    56fc:	22 b3       	in	r18, 0x12	; 18
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	02 c0       	rjmp	.+4      	; 0x5708 <DIO_u8ConnectPullUP+0x106>
    5704:	88 0f       	add	r24, r24
    5706:	99 1f       	adc	r25, r25
    5708:	6a 95       	dec	r22
    570a:	e2 f7       	brpl	.-8      	; 0x5704 <DIO_u8ConnectPullUP+0x102>
    570c:	80 95       	com	r24
    570e:	82 23       	and	r24, r18
    5710:	82 bb       	out	0x12, r24	; 18
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	08 95       	ret
    5716:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8State = E_NOK;
	}

	return Local_u8State;
}
    5718:	08 95       	ret

0000571a <DIO_u8TogglePinValue>:

ReturnType_State_t DIO_u8TogglePinValue(u8 copy_u8Port , u8 copy_u8Pin)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    571a:	68 30       	cpi	r22, 0x08	; 8
    571c:	b0 f5       	brcc	.+108    	; 0x578a <DIO_u8TogglePinValue+0x70>
	{
			switch(copy_u8Port)
    571e:	81 30       	cpi	r24, 0x01	; 1
    5720:	91 f0       	breq	.+36     	; 0x5746 <DIO_u8TogglePinValue+0x2c>
    5722:	81 30       	cpi	r24, 0x01	; 1
    5724:	28 f0       	brcs	.+10     	; 0x5730 <DIO_u8TogglePinValue+0x16>
    5726:	82 30       	cpi	r24, 0x02	; 2
    5728:	c9 f0       	breq	.+50     	; 0x575c <DIO_u8TogglePinValue+0x42>
    572a:	83 30       	cpi	r24, 0x03	; 3
    572c:	71 f5       	brne	.+92     	; 0x578a <DIO_u8TogglePinValue+0x70>
    572e:	21 c0       	rjmp	.+66     	; 0x5772 <DIO_u8TogglePinValue+0x58>
			{
			case DIO_PORTA:
				TOG_BIT(PORTA,copy_u8Pin);
    5730:	2b b3       	in	r18, 0x1b	; 27
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	02 c0       	rjmp	.+4      	; 0x573c <DIO_u8TogglePinValue+0x22>
    5738:	88 0f       	add	r24, r24
    573a:	99 1f       	adc	r25, r25
    573c:	6a 95       	dec	r22
    573e:	e2 f7       	brpl	.-8      	; 0x5738 <DIO_u8TogglePinValue+0x1e>
    5740:	28 27       	eor	r18, r24
    5742:	2b bb       	out	0x1b, r18	; 27
    5744:	20 c0       	rjmp	.+64     	; 0x5786 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTB:
				TOG_BIT(PORTB,copy_u8Pin);
    5746:	28 b3       	in	r18, 0x18	; 24
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <DIO_u8TogglePinValue+0x38>
    574e:	88 0f       	add	r24, r24
    5750:	99 1f       	adc	r25, r25
    5752:	6a 95       	dec	r22
    5754:	e2 f7       	brpl	.-8      	; 0x574e <DIO_u8TogglePinValue+0x34>
    5756:	28 27       	eor	r18, r24
    5758:	28 bb       	out	0x18, r18	; 24
    575a:	15 c0       	rjmp	.+42     	; 0x5786 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTC:
				TOG_BIT(PORTC,copy_u8Pin);
    575c:	25 b3       	in	r18, 0x15	; 21
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	02 c0       	rjmp	.+4      	; 0x5768 <DIO_u8TogglePinValue+0x4e>
    5764:	88 0f       	add	r24, r24
    5766:	99 1f       	adc	r25, r25
    5768:	6a 95       	dec	r22
    576a:	e2 f7       	brpl	.-8      	; 0x5764 <DIO_u8TogglePinValue+0x4a>
    576c:	28 27       	eor	r18, r24
    576e:	25 bb       	out	0x15, r18	; 21
    5770:	0a c0       	rjmp	.+20     	; 0x5786 <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTD:
				TOG_BIT(PORTD,copy_u8Pin);
    5772:	22 b3       	in	r18, 0x12	; 18
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	02 c0       	rjmp	.+4      	; 0x577e <DIO_u8TogglePinValue+0x64>
    577a:	88 0f       	add	r24, r24
    577c:	99 1f       	adc	r25, r25
    577e:	6a 95       	dec	r22
    5780:	e2 f7       	brpl	.-8      	; 0x577a <DIO_u8TogglePinValue+0x60>
    5782:	28 27       	eor	r18, r24
    5784:	22 bb       	out	0x12, r18	; 18
    5786:	80 e0       	ldi	r24, 0x00	; 0
    5788:	08 95       	ret
			break;
    578a:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			Local_u8State = E_NOK;
		}
		return Local_u8State;
}
    578c:	08 95       	ret

0000578e <ADC_voidInit>:
	#elif ADC_REF_SELECTION == AVCC
		SET_BIT(ADMUX,REFS0);
		CLR_BIT(ADMUX,REFS1);

	#elif ADC_REF_SELECTION == VOLT_2_56
		SET_BIT(ADMUX,REFS0);
    578e:	3e 9a       	sbi	0x07, 6	; 7
		SET_BIT(ADMUX,REFS1);
    5790:	3f 9a       	sbi	0x07, 7	; 7
	#endif

	#if ADC_ADJUSMENT == LEFT_ADJUSMENT
		SET_BIT(ADMUX,ADLAR);
	#elif ADC_ADJUSMENT == RIGHT_ADJUSMENT
		CLR_BIT(ADMUX,ADLAR);
    5792:	3d 98       	cbi	0x07, 5	; 7
	#else
		#error "ADC_ADJUSMENT error Configuration Parameter"
	#endif

	#if AUTO_TRIGGER == DISABLE
		CLR_BIT(ADCSRA,ADATE);
    5794:	35 98       	cbi	0x06, 5	; 6
	#else
		#error "AUTO_TRIGGER error Configuration Parameter"
	#endif

	#if ADC_INTERRUPT == DISABLE
		CLR_BIT(ADCSRA,ADIE);
    5796:	33 98       	cbi	0x06, 3	; 6
	#elif ADC_PRESCALER == PRESCALER_4
		CLR_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		CLR_BIT(ADCSRA,ADPS2);
	#elif ADC_PRESCALER == PRESCALER_8
		CLR_BIT(ADCSRA,ADPS0);
    5798:	30 98       	cbi	0x06, 0	; 6
		SET_BIT(ADCSRA,ADPS1);
    579a:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,ADPS2);
    579c:	32 9a       	sbi	0x06, 2	; 6
		SET_BIT(ADCSRA,ADPS2);
	#else
		#error "ADC_PRESCALER error Configuration Parameter"
	#endif

	SET_BIT(ADCSRA,ADEN);
    579e:	37 9a       	sbi	0x06, 7	; 6

}
    57a0:	08 95       	ret

000057a2 <ADC_u16GetConversionReading>:

u16 ADC_u16GetConversionReading(u8 copy_u8Channel)
{
	u16 ADC_data =0;

	if (copy_u8Channel == CHANNEL0)
    57a2:	88 23       	and	r24, r24
    57a4:	11 f4       	brne	.+4      	; 0x57aa <ADC_u16GetConversionReading+0x8>
	{
		/** Select input channel to pin PA0 */
		CLR_BIT(ADMUX,MUX0);
    57a6:	38 98       	cbi	0x07, 0	; 7
    57a8:	03 c0       	rjmp	.+6      	; 0x57b0 <ADC_u16GetConversionReading+0xe>
		CLR_BIT(ADMUX,MUX1);
		CLR_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL1)
    57aa:	81 30       	cpi	r24, 0x01	; 1
    57ac:	21 f4       	brne	.+8      	; 0x57b6 <ADC_u16GetConversionReading+0x14>
	{
		/** Select input channel to pin PA1 */
		SET_BIT(ADMUX,MUX0);
    57ae:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,MUX1);
    57b0:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX,MUX2);
    57b2:	3a 98       	cbi	0x07, 2	; 7
    57b4:	1b c0       	rjmp	.+54     	; 0x57ec <ADC_u16GetConversionReading+0x4a>
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL2)
    57b6:	82 30       	cpi	r24, 0x02	; 2
    57b8:	11 f4       	brne	.+4      	; 0x57be <ADC_u16GetConversionReading+0x1c>
	{
		/** Select input channel to pin PA2 */
		CLR_BIT(ADMUX,MUX0);
    57ba:	38 98       	cbi	0x07, 0	; 7
    57bc:	03 c0       	rjmp	.+6      	; 0x57c4 <ADC_u16GetConversionReading+0x22>
		SET_BIT(ADMUX,MUX1);
		CLR_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL3)
    57be:	83 30       	cpi	r24, 0x03	; 3
    57c0:	19 f4       	brne	.+6      	; 0x57c8 <ADC_u16GetConversionReading+0x26>
	{
		/** Select input channel to pin PA3 */
		SET_BIT(ADMUX,MUX0);
    57c2:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,MUX1);
    57c4:	39 9a       	sbi	0x07, 1	; 7
    57c6:	f5 cf       	rjmp	.-22     	; 0x57b2 <ADC_u16GetConversionReading+0x10>
		CLR_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL4)
    57c8:	84 30       	cpi	r24, 0x04	; 4
    57ca:	11 f4       	brne	.+4      	; 0x57d0 <ADC_u16GetConversionReading+0x2e>
	{
		/** Select input channel to pin PA4 */
		CLR_BIT(ADMUX,MUX0);
    57cc:	38 98       	cbi	0x07, 0	; 7
    57ce:	03 c0       	rjmp	.+6      	; 0x57d6 <ADC_u16GetConversionReading+0x34>
		CLR_BIT(ADMUX,MUX1);
		SET_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL5)
    57d0:	85 30       	cpi	r24, 0x05	; 5
    57d2:	19 f4       	brne	.+6      	; 0x57da <ADC_u16GetConversionReading+0x38>
	{
		/** Select input channel to pin PA5 */
		SET_BIT(ADMUX,MUX0);
    57d4:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,MUX1);
    57d6:	39 98       	cbi	0x07, 1	; 7
    57d8:	08 c0       	rjmp	.+16     	; 0x57ea <ADC_u16GetConversionReading+0x48>
		SET_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL6)
    57da:	86 30       	cpi	r24, 0x06	; 6
    57dc:	11 f4       	brne	.+4      	; 0x57e2 <ADC_u16GetConversionReading+0x40>
	{
		/** Select input channel to pin PA6 */
		CLR_BIT(ADMUX,MUX0);
    57de:	38 98       	cbi	0x07, 0	; 7
    57e0:	03 c0       	rjmp	.+6      	; 0x57e8 <ADC_u16GetConversionReading+0x46>
		SET_BIT(ADMUX,MUX1);
		SET_BIT(ADMUX,MUX2);
		CLR_BIT(ADMUX,MUX3);
		CLR_BIT(ADMUX,MUX4);
	}
	else if(copy_u8Channel == CHANNEL7)
    57e2:	87 30       	cpi	r24, 0x07	; 7
    57e4:	29 f4       	brne	.+10     	; 0x57f0 <ADC_u16GetConversionReading+0x4e>
	{
		/** Select input channel to pin PA7 */
		SET_BIT(ADMUX,MUX0);
    57e6:	38 9a       	sbi	0x07, 0	; 7
		SET_BIT(ADMUX,MUX1);
    57e8:	39 9a       	sbi	0x07, 1	; 7
		SET_BIT(ADMUX,MUX2);
    57ea:	3a 9a       	sbi	0x07, 2	; 7
		CLR_BIT(ADMUX,MUX3);
    57ec:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,MUX4);
    57ee:	3c 98       	cbi	0x07, 4	; 7
	{

	}

	/* Start Converstion */
	SET_BIT(ADCSRA,ADSC);
    57f0:	36 9a       	sbi	0x06, 6	; 6

	/* Wait until conversion complete */
	while(GET_BIT(ADCSRA,ADSC));
    57f2:	36 99       	sbic	0x06, 6	; 6
    57f4:	fe cf       	rjmp	.-4      	; 0x57f2 <ADC_u16GetConversionReading+0x50>


	#if ADC_ADJUSMENT == RIGHT_ADJUSMENT
	/* After Conversion is finished Read data from ADCL then ADCH */
		ADC_data = ADCL;
    57f6:	24 b1       	in	r18, 0x04	; 4
    57f8:	30 e0       	ldi	r19, 0x00	; 0
		ADC_data |= (ADCH << 8);
    57fa:	45 b1       	in	r20, 0x05	; 5
    57fc:	94 2f       	mov	r25, r20
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	28 2b       	or	r18, r24
    5802:	39 2b       	or	r19, r25
		ADC_data = (ADCL>>6);
		ADC_data |= (ADCH << 2);
	#endif

	return ADC_data;
}
    5804:	c9 01       	movw	r24, r18
    5806:	08 95       	ret

00005808 <STEPPER_voidRotate>:
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_OUTPUT);
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_OUTPUT);
}

void STEPPER_voidRotate(u8 copy_u8Direction){
	switch(copy_u8Direction)
    5808:	82 30       	cpi	r24, 0x02	; 2
    580a:	d1 f1       	breq	.+116    	; 0x5880 <STEPPER_voidRotate+0x78>
    580c:	83 30       	cpi	r24, 0x03	; 3
    580e:	30 f4       	brcc	.+12     	; 0x581c <STEPPER_voidRotate+0x14>
    5810:	88 23       	and	r24, r24
    5812:	61 f0       	breq	.+24     	; 0x582c <STEPPER_voidRotate+0x24>
    5814:	81 30       	cpi	r24, 0x01	; 1
    5816:	09 f0       	breq	.+2      	; 0x581a <STEPPER_voidRotate+0x12>
    5818:	5c c0       	rjmp	.+184    	; 0x58d2 <STEPPER_voidRotate+0xca>
    581a:	1b c0       	rjmp	.+54     	; 0x5852 <STEPPER_voidRotate+0x4a>
    581c:	84 30       	cpi	r24, 0x04	; 4
    581e:	81 f1       	breq	.+96     	; 0x5880 <STEPPER_voidRotate+0x78>
    5820:	84 30       	cpi	r24, 0x04	; 4
    5822:	28 f1       	brcs	.+74     	; 0x586e <STEPPER_voidRotate+0x66>
    5824:	85 30       	cpi	r24, 0x05	; 5
    5826:	09 f0       	breq	.+2      	; 0x582a <STEPPER_voidRotate+0x22>
    5828:	54 c0       	rjmp	.+168    	; 0x58d2 <STEPPER_voidRotate+0xca>
    582a:	3f c0       	rjmp	.+126    	; 0x58aa <STEPPER_voidRotate+0xa2>
	{
	case NORTH:
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_HIGH);
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	60 e0       	ldi	r22, 0x00	; 0
    5830:	41 e0       	ldi	r20, 0x01	; 1
    5832:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_LOW);
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	61 e0       	ldi	r22, 0x01	; 1
    583a:	40 e0       	ldi	r20, 0x00	; 0
    583c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_LOW);
    5840:	80 e0       	ldi	r24, 0x00	; 0
    5842:	62 e0       	ldi	r22, 0x02	; 2
    5844:	40 e0       	ldi	r20, 0x00	; 0
    5846:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_HIGH);
    584a:	80 e0       	ldi	r24, 0x00	; 0
    584c:	63 e0       	ldi	r22, 0x03	; 3
    584e:	41 e0       	ldi	r20, 0x01	; 1
    5850:	29 c0       	rjmp	.+82     	; 0x58a4 <STEPPER_voidRotate+0x9c>
		break;

	case EASTERN_NORTH:
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_HIGH);
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	41 e0       	ldi	r20, 0x01	; 1
    5858:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_LOW);
    585c:	80 e0       	ldi	r24, 0x00	; 0
    585e:	61 e0       	ldi	r22, 0x01	; 1
    5860:	40 e0       	ldi	r20, 0x00	; 0
    5862:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_LOW);
    5866:	80 e0       	ldi	r24, 0x00	; 0
    5868:	62 e0       	ldi	r22, 0x02	; 2
    586a:	40 e0       	ldi	r20, 0x00	; 0
    586c:	16 c0       	rjmp	.+44     	; 0x589a <STEPPER_voidRotate+0x92>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_HIGH);
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_LOW);
		break;

	case EASTERN_SOUTH:
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_LOW);
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	60 e0       	ldi	r22, 0x00	; 0
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_LOW);
    5878:	80 e0       	ldi	r24, 0x00	; 0
    587a:	61 e0       	ldi	r22, 0x01	; 1
    587c:	40 e0       	ldi	r20, 0x00	; 0
    587e:	08 c0       	rjmp	.+16     	; 0x5890 <STEPPER_voidRotate+0x88>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_HIGH);
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_LOW);
		break;

	case SOUTH:
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_LOW);
    5880:	80 e0       	ldi	r24, 0x00	; 0
    5882:	60 e0       	ldi	r22, 0x00	; 0
    5884:	40 e0       	ldi	r20, 0x00	; 0
    5886:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_HIGH);
    588a:	80 e0       	ldi	r24, 0x00	; 0
    588c:	61 e0       	ldi	r22, 0x01	; 1
    588e:	41 e0       	ldi	r20, 0x01	; 1
    5890:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_HIGH);
    5894:	80 e0       	ldi	r24, 0x00	; 0
    5896:	62 e0       	ldi	r22, 0x02	; 2
    5898:	41 e0       	ldi	r20, 0x01	; 1
    589a:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_LOW);
    589e:	80 e0       	ldi	r24, 0x00	; 0
    58a0:	63 e0       	ldi	r22, 0x03	; 3
    58a2:	40 e0       	ldi	r20, 0x00	; 0
    58a4:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    58a8:	08 95       	ret
		break;

	case WESTERN_SOUTH:
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_LOW);
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	60 e0       	ldi	r22, 0x00	; 0
    58ae:	40 e0       	ldi	r20, 0x00	; 0
    58b0:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_HIGH);
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	61 e0       	ldi	r22, 0x01	; 1
    58b8:	41 e0       	ldi	r20, 0x01	; 1
    58ba:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_LOW);
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	62 e0       	ldi	r22, 0x02	; 2
    58c2:	40 e0       	ldi	r20, 0x00	; 0
    58c4:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_LOW);
    58c8:	80 e0       	ldi	r24, 0x00	; 0
    58ca:	63 e0       	ldi	r22, 0x03	; 3
    58cc:	40 e0       	ldi	r20, 0x00	; 0
    58ce:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    58d2:	08 95       	ret

000058d4 <STEPPER_voidInit>:
#include "avr/delay.h"

/****************** Functions Implementation ************/

void STEPPER_voidInit(void){
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_BLUE_PIN,DIO_PIN_OUTPUT);
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	41 e0       	ldi	r20, 0x01	; 1
    58da:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_PINK_PIN,DIO_PIN_OUTPUT);
    58de:	80 e0       	ldi	r24, 0x00	; 0
    58e0:	61 e0       	ldi	r22, 0x01	; 1
    58e2:	41 e0       	ldi	r20, 0x01	; 1
    58e4:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_YELLOW_PIN,DIO_PIN_OUTPUT);
    58e8:	80 e0       	ldi	r24, 0x00	; 0
    58ea:	62 e0       	ldi	r22, 0x02	; 2
    58ec:	41 e0       	ldi	r20, 0x01	; 1
    58ee:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(STEPPER_PORT,STEPPER_ORANGE_PIN,DIO_PIN_OUTPUT);
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	63 e0       	ldi	r22, 0x03	; 3
    58f6:	41 e0       	ldi	r20, 0x01	; 1
    58f8:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
}
    58fc:	08 95       	ret

000058fe <LM35_u16GetTempReading>:
}

u16 LM35_u16GetTempReading(u8 copy_u8Channel)
{
	u16 Local_u16TempValueAnalog=0, Local_u16TempValueDigital=0;
	Local_u16TempValueDigital = ADC_u16GetConversionReading(copy_u8Channel);
    58fe:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <ADC_u16GetConversionReading>
    5902:	a0 e0       	ldi	r26, 0x00	; 0
    5904:	b0 e0       	ldi	r27, 0x00	; 0
    5906:	bc 01       	movw	r22, r24
    5908:	cd 01       	movw	r24, r26
    590a:	0e 94 66 21 	call	0x42cc	; 0x42cc <__floatunsisf>
    590e:	20 e0       	ldi	r18, 0x00	; 0
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	40 e8       	ldi	r20, 0x80	; 128
    5914:	5e e3       	ldi	r21, 0x3E	; 62
    5916:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__mulsf3>
    591a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
	#else
		#error "ADC_REF_SELECTION error Configuration Parameter"
	#endif

	return Local_u16TempValueAnalog;
}
    591e:	cb 01       	movw	r24, r22
    5920:	08 95       	ret

00005922 <LM35_voidInit>:
#include "LM35_Interface.h"


void LM35_voidInit(void)
{
	ADC_voidInit();
    5922:	0e 94 c7 2b 	call	0x578e	; 0x578e <ADC_voidInit>
}
    5926:	08 95       	ret

00005928 <LCD_voidSendData>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendData(u8 copy_u8Data)
{
    5928:	1f 93       	push	r17
    592a:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    592c:	83 e0       	ldi	r24, 0x03	; 3
    592e:	67 e0       	ldi	r22, 0x07	; 7
    5930:	41 e0       	ldi	r20, 0x01	; 1
    5932:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    5936:	83 e0       	ldi	r24, 0x03	; 3
    5938:	66 e0       	ldi	r22, 0x06	; 6
    593a:	40 e0       	ldi	r20, 0x00	; 0
    593c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    5940:	82 e0       	ldi	r24, 0x02	; 2
    5942:	61 2f       	mov	r22, r17
    5944:	0e 94 ac 29 	call	0x5358	; 0x5358 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5948:	83 e0       	ldi	r24, 0x03	; 3
    594a:	65 e0       	ldi	r22, 0x05	; 5
    594c:	41 e0       	ldi	r20, 0x01	; 1
    594e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5952:	80 ea       	ldi	r24, 0xA0	; 160
    5954:	9f e0       	ldi	r25, 0x0F	; 15
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	f1 f7       	brne	.-4      	; 0x5956 <LCD_voidSendData+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    595a:	83 e0       	ldi	r24, 0x03	; 3
    595c:	65 e0       	ldi	r22, 0x05	; 5
    595e:	40 e0       	ldi	r20, 0x00	; 0
    5960:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

}
    5964:	1f 91       	pop	r17
    5966:	08 95       	ret

00005968 <LCD_voidSendNumber>:
	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
}

void LCD_voidSendNumber(s64 copy_s32Number)
{
    5968:	2f 92       	push	r2
    596a:	3f 92       	push	r3
    596c:	4f 92       	push	r4
    596e:	5f 92       	push	r5
    5970:	6f 92       	push	r6
    5972:	7f 92       	push	r7
    5974:	8f 92       	push	r8
    5976:	9f 92       	push	r9
    5978:	af 92       	push	r10
    597a:	bf 92       	push	r11
    597c:	cf 92       	push	r12
    597e:	df 92       	push	r13
    5980:	ef 92       	push	r14
    5982:	ff 92       	push	r15
    5984:	0f 93       	push	r16
    5986:	1f 93       	push	r17
    5988:	df 93       	push	r29
    598a:	cf 93       	push	r28
    598c:	cd b7       	in	r28, 0x3d	; 61
    598e:	de b7       	in	r29, 0x3e	; 62
    5990:	29 97       	sbiw	r28, 0x09	; 9
    5992:	0f b6       	in	r0, 0x3f	; 63
    5994:	f8 94       	cli
    5996:	de bf       	out	0x3e, r29	; 62
    5998:	0f be       	out	0x3f, r0	; 63
    599a:	cd bf       	out	0x3d, r28	; 61
    599c:	2a 83       	std	Y+2, r18	; 0x02
    599e:	3b 83       	std	Y+3, r19	; 0x03
    59a0:	4c 83       	std	Y+4, r20	; 0x04
    59a2:	5d 83       	std	Y+5, r21	; 0x05
    59a4:	6e 83       	std	Y+6, r22	; 0x06
    59a6:	7f 83       	std	Y+7, r23	; 0x07
    59a8:	88 87       	std	Y+8, r24	; 0x08
    59aa:	99 87       	std	Y+9, r25	; 0x09
	u64 reversed = 1;
	if (copy_s32Number == 0)
    59ac:	82 2f       	mov	r24, r18
    59ae:	83 2b       	or	r24, r19
    59b0:	84 2b       	or	r24, r20
    59b2:	85 2b       	or	r24, r21
    59b4:	86 2b       	or	r24, r22
    59b6:	87 2b       	or	r24, r23
    59b8:	98 85       	ldd	r25, Y+8	; 0x08
    59ba:	89 2b       	or	r24, r25
    59bc:	e9 85       	ldd	r30, Y+9	; 0x09
    59be:	8e 2b       	or	r24, r30
    59c0:	11 f4       	brne	.+4      	; 0x59c6 <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendData('0');
    59c2:	80 e3       	ldi	r24, 0x30	; 48
    59c4:	0e c0       	rjmp	.+28     	; 0x59e2 <LCD_voidSendNumber+0x7a>
	}
	else
	{
		if(copy_s32Number <0)
    59c6:	f9 85       	ldd	r31, Y+9	; 0x09
    59c8:	f7 fd       	sbrc	r31, 7
    59ca:	0a c0       	rjmp	.+20     	; 0x59e0 <LCD_voidSendNumber+0x78>
		{
			LCD_voidSendData('-');
    59cc:	22 24       	eor	r2, r2
    59ce:	23 94       	inc	r2
    59d0:	33 24       	eor	r3, r3
    59d2:	44 24       	eor	r4, r4
    59d4:	55 24       	eor	r5, r5
    59d6:	66 24       	eor	r6, r6
    59d8:	77 24       	eor	r7, r7
    59da:	88 24       	eor	r8, r8
    59dc:	99 24       	eor	r9, r9
    59de:	04 c0       	rjmp	.+8      	; 0x59e8 <LCD_voidSendNumber+0x80>
    59e0:	8d e2       	ldi	r24, 0x2D	; 45
    59e2:	0e 94 94 2c 	call	0x5928	; 0x5928 <LCD_voidSendData>
    59e6:	29 c1       	rjmp	.+594    	; 0x5c3a <LCD_voidSendNumber+0x2d2>
		}
		else
		{
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
    59e8:	91 01       	movw	r18, r2
    59ea:	a2 01       	movw	r20, r4
    59ec:	b3 01       	movw	r22, r6
    59ee:	c4 01       	movw	r24, r8
    59f0:	01 e0       	ldi	r16, 0x01	; 1
    59f2:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    59f6:	12 2f       	mov	r17, r18
    59f8:	f3 2e       	mov	r15, r19
    59fa:	e4 2e       	mov	r14, r20
    59fc:	d5 2e       	mov	r13, r21
    59fe:	c6 2e       	mov	r12, r22
    5a00:	b7 2e       	mov	r11, r23
    5a02:	a8 2e       	mov	r10, r24
    5a04:	89 2e       	mov	r8, r25
    5a06:	02 e0       	ldi	r16, 0x02	; 2
    5a08:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    5a0c:	92 2e       	mov	r9, r18
    5a0e:	91 0e       	add	r9, r17
    5a10:	21 e0       	ldi	r18, 0x01	; 1
    5a12:	91 16       	cp	r9, r17
    5a14:	08 f0       	brcs	.+2      	; 0x5a18 <LCD_voidSendNumber+0xb0>
    5a16:	20 e0       	ldi	r18, 0x00	; 0
    5a18:	3f 0d       	add	r19, r15
    5a1a:	e1 e0       	ldi	r30, 0x01	; 1
    5a1c:	3f 15       	cp	r19, r15
    5a1e:	08 f0       	brcs	.+2      	; 0x5a22 <LCD_voidSendNumber+0xba>
    5a20:	e0 e0       	ldi	r30, 0x00	; 0
    5a22:	72 2e       	mov	r7, r18
    5a24:	73 0e       	add	r7, r19
    5a26:	21 e0       	ldi	r18, 0x01	; 1
    5a28:	73 16       	cp	r7, r19
    5a2a:	08 f0       	brcs	.+2      	; 0x5a2e <LCD_voidSendNumber+0xc6>
    5a2c:	20 e0       	ldi	r18, 0x00	; 0
    5a2e:	e2 2b       	or	r30, r18
    5a30:	4e 0d       	add	r20, r14
    5a32:	31 e0       	ldi	r19, 0x01	; 1
    5a34:	4e 15       	cp	r20, r14
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <LCD_voidSendNumber+0xd2>
    5a38:	30 e0       	ldi	r19, 0x00	; 0
    5a3a:	6e 2e       	mov	r6, r30
    5a3c:	64 0e       	add	r6, r20
    5a3e:	21 e0       	ldi	r18, 0x01	; 1
    5a40:	64 16       	cp	r6, r20
    5a42:	08 f0       	brcs	.+2      	; 0x5a46 <LCD_voidSendNumber+0xde>
    5a44:	20 e0       	ldi	r18, 0x00	; 0
    5a46:	32 2b       	or	r19, r18
    5a48:	5d 0d       	add	r21, r13
    5a4a:	41 e0       	ldi	r20, 0x01	; 1
    5a4c:	5d 15       	cp	r21, r13
    5a4e:	08 f0       	brcs	.+2      	; 0x5a52 <LCD_voidSendNumber+0xea>
    5a50:	40 e0       	ldi	r20, 0x00	; 0
    5a52:	53 2e       	mov	r5, r19
    5a54:	55 0e       	add	r5, r21
    5a56:	21 e0       	ldi	r18, 0x01	; 1
    5a58:	55 16       	cp	r5, r21
    5a5a:	08 f0       	brcs	.+2      	; 0x5a5e <LCD_voidSendNumber+0xf6>
    5a5c:	20 e0       	ldi	r18, 0x00	; 0
    5a5e:	42 2b       	or	r20, r18
    5a60:	6c 0d       	add	r22, r12
    5a62:	31 e0       	ldi	r19, 0x01	; 1
    5a64:	6c 15       	cp	r22, r12
    5a66:	08 f0       	brcs	.+2      	; 0x5a6a <LCD_voidSendNumber+0x102>
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	44 2e       	mov	r4, r20
    5a6c:	46 0e       	add	r4, r22
    5a6e:	21 e0       	ldi	r18, 0x01	; 1
    5a70:	46 16       	cp	r4, r22
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <LCD_voidSendNumber+0x10e>
    5a74:	20 e0       	ldi	r18, 0x00	; 0
    5a76:	32 2b       	or	r19, r18
    5a78:	7b 0d       	add	r23, r11
    5a7a:	41 e0       	ldi	r20, 0x01	; 1
    5a7c:	7b 15       	cp	r23, r11
    5a7e:	08 f0       	brcs	.+2      	; 0x5a82 <LCD_voidSendNumber+0x11a>
    5a80:	40 e0       	ldi	r20, 0x00	; 0
    5a82:	33 2e       	mov	r3, r19
    5a84:	37 0e       	add	r3, r23
    5a86:	21 e0       	ldi	r18, 0x01	; 1
    5a88:	37 16       	cp	r3, r23
    5a8a:	08 f0       	brcs	.+2      	; 0x5a8e <LCD_voidSendNumber+0x126>
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	42 2b       	or	r20, r18
    5a90:	8a 0d       	add	r24, r10
    5a92:	31 e0       	ldi	r19, 0x01	; 1
    5a94:	8a 15       	cp	r24, r10
    5a96:	08 f0       	brcs	.+2      	; 0x5a9a <LCD_voidSendNumber+0x132>
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	24 2e       	mov	r2, r20
    5a9c:	28 0e       	add	r2, r24
    5a9e:	21 e0       	ldi	r18, 0x01	; 1
    5aa0:	28 16       	cp	r2, r24
    5aa2:	08 f0       	brcs	.+2      	; 0x5aa6 <LCD_voidSendNumber+0x13e>
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	32 2b       	or	r19, r18
    5aa8:	98 0d       	add	r25, r8
    5aaa:	83 2f       	mov	r24, r19
    5aac:	89 0f       	add	r24, r25
    5aae:	89 83       	std	Y+1, r24	; 0x01
    5ab0:	2a 81       	ldd	r18, Y+2	; 0x02
    5ab2:	3b 81       	ldd	r19, Y+3	; 0x03
    5ab4:	4c 81       	ldd	r20, Y+4	; 0x04
    5ab6:	5d 81       	ldd	r21, Y+5	; 0x05
    5ab8:	6e 81       	ldd	r22, Y+6	; 0x06
    5aba:	7f 81       	ldd	r23, Y+7	; 0x07
    5abc:	88 85       	ldd	r24, Y+8	; 0x08
    5abe:	99 85       	ldd	r25, Y+9	; 0x09
    5ac0:	aa e0       	ldi	r26, 0x0A	; 10
    5ac2:	aa 2e       	mov	r10, r26
    5ac4:	bb 24       	eor	r11, r11
    5ac6:	cc 24       	eor	r12, r12
    5ac8:	dd 24       	eor	r13, r13
    5aca:	ee 24       	eor	r14, r14
    5acc:	ff 24       	eor	r15, r15
    5ace:	00 e0       	ldi	r16, 0x00	; 0
    5ad0:	10 e0       	ldi	r17, 0x00	; 0
    5ad2:	0e 94 1c 09 	call	0x1238	; 0x1238 <__moddi3>
    5ad6:	12 2f       	mov	r17, r18
    5ad8:	19 0d       	add	r17, r9
    5ada:	f1 e0       	ldi	r31, 0x01	; 1
    5adc:	12 17       	cp	r17, r18
    5ade:	08 f0       	brcs	.+2      	; 0x5ae2 <LCD_voidSendNumber+0x17a>
    5ae0:	f0 e0       	ldi	r31, 0x00	; 0
    5ae2:	23 2f       	mov	r18, r19
    5ae4:	27 0d       	add	r18, r7
    5ae6:	e1 e0       	ldi	r30, 0x01	; 1
    5ae8:	23 17       	cp	r18, r19
    5aea:	08 f0       	brcs	.+2      	; 0x5aee <LCD_voidSendNumber+0x186>
    5aec:	e0 e0       	ldi	r30, 0x00	; 0
    5aee:	bf 2f       	mov	r27, r31
    5af0:	b2 0f       	add	r27, r18
    5af2:	31 e0       	ldi	r19, 0x01	; 1
    5af4:	b2 17       	cp	r27, r18
    5af6:	08 f0       	brcs	.+2      	; 0x5afa <LCD_voidSendNumber+0x192>
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	e3 2b       	or	r30, r19
    5afc:	24 2f       	mov	r18, r20
    5afe:	26 0d       	add	r18, r6
    5b00:	f1 e0       	ldi	r31, 0x01	; 1
    5b02:	24 17       	cp	r18, r20
    5b04:	08 f0       	brcs	.+2      	; 0x5b08 <LCD_voidSendNumber+0x1a0>
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	ae 2f       	mov	r26, r30
    5b0a:	a2 0f       	add	r26, r18
    5b0c:	31 e0       	ldi	r19, 0x01	; 1
    5b0e:	a2 17       	cp	r26, r18
    5b10:	08 f0       	brcs	.+2      	; 0x5b14 <LCD_voidSendNumber+0x1ac>
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	f3 2b       	or	r31, r19
    5b16:	25 2f       	mov	r18, r21
    5b18:	25 0d       	add	r18, r5
    5b1a:	41 e0       	ldi	r20, 0x01	; 1
    5b1c:	25 17       	cp	r18, r21
    5b1e:	08 f0       	brcs	.+2      	; 0x5b22 <LCD_voidSendNumber+0x1ba>
    5b20:	40 e0       	ldi	r20, 0x00	; 0
    5b22:	0f 2f       	mov	r16, r31
    5b24:	02 0f       	add	r16, r18
    5b26:	31 e0       	ldi	r19, 0x01	; 1
    5b28:	02 17       	cp	r16, r18
    5b2a:	08 f0       	brcs	.+2      	; 0x5b2e <LCD_voidSendNumber+0x1c6>
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	43 2b       	or	r20, r19
    5b30:	26 2f       	mov	r18, r22
    5b32:	24 0d       	add	r18, r4
    5b34:	51 e0       	ldi	r21, 0x01	; 1
    5b36:	26 17       	cp	r18, r22
    5b38:	08 f0       	brcs	.+2      	; 0x5b3c <LCD_voidSendNumber+0x1d4>
    5b3a:	50 e0       	ldi	r21, 0x00	; 0
    5b3c:	64 2f       	mov	r22, r20
    5b3e:	62 0f       	add	r22, r18
    5b40:	31 e0       	ldi	r19, 0x01	; 1
    5b42:	62 17       	cp	r22, r18
    5b44:	08 f0       	brcs	.+2      	; 0x5b48 <LCD_voidSendNumber+0x1e0>
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	53 2b       	or	r21, r19
    5b4a:	27 2f       	mov	r18, r23
    5b4c:	23 0d       	add	r18, r3
    5b4e:	41 e0       	ldi	r20, 0x01	; 1
    5b50:	27 17       	cp	r18, r23
    5b52:	08 f0       	brcs	.+2      	; 0x5b56 <LCD_voidSendNumber+0x1ee>
    5b54:	40 e0       	ldi	r20, 0x00	; 0
    5b56:	52 0f       	add	r21, r18
    5b58:	31 e0       	ldi	r19, 0x01	; 1
    5b5a:	52 17       	cp	r21, r18
    5b5c:	08 f0       	brcs	.+2      	; 0x5b60 <LCD_voidSendNumber+0x1f8>
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	43 2b       	or	r20, r19
    5b62:	28 2f       	mov	r18, r24
    5b64:	22 0d       	add	r18, r2
    5b66:	31 e0       	ldi	r19, 0x01	; 1
    5b68:	28 17       	cp	r18, r24
    5b6a:	08 f0       	brcs	.+2      	; 0x5b6e <LCD_voidSendNumber+0x206>
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	42 0f       	add	r20, r18
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	42 17       	cp	r20, r18
    5b74:	08 f0       	brcs	.+2      	; 0x5b78 <LCD_voidSendNumber+0x210>
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	38 2b       	or	r19, r24
    5b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    5b7c:	e9 0f       	add	r30, r25
    5b7e:	21 2e       	mov	r2, r17
    5b80:	3b 2e       	mov	r3, r27
    5b82:	4a 2e       	mov	r4, r26
    5b84:	50 2e       	mov	r5, r16
    5b86:	66 2e       	mov	r6, r22
    5b88:	75 2e       	mov	r7, r21
    5b8a:	84 2e       	mov	r8, r20
    5b8c:	9e 2e       	mov	r9, r30
    5b8e:	93 0e       	add	r9, r19
				copy_s32Number/=10;
    5b90:	2a 81       	ldd	r18, Y+2	; 0x02
    5b92:	3b 81       	ldd	r19, Y+3	; 0x03
    5b94:	4c 81       	ldd	r20, Y+4	; 0x04
    5b96:	5d 81       	ldd	r21, Y+5	; 0x05
    5b98:	6e 81       	ldd	r22, Y+6	; 0x06
    5b9a:	7f 81       	ldd	r23, Y+7	; 0x07
    5b9c:	88 85       	ldd	r24, Y+8	; 0x08
    5b9e:	99 85       	ldd	r25, Y+9	; 0x09
    5ba0:	fa e0       	ldi	r31, 0x0A	; 10
    5ba2:	af 2e       	mov	r10, r31
    5ba4:	bb 24       	eor	r11, r11
    5ba6:	cc 24       	eor	r12, r12
    5ba8:	dd 24       	eor	r13, r13
    5baa:	ee 24       	eor	r14, r14
    5bac:	ff 24       	eor	r15, r15
    5bae:	00 e0       	ldi	r16, 0x00	; 0
    5bb0:	10 e0       	ldi	r17, 0x00	; 0
    5bb2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__divdi3>
    5bb6:	2a 83       	std	Y+2, r18	; 0x02
    5bb8:	3b 83       	std	Y+3, r19	; 0x03
    5bba:	4c 83       	std	Y+4, r20	; 0x04
    5bbc:	5d 83       	std	Y+5, r21	; 0x05
    5bbe:	6e 83       	std	Y+6, r22	; 0x06
    5bc0:	7f 83       	std	Y+7, r23	; 0x07
    5bc2:	88 87       	std	Y+8, r24	; 0x08
    5bc4:	99 87       	std	Y+9, r25	; 0x09
			LCD_voidSendData('-');
			copy_s32Number *=-1;
		}
		else
		{
			while(copy_s32Number!= 0)
    5bc6:	82 2f       	mov	r24, r18
    5bc8:	83 2b       	or	r24, r19
    5bca:	84 2b       	or	r24, r20
    5bcc:	85 2b       	or	r24, r21
    5bce:	86 2b       	or	r24, r22
    5bd0:	87 2b       	or	r24, r23
    5bd2:	f8 85       	ldd	r31, Y+8	; 0x08
    5bd4:	8f 2b       	or	r24, r31
    5bd6:	89 2b       	or	r24, r25
    5bd8:	09 f0       	breq	.+2      	; 0x5bdc <LCD_voidSendNumber+0x274>
    5bda:	06 cf       	rjmp	.-500    	; 0x59e8 <LCD_voidSendNumber+0x80>
    5bdc:	1d c0       	rjmp	.+58     	; 0x5c18 <LCD_voidSendNumber+0x2b0>
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
			{
				LCD_voidSendData(reversed%10 +'0');
    5bde:	91 01       	movw	r18, r2
    5be0:	a2 01       	movw	r20, r4
    5be2:	b3 01       	movw	r22, r6
    5be4:	c4 01       	movw	r24, r8
    5be6:	ea e0       	ldi	r30, 0x0A	; 10
    5be8:	ae 2e       	mov	r10, r30
    5bea:	bb 24       	eor	r11, r11
    5bec:	cc 24       	eor	r12, r12
    5bee:	dd 24       	eor	r13, r13
    5bf0:	ee 24       	eor	r14, r14
    5bf2:	ff 24       	eor	r15, r15
    5bf4:	00 e0       	ldi	r16, 0x00	; 0
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
    5bf8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__umoddi3>
    5bfc:	82 2f       	mov	r24, r18
    5bfe:	80 5d       	subi	r24, 0xD0	; 208
    5c00:	0e 94 94 2c 	call	0x5928	; 0x5928 <LCD_voidSendData>
				reversed/=10;
    5c04:	91 01       	movw	r18, r2
    5c06:	a2 01       	movw	r20, r4
    5c08:	b3 01       	movw	r22, r6
    5c0a:	c4 01       	movw	r24, r8
    5c0c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivdi3>
    5c10:	19 01       	movw	r2, r18
    5c12:	2a 01       	movw	r4, r20
    5c14:	3b 01       	movw	r6, r22
    5c16:	4c 01       	movw	r8, r24
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	28 16       	cp	r2, r24
    5c1c:	01 f7       	brne	.-64     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c1e:	33 20       	and	r3, r3
    5c20:	f1 f6       	brne	.-68     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c22:	44 20       	and	r4, r4
    5c24:	e1 f6       	brne	.-72     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c26:	55 20       	and	r5, r5
    5c28:	d1 f6       	brne	.-76     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c2a:	66 20       	and	r6, r6
    5c2c:	c1 f6       	brne	.-80     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c2e:	77 20       	and	r7, r7
    5c30:	b1 f6       	brne	.-84     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c32:	88 20       	and	r8, r8
    5c34:	a1 f6       	brne	.-88     	; 0x5bde <LCD_voidSendNumber+0x276>
    5c36:	99 20       	and	r9, r9
    5c38:	91 f6       	brne	.-92     	; 0x5bde <LCD_voidSendNumber+0x276>
				LCD_voidSendData(reversed%10 +'0');
				reversed/=10;
			}
		}
	}
}
    5c3a:	29 96       	adiw	r28, 0x09	; 9
    5c3c:	0f b6       	in	r0, 0x3f	; 63
    5c3e:	f8 94       	cli
    5c40:	de bf       	out	0x3e, r29	; 62
    5c42:	0f be       	out	0x3f, r0	; 63
    5c44:	cd bf       	out	0x3d, r28	; 61
    5c46:	cf 91       	pop	r28
    5c48:	df 91       	pop	r29
    5c4a:	1f 91       	pop	r17
    5c4c:	0f 91       	pop	r16
    5c4e:	ff 90       	pop	r15
    5c50:	ef 90       	pop	r14
    5c52:	df 90       	pop	r13
    5c54:	cf 90       	pop	r12
    5c56:	bf 90       	pop	r11
    5c58:	af 90       	pop	r10
    5c5a:	9f 90       	pop	r9
    5c5c:	8f 90       	pop	r8
    5c5e:	7f 90       	pop	r7
    5c60:	6f 90       	pop	r6
    5c62:	5f 90       	pop	r5
    5c64:	4f 90       	pop	r4
    5c66:	3f 90       	pop	r3
    5c68:	2f 90       	pop	r2
    5c6a:	08 95       	ret

00005c6c <LCD_voidSendString>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendString(const u8* copy_pu8String)
{
    5c6c:	1f 93       	push	r17
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	ec 01       	movw	r28, r24
    5c74:	10 e0       	ldi	r17, 0x00	; 0
    5c76:	03 c0       	rjmp	.+6      	; 0x5c7e <LCD_voidSendString+0x12>
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
    5c78:	0e 94 94 2c 	call	0x5928	; 0x5928 <LCD_voidSendData>

}

void LCD_voidSendString(const u8* copy_pu8String)
{
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
    5c7c:	1f 5f       	subi	r17, 0xFF	; 255
    5c7e:	fe 01       	movw	r30, r28
    5c80:	e1 0f       	add	r30, r17
    5c82:	f1 1d       	adc	r31, r1
    5c84:	80 81       	ld	r24, Z
    5c86:	88 23       	and	r24, r24
    5c88:	b9 f7       	brne	.-18     	; 0x5c78 <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}
}
    5c8a:	df 91       	pop	r29
    5c8c:	cf 91       	pop	r28
    5c8e:	1f 91       	pop	r17
    5c90:	08 95       	ret

00005c92 <LCD_voidSendCommand>:




void LCD_voidSendCommand(u8 copy_u8Command)
{
    5c92:	1f 93       	push	r17
    5c94:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    5c96:	83 e0       	ldi	r24, 0x03	; 3
    5c98:	67 e0       	ldi	r22, 0x07	; 7
    5c9a:	40 e0       	ldi	r20, 0x00	; 0
    5c9c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    5ca0:	83 e0       	ldi	r24, 0x03	; 3
    5ca2:	66 e0       	ldi	r22, 0x06	; 6
    5ca4:	40 e0       	ldi	r20, 0x00	; 0
    5ca6:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    5caa:	82 e0       	ldi	r24, 0x02	; 2
    5cac:	61 2f       	mov	r22, r17
    5cae:	0e 94 ac 29 	call	0x5358	; 0x5358 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5cb2:	83 e0       	ldi	r24, 0x03	; 3
    5cb4:	65 e0       	ldi	r22, 0x05	; 5
    5cb6:	41 e0       	ldi	r20, 0x01	; 1
    5cb8:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    5cbc:	80 ea       	ldi	r24, 0xA0	; 160
    5cbe:	9f e0       	ldi	r25, 0x0F	; 15
    5cc0:	01 97       	sbiw	r24, 0x01	; 1
    5cc2:	f1 f7       	brne	.-4      	; 0x5cc0 <LCD_voidSendCommand+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    5cc4:	83 e0       	ldi	r24, 0x03	; 3
    5cc6:	65 e0       	ldi	r22, 0x05	; 5
    5cc8:	40 e0       	ldi	r20, 0x00	; 0
    5cca:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

}
    5cce:	1f 91       	pop	r17
    5cd0:	08 95       	ret

00005cd2 <LCD_voidClearScreen>:
	LCD_voidSendData(copy_u8PatternNumber);
}

void LCD_voidClearScreen(void)
{
	LCD_voidSendCommand(0x01);
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>
}
    5cd8:	08 95       	ret

00005cda <LCD_voidSetPosition>:


void LCD_voidSetPosition(u8 copy_u8XPosition,u8 copy_u8YPosition)
{
	u8 Local_u8Address = 0;
	if(copy_u8XPosition == LCD_ROW0)
    5cda:	88 23       	and	r24, r24
    5cdc:	29 f0       	breq	.+10     	; 0x5ce8 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition;
	}
	else if(copy_u8XPosition == LCD_ROW1)
    5cde:	81 30       	cpi	r24, 0x01	; 1
    5ce0:	11 f0       	breq	.+4      	; 0x5ce6 <LCD_voidSetPosition+0xc>
    5ce2:	60 e0       	ldi	r22, 0x00	; 0
    5ce4:	01 c0       	rjmp	.+2      	; 0x5ce8 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition + DDRAM_OFFSET;
    5ce6:	60 5c       	subi	r22, 0xC0	; 192
	{

	}

	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
    5ce8:	86 2f       	mov	r24, r22
    5cea:	80 68       	ori	r24, 0x80	; 128
    5cec:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>
}
    5cf0:	08 95       	ret

00005cf2 <LCD_voidSendCustomCharacter>:
		}
	}
}

void LCD_voidSendCustomCharacter(u8* copy_pu8CharacterArray,u8 copy_u8PatternNumber,u8 copy_u8XPosition,u8 copy_u8YPosition)
{
    5cf2:	df 92       	push	r13
    5cf4:	ef 92       	push	r14
    5cf6:	ff 92       	push	r15
    5cf8:	0f 93       	push	r16
    5cfa:	1f 93       	push	r17
    5cfc:	cf 93       	push	r28
    5cfe:	df 93       	push	r29
    5d00:	8c 01       	movw	r16, r24
    5d02:	f6 2e       	mov	r15, r22
    5d04:	e4 2e       	mov	r14, r20
    5d06:	d2 2e       	mov	r13, r18
	u8 Local_u8CGRAMAddress = 0 ,Local_u8LoopCounter;

	/*Calculating CGRAM Address*/
	Local_u8CGRAMAddress = copy_u8PatternNumber*8;
    5d08:	86 2f       	mov	r24, r22
    5d0a:	88 0f       	add	r24, r24
    5d0c:	88 0f       	add	r24, r24
    5d0e:	88 0f       	add	r24, r24

	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    5d10:	80 64       	ori	r24, 0x40	; 64
    5d12:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>
    5d16:	c0 e0       	ldi	r28, 0x00	; 0
    5d18:	d0 e0       	ldi	r29, 0x00	; 0

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
    5d1a:	f8 01       	movw	r30, r16
    5d1c:	ec 0f       	add	r30, r28
    5d1e:	fd 1f       	adc	r31, r29
    5d20:	80 81       	ld	r24, Z
    5d22:	0e 94 94 2c 	call	0x5928	; 0x5928 <LCD_voidSendData>
    5d26:	21 96       	adiw	r28, 0x01	; 1
	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
    5d28:	c8 30       	cpi	r28, 0x08	; 8
    5d2a:	d1 05       	cpc	r29, r1
    5d2c:	b1 f7       	brne	.-20     	; 0x5d1a <LCD_voidSendCustomCharacter+0x28>
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	LCD_voidSetPosition( copy_u8XPosition,copy_u8YPosition);
    5d2e:	8e 2d       	mov	r24, r14
    5d30:	6d 2d       	mov	r22, r13
    5d32:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <LCD_voidSetPosition>

	/*Displaying the pattern from CGRAM*/
	LCD_voidSendData(copy_u8PatternNumber);
    5d36:	8f 2d       	mov	r24, r15
    5d38:	0e 94 94 2c 	call	0x5928	; 0x5928 <LCD_voidSendData>
}
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	1f 91       	pop	r17
    5d42:	0f 91       	pop	r16
    5d44:	ff 90       	pop	r15
    5d46:	ef 90       	pop	r14
    5d48:	df 90       	pop	r13
    5d4a:	08 95       	ret

00005d4c <LCD_voidInit>:

/********************Functions Definitions*****************/
void LCD_voidInit(void)
{
	/************Set the control pins to be output**********/
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    5d4c:	83 e0       	ldi	r24, 0x03	; 3
    5d4e:	65 e0       	ldi	r22, 0x05	; 5
    5d50:	41 e0       	ldi	r20, 0x01	; 1
    5d52:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    5d56:	83 e0       	ldi	r24, 0x03	; 3
    5d58:	66 e0       	ldi	r22, 0x06	; 6
    5d5a:	41 e0       	ldi	r20, 0x01	; 1
    5d5c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    5d60:	83 e0       	ldi	r24, 0x03	; 3
    5d62:	67 e0       	ldi	r22, 0x07	; 7
    5d64:	41 e0       	ldi	r20, 0x01	; 1
    5d66:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
    5d6a:	80 e9       	ldi	r24, 0x90	; 144
    5d6c:	91 e0       	ldi	r25, 0x01	; 1
    5d6e:	28 ec       	ldi	r18, 0xC8	; 200
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	f9 01       	movw	r30, r18
    5d74:	31 97       	sbiw	r30, 0x01	; 1
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <LCD_voidInit+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d7a:	d9 f7       	brne	.-10     	; 0x5d72 <LCD_voidInit+0x26>

	/*Waiting for more than 30ms*/
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    5d7c:	82 e0       	ldi	r24, 0x02	; 2
    5d7e:	6f ef       	ldi	r22, 0xFF	; 255
    5d80:	0e 94 c0 29 	call	0x5380	; 0x5380 <DIO_u8SetPortDirection>

	/*Send the function set command: N->1 (2 lines) ,F-> 0 (5*7 char font)*/
	LCD_voidSendCommand(0x38);
    5d84:	88 e3       	ldi	r24, 0x38	; 56
    5d86:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>

	/*delay 39 us*/
//	_delay_us(40);

	/*Display ON/OFF control*/
	LCD_voidSendCommand(0x0C);
    5d8a:	8c e0       	ldi	r24, 0x0C	; 12
    5d8c:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>

	/*delay 39 us*/
	//_delay_us(40);

	/*Display clear control*/
	LCD_voidSendCommand(0x01);
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);

#else
#error "Wrong LCD_MODE Configuration parameter"
#endif
}
    5d96:	08 95       	ret

00005d98 <KPD_u8GetPressed>:
	DIO_u8SetPinValue(KPD_PORT,KPD_C3,DIO_PIN_HIGH);
}


u8	KPD_u8GetPressed(void)
{
    5d98:	8f 92       	push	r8
    5d9a:	9f 92       	push	r9
    5d9c:	bf 92       	push	r11
    5d9e:	cf 92       	push	r12
    5da0:	df 92       	push	r13
    5da2:	ef 92       	push	r14
    5da4:	ff 92       	push	r15
    5da6:	0f 93       	push	r16
    5da8:	1f 93       	push	r17
    5daa:	df 93       	push	r29
    5dac:	cf 93       	push	r28
    5dae:	0f 92       	push	r0
    5db0:	cd b7       	in	r28, 0x3d	; 61
    5db2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;
    5db4:	81 e0       	ldi	r24, 0x01	; 1
    5db6:	89 83       	std	Y+1, r24	; 0x01
    5db8:	0f ef       	ldi	r16, 0xFF	; 255
    5dba:	ee 24       	eor	r14, r14
    5dbc:	ff 24       	eor	r15, r15
	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
		{
			DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5dbe:	6e 01       	movw	r12, r28
    5dc0:	08 94       	sec
    5dc2:	c1 1c       	adc	r12, r1
    5dc4:	d1 1c       	adc	r13, r1
    5dc6:	98 ec       	ldi	r25, 0xC8	; 200
    5dc8:	89 2e       	mov	r8, r25
    5dca:	91 2c       	mov	r9, r1
}


u8	KPD_u8GetPressed(void)
{
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;
    5dcc:	be 2c       	mov	r11, r14

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	6e 2d       	mov	r22, r14
    5dd2:	40 e0       	ldi	r20, 0x00	; 0
    5dd4:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    5dd8:	14 e0       	ldi	r17, 0x04	; 4
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
		{
			DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5dda:	80 e0       	ldi	r24, 0x00	; 0
    5ddc:	61 2f       	mov	r22, r17
    5dde:	a6 01       	movw	r20, r12
    5de0:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <DIO_u8GetPinValue>
			if( LocaL_u8GetPressed == DIO_PIN_LOW )
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	88 23       	and	r24, r24
    5de8:	29 f5       	brne	.+74     	; 0x5e34 <KPD_u8GetPressed+0x9c>
    5dea:	84 ef       	ldi	r24, 0xF4	; 244
    5dec:	91 e0       	ldi	r25, 0x01	; 1
    5dee:	f4 01       	movw	r30, r8
    5df0:	31 97       	sbiw	r30, 0x01	; 1
    5df2:	f1 f7       	brne	.-4      	; 0x5df0 <KPD_u8GetPressed+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5df6:	d9 f7       	brne	.-10     	; 0x5dee <KPD_u8GetPressed+0x56>
			{
				_delay_ms(50);

				DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	61 2f       	mov	r22, r17
    5dfc:	a6 01       	movw	r20, r12
    5dfe:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <DIO_u8GetPinValue>
				if(LocaL_u8GetPressed == DIO_PIN_LOW)
    5e02:	89 81       	ldd	r24, Y+1	; 0x01
    5e04:	88 23       	and	r24, r24
    5e06:	b1 f4       	brne	.+44     	; 0x5e34 <KPD_u8GetPressed+0x9c>
				{
					Local_u8ReturnData = KPD_u8Buttons[Local_u8Row - KPD_ROW_INIT][Local_u8Col - KPD_COL_INIT];
    5e08:	e1 2f       	mov	r30, r17
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	34 97       	sbiw	r30, 0x04	; 4
    5e0e:	ee 0f       	add	r30, r30
    5e10:	ff 1f       	adc	r31, r31
    5e12:	ee 0f       	add	r30, r30
    5e14:	ff 1f       	adc	r31, r31
    5e16:	ee 0d       	add	r30, r14
    5e18:	ff 1d       	adc	r31, r15
    5e1a:	e3 59       	subi	r30, 0x93	; 147
    5e1c:	fe 4f       	sbci	r31, 0xFE	; 254
    5e1e:	00 81       	ld	r16, Z
    5e20:	05 c0       	rjmp	.+10     	; 0x5e2c <KPD_u8GetPressed+0x94>

					while(LocaL_u8GetPressed == 0)
					{
						DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5e22:	80 e0       	ldi	r24, 0x00	; 0
    5e24:	61 2f       	mov	r22, r17
    5e26:	a6 01       	movw	r20, r12
    5e28:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
				if(LocaL_u8GetPressed == DIO_PIN_LOW)
				{
					Local_u8ReturnData = KPD_u8Buttons[Local_u8Row - KPD_ROW_INIT][Local_u8Col - KPD_COL_INIT];

					while(LocaL_u8GetPressed == 0)
    5e2c:	89 81       	ldd	r24, Y+1	; 0x01
    5e2e:	88 23       	and	r24, r24
    5e30:	c1 f3       	breq	.-16     	; 0x5e22 <KPD_u8GetPressed+0x8a>
    5e32:	03 c0       	rjmp	.+6      	; 0x5e3a <KPD_u8GetPressed+0xa2>
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
    5e34:	1f 5f       	subi	r17, 0xFF	; 255
    5e36:	18 30       	cpi	r17, 0x08	; 8
    5e38:	81 f6       	brne	.-96     	; 0x5dda <KPD_u8GetPressed+0x42>
					}
					break;
				}
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_HIGH);
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	6b 2d       	mov	r22, r11
    5e3e:	41 e0       	ldi	r20, 0x01	; 1
    5e40:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
    5e44:	08 94       	sec
    5e46:	e1 1c       	adc	r14, r1
    5e48:	f1 1c       	adc	r15, r1

u8	KPD_u8GetPressed(void)
{
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
    5e4a:	84 e0       	ldi	r24, 0x04	; 4
    5e4c:	e8 16       	cp	r14, r24
    5e4e:	f1 04       	cpc	r15, r1
    5e50:	09 f0       	breq	.+2      	; 0x5e54 <KPD_u8GetPressed+0xbc>
    5e52:	bc cf       	rjmp	.-136    	; 0x5dcc <KPD_u8GetPressed+0x34>
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_HIGH);
	}
	return Local_u8ReturnData;
}
    5e54:	80 2f       	mov	r24, r16
    5e56:	0f 90       	pop	r0
    5e58:	cf 91       	pop	r28
    5e5a:	df 91       	pop	r29
    5e5c:	1f 91       	pop	r17
    5e5e:	0f 91       	pop	r16
    5e60:	ff 90       	pop	r15
    5e62:	ef 90       	pop	r14
    5e64:	df 90       	pop	r13
    5e66:	cf 90       	pop	r12
    5e68:	bf 90       	pop	r11
    5e6a:	9f 90       	pop	r9
    5e6c:	8f 90       	pop	r8
    5e6e:	08 95       	ret

00005e70 <KPD_Init>:

void KPD_Init(void)
{
	//Connect pull up for the rows pins

	DIO_u8ConnectPullUP(KPD_PORT,KPD_R0,DIO_PIN_HIGH);
    5e70:	80 e0       	ldi	r24, 0x00	; 0
    5e72:	64 e0       	ldi	r22, 0x04	; 4
    5e74:	41 e0       	ldi	r20, 0x01	; 1
    5e76:	0e 94 01 2b 	call	0x5602	; 0x5602 <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R1,DIO_PIN_HIGH);
    5e7a:	80 e0       	ldi	r24, 0x00	; 0
    5e7c:	65 e0       	ldi	r22, 0x05	; 5
    5e7e:	41 e0       	ldi	r20, 0x01	; 1
    5e80:	0e 94 01 2b 	call	0x5602	; 0x5602 <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R2,DIO_PIN_HIGH);
    5e84:	80 e0       	ldi	r24, 0x00	; 0
    5e86:	66 e0       	ldi	r22, 0x06	; 6
    5e88:	41 e0       	ldi	r20, 0x01	; 1
    5e8a:	0e 94 01 2b 	call	0x5602	; 0x5602 <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R3,DIO_PIN_HIGH);
    5e8e:	80 e0       	ldi	r24, 0x00	; 0
    5e90:	67 e0       	ldi	r22, 0x07	; 7
    5e92:	41 e0       	ldi	r20, 0x01	; 1
    5e94:	0e 94 01 2b 	call	0x5602	; 0x5602 <DIO_u8ConnectPullUP>

	//Make the Direction of Column pins Output
	DIO_u8SetPinDirection(KPD_PORT,KPD_C0,DIO_PIN_OUTPUT);
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	60 e0       	ldi	r22, 0x00	; 0
    5e9c:	41 e0       	ldi	r20, 0x01	; 1
    5e9e:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C1,DIO_PIN_OUTPUT);
    5ea2:	80 e0       	ldi	r24, 0x00	; 0
    5ea4:	61 e0       	ldi	r22, 0x01	; 1
    5ea6:	41 e0       	ldi	r20, 0x01	; 1
    5ea8:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C2,DIO_PIN_OUTPUT);
    5eac:	80 e0       	ldi	r24, 0x00	; 0
    5eae:	62 e0       	ldi	r22, 0x02	; 2
    5eb0:	41 e0       	ldi	r20, 0x01	; 1
    5eb2:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C3,DIO_PIN_OUTPUT);
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	63 e0       	ldi	r22, 0x03	; 3
    5eba:	41 e0       	ldi	r20, 0x01	; 1
    5ebc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>

	//Make the Value of Column pins High
	DIO_u8SetPinValue(KPD_PORT,KPD_C0,DIO_PIN_HIGH);
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	60 e0       	ldi	r22, 0x00	; 0
    5ec4:	41 e0       	ldi	r20, 0x01	; 1
    5ec6:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C1,DIO_PIN_HIGH);
    5eca:	80 e0       	ldi	r24, 0x00	; 0
    5ecc:	61 e0       	ldi	r22, 0x01	; 1
    5ece:	41 e0       	ldi	r20, 0x01	; 1
    5ed0:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C2,DIO_PIN_HIGH);
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	62 e0       	ldi	r22, 0x02	; 2
    5ed8:	41 e0       	ldi	r20, 0x01	; 1
    5eda:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C3,DIO_PIN_HIGH);
    5ede:	80 e0       	ldi	r24, 0x00	; 0
    5ee0:	63 e0       	ldi	r22, 0x03	; 3
    5ee2:	41 e0       	ldi	r20, 0x01	; 1
    5ee4:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
}
    5ee8:	08 95       	ret

00005eea <MOTOR_voidStop>:

}

void MOTOR_voidStop(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_LOW);
    5eea:	80 e0       	ldi	r24, 0x00	; 0
    5eec:	64 e0       	ldi	r22, 0x04	; 4
    5eee:	40 e0       	ldi	r20, 0x00	; 0
    5ef0:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_LOW);
    5ef4:	80 e0       	ldi	r24, 0x00	; 0
    5ef6:	65 e0       	ldi	r22, 0x05	; 5
    5ef8:	40 e0       	ldi	r20, 0x00	; 0
    5efa:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

}
    5efe:	08 95       	ret

00005f00 <MOTOR_voidClockWise>:

}

void MOTOR_voidClockWise(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_HIGH);
    5f00:	80 e0       	ldi	r24, 0x00	; 0
    5f02:	64 e0       	ldi	r22, 0x04	; 4
    5f04:	41 e0       	ldi	r20, 0x01	; 1
    5f06:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_LOW);
    5f0a:	80 e0       	ldi	r24, 0x00	; 0
    5f0c:	65 e0       	ldi	r22, 0x05	; 5
    5f0e:	40 e0       	ldi	r20, 0x00	; 0
    5f10:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

}
    5f14:	08 95       	ret

00005f16 <MOTOR_voidCounterClockWise>:

}

void MOTOR_voidCounterClockWise(void)
{
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_LOW);
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	64 e0       	ldi	r22, 0x04	; 4
    5f1a:	40 e0       	ldi	r20, 0x00	; 0
    5f1c:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_HIGH);
    5f20:	80 e0       	ldi	r24, 0x00	; 0
    5f22:	65 e0       	ldi	r22, 0x05	; 5
    5f24:	41 e0       	ldi	r20, 0x01	; 1
    5f26:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <DIO_u8SetPinValue>

}
    5f2a:	08 95       	ret

00005f2c <MOTOR_voidInit>:


/************Function Definitions ***************/
void MOTOR_voidInit(void)
{
	DIO_u8SetPinDirection(MOTOR_PORT,MOTOR_CCW_PIN,DIO_PIN_OUTPUT);
    5f2c:	80 e0       	ldi	r24, 0x00	; 0
    5f2e:	65 e0       	ldi	r22, 0x05	; 5
    5f30:	41 e0       	ldi	r20, 0x01	; 1
    5f32:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(MOTOR_PORT,MOTOR_CW_PIN,DIO_PIN_OUTPUT);
    5f36:	80 e0       	ldi	r24, 0x00	; 0
    5f38:	64 e0       	ldi	r22, 0x04	; 4
    5f3a:	41 e0       	ldi	r20, 0x01	; 1
    5f3c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>

}
    5f40:	08 95       	ret

00005f42 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    5f42:	ef 92       	push	r14
    5f44:	ff 92       	push	r15
    5f46:	0f 93       	push	r16
    5f48:	1f 93       	push	r17
    5f4a:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5f4c:	05 80       	ldd	r0, Z+5	; 0x05
    5f4e:	f6 81       	ldd	r31, Z+6	; 0x06
    5f50:	e0 2d       	mov	r30, r0
    5f52:	e6 80       	ldd	r14, Z+6	; 0x06
    5f54:	f7 80       	ldd	r15, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    5f56:	87 01       	movw	r16, r14
    5f58:	04 5f       	subi	r16, 0xF4	; 244
    5f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f5c:	c8 01       	movw	r24, r16
    5f5e:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    5f62:	89 ed       	ldi	r24, 0xD9	; 217
    5f64:	91 e0       	ldi	r25, 0x01	; 1
    5f66:	b8 01       	movw	r22, r16
    5f68:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	e0 91 a8 01 	lds	r30, 0x01A8
    5f72:	f0 91 a9 01 	lds	r31, 0x01A9
    5f76:	d7 01       	movw	r26, r14
    5f78:	56 96       	adiw	r26, 0x16	; 22
    5f7a:	9c 91       	ld	r25, X
    5f7c:	86 89       	ldd	r24, Z+22	; 0x16
    5f7e:	98 17       	cp	r25, r24
    5f80:	08 f0       	brcs	.+2      	; 0x5f84 <xCoRoutineRemoveFromEventList+0x42>
    5f82:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    5f84:	82 2f       	mov	r24, r18
    5f86:	1f 91       	pop	r17
    5f88:	0f 91       	pop	r16
    5f8a:	ff 90       	pop	r15
    5f8c:	ef 90       	pop	r14
    5f8e:	08 95       	ret

00005f90 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    5f90:	ff 92       	push	r15
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	cf 93       	push	r28
    5f98:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    5f9a:	99 e0       	ldi	r25, 0x09	; 9
    5f9c:	f9 2e       	mov	r15, r25
    5f9e:	21 c0       	rjmp	.+66     	; 0x5fe2 <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    5fa0:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    5fa2:	e0 91 de 01 	lds	r30, 0x01DE
    5fa6:	f0 91 df 01 	lds	r31, 0x01DF
    5faa:	06 81       	ldd	r16, Z+6	; 0x06
    5fac:	17 81       	ldd	r17, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    5fae:	c8 01       	movw	r24, r16
    5fb0:	0c 96       	adiw	r24, 0x0c	; 12
    5fb2:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    5fb6:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    5fb8:	e8 01       	movw	r28, r16
    5fba:	22 96       	adiw	r28, 0x02	; 2
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    5fc2:	f8 01       	movw	r30, r16
    5fc4:	96 89       	ldd	r25, Z+22	; 0x16
    5fc6:	80 91 aa 01 	lds	r24, 0x01AA
    5fca:	89 17       	cp	r24, r25
    5fcc:	10 f4       	brcc	.+4      	; 0x5fd2 <vCoRoutineSchedule+0x42>
    5fce:	90 93 aa 01 	sts	0x01AA, r25
    5fd2:	9f 9d       	mul	r25, r15
    5fd4:	c0 01       	movw	r24, r0
    5fd6:	11 24       	eor	r1, r1
    5fd8:	8f 54       	subi	r24, 0x4F	; 79
    5fda:	9e 4f       	sbci	r25, 0xFE	; 254
    5fdc:	be 01       	movw	r22, r28
    5fde:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    5fe2:	80 91 d9 01 	lds	r24, 0x01D9
    5fe6:	88 23       	and	r24, r24
    5fe8:	d9 f6       	brne	.-74     	; 0x5fa0 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    5fea:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <xTaskGetTickCount>
    5fee:	20 91 ab 01 	lds	r18, 0x01AB
    5ff2:	30 91 ac 01 	lds	r19, 0x01AC
    5ff6:	82 1b       	sub	r24, r18
    5ff8:	93 0b       	sbc	r25, r19
    5ffa:	90 93 ae 01 	sts	0x01AE, r25
    5ffe:	80 93 ad 01 	sts	0x01AD, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    6002:	89 e0       	ldi	r24, 0x09	; 9
    6004:	f8 2e       	mov	r15, r24
    6006:	53 c0       	rjmp	.+166    	; 0x60ae <vCoRoutineSchedule+0x11e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    6008:	01 96       	adiw	r24, 0x01	; 1
    600a:	90 93 b0 01 	sts	0x01B0, r25
    600e:	80 93 af 01 	sts	0x01AF, r24
		xPassedTicks--;
    6012:	21 50       	subi	r18, 0x01	; 1
    6014:	30 40       	sbci	r19, 0x00	; 0
    6016:	30 93 ae 01 	sts	0x01AE, r19
    601a:	20 93 ad 01 	sts	0x01AD, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    601e:	89 2b       	or	r24, r25
    6020:	09 f0       	breq	.+2      	; 0x6024 <vCoRoutineSchedule+0x94>
    6022:	3e c0       	rjmp	.+124    	; 0x60a0 <vCoRoutineSchedule+0x110>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    6024:	20 91 d5 01 	lds	r18, 0x01D5
    6028:	30 91 d6 01 	lds	r19, 0x01D6
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    602c:	80 91 d7 01 	lds	r24, 0x01D7
    6030:	90 91 d8 01 	lds	r25, 0x01D8
    6034:	90 93 d6 01 	sts	0x01D6, r25
    6038:	80 93 d5 01 	sts	0x01D5, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    603c:	30 93 d8 01 	sts	0x01D8, r19
    6040:	20 93 d7 01 	sts	0x01D7, r18
    6044:	2d c0       	rjmp	.+90     	; 0x60a0 <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    6046:	05 80       	ldd	r0, Z+5	; 0x05
    6048:	f6 81       	ldd	r31, Z+6	; 0x06
    604a:	e0 2d       	mov	r30, r0
    604c:	c6 81       	ldd	r28, Z+6	; 0x06
    604e:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    6050:	20 91 af 01 	lds	r18, 0x01AF
    6054:	30 91 b0 01 	lds	r19, 0x01B0
    6058:	8a 81       	ldd	r24, Y+2	; 0x02
    605a:	9b 81       	ldd	r25, Y+3	; 0x03
    605c:	28 17       	cp	r18, r24
    605e:	39 07       	cpc	r19, r25
    6060:	30 f1       	brcs	.+76     	; 0x60ae <vCoRoutineSchedule+0x11e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    6062:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    6064:	8e 01       	movw	r16, r28
    6066:	0e 5f       	subi	r16, 0xFE	; 254
    6068:	1f 4f       	sbci	r17, 0xFF	; 255
    606a:	c8 01       	movw	r24, r16
    606c:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    6070:	8c 89       	ldd	r24, Y+20	; 0x14
    6072:	9d 89       	ldd	r25, Y+21	; 0x15
    6074:	89 2b       	or	r24, r25
    6076:	21 f0       	breq	.+8      	; 0x6080 <vCoRoutineSchedule+0xf0>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    6078:	ce 01       	movw	r24, r28
    607a:	0c 96       	adiw	r24, 0x0c	; 12
    607c:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    6080:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    6082:	9e 89       	ldd	r25, Y+22	; 0x16
    6084:	80 91 aa 01 	lds	r24, 0x01AA
    6088:	89 17       	cp	r24, r25
    608a:	10 f4       	brcc	.+4      	; 0x6090 <vCoRoutineSchedule+0x100>
    608c:	90 93 aa 01 	sts	0x01AA, r25
    6090:	9f 9d       	mul	r25, r15
    6092:	c0 01       	movw	r24, r0
    6094:	11 24       	eor	r1, r1
    6096:	8f 54       	subi	r24, 0x4F	; 79
    6098:	9e 4f       	sbci	r25, 0xFE	; 254
    609a:	b8 01       	movw	r22, r16
    609c:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    60a0:	e0 91 d5 01 	lds	r30, 0x01D5
    60a4:	f0 91 d6 01 	lds	r31, 0x01D6
    60a8:	80 81       	ld	r24, Z
    60aa:	88 23       	and	r24, r24
    60ac:	61 f6       	brne	.-104    	; 0x6046 <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    60ae:	20 91 ad 01 	lds	r18, 0x01AD
    60b2:	30 91 ae 01 	lds	r19, 0x01AE
    60b6:	80 91 af 01 	lds	r24, 0x01AF
    60ba:	90 91 b0 01 	lds	r25, 0x01B0
    60be:	21 15       	cp	r18, r1
    60c0:	31 05       	cpc	r19, r1
    60c2:	09 f0       	breq	.+2      	; 0x60c6 <vCoRoutineSchedule+0x136>
    60c4:	a1 cf       	rjmp	.-190    	; 0x6008 <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    60c6:	90 93 ac 01 	sts	0x01AC, r25
    60ca:	80 93 ab 01 	sts	0x01AB, r24
    60ce:	90 91 aa 01 	lds	r25, 0x01AA

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    60d2:	29 e0       	ldi	r18, 0x09	; 9
    60d4:	06 c0       	rjmp	.+12     	; 0x60e2 <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    60d6:	99 23       	and	r25, r25
    60d8:	19 f4       	brne	.+6      	; 0x60e0 <vCoRoutineSchedule+0x150>
    60da:	10 92 aa 01 	sts	0x01AA, r1
    60de:	32 c0       	rjmp	.+100    	; 0x6144 <vCoRoutineSchedule+0x1b4>
    60e0:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    60e2:	92 9f       	mul	r25, r18
    60e4:	d0 01       	movw	r26, r0
    60e6:	11 24       	eor	r1, r1
    60e8:	af 54       	subi	r26, 0x4F	; 79
    60ea:	be 4f       	sbci	r27, 0xFE	; 254
    60ec:	8c 91       	ld	r24, X
    60ee:	88 23       	and	r24, r24
    60f0:	91 f3       	breq	.-28     	; 0x60d6 <vCoRoutineSchedule+0x146>
    60f2:	90 93 aa 01 	sts	0x01AA, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    60f6:	11 96       	adiw	r26, 0x01	; 1
    60f8:	ed 91       	ld	r30, X+
    60fa:	fc 91       	ld	r31, X
    60fc:	12 97       	sbiw	r26, 0x02	; 2
    60fe:	02 80       	ldd	r0, Z+2	; 0x02
    6100:	f3 81       	ldd	r31, Z+3	; 0x03
    6102:	e0 2d       	mov	r30, r0
    6104:	12 96       	adiw	r26, 0x02	; 2
    6106:	fc 93       	st	X, r31
    6108:	ee 93       	st	-X, r30
    610a:	11 97       	sbiw	r26, 0x01	; 1
    610c:	cd 01       	movw	r24, r26
    610e:	03 96       	adiw	r24, 0x03	; 3
    6110:	e8 17       	cp	r30, r24
    6112:	f9 07       	cpc	r31, r25
    6114:	31 f4       	brne	.+12     	; 0x6122 <vCoRoutineSchedule+0x192>
    6116:	82 81       	ldd	r24, Z+2	; 0x02
    6118:	93 81       	ldd	r25, Z+3	; 0x03
    611a:	12 96       	adiw	r26, 0x02	; 2
    611c:	9c 93       	st	X, r25
    611e:	8e 93       	st	-X, r24
    6120:	11 97       	sbiw	r26, 0x01	; 1
    6122:	11 96       	adiw	r26, 0x01	; 1
    6124:	ed 91       	ld	r30, X+
    6126:	fc 91       	ld	r31, X
    6128:	12 97       	sbiw	r26, 0x02	; 2
    612a:	06 80       	ldd	r0, Z+6	; 0x06
    612c:	f7 81       	ldd	r31, Z+7	; 0x07
    612e:	e0 2d       	mov	r30, r0
    6130:	f0 93 a9 01 	sts	0x01A9, r31
    6134:	e0 93 a8 01 	sts	0x01A8, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    6138:	20 81       	ld	r18, Z
    613a:	31 81       	ldd	r19, Z+1	; 0x01
    613c:	cf 01       	movw	r24, r30
    613e:	67 89       	ldd	r22, Z+23	; 0x17
    6140:	f9 01       	movw	r30, r18
    6142:	09 95       	icall

	return;
}
    6144:	df 91       	pop	r29
    6146:	cf 91       	pop	r28
    6148:	1f 91       	pop	r17
    614a:	0f 91       	pop	r16
    614c:	ff 90       	pop	r15
    614e:	08 95       	ret

00006150 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    6150:	0f 93       	push	r16
    6152:	1f 93       	push	r17
    6154:	cf 93       	push	r28
    6156:	df 93       	push	r29
    6158:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    615a:	00 91 af 01 	lds	r16, 0x01AF
    615e:	10 91 b0 01 	lds	r17, 0x01B0
    6162:	08 0f       	add	r16, r24
    6164:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6166:	80 91 a8 01 	lds	r24, 0x01A8
    616a:	90 91 a9 01 	lds	r25, 0x01A9
    616e:	02 96       	adiw	r24, 0x02	; 2
    6170:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    6174:	e0 91 a8 01 	lds	r30, 0x01A8
    6178:	f0 91 a9 01 	lds	r31, 0x01A9
    617c:	13 83       	std	Z+3, r17	; 0x03
    617e:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    6180:	80 91 af 01 	lds	r24, 0x01AF
    6184:	90 91 b0 01 	lds	r25, 0x01B0
    6188:	bf 01       	movw	r22, r30
    618a:	6e 5f       	subi	r22, 0xFE	; 254
    618c:	7f 4f       	sbci	r23, 0xFF	; 255
    618e:	08 17       	cp	r16, r24
    6190:	19 07       	cpc	r17, r25
    6192:	28 f4       	brcc	.+10     	; 0x619e <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    6194:	80 91 d7 01 	lds	r24, 0x01D7
    6198:	90 91 d8 01 	lds	r25, 0x01D8
    619c:	04 c0       	rjmp	.+8      	; 0x61a6 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    619e:	80 91 d5 01 	lds	r24, 0x01D5
    61a2:	90 91 d6 01 	lds	r25, 0x01D6
    61a6:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vListInsert>
	}

	if( pxEventList )
    61aa:	20 97       	sbiw	r28, 0x00	; 0
    61ac:	49 f0       	breq	.+18     	; 0x61c0 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    61ae:	60 91 a8 01 	lds	r22, 0x01A8
    61b2:	70 91 a9 01 	lds	r23, 0x01A9
    61b6:	64 5f       	subi	r22, 0xF4	; 244
    61b8:	7f 4f       	sbci	r23, 0xFF	; 255
    61ba:	ce 01       	movw	r24, r28
    61bc:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vListInsert>
	}
}
    61c0:	df 91       	pop	r29
    61c2:	cf 91       	pop	r28
    61c4:	1f 91       	pop	r17
    61c6:	0f 91       	pop	r16
    61c8:	08 95       	ret

000061ca <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    61ca:	af 92       	push	r10
    61cc:	bf 92       	push	r11
    61ce:	cf 92       	push	r12
    61d0:	df 92       	push	r13
    61d2:	ef 92       	push	r14
    61d4:	ff 92       	push	r15
    61d6:	0f 93       	push	r16
    61d8:	1f 93       	push	r17
    61da:	cf 93       	push	r28
    61dc:	df 93       	push	r29
    61de:	6c 01       	movw	r12, r24
    61e0:	b6 2e       	mov	r11, r22
    61e2:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    61e4:	8a e1       	ldi	r24, 0x1A	; 26
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	0e 94 6f 31 	call	0x62de	; 0x62de <pvPortMalloc>
    61ec:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    61ee:	00 97       	sbiw	r24, 0x00	; 0
    61f0:	11 f4       	brne	.+4      	; 0x61f6 <xCoRoutineCreate+0x2c>
    61f2:	8f ef       	ldi	r24, 0xFF	; 255
    61f4:	59 c0       	rjmp	.+178    	; 0x62a8 <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    61f6:	80 91 a8 01 	lds	r24, 0x01A8
    61fa:	90 91 a9 01 	lds	r25, 0x01A9
    61fe:	89 2b       	or	r24, r25
    6200:	21 f5       	brne	.+72     	; 0x624a <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    6202:	d0 93 a9 01 	sts	0x01A9, r29
    6206:	c0 93 a8 01 	sts	0x01A8, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    620a:	81 eb       	ldi	r24, 0xB1	; 177
    620c:	91 e0       	ldi	r25, 0x01	; 1
    620e:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
    6212:	8a eb       	ldi	r24, 0xBA	; 186
    6214:	91 e0       	ldi	r25, 0x01	; 1
    6216:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    621a:	23 ec       	ldi	r18, 0xC3	; 195
    621c:	e2 2e       	mov	r14, r18
    621e:	21 e0       	ldi	r18, 0x01	; 1
    6220:	f2 2e       	mov	r15, r18
    6222:	c7 01       	movw	r24, r14
    6224:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    6228:	0c ec       	ldi	r16, 0xCC	; 204
    622a:	11 e0       	ldi	r17, 0x01	; 1
    622c:	c8 01       	movw	r24, r16
    622e:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    6232:	89 ed       	ldi	r24, 0xD9	; 217
    6234:	91 e0       	ldi	r25, 0x01	; 1
    6236:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    623a:	f0 92 d6 01 	sts	0x01D6, r15
    623e:	e0 92 d5 01 	sts	0x01D5, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    6242:	10 93 d8 01 	sts	0x01D8, r17
    6246:	00 93 d7 01 	sts	0x01D7, r16
    624a:	eb 2c       	mov	r14, r11
    624c:	bb 20       	and	r11, r11
    624e:	11 f0       	breq	.+4      	; 0x6254 <xCoRoutineCreate+0x8a>
    6250:	ee 24       	eor	r14, r14
    6252:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    6254:	19 8e       	std	Y+25, r1	; 0x19
    6256:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    6258:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    625a:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    625c:	fe 01       	movw	r30, r28
    625e:	c1 92       	st	Z+, r12
    6260:	d1 92       	st	Z+, r13
    6262:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    6264:	cf 01       	movw	r24, r30
    6266:	0e 94 a6 31 	call	0x634c	; 0x634c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    626a:	ce 01       	movw	r24, r28
    626c:	0c 96       	adiw	r24, 0x0c	; 12
    626e:	0e 94 a6 31 	call	0x634c	; 0x634c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    6272:	d9 87       	std	Y+9, r29	; 0x09
    6274:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    6276:	db 8b       	std	Y+19, r29	; 0x13
    6278:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    627a:	84 e0       	ldi	r24, 0x04	; 4
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	8e 19       	sub	r24, r14
    6280:	91 09       	sbc	r25, r1
    6282:	9d 87       	std	Y+13, r25	; 0x0d
    6284:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    6286:	9e 89       	ldd	r25, Y+22	; 0x16
    6288:	80 91 aa 01 	lds	r24, 0x01AA
    628c:	89 17       	cp	r24, r25
    628e:	10 f4       	brcc	.+4      	; 0x6294 <xCoRoutineCreate+0xca>
    6290:	90 93 aa 01 	sts	0x01AA, r25
    6294:	89 e0       	ldi	r24, 0x09	; 9
    6296:	98 9f       	mul	r25, r24
    6298:	c0 01       	movw	r24, r0
    629a:	11 24       	eor	r1, r1
    629c:	8f 54       	subi	r24, 0x4F	; 79
    629e:	9e 4f       	sbci	r25, 0xFE	; 254
    62a0:	b8 01       	movw	r22, r16
    62a2:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    62a6:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    62a8:	df 91       	pop	r29
    62aa:	cf 91       	pop	r28
    62ac:	1f 91       	pop	r17
    62ae:	0f 91       	pop	r16
    62b0:	ff 90       	pop	r15
    62b2:	ef 90       	pop	r14
    62b4:	df 90       	pop	r13
    62b6:	cf 90       	pop	r12
    62b8:	bf 90       	pop	r11
    62ba:	af 90       	pop	r10
    62bc:	08 95       	ret

000062be <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    62be:	08 95       	ret

000062c0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    62c0:	10 92 e3 01 	sts	0x01E3, r1
    62c4:	10 92 e2 01 	sts	0x01E2, r1
}
    62c8:	08 95       	ret

000062ca <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    62ca:	20 eb       	ldi	r18, 0xB0	; 176
    62cc:	34 e0       	ldi	r19, 0x04	; 4
    62ce:	80 91 e2 01 	lds	r24, 0x01E2
    62d2:	90 91 e3 01 	lds	r25, 0x01E3
    62d6:	28 1b       	sub	r18, r24
    62d8:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    62da:	c9 01       	movw	r24, r18
    62dc:	08 95       	ret

000062de <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    62de:	0f 93       	push	r16
    62e0:	1f 93       	push	r17
    62e2:	cf 93       	push	r28
    62e4:	df 93       	push	r29
    62e6:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    62e8:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    62ec:	80 91 e2 01 	lds	r24, 0x01E2
    62f0:	90 91 e3 01 	lds	r25, 0x01E3
    62f4:	98 01       	movw	r18, r16
    62f6:	28 0f       	add	r18, r24
    62f8:	39 1f       	adc	r19, r25
    62fa:	44 e0       	ldi	r20, 0x04	; 4
    62fc:	20 3b       	cpi	r18, 0xB0	; 176
    62fe:	34 07       	cpc	r19, r20
    6300:	58 f4       	brcc	.+22     	; 0x6318 <pvPortMalloc+0x3a>
    6302:	82 17       	cp	r24, r18
    6304:	93 07       	cpc	r25, r19
    6306:	40 f4       	brcc	.+16     	; 0x6318 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    6308:	ec 01       	movw	r28, r24
    630a:	cc 51       	subi	r28, 0x1C	; 28
    630c:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
    630e:	30 93 e3 01 	sts	0x01E3, r19
    6312:	20 93 e2 01 	sts	0x01E2, r18
    6316:	02 c0       	rjmp	.+4      	; 0x631c <pvPortMalloc+0x3e>
    6318:	c0 e0       	ldi	r28, 0x00	; 0
    631a:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    631c:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    6320:	ce 01       	movw	r24, r28
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	1f 91       	pop	r17
    6328:	0f 91       	pop	r16
    632a:	08 95       	ret

0000632c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    632c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    632e:	9c 01       	movw	r18, r24
    6330:	2d 5f       	subi	r18, 0xFD	; 253
    6332:	3f 4f       	sbci	r19, 0xFF	; 255
    6334:	32 83       	std	Z+2, r19	; 0x02
    6336:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	9f ef       	ldi	r25, 0xFF	; 255
    633c:	94 83       	std	Z+4, r25	; 0x04
    633e:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    6340:	36 83       	std	Z+6, r19	; 0x06
    6342:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    6344:	30 87       	std	Z+8, r19	; 0x08
    6346:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    6348:	10 82       	st	Z, r1
}
    634a:	08 95       	ret

0000634c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    634c:	fc 01       	movw	r30, r24
    634e:	11 86       	std	Z+9, r1	; 0x09
    6350:	10 86       	std	Z+8, r1	; 0x08
}
    6352:	08 95       	ret

00006354 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    6354:	cf 93       	push	r28
    6356:	df 93       	push	r29
    6358:	ac 01       	movw	r20, r24
    635a:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    635c:	ec 01       	movw	r28, r24
    635e:	29 81       	ldd	r18, Y+1	; 0x01
    6360:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    6362:	f9 01       	movw	r30, r18
    6364:	82 81       	ldd	r24, Z+2	; 0x02
    6366:	93 81       	ldd	r25, Z+3	; 0x03
    6368:	13 96       	adiw	r26, 0x03	; 3
    636a:	9c 93       	st	X, r25
    636c:	8e 93       	st	-X, r24
    636e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    6370:	89 81       	ldd	r24, Y+1	; 0x01
    6372:	9a 81       	ldd	r25, Y+2	; 0x02
    6374:	15 96       	adiw	r26, 0x05	; 5
    6376:	9c 93       	st	X, r25
    6378:	8e 93       	st	-X, r24
    637a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    637c:	02 80       	ldd	r0, Z+2	; 0x02
    637e:	f3 81       	ldd	r31, Z+3	; 0x03
    6380:	e0 2d       	mov	r30, r0
    6382:	75 83       	std	Z+5, r23	; 0x05
    6384:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    6386:	e9 01       	movw	r28, r18
    6388:	7b 83       	std	Y+3, r23	; 0x03
    638a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    638c:	fa 01       	movw	r30, r20
    638e:	72 83       	std	Z+2, r23	; 0x02
    6390:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6392:	19 96       	adiw	r26, 0x09	; 9
    6394:	5c 93       	st	X, r21
    6396:	4e 93       	st	-X, r20
    6398:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    639a:	80 81       	ld	r24, Z
    639c:	8f 5f       	subi	r24, 0xFF	; 255
    639e:	80 83       	st	Z, r24
}
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	08 95       	ret

000063a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	9c 01       	movw	r18, r24
    63ac:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    63ae:	48 81       	ld	r20, Y
    63b0:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    63b2:	8f ef       	ldi	r24, 0xFF	; 255
    63b4:	4f 3f       	cpi	r20, 0xFF	; 255
    63b6:	58 07       	cpc	r21, r24
    63b8:	21 f4       	brne	.+8      	; 0x63c2 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    63ba:	f9 01       	movw	r30, r18
    63bc:	a7 81       	ldd	r26, Z+7	; 0x07
    63be:	b0 85       	ldd	r27, Z+8	; 0x08
    63c0:	10 c0       	rjmp	.+32     	; 0x63e2 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    63c2:	d9 01       	movw	r26, r18
    63c4:	13 96       	adiw	r26, 0x03	; 3
    63c6:	04 c0       	rjmp	.+8      	; 0x63d0 <vListInsert+0x2a>
    63c8:	12 96       	adiw	r26, 0x02	; 2
    63ca:	0d 90       	ld	r0, X+
    63cc:	bc 91       	ld	r27, X
    63ce:	a0 2d       	mov	r26, r0
    63d0:	12 96       	adiw	r26, 0x02	; 2
    63d2:	ed 91       	ld	r30, X+
    63d4:	fc 91       	ld	r31, X
    63d6:	13 97       	sbiw	r26, 0x03	; 3
    63d8:	80 81       	ld	r24, Z
    63da:	91 81       	ldd	r25, Z+1	; 0x01
    63dc:	48 17       	cp	r20, r24
    63de:	59 07       	cpc	r21, r25
    63e0:	98 f7       	brcc	.-26     	; 0x63c8 <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    63e2:	12 96       	adiw	r26, 0x02	; 2
    63e4:	ed 91       	ld	r30, X+
    63e6:	fc 91       	ld	r31, X
    63e8:	13 97       	sbiw	r26, 0x03	; 3
    63ea:	fb 83       	std	Y+3, r31	; 0x03
    63ec:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    63ee:	d5 83       	std	Z+5, r29	; 0x05
    63f0:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    63f2:	bd 83       	std	Y+5, r27	; 0x05
    63f4:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    63f6:	13 96       	adiw	r26, 0x03	; 3
    63f8:	dc 93       	st	X, r29
    63fa:	ce 93       	st	-X, r28
    63fc:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    63fe:	39 87       	std	Y+9, r19	; 0x09
    6400:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    6402:	f9 01       	movw	r30, r18
    6404:	80 81       	ld	r24, Z
    6406:	8f 5f       	subi	r24, 0xFF	; 255
    6408:	80 83       	st	Z, r24
}
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	08 95       	ret

00006410 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    6410:	cf 93       	push	r28
    6412:	df 93       	push	r29
    6414:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    6416:	12 96       	adiw	r26, 0x02	; 2
    6418:	ed 91       	ld	r30, X+
    641a:	fc 91       	ld	r31, X
    641c:	13 97       	sbiw	r26, 0x03	; 3
    641e:	14 96       	adiw	r26, 0x04	; 4
    6420:	8d 91       	ld	r24, X+
    6422:	9c 91       	ld	r25, X
    6424:	15 97       	sbiw	r26, 0x05	; 5
    6426:	95 83       	std	Z+5, r25	; 0x05
    6428:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    642a:	14 96       	adiw	r26, 0x04	; 4
    642c:	cd 91       	ld	r28, X+
    642e:	dc 91       	ld	r29, X
    6430:	15 97       	sbiw	r26, 0x05	; 5
    6432:	fb 83       	std	Y+3, r31	; 0x03
    6434:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    6436:	18 96       	adiw	r26, 0x08	; 8
    6438:	ed 91       	ld	r30, X+
    643a:	fc 91       	ld	r31, X
    643c:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    643e:	81 81       	ldd	r24, Z+1	; 0x01
    6440:	92 81       	ldd	r25, Z+2	; 0x02
    6442:	8a 17       	cp	r24, r26
    6444:	9b 07       	cpc	r25, r27
    6446:	11 f4       	brne	.+4      	; 0x644c <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    6448:	d2 83       	std	Z+2, r29	; 0x02
    644a:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    644c:	19 96       	adiw	r26, 0x09	; 9
    644e:	1c 92       	st	X, r1
    6450:	1e 92       	st	-X, r1
    6452:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    6454:	80 81       	ld	r24, Z
    6456:	81 50       	subi	r24, 0x01	; 1
    6458:	80 83       	st	Z, r24
}
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	08 95       	ret

00006460 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    6460:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    6462:	91 e1       	ldi	r25, 0x11	; 17
    6464:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    6466:	22 e2       	ldi	r18, 0x22	; 34
    6468:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    646a:	83 e3       	ldi	r24, 0x33	; 51
    646c:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    646e:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    6470:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    6472:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    6474:	80 e8       	ldi	r24, 0x80	; 128
    6476:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    6478:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    647a:	82 e0       	ldi	r24, 0x02	; 2
    647c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    647e:	83 e0       	ldi	r24, 0x03	; 3
    6480:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    6482:	84 e0       	ldi	r24, 0x04	; 4
    6484:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    6486:	85 e0       	ldi	r24, 0x05	; 5
    6488:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    648a:	86 e0       	ldi	r24, 0x06	; 6
    648c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    648e:	87 e0       	ldi	r24, 0x07	; 7
    6490:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    6492:	88 e0       	ldi	r24, 0x08	; 8
    6494:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    6496:	89 e0       	ldi	r24, 0x09	; 9
    6498:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    649a:	80 e1       	ldi	r24, 0x10	; 16
    649c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    649e:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    64a0:	82 e1       	ldi	r24, 0x12	; 18
    64a2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    64a4:	83 e1       	ldi	r24, 0x13	; 19
    64a6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    64a8:	84 e1       	ldi	r24, 0x14	; 20
    64aa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    64ac:	85 e1       	ldi	r24, 0x15	; 21
    64ae:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    64b0:	86 e1       	ldi	r24, 0x16	; 22
    64b2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    64b4:	87 e1       	ldi	r24, 0x17	; 23
    64b6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    64b8:	88 e1       	ldi	r24, 0x18	; 24
    64ba:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    64bc:	89 e1       	ldi	r24, 0x19	; 25
    64be:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    64c0:	80 e2       	ldi	r24, 0x20	; 32
    64c2:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    64c4:	81 e2       	ldi	r24, 0x21	; 33
    64c6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    64c8:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    64ca:	83 e2       	ldi	r24, 0x23	; 35
    64cc:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    64ce:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    64d0:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    64d2:	86 e2       	ldi	r24, 0x26	; 38
    64d4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    64d6:	87 e2       	ldi	r24, 0x27	; 39
    64d8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    64da:	88 e2       	ldi	r24, 0x28	; 40
    64dc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    64de:	89 e2       	ldi	r24, 0x29	; 41
    64e0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    64e2:	80 e3       	ldi	r24, 0x30	; 48
    64e4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    64e6:	81 e3       	ldi	r24, 0x31	; 49
    64e8:	82 93       	st	-Z, r24
    64ea:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    64ec:	cf 01       	movw	r24, r30
    64ee:	08 95       	ret

000064f0 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    64f0:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    64f2:	8c e7       	ldi	r24, 0x7C	; 124
    64f4:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    64f6:	8b e0       	ldi	r24, 0x0B	; 11
    64f8:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    64fa:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    64fc:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    64fe:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    6500:	a0 91 94 06 	lds	r26, 0x0694
    6504:	b0 91 95 06 	lds	r27, 0x0695
    6508:	cd 91       	ld	r28, X+
    650a:	cd bf       	out	0x3d, r28	; 61
    650c:	dd 91       	ld	r29, X+
    650e:	de bf       	out	0x3e, r29	; 62
    6510:	ff 91       	pop	r31
    6512:	ef 91       	pop	r30
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	bf 91       	pop	r27
    651a:	af 91       	pop	r26
    651c:	9f 91       	pop	r25
    651e:	8f 91       	pop	r24
    6520:	7f 91       	pop	r23
    6522:	6f 91       	pop	r22
    6524:	5f 91       	pop	r21
    6526:	4f 91       	pop	r20
    6528:	3f 91       	pop	r19
    652a:	2f 91       	pop	r18
    652c:	1f 91       	pop	r17
    652e:	0f 91       	pop	r16
    6530:	ff 90       	pop	r15
    6532:	ef 90       	pop	r14
    6534:	df 90       	pop	r13
    6536:	cf 90       	pop	r12
    6538:	bf 90       	pop	r11
    653a:	af 90       	pop	r10
    653c:	9f 90       	pop	r9
    653e:	8f 90       	pop	r8
    6540:	7f 90       	pop	r7
    6542:	6f 90       	pop	r6
    6544:	5f 90       	pop	r5
    6546:	4f 90       	pop	r4
    6548:	3f 90       	pop	r3
    654a:	2f 90       	pop	r2
    654c:	1f 90       	pop	r1
    654e:	0f 90       	pop	r0
    6550:	0f be       	out	0x3f, r0	; 63
    6552:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    6554:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    6556:	81 e0       	ldi	r24, 0x01	; 1
    6558:	08 95       	ret

0000655a <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    655a:	08 95       	ret

0000655c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    655c:	0f 92       	push	r0
    655e:	0f b6       	in	r0, 0x3f	; 63
    6560:	f8 94       	cli
    6562:	0f 92       	push	r0
    6564:	1f 92       	push	r1
    6566:	11 24       	eor	r1, r1
    6568:	2f 92       	push	r2
    656a:	3f 92       	push	r3
    656c:	4f 92       	push	r4
    656e:	5f 92       	push	r5
    6570:	6f 92       	push	r6
    6572:	7f 92       	push	r7
    6574:	8f 92       	push	r8
    6576:	9f 92       	push	r9
    6578:	af 92       	push	r10
    657a:	bf 92       	push	r11
    657c:	cf 92       	push	r12
    657e:	df 92       	push	r13
    6580:	ef 92       	push	r14
    6582:	ff 92       	push	r15
    6584:	0f 93       	push	r16
    6586:	1f 93       	push	r17
    6588:	2f 93       	push	r18
    658a:	3f 93       	push	r19
    658c:	4f 93       	push	r20
    658e:	5f 93       	push	r21
    6590:	6f 93       	push	r22
    6592:	7f 93       	push	r23
    6594:	8f 93       	push	r24
    6596:	9f 93       	push	r25
    6598:	af 93       	push	r26
    659a:	bf 93       	push	r27
    659c:	cf 93       	push	r28
    659e:	df 93       	push	r29
    65a0:	ef 93       	push	r30
    65a2:	ff 93       	push	r31
    65a4:	a0 91 94 06 	lds	r26, 0x0694
    65a8:	b0 91 95 06 	lds	r27, 0x0695
    65ac:	0d b6       	in	r0, 0x3d	; 61
    65ae:	0d 92       	st	X+, r0
    65b0:	0e b6       	in	r0, 0x3e	; 62
    65b2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    65b4:	0e 94 65 37 	call	0x6eca	; 0x6eca <vTaskIncrementTick>
	vTaskSwitchContext();
    65b8:	0e 94 80 36 	call	0x6d00	; 0x6d00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    65bc:	a0 91 94 06 	lds	r26, 0x0694
    65c0:	b0 91 95 06 	lds	r27, 0x0695
    65c4:	cd 91       	ld	r28, X+
    65c6:	cd bf       	out	0x3d, r28	; 61
    65c8:	dd 91       	ld	r29, X+
    65ca:	de bf       	out	0x3e, r29	; 62
    65cc:	ff 91       	pop	r31
    65ce:	ef 91       	pop	r30
    65d0:	df 91       	pop	r29
    65d2:	cf 91       	pop	r28
    65d4:	bf 91       	pop	r27
    65d6:	af 91       	pop	r26
    65d8:	9f 91       	pop	r25
    65da:	8f 91       	pop	r24
    65dc:	7f 91       	pop	r23
    65de:	6f 91       	pop	r22
    65e0:	5f 91       	pop	r21
    65e2:	4f 91       	pop	r20
    65e4:	3f 91       	pop	r19
    65e6:	2f 91       	pop	r18
    65e8:	1f 91       	pop	r17
    65ea:	0f 91       	pop	r16
    65ec:	ff 90       	pop	r15
    65ee:	ef 90       	pop	r14
    65f0:	df 90       	pop	r13
    65f2:	cf 90       	pop	r12
    65f4:	bf 90       	pop	r11
    65f6:	af 90       	pop	r10
    65f8:	9f 90       	pop	r9
    65fa:	8f 90       	pop	r8
    65fc:	7f 90       	pop	r7
    65fe:	6f 90       	pop	r6
    6600:	5f 90       	pop	r5
    6602:	4f 90       	pop	r4
    6604:	3f 90       	pop	r3
    6606:	2f 90       	pop	r2
    6608:	1f 90       	pop	r1
    660a:	0f 90       	pop	r0
    660c:	0f be       	out	0x3f, r0	; 63
    660e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    6610:	08 95       	ret

00006612 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    6612:	0e 94 ae 32 	call	0x655c	; 0x655c <vPortYieldFromTick>
		asm volatile ( "reti" );
    6616:	18 95       	reti

00006618 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    6618:	0f 92       	push	r0
    661a:	0f b6       	in	r0, 0x3f	; 63
    661c:	f8 94       	cli
    661e:	0f 92       	push	r0
    6620:	1f 92       	push	r1
    6622:	11 24       	eor	r1, r1
    6624:	2f 92       	push	r2
    6626:	3f 92       	push	r3
    6628:	4f 92       	push	r4
    662a:	5f 92       	push	r5
    662c:	6f 92       	push	r6
    662e:	7f 92       	push	r7
    6630:	8f 92       	push	r8
    6632:	9f 92       	push	r9
    6634:	af 92       	push	r10
    6636:	bf 92       	push	r11
    6638:	cf 92       	push	r12
    663a:	df 92       	push	r13
    663c:	ef 92       	push	r14
    663e:	ff 92       	push	r15
    6640:	0f 93       	push	r16
    6642:	1f 93       	push	r17
    6644:	2f 93       	push	r18
    6646:	3f 93       	push	r19
    6648:	4f 93       	push	r20
    664a:	5f 93       	push	r21
    664c:	6f 93       	push	r22
    664e:	7f 93       	push	r23
    6650:	8f 93       	push	r24
    6652:	9f 93       	push	r25
    6654:	af 93       	push	r26
    6656:	bf 93       	push	r27
    6658:	cf 93       	push	r28
    665a:	df 93       	push	r29
    665c:	ef 93       	push	r30
    665e:	ff 93       	push	r31
    6660:	a0 91 94 06 	lds	r26, 0x0694
    6664:	b0 91 95 06 	lds	r27, 0x0695
    6668:	0d b6       	in	r0, 0x3d	; 61
    666a:	0d 92       	st	X+, r0
    666c:	0e b6       	in	r0, 0x3e	; 62
    666e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    6670:	0e 94 80 36 	call	0x6d00	; 0x6d00 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    6674:	a0 91 94 06 	lds	r26, 0x0694
    6678:	b0 91 95 06 	lds	r27, 0x0695
    667c:	cd 91       	ld	r28, X+
    667e:	cd bf       	out	0x3d, r28	; 61
    6680:	dd 91       	ld	r29, X+
    6682:	de bf       	out	0x3e, r29	; 62
    6684:	ff 91       	pop	r31
    6686:	ef 91       	pop	r30
    6688:	df 91       	pop	r29
    668a:	cf 91       	pop	r28
    668c:	bf 91       	pop	r27
    668e:	af 91       	pop	r26
    6690:	9f 91       	pop	r25
    6692:	8f 91       	pop	r24
    6694:	7f 91       	pop	r23
    6696:	6f 91       	pop	r22
    6698:	5f 91       	pop	r21
    669a:	4f 91       	pop	r20
    669c:	3f 91       	pop	r19
    669e:	2f 91       	pop	r18
    66a0:	1f 91       	pop	r17
    66a2:	0f 91       	pop	r16
    66a4:	ff 90       	pop	r15
    66a6:	ef 90       	pop	r14
    66a8:	df 90       	pop	r13
    66aa:	cf 90       	pop	r12
    66ac:	bf 90       	pop	r11
    66ae:	af 90       	pop	r10
    66b0:	9f 90       	pop	r9
    66b2:	8f 90       	pop	r8
    66b4:	7f 90       	pop	r7
    66b6:	6f 90       	pop	r6
    66b8:	5f 90       	pop	r5
    66ba:	4f 90       	pop	r4
    66bc:	3f 90       	pop	r3
    66be:	2f 90       	pop	r2
    66c0:	1f 90       	pop	r1
    66c2:	0f 90       	pop	r0
    66c4:	0f be       	out	0x3f, r0	; 63
    66c6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    66c8:	08 95       	ret

000066ca <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    66ca:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    66cc:	0f b6       	in	r0, 0x3f	; 63
    66ce:	f8 94       	cli
    66d0:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    66d2:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    66d4:	0f 90       	pop	r0
    66d6:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    66d8:	08 95       	ret

000066da <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    66da:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    66dc:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    66de:	08 95       	ret

000066e0 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    66e0:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    66e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	88 23       	and	r24, r24
    66e8:	09 f4       	brne	.+2      	; 0x66ec <xQueueIsQueueEmptyFromISR+0xc>
    66ea:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    66ec:	89 2f       	mov	r24, r25
    66ee:	08 95       	ret

000066f0 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    66f0:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    66f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    66f4:	20 e0       	ldi	r18, 0x00	; 0
    66f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    66f8:	98 17       	cp	r25, r24
    66fa:	09 f4       	brne	.+2      	; 0x66fe <xQueueIsQueueFullFromISR+0xe>
    66fc:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    66fe:	82 2f       	mov	r24, r18
    6700:	08 95       	ret

00006702 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	8c 01       	movw	r16, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    6708:	fc 01       	movw	r30, r24
    670a:	80 81       	ld	r24, Z
    670c:	91 81       	ldd	r25, Z+1	; 0x01
    670e:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
	vPortFree( pxQueue );
    6712:	c8 01       	movw	r24, r16
    6714:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
}
    6718:	1f 91       	pop	r17
    671a:	0f 91       	pop	r16
    671c:	08 95       	ret

0000671e <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    671e:	0f 93       	push	r16
    6720:	1f 93       	push	r17
    6722:	cf 93       	push	r28
    6724:	df 93       	push	r29
    6726:	ec 01       	movw	r28, r24
    6728:	fb 01       	movw	r30, r22
    672a:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    672c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    672e:	88 23       	and	r24, r24
    6730:	81 f1       	breq	.+96     	; 0x6792 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    6732:	48 81       	ld	r20, Y
    6734:	59 81       	ldd	r21, Y+1	; 0x01
    6736:	41 15       	cp	r20, r1
    6738:	51 05       	cpc	r21, r1
    673a:	a9 f0       	breq	.+42     	; 0x6766 <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    673c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    673e:	2e 81       	ldd	r18, Y+6	; 0x06
    6740:	3f 81       	ldd	r19, Y+7	; 0x07
    6742:	28 0f       	add	r18, r24
    6744:	31 1d       	adc	r19, r1
    6746:	3f 83       	std	Y+7, r19	; 0x07
    6748:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    674a:	8a 81       	ldd	r24, Y+2	; 0x02
    674c:	9b 81       	ldd	r25, Y+3	; 0x03
    674e:	28 17       	cp	r18, r24
    6750:	39 07       	cpc	r19, r25
    6752:	10 f0       	brcs	.+4      	; 0x6758 <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    6754:	5f 83       	std	Y+7, r21	; 0x07
    6756:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    6758:	4c 8d       	ldd	r20, Y+28	; 0x1c
    675a:	6e 81       	ldd	r22, Y+6	; 0x06
    675c:	7f 81       	ldd	r23, Y+7	; 0x07
    675e:	cf 01       	movw	r24, r30
    6760:	50 e0       	ldi	r21, 0x00	; 0
    6762:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    6766:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6768:	81 50       	subi	r24, 0x01	; 1
    676a:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    676c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    676e:	8f 3f       	cpi	r24, 0xFF	; 255
    6770:	69 f4       	brne	.+26     	; 0x678c <xQueueReceiveFromISR+0x6e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6772:	88 85       	ldd	r24, Y+8	; 0x08
    6774:	88 23       	and	r24, r24
    6776:	61 f0       	breq	.+24     	; 0x6790 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6778:	ce 01       	movw	r24, r28
    677a:	08 96       	adiw	r24, 0x08	; 8
    677c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    6780:	88 23       	and	r24, r24
    6782:	31 f0       	breq	.+12     	; 0x6790 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    6784:	81 e0       	ldi	r24, 0x01	; 1
    6786:	f8 01       	movw	r30, r16
    6788:	80 83       	st	Z, r24
    678a:	03 c0       	rjmp	.+6      	; 0x6792 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    678c:	8f 5f       	subi	r24, 0xFF	; 255
    678e:	8d 8f       	std	Y+29, r24	; 0x1d
    6790:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6792:	df 91       	pop	r29
    6794:	cf 91       	pop	r28
    6796:	1f 91       	pop	r17
    6798:	0f 91       	pop	r16
    679a:	08 95       	ret

0000679c <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    679c:	cf 93       	push	r28
    679e:	df 93       	push	r29
    67a0:	ec 01       	movw	r28, r24
    67a2:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    67a4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    67a6:	44 23       	and	r20, r20
    67a8:	a1 f1       	breq	.+104    	; 0x6812 <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    67aa:	88 23       	and	r24, r24
    67ac:	b1 f4       	brne	.+44     	; 0x67da <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    67ae:	8c 81       	ldd	r24, Y+4	; 0x04
    67b0:	9d 81       	ldd	r25, Y+5	; 0x05
    67b2:	50 e0       	ldi	r21, 0x00	; 0
    67b4:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    67b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    67ba:	2c 81       	ldd	r18, Y+4	; 0x04
    67bc:	3d 81       	ldd	r19, Y+5	; 0x05
    67be:	28 0f       	add	r18, r24
    67c0:	31 1d       	adc	r19, r1
    67c2:	3d 83       	std	Y+5, r19	; 0x05
    67c4:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    67c6:	8a 81       	ldd	r24, Y+2	; 0x02
    67c8:	9b 81       	ldd	r25, Y+3	; 0x03
    67ca:	28 17       	cp	r18, r24
    67cc:	39 07       	cpc	r19, r25
    67ce:	08 f1       	brcs	.+66     	; 0x6812 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    67d0:	88 81       	ld	r24, Y
    67d2:	99 81       	ldd	r25, Y+1	; 0x01
    67d4:	9d 83       	std	Y+5, r25	; 0x05
    67d6:	8c 83       	std	Y+4, r24	; 0x04
    67d8:	1c c0       	rjmp	.+56     	; 0x6812 <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    67da:	8e 81       	ldd	r24, Y+6	; 0x06
    67dc:	9f 81       	ldd	r25, Y+7	; 0x07
    67de:	50 e0       	ldi	r21, 0x00	; 0
    67e0:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    67e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	44 27       	eor	r20, r20
    67ea:	55 27       	eor	r21, r21
    67ec:	48 1b       	sub	r20, r24
    67ee:	59 0b       	sbc	r21, r25
    67f0:	8e 81       	ldd	r24, Y+6	; 0x06
    67f2:	9f 81       	ldd	r25, Y+7	; 0x07
    67f4:	84 0f       	add	r24, r20
    67f6:	95 1f       	adc	r25, r21
    67f8:	9f 83       	std	Y+7, r25	; 0x07
    67fa:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    67fc:	28 81       	ld	r18, Y
    67fe:	39 81       	ldd	r19, Y+1	; 0x01
    6800:	82 17       	cp	r24, r18
    6802:	93 07       	cpc	r25, r19
    6804:	30 f4       	brcc	.+12     	; 0x6812 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    6806:	8a 81       	ldd	r24, Y+2	; 0x02
    6808:	9b 81       	ldd	r25, Y+3	; 0x03
    680a:	84 0f       	add	r24, r20
    680c:	95 1f       	adc	r25, r21
    680e:	9f 83       	std	Y+7, r25	; 0x07
    6810:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    6812:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6814:	8f 5f       	subi	r24, 0xFF	; 255
    6816:	8a 8f       	std	Y+26, r24	; 0x1a
}
    6818:	df 91       	pop	r29
    681a:	cf 91       	pop	r28
    681c:	08 95       	ret

0000681e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    681e:	0f 93       	push	r16
    6820:	1f 93       	push	r17
    6822:	cf 93       	push	r28
    6824:	df 93       	push	r29
    6826:	ec 01       	movw	r28, r24
    6828:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    682a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    682c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    682e:	98 17       	cp	r25, r24
    6830:	10 f0       	brcs	.+4      	; 0x6836 <xQueueGenericSendFromISR+0x18>
    6832:	80 e0       	ldi	r24, 0x00	; 0
    6834:	17 c0       	rjmp	.+46     	; 0x6864 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6836:	ce 01       	movw	r24, r28
    6838:	42 2f       	mov	r20, r18
    683a:	0e 94 ce 33 	call	0x679c	; 0x679c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    683e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6840:	8f 3f       	cpi	r24, 0xFF	; 255
    6842:	69 f4       	brne	.+26     	; 0x685e <xQueueGenericSendFromISR+0x40>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6844:	89 89       	ldd	r24, Y+17	; 0x11
    6846:	88 23       	and	r24, r24
    6848:	61 f0       	breq	.+24     	; 0x6862 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    684a:	ce 01       	movw	r24, r28
    684c:	41 96       	adiw	r24, 0x11	; 17
    684e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    6852:	88 23       	and	r24, r24
    6854:	31 f0       	breq	.+12     	; 0x6862 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    6856:	81 e0       	ldi	r24, 0x01	; 1
    6858:	f8 01       	movw	r30, r16
    685a:	80 83       	st	Z, r24
    685c:	03 c0       	rjmp	.+6      	; 0x6864 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    685e:	8f 5f       	subi	r24, 0xFF	; 255
    6860:	8e 8f       	std	Y+30, r24	; 0x1e
    6862:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6864:	df 91       	pop	r29
    6866:	cf 91       	pop	r28
    6868:	1f 91       	pop	r17
    686a:	0f 91       	pop	r16
    686c:	08 95       	ret

0000686e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    686e:	0f 93       	push	r16
    6870:	1f 93       	push	r17
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    6878:	0f b6       	in	r0, 0x3f	; 63
    687a:	f8 94       	cli
    687c:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    687e:	8c 01       	movw	r16, r24
    6880:	0f 5e       	subi	r16, 0xEF	; 239
    6882:	1f 4f       	sbci	r17, 0xFF	; 255
    6884:	0d c0       	rjmp	.+26     	; 0x68a0 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6886:	89 89       	ldd	r24, Y+17	; 0x11
    6888:	88 23       	and	r24, r24
    688a:	69 f0       	breq	.+26     	; 0x68a6 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    688c:	c8 01       	movw	r24, r16
    688e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    6892:	88 23       	and	r24, r24
    6894:	11 f0       	breq	.+4      	; 0x689a <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    6896:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    689a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    689c:	81 50       	subi	r24, 0x01	; 1
    689e:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    68a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    68a2:	18 16       	cp	r1, r24
    68a4:	84 f3       	brlt	.-32     	; 0x6886 <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    68a6:	8f ef       	ldi	r24, 0xFF	; 255
    68a8:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    68aa:	0f 90       	pop	r0
    68ac:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    68ae:	0f b6       	in	r0, 0x3f	; 63
    68b0:	f8 94       	cli
    68b2:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    68b4:	8e 01       	movw	r16, r28
    68b6:	08 5f       	subi	r16, 0xF8	; 248
    68b8:	1f 4f       	sbci	r17, 0xFF	; 255
    68ba:	0d c0       	rjmp	.+26     	; 0x68d6 <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    68bc:	88 85       	ldd	r24, Y+8	; 0x08
    68be:	88 23       	and	r24, r24
    68c0:	69 f0       	breq	.+26     	; 0x68dc <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    68c2:	c8 01       	movw	r24, r16
    68c4:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    68c8:	88 23       	and	r24, r24
    68ca:	11 f0       	breq	.+4      	; 0x68d0 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    68cc:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    68d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68d2:	81 50       	subi	r24, 0x01	; 1
    68d4:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    68d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    68d8:	18 16       	cp	r1, r24
    68da:	84 f3       	brlt	.-32     	; 0x68bc <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    68dc:	8f ef       	ldi	r24, 0xFF	; 255
    68de:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    68e0:	0f 90       	pop	r0
    68e2:	0f be       	out	0x3f, r0	; 63
}
    68e4:	df 91       	pop	r29
    68e6:	cf 91       	pop	r28
    68e8:	1f 91       	pop	r17
    68ea:	0f 91       	pop	r16
    68ec:	08 95       	ret

000068ee <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    68ee:	7f 92       	push	r7
    68f0:	8f 92       	push	r8
    68f2:	9f 92       	push	r9
    68f4:	af 92       	push	r10
    68f6:	bf 92       	push	r11
    68f8:	cf 92       	push	r12
    68fa:	df 92       	push	r13
    68fc:	ef 92       	push	r14
    68fe:	ff 92       	push	r15
    6900:	0f 93       	push	r16
    6902:	1f 93       	push	r17
    6904:	df 93       	push	r29
    6906:	cf 93       	push	r28
    6908:	00 d0       	rcall	.+0      	; 0x690a <xQueueGenericReceive+0x1c>
    690a:	00 d0       	rcall	.+0      	; 0x690c <xQueueGenericReceive+0x1e>
    690c:	0f 92       	push	r0
    690e:	cd b7       	in	r28, 0x3d	; 61
    6910:	de b7       	in	r29, 0x3e	; 62
    6912:	8c 01       	movw	r16, r24
    6914:	96 2e       	mov	r9, r22
    6916:	87 2e       	mov	r8, r23
    6918:	5d 83       	std	Y+5, r21	; 0x05
    691a:	4c 83       	std	Y+4, r20	; 0x04
    691c:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    691e:	91 e1       	ldi	r25, 0x11	; 17
    6920:	c9 2e       	mov	r12, r25
    6922:	d1 2c       	mov	r13, r1
    6924:	c0 0e       	add	r12, r16
    6926:	d1 1e       	adc	r13, r17
    6928:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    692a:	7e 01       	movw	r14, r28
    692c:	08 94       	sec
    692e:	e1 1c       	adc	r14, r1
    6930:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6932:	84 e0       	ldi	r24, 0x04	; 4
    6934:	a8 2e       	mov	r10, r24
    6936:	b1 2c       	mov	r11, r1
    6938:	ac 0e       	add	r10, r28
    693a:	bd 1e       	adc	r11, r29
    693c:	01 c0       	rjmp	.+2      	; 0x6940 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    693e:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6940:	0f b6       	in	r0, 0x3f	; 63
    6942:	f8 94       	cli
    6944:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    6946:	f8 01       	movw	r30, r16
    6948:	82 8d       	ldd	r24, Z+26	; 0x1a
    694a:	88 23       	and	r24, r24
    694c:	09 f4       	brne	.+2      	; 0x6950 <xQueueGenericReceive+0x62>
    694e:	3e c0       	rjmp	.+124    	; 0x69cc <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    6950:	e6 80       	ldd	r14, Z+6	; 0x06
    6952:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    6954:	40 81       	ld	r20, Z
    6956:	51 81       	ldd	r21, Z+1	; 0x01
    6958:	41 15       	cp	r20, r1
    695a:	51 05       	cpc	r21, r1
    695c:	b1 f0       	breq	.+44     	; 0x698a <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    695e:	84 8d       	ldd	r24, Z+28	; 0x1c
    6960:	97 01       	movw	r18, r14
    6962:	28 0f       	add	r18, r24
    6964:	31 1d       	adc	r19, r1
    6966:	37 83       	std	Z+7, r19	; 0x07
    6968:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    696a:	82 81       	ldd	r24, Z+2	; 0x02
    696c:	93 81       	ldd	r25, Z+3	; 0x03
    696e:	28 17       	cp	r18, r24
    6970:	39 07       	cpc	r19, r25
    6972:	10 f0       	brcs	.+4      	; 0x6978 <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    6974:	57 83       	std	Z+7, r21	; 0x07
    6976:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    6978:	f8 01       	movw	r30, r16
    697a:	44 8d       	ldd	r20, Z+28	; 0x1c
    697c:	66 81       	ldd	r22, Z+6	; 0x06
    697e:	77 81       	ldd	r23, Z+7	; 0x07
    6980:	89 2d       	mov	r24, r9
    6982:	98 2d       	mov	r25, r8
    6984:	50 e0       	ldi	r21, 0x00	; 0
    6986:	0e 94 2a 3d 	call	0x7a54	; 0x7a54 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    698a:	77 20       	and	r7, r7
    698c:	71 f4       	brne	.+28     	; 0x69aa <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    698e:	f8 01       	movw	r30, r16
    6990:	82 8d       	ldd	r24, Z+26	; 0x1a
    6992:	81 50       	subi	r24, 0x01	; 1
    6994:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6996:	80 85       	ldd	r24, Z+8	; 0x08
    6998:	88 23       	and	r24, r24
    699a:	a1 f0       	breq	.+40     	; 0x69c4 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    699c:	c8 01       	movw	r24, r16
    699e:	08 96       	adiw	r24, 0x08	; 8
    69a0:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    69a4:	81 30       	cpi	r24, 0x01	; 1
    69a6:	71 f4       	brne	.+28     	; 0x69c4 <xQueueGenericReceive+0xd6>
    69a8:	0b c0       	rjmp	.+22     	; 0x69c0 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    69aa:	f8 01       	movw	r30, r16
    69ac:	f7 82       	std	Z+7, r15	; 0x07
    69ae:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    69b0:	81 89       	ldd	r24, Z+17	; 0x11
    69b2:	88 23       	and	r24, r24
    69b4:	39 f0       	breq	.+14     	; 0x69c4 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    69b6:	c6 01       	movw	r24, r12
    69b8:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    69bc:	88 23       	and	r24, r24
    69be:	11 f0       	breq	.+4      	; 0x69c4 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    69c0:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    69c4:	0f 90       	pop	r0
    69c6:	0f be       	out	0x3f, r0	; 63
    69c8:	81 e0       	ldi	r24, 0x01	; 1
    69ca:	4a c0       	rjmp	.+148    	; 0x6a60 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    69cc:	8c 81       	ldd	r24, Y+4	; 0x04
    69ce:	9d 81       	ldd	r25, Y+5	; 0x05
    69d0:	89 2b       	or	r24, r25
    69d2:	19 f4       	brne	.+6      	; 0x69da <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    69d4:	0f 90       	pop	r0
    69d6:	0f be       	out	0x3f, r0	; 63
    69d8:	42 c0       	rjmp	.+132    	; 0x6a5e <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    69da:	22 23       	and	r18, r18
    69dc:	19 f4       	brne	.+6      	; 0x69e4 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    69de:	c7 01       	movw	r24, r14
    69e0:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    69e4:	0f 90       	pop	r0
    69e6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    69e8:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    69ec:	0f b6       	in	r0, 0x3f	; 63
    69ee:	f8 94       	cli
    69f0:	0f 92       	push	r0
    69f2:	f8 01       	movw	r30, r16
    69f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    69f6:	8f 3f       	cpi	r24, 0xFF	; 255
    69f8:	09 f4       	brne	.+2      	; 0x69fc <xQueueGenericReceive+0x10e>
    69fa:	15 8e       	std	Z+29, r1	; 0x1d
    69fc:	f8 01       	movw	r30, r16
    69fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    6a00:	8f 3f       	cpi	r24, 0xFF	; 255
    6a02:	09 f4       	brne	.+2      	; 0x6a06 <xQueueGenericReceive+0x118>
    6a04:	16 8e       	std	Z+30, r1	; 0x1e
    6a06:	0f 90       	pop	r0
    6a08:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6a0a:	c7 01       	movw	r24, r14
    6a0c:	b5 01       	movw	r22, r10
    6a0e:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <xTaskCheckForTimeOut>
    6a12:	88 23       	and	r24, r24
    6a14:	f9 f4       	brne	.+62     	; 0x6a54 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6a16:	0f b6       	in	r0, 0x3f	; 63
    6a18:	f8 94       	cli
    6a1a:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    6a1c:	f8 01       	movw	r30, r16
    6a1e:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    6a20:	0f 90       	pop	r0
    6a22:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6a24:	88 23       	and	r24, r24
    6a26:	81 f4       	brne	.+32     	; 0x6a48 <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6a28:	6c 81       	ldd	r22, Y+4	; 0x04
    6a2a:	7d 81       	ldd	r23, Y+5	; 0x05
    6a2c:	c6 01       	movw	r24, r12
    6a2e:	0e 94 8e 38 	call	0x711c	; 0x711c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    6a32:	c8 01       	movw	r24, r16
    6a34:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    6a38:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6a3c:	88 23       	and	r24, r24
    6a3e:	09 f0       	breq	.+2      	; 0x6a42 <xQueueGenericReceive+0x154>
    6a40:	7e cf       	rjmp	.-260    	; 0x693e <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    6a42:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
    6a46:	7b cf       	rjmp	.-266    	; 0x693e <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6a48:	c8 01       	movw	r24, r16
    6a4a:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6a4e:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6a52:	75 cf       	rjmp	.-278    	; 0x693e <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    6a54:	c8 01       	movw	r24, r16
    6a56:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6a5a:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6a5e:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    6a60:	0f 90       	pop	r0
    6a62:	0f 90       	pop	r0
    6a64:	0f 90       	pop	r0
    6a66:	0f 90       	pop	r0
    6a68:	0f 90       	pop	r0
    6a6a:	cf 91       	pop	r28
    6a6c:	df 91       	pop	r29
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	ff 90       	pop	r15
    6a74:	ef 90       	pop	r14
    6a76:	df 90       	pop	r13
    6a78:	cf 90       	pop	r12
    6a7a:	bf 90       	pop	r11
    6a7c:	af 90       	pop	r10
    6a7e:	9f 90       	pop	r9
    6a80:	8f 90       	pop	r8
    6a82:	7f 90       	pop	r7
    6a84:	08 95       	ret

00006a86 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    6a86:	7f 92       	push	r7
    6a88:	8f 92       	push	r8
    6a8a:	9f 92       	push	r9
    6a8c:	af 92       	push	r10
    6a8e:	bf 92       	push	r11
    6a90:	cf 92       	push	r12
    6a92:	df 92       	push	r13
    6a94:	ef 92       	push	r14
    6a96:	ff 92       	push	r15
    6a98:	0f 93       	push	r16
    6a9a:	1f 93       	push	r17
    6a9c:	df 93       	push	r29
    6a9e:	cf 93       	push	r28
    6aa0:	00 d0       	rcall	.+0      	; 0x6aa2 <xQueueGenericSend+0x1c>
    6aa2:	00 d0       	rcall	.+0      	; 0x6aa4 <xQueueGenericSend+0x1e>
    6aa4:	0f 92       	push	r0
    6aa6:	cd b7       	in	r28, 0x3d	; 61
    6aa8:	de b7       	in	r29, 0x3e	; 62
    6aaa:	8c 01       	movw	r16, r24
    6aac:	6b 01       	movw	r12, r22
    6aae:	5d 83       	std	Y+5, r21	; 0x05
    6ab0:	4c 83       	std	Y+4, r20	; 0x04
    6ab2:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6ab4:	48 e0       	ldi	r20, 0x08	; 8
    6ab6:	e4 2e       	mov	r14, r20
    6ab8:	f1 2c       	mov	r15, r1
    6aba:	e8 0e       	add	r14, r24
    6abc:	f9 1e       	adc	r15, r25
    6abe:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6ac0:	5e 01       	movw	r10, r28
    6ac2:	08 94       	sec
    6ac4:	a1 1c       	adc	r10, r1
    6ac6:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6ac8:	34 e0       	ldi	r19, 0x04	; 4
    6aca:	83 2e       	mov	r8, r19
    6acc:	91 2c       	mov	r9, r1
    6ace:	8c 0e       	add	r8, r28
    6ad0:	9d 1e       	adc	r9, r29
    6ad2:	01 c0       	rjmp	.+2      	; 0x6ad6 <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6ad4:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6ad6:	0f b6       	in	r0, 0x3f	; 63
    6ad8:	f8 94       	cli
    6ada:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    6adc:	f8 01       	movw	r30, r16
    6ade:	92 8d       	ldd	r25, Z+26	; 0x1a
    6ae0:	83 8d       	ldd	r24, Z+27	; 0x1b
    6ae2:	98 17       	cp	r25, r24
    6ae4:	a8 f4       	brcc	.+42     	; 0x6b10 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6ae6:	c8 01       	movw	r24, r16
    6ae8:	b6 01       	movw	r22, r12
    6aea:	47 2d       	mov	r20, r7
    6aec:	0e 94 ce 33 	call	0x679c	; 0x679c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6af0:	f8 01       	movw	r30, r16
    6af2:	81 89       	ldd	r24, Z+17	; 0x11
    6af4:	88 23       	and	r24, r24
    6af6:	41 f0       	breq	.+16     	; 0x6b08 <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    6af8:	c8 01       	movw	r24, r16
    6afa:	41 96       	adiw	r24, 0x11	; 17
    6afc:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <xTaskRemoveFromEventList>
    6b00:	81 30       	cpi	r24, 0x01	; 1
    6b02:	11 f4       	brne	.+4      	; 0x6b08 <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    6b04:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    6b08:	0f 90       	pop	r0
    6b0a:	0f be       	out	0x3f, r0	; 63
    6b0c:	81 e0       	ldi	r24, 0x01	; 1
    6b0e:	4c c0       	rjmp	.+152    	; 0x6ba8 <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    6b10:	8c 81       	ldd	r24, Y+4	; 0x04
    6b12:	9d 81       	ldd	r25, Y+5	; 0x05
    6b14:	89 2b       	or	r24, r25
    6b16:	19 f4       	brne	.+6      	; 0x6b1e <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6b18:	0f 90       	pop	r0
    6b1a:	0f be       	out	0x3f, r0	; 63
    6b1c:	44 c0       	rjmp	.+136    	; 0x6ba6 <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    6b1e:	22 23       	and	r18, r18
    6b20:	19 f4       	brne	.+6      	; 0x6b28 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6b22:	c5 01       	movw	r24, r10
    6b24:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    6b28:	0f 90       	pop	r0
    6b2a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6b2c:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6b30:	0f b6       	in	r0, 0x3f	; 63
    6b32:	f8 94       	cli
    6b34:	0f 92       	push	r0
    6b36:	f8 01       	movw	r30, r16
    6b38:	85 8d       	ldd	r24, Z+29	; 0x1d
    6b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    6b3c:	09 f4       	brne	.+2      	; 0x6b40 <xQueueGenericSend+0xba>
    6b3e:	15 8e       	std	Z+29, r1	; 0x1d
    6b40:	f8 01       	movw	r30, r16
    6b42:	86 8d       	ldd	r24, Z+30	; 0x1e
    6b44:	8f 3f       	cpi	r24, 0xFF	; 255
    6b46:	09 f4       	brne	.+2      	; 0x6b4a <xQueueGenericSend+0xc4>
    6b48:	16 8e       	std	Z+30, r1	; 0x1e
    6b4a:	0f 90       	pop	r0
    6b4c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6b4e:	c5 01       	movw	r24, r10
    6b50:	b4 01       	movw	r22, r8
    6b52:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <xTaskCheckForTimeOut>
    6b56:	88 23       	and	r24, r24
    6b58:	09 f5       	brne	.+66     	; 0x6b9c <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    6b5a:	0f b6       	in	r0, 0x3f	; 63
    6b5c:	f8 94       	cli
    6b5e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    6b60:	f8 01       	movw	r30, r16
    6b62:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    6b64:	0f 90       	pop	r0
    6b66:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6b68:	f8 01       	movw	r30, r16
    6b6a:	83 8d       	ldd	r24, Z+27	; 0x1b
    6b6c:	98 17       	cp	r25, r24
    6b6e:	81 f4       	brne	.+32     	; 0x6b90 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6b70:	6c 81       	ldd	r22, Y+4	; 0x04
    6b72:	7d 81       	ldd	r23, Y+5	; 0x05
    6b74:	c7 01       	movw	r24, r14
    6b76:	0e 94 8e 38 	call	0x711c	; 0x711c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6b7a:	c8 01       	movw	r24, r16
    6b7c:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6b80:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6b84:	88 23       	and	r24, r24
    6b86:	09 f0       	breq	.+2      	; 0x6b8a <xQueueGenericSend+0x104>
    6b88:	a5 cf       	rjmp	.-182    	; 0x6ad4 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    6b8a:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
    6b8e:	a2 cf       	rjmp	.-188    	; 0x6ad4 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6b90:	c8 01       	movw	r24, r16
    6b92:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
				( void ) xTaskResumeAll();
    6b96:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6b9a:	9c cf       	rjmp	.-200    	; 0x6ad4 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6b9c:	c8 01       	movw	r24, r16
    6b9e:	0e 94 37 34 	call	0x686e	; 0x686e <prvUnlockQueue>
			( void ) xTaskResumeAll();
    6ba2:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    6ba8:	0f 90       	pop	r0
    6baa:	0f 90       	pop	r0
    6bac:	0f 90       	pop	r0
    6bae:	0f 90       	pop	r0
    6bb0:	0f 90       	pop	r0
    6bb2:	cf 91       	pop	r28
    6bb4:	df 91       	pop	r29
    6bb6:	1f 91       	pop	r17
    6bb8:	0f 91       	pop	r16
    6bba:	ff 90       	pop	r15
    6bbc:	ef 90       	pop	r14
    6bbe:	df 90       	pop	r13
    6bc0:	cf 90       	pop	r12
    6bc2:	bf 90       	pop	r11
    6bc4:	af 90       	pop	r10
    6bc6:	9f 90       	pop	r9
    6bc8:	8f 90       	pop	r8
    6bca:	7f 90       	pop	r7
    6bcc:	08 95       	ret

00006bce <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    6bce:	af 92       	push	r10
    6bd0:	bf 92       	push	r11
    6bd2:	cf 92       	push	r12
    6bd4:	df 92       	push	r13
    6bd6:	ef 92       	push	r14
    6bd8:	ff 92       	push	r15
    6bda:	0f 93       	push	r16
    6bdc:	1f 93       	push	r17
    6bde:	cf 93       	push	r28
    6be0:	df 93       	push	r29
    6be2:	b8 2e       	mov	r11, r24
    6be4:	a6 2e       	mov	r10, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    6be6:	88 23       	and	r24, r24
    6be8:	09 f4       	brne	.+2      	; 0x6bec <xQueueCreate+0x1e>
    6bea:	42 c0       	rjmp	.+132    	; 0x6c70 <xQueueCreate+0xa2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    6bec:	8f e1       	ldi	r24, 0x1F	; 31
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	0e 94 6f 31 	call	0x62de	; 0x62de <pvPortMalloc>
    6bf4:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    6bf6:	00 97       	sbiw	r24, 0x00	; 0
    6bf8:	d9 f1       	breq	.+118    	; 0x6c70 <xQueueCreate+0xa2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    6bfa:	eb 2c       	mov	r14, r11
    6bfc:	ff 24       	eor	r15, r15
    6bfe:	ca 2c       	mov	r12, r10
    6c00:	dd 24       	eor	r13, r13
    6c02:	ce 9c       	mul	r12, r14
    6c04:	80 01       	movw	r16, r0
    6c06:	cf 9c       	mul	r12, r15
    6c08:	10 0d       	add	r17, r0
    6c0a:	de 9c       	mul	r13, r14
    6c0c:	10 0d       	add	r17, r0
    6c0e:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    6c10:	c8 01       	movw	r24, r16
    6c12:	01 96       	adiw	r24, 0x01	; 1
    6c14:	0e 94 6f 31 	call	0x62de	; 0x62de <pvPortMalloc>
    6c18:	9c 01       	movw	r18, r24
    6c1a:	99 83       	std	Y+1, r25	; 0x01
    6c1c:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    6c1e:	00 97       	sbiw	r24, 0x00	; 0
    6c20:	21 f1       	breq	.+72     	; 0x6c6a <xQueueCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    6c22:	08 0f       	add	r16, r24
    6c24:	19 1f       	adc	r17, r25
    6c26:	1b 83       	std	Y+3, r17	; 0x03
    6c28:	0a 83       	std	Y+2, r16	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    6c2a:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    6c2c:	9d 83       	std	Y+5, r25	; 0x05
    6c2e:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    6c30:	08 94       	sec
    6c32:	e1 08       	sbc	r14, r1
    6c34:	f1 08       	sbc	r15, r1
    6c36:	ec 9c       	mul	r14, r12
    6c38:	c0 01       	movw	r24, r0
    6c3a:	ed 9c       	mul	r14, r13
    6c3c:	90 0d       	add	r25, r0
    6c3e:	fc 9c       	mul	r15, r12
    6c40:	90 0d       	add	r25, r0
    6c42:	11 24       	eor	r1, r1
    6c44:	28 0f       	add	r18, r24
    6c46:	39 1f       	adc	r19, r25
    6c48:	3f 83       	std	Y+7, r19	; 0x07
    6c4a:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    6c4c:	bb 8e       	std	Y+27, r11	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    6c4e:	ac 8e       	std	Y+28, r10	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    6c50:	8f ef       	ldi	r24, 0xFF	; 255
    6c52:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    6c54:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    6c56:	ce 01       	movw	r24, r28
    6c58:	08 96       	adiw	r24, 0x08	; 8
    6c5a:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    6c5e:	ce 01       	movw	r24, r28
    6c60:	41 96       	adiw	r24, 0x11	; 17
    6c62:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
    6c66:	9e 01       	movw	r18, r28
    6c68:	05 c0       	rjmp	.+10     	; 0x6c74 <xQueueCreate+0xa6>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    6c6a:	ce 01       	movw	r24, r28
    6c6c:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
    6c70:	20 e0       	ldi	r18, 0x00	; 0
    6c72:	30 e0       	ldi	r19, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    6c74:	c9 01       	movw	r24, r18
    6c76:	df 91       	pop	r29
    6c78:	cf 91       	pop	r28
    6c7a:	1f 91       	pop	r17
    6c7c:	0f 91       	pop	r16
    6c7e:	ff 90       	pop	r15
    6c80:	ef 90       	pop	r14
    6c82:	df 90       	pop	r13
    6c84:	cf 90       	pop	r12
    6c86:	bf 90       	pop	r11
    6c88:	af 90       	pop	r10
    6c8a:	08 95       	ret

00006c8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    6c8c:	1f 93       	push	r17
    6c8e:	16 2f       	mov	r17, r22
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    6c90:	60 e0       	ldi	r22, 0x00	; 0
    6c92:	0e 94 e7 35 	call	0x6bce	; 0x6bce <xQueueCreate>
    6c96:	fc 01       	movw	r30, r24

		if( pxHandle != NULL )
    6c98:	00 97       	sbiw	r24, 0x00	; 0
    6c9a:	09 f0       	breq	.+2      	; 0x6c9e <xQueueCreateCountingSemaphore+0x12>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    6c9c:	12 8f       	std	Z+26, r17	; 0x1a
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
    6c9e:	cf 01       	movw	r24, r30
    6ca0:	1f 91       	pop	r17
    6ca2:	08 95       	ret

00006ca4 <xTaskIsTaskSuspended>:
#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    6ca4:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    6ca6:	82 85       	ldd	r24, Z+10	; 0x0a
    6ca8:	93 85       	ldd	r25, Z+11	; 0x0b
    6caa:	8e 5e       	subi	r24, 0xEE	; 238
    6cac:	96 40       	sbci	r25, 0x06	; 6
    6cae:	59 f4       	brne	.+22     	; 0x6cc6 <xTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    6cb0:	84 89       	ldd	r24, Z+20	; 0x14
    6cb2:	95 89       	ldd	r25, Z+21	; 0x15
    6cb4:	26 e0       	ldi	r18, 0x06	; 6
    6cb6:	8c 3d       	cpi	r24, 0xDC	; 220
    6cb8:	92 07       	cpc	r25, r18
    6cba:	29 f0       	breq	.+10     	; 0x6cc6 <xTaskIsTaskSuspended+0x22>
    6cbc:	20 e0       	ldi	r18, 0x00	; 0
    6cbe:	89 2b       	or	r24, r25
    6cc0:	19 f4       	brne	.+6      	; 0x6cc8 <xTaskIsTaskSuspended+0x24>
    6cc2:	21 e0       	ldi	r18, 0x01	; 1
    6cc4:	01 c0       	rjmp	.+2      	; 0x6cc8 <xTaskIsTaskSuspended+0x24>
    6cc6:	20 e0       	ldi	r18, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    6cc8:	82 2f       	mov	r24, r18
    6cca:	08 95       	ret

00006ccc <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    6ccc:	80 91 9a 06 	lds	r24, 0x069A
    6cd0:	8f 5f       	subi	r24, 0xFF	; 255
    6cd2:	80 93 9a 06 	sts	0x069A, r24
}
    6cd6:	08 95       	ret

00006cd8 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    6cd8:	0f b6       	in	r0, 0x3f	; 63
    6cda:	f8 94       	cli
    6cdc:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    6cde:	20 91 98 06 	lds	r18, 0x0698
    6ce2:	30 91 99 06 	lds	r19, 0x0699
	}
	taskEXIT_CRITICAL();
    6ce6:	0f 90       	pop	r0
    6ce8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    6cea:	c9 01       	movw	r24, r18
    6cec:	08 95       	ret

00006cee <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    6cee:	20 91 98 06 	lds	r18, 0x0698
    6cf2:	30 91 99 06 	lds	r19, 0x0699
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    6cf6:	c9 01       	movw	r24, r18
    6cf8:	08 95       	ret

00006cfa <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    6cfa:	80 91 9d 06 	lds	r24, 0x069D
}
    6cfe:	08 95       	ret

00006d00 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    6d00:	80 91 9a 06 	lds	r24, 0x069A
    6d04:	88 23       	and	r24, r24
    6d06:	51 f0       	breq	.+20     	; 0x6d1c <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    6d08:	81 e0       	ldi	r24, 0x01	; 1
    6d0a:	80 93 96 06 	sts	0x0696, r24
    6d0e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    6d10:	80 91 9b 06 	lds	r24, 0x069B
    6d14:	81 50       	subi	r24, 0x01	; 1
    6d16:	80 93 9b 06 	sts	0x069B, r24
    6d1a:	01 c0       	rjmp	.+2      	; 0x6d1e <vTaskSwitchContext+0x1e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    6d1c:	99 e0       	ldi	r25, 0x09	; 9
    6d1e:	e0 91 9b 06 	lds	r30, 0x069B
    6d22:	e9 9f       	mul	r30, r25
    6d24:	f0 01       	movw	r30, r0
    6d26:	11 24       	eor	r1, r1
    6d28:	ee 55       	subi	r30, 0x5E	; 94
    6d2a:	f9 4f       	sbci	r31, 0xF9	; 249
    6d2c:	80 81       	ld	r24, Z
    6d2e:	88 23       	and	r24, r24
    6d30:	79 f3       	breq	.-34     	; 0x6d10 <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    6d32:	90 91 9b 06 	lds	r25, 0x069B
    6d36:	89 e0       	ldi	r24, 0x09	; 9
    6d38:	98 9f       	mul	r25, r24
    6d3a:	d0 01       	movw	r26, r0
    6d3c:	11 24       	eor	r1, r1
    6d3e:	ae 55       	subi	r26, 0x5E	; 94
    6d40:	b9 4f       	sbci	r27, 0xF9	; 249
    6d42:	11 96       	adiw	r26, 0x01	; 1
    6d44:	ed 91       	ld	r30, X+
    6d46:	fc 91       	ld	r31, X
    6d48:	12 97       	sbiw	r26, 0x02	; 2
    6d4a:	02 80       	ldd	r0, Z+2	; 0x02
    6d4c:	f3 81       	ldd	r31, Z+3	; 0x03
    6d4e:	e0 2d       	mov	r30, r0
    6d50:	12 96       	adiw	r26, 0x02	; 2
    6d52:	fc 93       	st	X, r31
    6d54:	ee 93       	st	-X, r30
    6d56:	11 97       	sbiw	r26, 0x01	; 1
    6d58:	cd 01       	movw	r24, r26
    6d5a:	03 96       	adiw	r24, 0x03	; 3
    6d5c:	e8 17       	cp	r30, r24
    6d5e:	f9 07       	cpc	r31, r25
    6d60:	31 f4       	brne	.+12     	; 0x6d6e <vTaskSwitchContext+0x6e>
    6d62:	82 81       	ldd	r24, Z+2	; 0x02
    6d64:	93 81       	ldd	r25, Z+3	; 0x03
    6d66:	12 96       	adiw	r26, 0x02	; 2
    6d68:	9c 93       	st	X, r25
    6d6a:	8e 93       	st	-X, r24
    6d6c:	11 97       	sbiw	r26, 0x01	; 1
    6d6e:	11 96       	adiw	r26, 0x01	; 1
    6d70:	ed 91       	ld	r30, X+
    6d72:	fc 91       	ld	r31, X
    6d74:	12 97       	sbiw	r26, 0x02	; 2
    6d76:	86 81       	ldd	r24, Z+6	; 0x06
    6d78:	97 81       	ldd	r25, Z+7	; 0x07
    6d7a:	90 93 95 06 	sts	0x0695, r25
    6d7e:	80 93 94 06 	sts	0x0694, r24
    6d82:	08 95       	ret

00006d84 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    6d84:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6d86:	80 91 97 06 	lds	r24, 0x0697
    6d8a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    6d8c:	80 91 98 06 	lds	r24, 0x0698
    6d90:	90 91 99 06 	lds	r25, 0x0699
    6d94:	92 83       	std	Z+2, r25	; 0x02
    6d96:	81 83       	std	Z+1, r24	; 0x01
}
    6d98:	08 95       	ret

00006d9a <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    6d9a:	fc 01       	movw	r30, r24
    6d9c:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    6d9e:	0f b6       	in	r0, 0x3f	; 63
    6da0:	f8 94       	cli
    6da2:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    6da4:	4d 91       	ld	r20, X+
    6da6:	5c 91       	ld	r21, X
    6da8:	11 97       	sbiw	r26, 0x01	; 1
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	4f 3f       	cpi	r20, 0xFF	; 255
    6dae:	58 07       	cpc	r21, r24
    6db0:	61 f1       	breq	.+88     	; 0x6e0a <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    6db2:	90 91 97 06 	lds	r25, 0x0697
    6db6:	80 81       	ld	r24, Z
    6db8:	98 17       	cp	r25, r24
    6dba:	49 f0       	breq	.+18     	; 0x6dce <xTaskCheckForTimeOut+0x34>
    6dbc:	20 91 98 06 	lds	r18, 0x0698
    6dc0:	30 91 99 06 	lds	r19, 0x0699
    6dc4:	81 81       	ldd	r24, Z+1	; 0x01
    6dc6:	92 81       	ldd	r25, Z+2	; 0x02
    6dc8:	28 17       	cp	r18, r24
    6dca:	39 07       	cpc	r19, r25
    6dcc:	00 f5       	brcc	.+64     	; 0x6e0e <xTaskCheckForTimeOut+0x74>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    6dce:	80 91 98 06 	lds	r24, 0x0698
    6dd2:	90 91 99 06 	lds	r25, 0x0699
    6dd6:	21 81       	ldd	r18, Z+1	; 0x01
    6dd8:	32 81       	ldd	r19, Z+2	; 0x02
    6dda:	82 1b       	sub	r24, r18
    6ddc:	93 0b       	sbc	r25, r19
    6dde:	84 17       	cp	r24, r20
    6de0:	95 07       	cpc	r25, r21
    6de2:	a8 f4       	brcc	.+42     	; 0x6e0e <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    6de4:	80 91 98 06 	lds	r24, 0x0698
    6de8:	90 91 99 06 	lds	r25, 0x0699
    6dec:	28 1b       	sub	r18, r24
    6dee:	39 0b       	sbc	r19, r25
    6df0:	24 0f       	add	r18, r20
    6df2:	35 1f       	adc	r19, r21
    6df4:	2d 93       	st	X+, r18
    6df6:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6df8:	80 91 97 06 	lds	r24, 0x0697
    6dfc:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    6dfe:	80 91 98 06 	lds	r24, 0x0698
    6e02:	90 91 99 06 	lds	r25, 0x0699
    6e06:	92 83       	std	Z+2, r25	; 0x02
    6e08:	81 83       	std	Z+1, r24	; 0x01
    6e0a:	80 e0       	ldi	r24, 0x00	; 0
    6e0c:	01 c0       	rjmp	.+2      	; 0x6e10 <xTaskCheckForTimeOut+0x76>
    6e0e:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    6e10:	0f 90       	pop	r0
    6e12:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    6e14:	08 95       	ret

00006e16 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    6e16:	81 e0       	ldi	r24, 0x01	; 1
    6e18:	80 93 96 06 	sts	0x0696, r24
}
    6e1c:	08 95       	ret

00006e1e <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    6e1e:	00 97       	sbiw	r24, 0x00	; 0
    6e20:	29 f4       	brne	.+10     	; 0x6e2c <uxTaskGetStackHighWaterMark+0xe>
    6e22:	e0 91 94 06 	lds	r30, 0x0694
    6e26:	f0 91 95 06 	lds	r31, 0x0695
    6e2a:	01 c0       	rjmp	.+2      	; 0x6e2e <uxTaskGetStackHighWaterMark+0x10>
    6e2c:	fc 01       	movw	r30, r24

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    6e2e:	87 89       	ldd	r24, Z+23	; 0x17
    6e30:	90 8d       	ldd	r25, Z+24	; 0x18
    6e32:	9c 01       	movw	r18, r24
    6e34:	f9 01       	movw	r30, r18
    6e36:	20 e0       	ldi	r18, 0x00	; 0
    6e38:	30 e0       	ldi	r19, 0x00	; 0
    6e3a:	03 c0       	rjmp	.+6      	; 0x6e42 <uxTaskGetStackHighWaterMark+0x24>
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
    6e3c:	31 96       	adiw	r30, 0x01	; 1
			usCount++;
    6e3e:	2f 5f       	subi	r18, 0xFF	; 255
    6e40:	3f 4f       	sbci	r19, 0xFF	; 255

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    6e42:	80 81       	ld	r24, Z
    6e44:	85 3a       	cpi	r24, 0xA5	; 165
    6e46:	d1 f3       	breq	.-12     	; 0x6e3c <uxTaskGetStackHighWaterMark+0x1e>
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    6e48:	82 2f       	mov	r24, r18
    6e4a:	08 95       	ret

00006e4c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    6e4c:	0f 93       	push	r16
    6e4e:	1f 93       	push	r17
    6e50:	cf 93       	push	r28
    6e52:	df 93       	push	r29
    6e54:	fc 01       	movw	r30, r24
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6e56:	05 80       	ldd	r0, Z+5	; 0x05
    6e58:	f6 81       	ldd	r31, Z+6	; 0x06
    6e5a:	e0 2d       	mov	r30, r0
    6e5c:	06 81       	ldd	r16, Z+6	; 0x06
    6e5e:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    6e60:	e8 01       	movw	r28, r16
    6e62:	2c 96       	adiw	r28, 0x0c	; 12
    6e64:	ce 01       	movw	r24, r28
    6e66:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6e6a:	80 91 9a 06 	lds	r24, 0x069A
    6e6e:	88 23       	and	r24, r24
    6e70:	a9 f4       	brne	.+42     	; 0x6e9c <xTaskRemoveFromEventList+0x50>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    6e72:	e8 01       	movw	r28, r16
    6e74:	22 96       	adiw	r28, 0x02	; 2
    6e76:	ce 01       	movw	r24, r28
    6e78:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    6e7c:	d8 01       	movw	r26, r16
    6e7e:	56 96       	adiw	r26, 0x16	; 22
    6e80:	9c 91       	ld	r25, X
    6e82:	80 91 9b 06 	lds	r24, 0x069B
    6e86:	89 17       	cp	r24, r25
    6e88:	10 f4       	brcc	.+4      	; 0x6e8e <xTaskRemoveFromEventList+0x42>
    6e8a:	90 93 9b 06 	sts	0x069B, r25
    6e8e:	89 e0       	ldi	r24, 0x09	; 9
    6e90:	98 9f       	mul	r25, r24
    6e92:	c0 01       	movw	r24, r0
    6e94:	11 24       	eor	r1, r1
    6e96:	8e 55       	subi	r24, 0x5E	; 94
    6e98:	99 4f       	sbci	r25, 0xF9	; 249
    6e9a:	02 c0       	rjmp	.+4      	; 0x6ea0 <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    6e9c:	8c ed       	ldi	r24, 0xDC	; 220
    6e9e:	96 e0       	ldi	r25, 0x06	; 6
    6ea0:	be 01       	movw	r22, r28
    6ea2:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6ea6:	e0 91 94 06 	lds	r30, 0x0694
    6eaa:	f0 91 95 06 	lds	r31, 0x0695
    6eae:	20 e0       	ldi	r18, 0x00	; 0
    6eb0:	d8 01       	movw	r26, r16
    6eb2:	56 96       	adiw	r26, 0x16	; 22
    6eb4:	9c 91       	ld	r25, X
    6eb6:	86 89       	ldd	r24, Z+22	; 0x16
    6eb8:	98 17       	cp	r25, r24
    6eba:	08 f0       	brcs	.+2      	; 0x6ebe <xTaskRemoveFromEventList+0x72>
    6ebc:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    6ebe:	82 2f       	mov	r24, r18
    6ec0:	df 91       	pop	r29
    6ec2:	cf 91       	pop	r28
    6ec4:	1f 91       	pop	r17
    6ec6:	0f 91       	pop	r16
    6ec8:	08 95       	ret

00006eca <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    6eca:	ff 92       	push	r15
    6ecc:	0f 93       	push	r16
    6ece:	1f 93       	push	r17
    6ed0:	cf 93       	push	r28
    6ed2:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6ed4:	80 91 9a 06 	lds	r24, 0x069A
    6ed8:	88 23       	and	r24, r24
    6eda:	09 f0       	breq	.+2      	; 0x6ede <vTaskIncrementTick+0x14>
    6edc:	8f c0       	rjmp	.+286    	; 0x6ffc <vTaskIncrementTick+0x132>
	{
		++xTickCount;
    6ede:	80 91 98 06 	lds	r24, 0x0698
    6ee2:	90 91 99 06 	lds	r25, 0x0699
    6ee6:	01 96       	adiw	r24, 0x01	; 1
    6ee8:	90 93 99 06 	sts	0x0699, r25
    6eec:	80 93 98 06 	sts	0x0698, r24
		if( xTickCount == ( portTickType ) 0U )
    6ef0:	80 91 98 06 	lds	r24, 0x0698
    6ef4:	90 91 99 06 	lds	r25, 0x0699
    6ef8:	89 2b       	or	r24, r25
    6efa:	79 f5       	brne	.+94     	; 0x6f5a <vTaskIncrementTick+0x90>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    6efc:	20 91 d8 06 	lds	r18, 0x06D8
    6f00:	30 91 d9 06 	lds	r19, 0x06D9
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    6f04:	80 91 da 06 	lds	r24, 0x06DA
    6f08:	90 91 db 06 	lds	r25, 0x06DB
    6f0c:	90 93 d9 06 	sts	0x06D9, r25
    6f10:	80 93 d8 06 	sts	0x06D8, r24
			pxOverflowDelayedTaskList = pxTemp;
    6f14:	30 93 db 06 	sts	0x06DB, r19
    6f18:	20 93 da 06 	sts	0x06DA, r18
			xNumOfOverflows++;
    6f1c:	80 91 97 06 	lds	r24, 0x0697
    6f20:	8f 5f       	subi	r24, 0xFF	; 255
    6f22:	80 93 97 06 	sts	0x0697, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    6f26:	e0 91 d8 06 	lds	r30, 0x06D8
    6f2a:	f0 91 d9 06 	lds	r31, 0x06D9
    6f2e:	80 81       	ld	r24, Z
    6f30:	88 23       	and	r24, r24
    6f32:	19 f4       	brne	.+6      	; 0x6f3a <vTaskIncrementTick+0x70>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    6f34:	8f ef       	ldi	r24, 0xFF	; 255
    6f36:	9f ef       	ldi	r25, 0xFF	; 255
    6f38:	0c c0       	rjmp	.+24     	; 0x6f52 <vTaskIncrementTick+0x88>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    6f3a:	e0 91 d8 06 	lds	r30, 0x06D8
    6f3e:	f0 91 d9 06 	lds	r31, 0x06D9
    6f42:	05 80       	ldd	r0, Z+5	; 0x05
    6f44:	f6 81       	ldd	r31, Z+6	; 0x06
    6f46:	e0 2d       	mov	r30, r0
    6f48:	06 80       	ldd	r0, Z+6	; 0x06
    6f4a:	f7 81       	ldd	r31, Z+7	; 0x07
    6f4c:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    6f4e:	82 81       	ldd	r24, Z+2	; 0x02
    6f50:	93 81       	ldd	r25, Z+3	; 0x03
    6f52:	90 93 7e 01 	sts	0x017E, r25
    6f56:	80 93 7d 01 	sts	0x017D, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    6f5a:	20 91 98 06 	lds	r18, 0x0698
    6f5e:	30 91 99 06 	lds	r19, 0x0699
    6f62:	80 91 7d 01 	lds	r24, 0x017D
    6f66:	90 91 7e 01 	lds	r25, 0x017E
    6f6a:	28 17       	cp	r18, r24
    6f6c:	39 07       	cpc	r19, r25
    6f6e:	08 f4       	brcc	.+2      	; 0x6f72 <vTaskIncrementTick+0xa8>
    6f70:	4a c0       	rjmp	.+148    	; 0x7006 <vTaskIncrementTick+0x13c>
    6f72:	89 e0       	ldi	r24, 0x09	; 9
    6f74:	f8 2e       	mov	r15, r24
    6f76:	e0 91 d8 06 	lds	r30, 0x06D8
    6f7a:	f0 91 d9 06 	lds	r31, 0x06D9
    6f7e:	80 81       	ld	r24, Z
    6f80:	88 23       	and	r24, r24
    6f82:	39 f4       	brne	.+14     	; 0x6f92 <vTaskIncrementTick+0xc8>
    6f84:	8f ef       	ldi	r24, 0xFF	; 255
    6f86:	9f ef       	ldi	r25, 0xFF	; 255
    6f88:	90 93 7e 01 	sts	0x017E, r25
    6f8c:	80 93 7d 01 	sts	0x017D, r24
    6f90:	3a c0       	rjmp	.+116    	; 0x7006 <vTaskIncrementTick+0x13c>
    6f92:	e0 91 d8 06 	lds	r30, 0x06D8
    6f96:	f0 91 d9 06 	lds	r31, 0x06D9
    6f9a:	05 80       	ldd	r0, Z+5	; 0x05
    6f9c:	f6 81       	ldd	r31, Z+6	; 0x06
    6f9e:	e0 2d       	mov	r30, r0
    6fa0:	c6 81       	ldd	r28, Z+6	; 0x06
    6fa2:	d7 81       	ldd	r29, Z+7	; 0x07
    6fa4:	2a 81       	ldd	r18, Y+2	; 0x02
    6fa6:	3b 81       	ldd	r19, Y+3	; 0x03
    6fa8:	80 91 98 06 	lds	r24, 0x0698
    6fac:	90 91 99 06 	lds	r25, 0x0699
    6fb0:	82 17       	cp	r24, r18
    6fb2:	93 07       	cpc	r25, r19
    6fb4:	28 f4       	brcc	.+10     	; 0x6fc0 <vTaskIncrementTick+0xf6>
    6fb6:	30 93 7e 01 	sts	0x017E, r19
    6fba:	20 93 7d 01 	sts	0x017D, r18
    6fbe:	23 c0       	rjmp	.+70     	; 0x7006 <vTaskIncrementTick+0x13c>
    6fc0:	8e 01       	movw	r16, r28
    6fc2:	0e 5f       	subi	r16, 0xFE	; 254
    6fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    6fc6:	c8 01       	movw	r24, r16
    6fc8:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
    6fcc:	8c 89       	ldd	r24, Y+20	; 0x14
    6fce:	9d 89       	ldd	r25, Y+21	; 0x15
    6fd0:	89 2b       	or	r24, r25
    6fd2:	21 f0       	breq	.+8      	; 0x6fdc <vTaskIncrementTick+0x112>
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	0c 96       	adiw	r24, 0x0c	; 12
    6fd8:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
    6fdc:	9e 89       	ldd	r25, Y+22	; 0x16
    6fde:	80 91 9b 06 	lds	r24, 0x069B
    6fe2:	89 17       	cp	r24, r25
    6fe4:	10 f4       	brcc	.+4      	; 0x6fea <vTaskIncrementTick+0x120>
    6fe6:	90 93 9b 06 	sts	0x069B, r25
    6fea:	9f 9d       	mul	r25, r15
    6fec:	c0 01       	movw	r24, r0
    6fee:	11 24       	eor	r1, r1
    6ff0:	8e 55       	subi	r24, 0x5E	; 94
    6ff2:	99 4f       	sbci	r25, 0xF9	; 249
    6ff4:	b8 01       	movw	r22, r16
    6ff6:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    6ffa:	bd cf       	rjmp	.-134    	; 0x6f76 <vTaskIncrementTick+0xac>
	}
	else
	{
		++uxMissedTicks;
    6ffc:	80 91 9c 06 	lds	r24, 0x069C
    7000:	8f 5f       	subi	r24, 0xFF	; 255
    7002:	80 93 9c 06 	sts	0x069C, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    7006:	df 91       	pop	r29
    7008:	cf 91       	pop	r28
    700a:	1f 91       	pop	r17
    700c:	0f 91       	pop	r16
    700e:	ff 90       	pop	r15
    7010:	08 95       	ret

00007012 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    7012:	df 92       	push	r13
    7014:	ef 92       	push	r14
    7016:	ff 92       	push	r15
    7018:	0f 93       	push	r16
    701a:	1f 93       	push	r17
    701c:	cf 93       	push	r28
    701e:	df 93       	push	r29
	portBASE_TYPE xYieldRequired = pdFALSE;
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    7020:	ec 01       	movw	r28, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    7022:	8a 85       	ldd	r24, Y+10	; 0x0a
    7024:	9b 85       	ldd	r25, Y+11	; 0x0b
    7026:	8e 5e       	subi	r24, 0xEE	; 238
    7028:	96 40       	sbci	r25, 0x06	; 6
    702a:	91 f5       	brne	.+100    	; 0x7090 <xTaskResumeFromISR+0x7e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    702c:	8c 89       	ldd	r24, Y+20	; 0x14
    702e:	9d 89       	ldd	r25, Y+21	; 0x15
    7030:	26 e0       	ldi	r18, 0x06	; 6
    7032:	8c 3d       	cpi	r24, 0xDC	; 220
    7034:	92 07       	cpc	r25, r18
    7036:	61 f1       	breq	.+88     	; 0x7090 <xTaskResumeFromISR+0x7e>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    7038:	89 2b       	or	r24, r25
    703a:	51 f5       	brne	.+84     	; 0x7090 <xTaskResumeFromISR+0x7e>
    703c:	33 c0       	rjmp	.+102    	; 0x70a4 <xTaskResumeFromISR+0x92>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    703e:	de 88       	ldd	r13, Y+22	; 0x16
    7040:	e0 91 94 06 	lds	r30, 0x0694
    7044:	f0 91 95 06 	lds	r31, 0x0695
    7048:	06 89       	ldd	r16, Z+22	; 0x16
				vListRemove(  &( pxTCB->xGenericListItem ) );
    704a:	92 e0       	ldi	r25, 0x02	; 2
    704c:	e9 2e       	mov	r14, r25
    704e:	f1 2c       	mov	r15, r1
    7050:	ec 0e       	add	r14, r28
    7052:	fd 1e       	adc	r15, r29
    7054:	c7 01       	movw	r24, r14
    7056:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    705a:	6e 89       	ldd	r22, Y+22	; 0x16
    705c:	80 91 9b 06 	lds	r24, 0x069B
    7060:	86 17       	cp	r24, r22
    7062:	10 f4       	brcc	.+4      	; 0x7068 <xTaskResumeFromISR+0x56>
    7064:	60 93 9b 06 	sts	0x069B, r22
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    7068:	10 e0       	ldi	r17, 0x00	; 0
    706a:	d0 16       	cp	r13, r16
    706c:	08 f0       	brcs	.+2      	; 0x7070 <xTaskResumeFromISR+0x5e>
    706e:	11 e0       	ldi	r17, 0x01	; 1
				vListRemove(  &( pxTCB->xGenericListItem ) );
				prvAddTaskToReadyQueue( pxTCB );
    7070:	89 e0       	ldi	r24, 0x09	; 9
    7072:	68 9f       	mul	r22, r24
    7074:	c0 01       	movw	r24, r0
    7076:	11 24       	eor	r1, r1
    7078:	8e 55       	subi	r24, 0x5E	; 94
    707a:	99 4f       	sbci	r25, 0xF9	; 249
    707c:	b7 01       	movw	r22, r14
    707e:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    7082:	07 c0       	rjmp	.+14     	; 0x7092 <xTaskResumeFromISR+0x80>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7084:	2c 96       	adiw	r28, 0x0c	; 12
    7086:	8c ed       	ldi	r24, 0xDC	; 220
    7088:	96 e0       	ldi	r25, 0x06	; 6
    708a:	be 01       	movw	r22, r28
    708c:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    7090:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		return xYieldRequired;
	}
    7092:	81 2f       	mov	r24, r17
    7094:	df 91       	pop	r29
    7096:	cf 91       	pop	r28
    7098:	1f 91       	pop	r17
    709a:	0f 91       	pop	r16
    709c:	ff 90       	pop	r15
    709e:	ef 90       	pop	r14
    70a0:	df 90       	pop	r13
    70a2:	08 95       	ret

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    70a4:	80 91 9a 06 	lds	r24, 0x069A
    70a8:	88 23       	and	r24, r24
    70aa:	49 f2       	breq	.-110    	; 0x703e <xTaskResumeFromISR+0x2c>
    70ac:	eb cf       	rjmp	.-42     	; 0x7084 <xTaskResumeFromISR+0x72>

000070ae <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    70ae:	cf 93       	push	r28
    70b0:	df 93       	push	r29
    70b2:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    70b4:	e0 91 94 06 	lds	r30, 0x0694
    70b8:	f0 91 95 06 	lds	r31, 0x0695
    70bc:	93 83       	std	Z+3, r25	; 0x03
    70be:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    70c0:	80 91 98 06 	lds	r24, 0x0698
    70c4:	90 91 99 06 	lds	r25, 0x0699
    70c8:	c8 17       	cp	r28, r24
    70ca:	d9 07       	cpc	r29, r25
    70cc:	68 f4       	brcc	.+26     	; 0x70e8 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    70ce:	80 91 da 06 	lds	r24, 0x06DA
    70d2:	90 91 db 06 	lds	r25, 0x06DB
    70d6:	60 91 94 06 	lds	r22, 0x0694
    70da:	70 91 95 06 	lds	r23, 0x0695
    70de:	6e 5f       	subi	r22, 0xFE	; 254
    70e0:	7f 4f       	sbci	r23, 0xFF	; 255
    70e2:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vListInsert>
    70e6:	17 c0       	rjmp	.+46     	; 0x7116 <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    70e8:	80 91 d8 06 	lds	r24, 0x06D8
    70ec:	90 91 d9 06 	lds	r25, 0x06D9
    70f0:	60 91 94 06 	lds	r22, 0x0694
    70f4:	70 91 95 06 	lds	r23, 0x0695
    70f8:	6e 5f       	subi	r22, 0xFE	; 254
    70fa:	7f 4f       	sbci	r23, 0xFF	; 255
    70fc:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    7100:	80 91 7d 01 	lds	r24, 0x017D
    7104:	90 91 7e 01 	lds	r25, 0x017E
    7108:	c8 17       	cp	r28, r24
    710a:	d9 07       	cpc	r29, r25
    710c:	20 f4       	brcc	.+8      	; 0x7116 <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    710e:	d0 93 7e 01 	sts	0x017E, r29
    7112:	c0 93 7d 01 	sts	0x017D, r28
		}
	}
}
    7116:	df 91       	pop	r29
    7118:	cf 91       	pop	r28
    711a:	08 95       	ret

0000711c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    711c:	cf 93       	push	r28
    711e:	df 93       	push	r29
    7120:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    7122:	60 91 94 06 	lds	r22, 0x0694
    7126:	70 91 95 06 	lds	r23, 0x0695
    712a:	64 5f       	subi	r22, 0xF4	; 244
    712c:	7f 4f       	sbci	r23, 0xFF	; 255
    712e:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7132:	80 91 94 06 	lds	r24, 0x0694
    7136:	90 91 95 06 	lds	r25, 0x0695
    713a:	02 96       	adiw	r24, 0x02	; 2
    713c:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    7140:	8f ef       	ldi	r24, 0xFF	; 255
    7142:	cf 3f       	cpi	r28, 0xFF	; 255
    7144:	d8 07       	cpc	r29, r24
    7146:	59 f4       	brne	.+22     	; 0x715e <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7148:	60 91 94 06 	lds	r22, 0x0694
    714c:	70 91 95 06 	lds	r23, 0x0695
    7150:	6e 5f       	subi	r22, 0xFE	; 254
    7152:	7f 4f       	sbci	r23, 0xFF	; 255
    7154:	8e ee       	ldi	r24, 0xEE	; 238
    7156:	96 e0       	ldi	r25, 0x06	; 6
    7158:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
    715c:	08 c0       	rjmp	.+16     	; 0x716e <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    715e:	80 91 98 06 	lds	r24, 0x0698
    7162:	90 91 99 06 	lds	r25, 0x0699
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    7166:	8c 0f       	add	r24, r28
    7168:	9d 1f       	adc	r25, r29
    716a:	0e 94 57 38 	call	0x70ae	; 0x70ae <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    716e:	df 91       	pop	r29
    7170:	cf 91       	pop	r28
    7172:	08 95       	ret

00007174 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    7174:	cf 92       	push	r12
    7176:	df 92       	push	r13
    7178:	ff 92       	push	r15
    717a:	0f 93       	push	r16
    717c:	1f 93       	push	r17
    717e:	df 93       	push	r29
    7180:	cf 93       	push	r28
    7182:	0f 92       	push	r0
    7184:	cd b7       	in	r28, 0x3d	; 61
    7186:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7188:	0f b6       	in	r0, 0x3f	; 63
    718a:	f8 94       	cli
    718c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    718e:	80 91 9a 06 	lds	r24, 0x069A
    7192:	81 50       	subi	r24, 0x01	; 1
    7194:	80 93 9a 06 	sts	0x069A, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7198:	80 91 9a 06 	lds	r24, 0x069A
    719c:	88 23       	and	r24, r24
    719e:	09 f0       	breq	.+2      	; 0x71a2 <xTaskResumeAll+0x2e>
    71a0:	58 c0       	rjmp	.+176    	; 0x7252 <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    71a2:	80 91 9d 06 	lds	r24, 0x069D
    71a6:	88 23       	and	r24, r24
    71a8:	09 f4       	brne	.+2      	; 0x71ac <xTaskResumeAll+0x38>
    71aa:	53 c0       	rjmp	.+166    	; 0x7252 <xTaskResumeAll+0xde>
    71ac:	19 82       	std	Y+1, r1	; 0x01
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    71ae:	29 e0       	ldi	r18, 0x09	; 9
    71b0:	f2 2e       	mov	r15, r18
    71b2:	2d c0       	rjmp	.+90     	; 0x720e <xTaskResumeAll+0x9a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    71b4:	e0 91 e1 06 	lds	r30, 0x06E1
    71b8:	f0 91 e2 06 	lds	r31, 0x06E2
    71bc:	c6 80       	ldd	r12, Z+6	; 0x06
    71be:	d7 80       	ldd	r13, Z+7	; 0x07
					vListRemove( &( pxTCB->xEventListItem ) );
    71c0:	c6 01       	movw	r24, r12
    71c2:	0c 96       	adiw	r24, 0x0c	; 12
    71c4:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    71c8:	86 01       	movw	r16, r12
    71ca:	0e 5f       	subi	r16, 0xFE	; 254
    71cc:	1f 4f       	sbci	r17, 0xFF	; 255
    71ce:	c8 01       	movw	r24, r16
    71d0:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    71d4:	d6 01       	movw	r26, r12
    71d6:	56 96       	adiw	r26, 0x16	; 22
    71d8:	9c 91       	ld	r25, X
    71da:	80 91 9b 06 	lds	r24, 0x069B
    71de:	89 17       	cp	r24, r25
    71e0:	10 f4       	brcc	.+4      	; 0x71e6 <xTaskResumeAll+0x72>
    71e2:	90 93 9b 06 	sts	0x069B, r25
    71e6:	9f 9d       	mul	r25, r15
    71e8:	c0 01       	movw	r24, r0
    71ea:	11 24       	eor	r1, r1
    71ec:	8e 55       	subi	r24, 0x5E	; 94
    71ee:	99 4f       	sbci	r25, 0xF9	; 249
    71f0:	b8 01       	movw	r22, r16
    71f2:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    71f6:	e0 91 94 06 	lds	r30, 0x0694
    71fa:	f0 91 95 06 	lds	r31, 0x0695
    71fe:	d6 01       	movw	r26, r12
    7200:	56 96       	adiw	r26, 0x16	; 22
    7202:	9c 91       	ld	r25, X
    7204:	86 89       	ldd	r24, Z+22	; 0x16
    7206:	98 17       	cp	r25, r24
    7208:	10 f0       	brcs	.+4      	; 0x720e <xTaskResumeAll+0x9a>
    720a:	b1 e0       	ldi	r27, 0x01	; 1
    720c:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    720e:	80 91 dc 06 	lds	r24, 0x06DC
    7212:	88 23       	and	r24, r24
    7214:	79 f6       	brne	.-98     	; 0x71b4 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7216:	80 91 9c 06 	lds	r24, 0x069C
    721a:	88 23       	and	r24, r24
    721c:	41 f4       	brne	.+16     	; 0x722e <xTaskResumeAll+0xba>
    721e:	0c c0       	rjmp	.+24     	; 0x7238 <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    7220:	0e 94 65 37 	call	0x6eca	; 0x6eca <vTaskIncrementTick>
						--uxMissedTicks;
    7224:	80 91 9c 06 	lds	r24, 0x069C
    7228:	81 50       	subi	r24, 0x01	; 1
    722a:	80 93 9c 06 	sts	0x069C, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    722e:	80 91 9c 06 	lds	r24, 0x069C
    7232:	88 23       	and	r24, r24
    7234:	a9 f7       	brne	.-22     	; 0x7220 <xTaskResumeAll+0xac>
    7236:	07 c0       	rjmp	.+14     	; 0x7246 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    7238:	e9 81       	ldd	r30, Y+1	; 0x01
    723a:	e1 30       	cpi	r30, 0x01	; 1
    723c:	21 f0       	breq	.+8      	; 0x7246 <xTaskResumeAll+0xd2>
    723e:	80 91 96 06 	lds	r24, 0x0696
    7242:	81 30       	cpi	r24, 0x01	; 1
    7244:	31 f4       	brne	.+12     	; 0x7252 <xTaskResumeAll+0xde>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    7246:	10 92 96 06 	sts	0x0696, r1
					portYIELD_WITHIN_API();
    724a:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	01 c0       	rjmp	.+2      	; 0x7254 <xTaskResumeAll+0xe0>
    7252:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    7254:	0f 90       	pop	r0
    7256:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    7258:	0f 90       	pop	r0
    725a:	cf 91       	pop	r28
    725c:	df 91       	pop	r29
    725e:	1f 91       	pop	r17
    7260:	0f 91       	pop	r16
    7262:	ff 90       	pop	r15
    7264:	df 90       	pop	r13
    7266:	cf 90       	pop	r12
    7268:	08 95       	ret

0000726a <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    726a:	0f 93       	push	r16
    726c:	1f 93       	push	r17
    726e:	cf 93       	push	r28
    7270:	df 93       	push	r29
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    7272:	ec 01       	movw	r28, r24

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    7274:	00 97       	sbiw	r24, 0x00	; 0
    7276:	09 f4       	brne	.+2      	; 0x727a <vTaskResume+0x10>
    7278:	3c c0       	rjmp	.+120    	; 0x72f2 <vTaskResume+0x88>
    727a:	80 91 94 06 	lds	r24, 0x0694
    727e:	90 91 95 06 	lds	r25, 0x0695
    7282:	c8 17       	cp	r28, r24
    7284:	d9 07       	cpc	r29, r25
    7286:	a9 f1       	breq	.+106    	; 0x72f2 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
    7288:	0f b6       	in	r0, 0x3f	; 63
    728a:	f8 94       	cli
    728c:	0f 92       	push	r0
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    728e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7290:	9b 85       	ldd	r25, Y+11	; 0x0b
    7292:	8e 5e       	subi	r24, 0xEE	; 238
    7294:	96 40       	sbci	r25, 0x06	; 6
    7296:	f1 f4       	brne	.+60     	; 0x72d4 <vTaskResume+0x6a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    7298:	8c 89       	ldd	r24, Y+20	; 0x14
    729a:	9d 89       	ldd	r25, Y+21	; 0x15
    729c:	26 e0       	ldi	r18, 0x06	; 6
    729e:	8c 3d       	cpi	r24, 0xDC	; 220
    72a0:	92 07       	cpc	r25, r18
    72a2:	c1 f0       	breq	.+48     	; 0x72d4 <vTaskResume+0x6a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    72a4:	89 2b       	or	r24, r25
    72a6:	b1 f4       	brne	.+44     	; 0x72d4 <vTaskResume+0x6a>
    72a8:	18 c0       	rjmp	.+48     	; 0x72da <vTaskResume+0x70>
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    72aa:	90 93 9b 06 	sts	0x069B, r25
    72ae:	89 e0       	ldi	r24, 0x09	; 9
    72b0:	98 9f       	mul	r25, r24
    72b2:	c0 01       	movw	r24, r0
    72b4:	11 24       	eor	r1, r1
    72b6:	8e 55       	subi	r24, 0x5E	; 94
    72b8:	99 4f       	sbci	r25, 0xF9	; 249
    72ba:	b8 01       	movw	r22, r16
    72bc:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    72c0:	e0 91 94 06 	lds	r30, 0x0694
    72c4:	f0 91 95 06 	lds	r31, 0x0695
    72c8:	9e 89       	ldd	r25, Y+22	; 0x16
    72ca:	86 89       	ldd	r24, Z+22	; 0x16
    72cc:	98 17       	cp	r25, r24
    72ce:	10 f0       	brcs	.+4      	; 0x72d4 <vTaskResume+0x6a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    72d0:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    72d4:	0f 90       	pop	r0
    72d6:	0f be       	out	0x3f, r0	; 63
    72d8:	0c c0       	rjmp	.+24     	; 0x72f2 <vTaskResume+0x88>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    72da:	8e 01       	movw	r16, r28
    72dc:	0e 5f       	subi	r16, 0xFE	; 254
    72de:	1f 4f       	sbci	r17, 0xFF	; 255
    72e0:	c8 01       	movw	r24, r16
    72e2:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    72e6:	9e 89       	ldd	r25, Y+22	; 0x16
    72e8:	80 91 9b 06 	lds	r24, 0x069B
    72ec:	89 17       	cp	r24, r25
    72ee:	e8 f2       	brcs	.-70     	; 0x72aa <vTaskResume+0x40>
    72f0:	de cf       	rjmp	.-68     	; 0x72ae <vTaskResume+0x44>
					}
				}
			}
			taskEXIT_CRITICAL();
		}
	}
    72f2:	df 91       	pop	r29
    72f4:	cf 91       	pop	r28
    72f6:	1f 91       	pop	r17
    72f8:	0f 91       	pop	r16
    72fa:	08 95       	ret

000072fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    72fc:	ef 92       	push	r14
    72fe:	ff 92       	push	r15
    7300:	0f 93       	push	r16
    7302:	1f 93       	push	r17
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    730a:	0f b6       	in	r0, 0x3f	; 63
    730c:	f8 94       	cli
    730e:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    7310:	80 91 94 06 	lds	r24, 0x0694
    7314:	90 91 95 06 	lds	r25, 0x0695
    7318:	08 17       	cp	r16, r24
    731a:	19 07       	cpc	r17, r25
    731c:	19 f4       	brne	.+6      	; 0x7324 <vTaskSuspend+0x28>
    731e:	00 e0       	ldi	r16, 0x00	; 0
    7320:	10 e0       	ldi	r17, 0x00	; 0
    7322:	03 c0       	rjmp	.+6      	; 0x732a <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    7324:	01 15       	cp	r16, r1
    7326:	11 05       	cpc	r17, r1
    7328:	29 f4       	brne	.+10     	; 0x7334 <vTaskSuspend+0x38>
    732a:	c0 91 94 06 	lds	r28, 0x0694
    732e:	d0 91 95 06 	lds	r29, 0x0695
    7332:	01 c0       	rjmp	.+2      	; 0x7336 <vTaskSuspend+0x3a>
    7334:	e8 01       	movw	r28, r16

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    7336:	32 e0       	ldi	r19, 0x02	; 2
    7338:	e3 2e       	mov	r14, r19
    733a:	f1 2c       	mov	r15, r1
    733c:	ec 0e       	add	r14, r28
    733e:	fd 1e       	adc	r15, r29
    7340:	c7 01       	movw	r24, r14
    7342:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    7346:	8c 89       	ldd	r24, Y+20	; 0x14
    7348:	9d 89       	ldd	r25, Y+21	; 0x15
    734a:	89 2b       	or	r24, r25
    734c:	21 f0       	breq	.+8      	; 0x7356 <vTaskSuspend+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    734e:	ce 01       	movw	r24, r28
    7350:	0c 96       	adiw	r24, 0x0c	; 12
    7352:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    7356:	8e ee       	ldi	r24, 0xEE	; 238
    7358:	96 e0       	ldi	r25, 0x06	; 6
    735a:	b7 01       	movw	r22, r14
    735c:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    7360:	0f 90       	pop	r0
    7362:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    7364:	01 2b       	or	r16, r17
    7366:	a1 f4       	brne	.+40     	; 0x7390 <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    7368:	80 91 9e 06 	lds	r24, 0x069E
    736c:	88 23       	and	r24, r24
    736e:	19 f0       	breq	.+6      	; 0x7376 <vTaskSuspend+0x7a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    7370:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
    7374:	0d c0       	rjmp	.+26     	; 0x7390 <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    7376:	90 91 ee 06 	lds	r25, 0x06EE
    737a:	80 91 9d 06 	lds	r24, 0x069D
    737e:	98 17       	cp	r25, r24
    7380:	29 f4       	brne	.+10     	; 0x738c <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    7382:	10 92 95 06 	sts	0x0695, r1
    7386:	10 92 94 06 	sts	0x0694, r1
    738a:	02 c0       	rjmp	.+4      	; 0x7390 <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    738c:	0e 94 80 36 	call	0x6d00	; 0x6d00 <vTaskSwitchContext>
				}
			}
		}
	}
    7390:	df 91       	pop	r29
    7392:	cf 91       	pop	r28
    7394:	1f 91       	pop	r17
    7396:	0f 91       	pop	r16
    7398:	ff 90       	pop	r15
    739a:	ef 90       	pop	r14
    739c:	08 95       	ret

0000739e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    73a8:	00 97       	sbiw	r24, 0x00	; 0
    73aa:	c9 f0       	breq	.+50     	; 0x73de <vTaskDelay+0x40>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    73ac:	80 91 9a 06 	lds	r24, 0x069A
    73b0:	8f 5f       	subi	r24, 0xFF	; 255
    73b2:	80 93 9a 06 	sts	0x069A, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    73b6:	00 91 98 06 	lds	r16, 0x0698
    73ba:	10 91 99 06 	lds	r17, 0x0699

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    73be:	80 91 94 06 	lds	r24, 0x0694
    73c2:	90 91 95 06 	lds	r25, 0x0695
    73c6:	02 96       	adiw	r24, 0x02	; 2
    73c8:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    73cc:	ce 01       	movw	r24, r28
    73ce:	80 0f       	add	r24, r16
    73d0:	91 1f       	adc	r25, r17
    73d2:	0e 94 57 38 	call	0x70ae	; 0x70ae <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    73d6:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    73da:	88 23       	and	r24, r24
    73dc:	11 f4       	brne	.+4      	; 0x73e2 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
    73de:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
		}
	}
    73e2:	df 91       	pop	r29
    73e4:	cf 91       	pop	r28
    73e6:	1f 91       	pop	r17
    73e8:	0f 91       	pop	r16
    73ea:	08 95       	ret

000073ec <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    73ec:	cf 93       	push	r28
    73ee:	df 93       	push	r29
    73f0:	fc 01       	movw	r30, r24
    73f2:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    73f4:	80 91 9a 06 	lds	r24, 0x069A
    73f8:	8f 5f       	subi	r24, 0xFF	; 255
    73fa:	80 93 9a 06 	sts	0x069A, r24
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    73fe:	20 81       	ld	r18, Z
    7400:	31 81       	ldd	r19, Z+1	; 0x01
    7402:	c2 0f       	add	r28, r18
    7404:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    7406:	80 91 98 06 	lds	r24, 0x0698
    740a:	90 91 99 06 	lds	r25, 0x0699
    740e:	82 17       	cp	r24, r18
    7410:	93 07       	cpc	r25, r19
    7412:	28 f4       	brcc	.+10     	; 0x741e <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    7414:	c2 17       	cp	r28, r18
    7416:	d3 07       	cpc	r29, r19
    7418:	28 f0       	brcs	.+10     	; 0x7424 <vTaskDelayUntil+0x38>
    741a:	20 e0       	ldi	r18, 0x00	; 0
    741c:	0c c0       	rjmp	.+24     	; 0x7436 <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    741e:	c2 17       	cp	r28, r18
    7420:	d3 07       	cpc	r29, r19
    7422:	40 f0       	brcs	.+16     	; 0x7434 <vTaskDelayUntil+0x48>
    7424:	80 91 98 06 	lds	r24, 0x0698
    7428:	90 91 99 06 	lds	r25, 0x0699
    742c:	20 e0       	ldi	r18, 0x00	; 0
    742e:	8c 17       	cp	r24, r28
    7430:	9d 07       	cpc	r25, r29
    7432:	08 f4       	brcc	.+2      	; 0x7436 <vTaskDelayUntil+0x4a>
    7434:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    7436:	d1 83       	std	Z+1, r29	; 0x01
    7438:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    743a:	22 23       	and	r18, r18
    743c:	51 f0       	breq	.+20     	; 0x7452 <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    743e:	80 91 94 06 	lds	r24, 0x0694
    7442:	90 91 95 06 	lds	r25, 0x0695
    7446:	02 96       	adiw	r24, 0x02	; 2
    7448:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    744c:	ce 01       	movw	r24, r28
    744e:	0e 94 57 38 	call	0x70ae	; 0x70ae <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    7452:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7456:	88 23       	and	r24, r24
    7458:	11 f4       	brne	.+4      	; 0x745e <vTaskDelayUntil+0x72>
		{
			portYIELD_WITHIN_API();
    745a:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
		}
	}
    745e:	df 91       	pop	r29
    7460:	cf 91       	pop	r28
    7462:	08 95       	ret

00007464 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    7464:	ef 92       	push	r14
    7466:	ff 92       	push	r15
    7468:	0f 93       	push	r16
    746a:	1f 93       	push	r17
    746c:	cf 93       	push	r28
    746e:	df 93       	push	r29
    7470:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    7472:	0f b6       	in	r0, 0x3f	; 63
    7474:	f8 94       	cli
    7476:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    7478:	80 91 94 06 	lds	r24, 0x0694
    747c:	90 91 95 06 	lds	r25, 0x0695
    7480:	08 17       	cp	r16, r24
    7482:	19 07       	cpc	r17, r25
    7484:	19 f4       	brne	.+6      	; 0x748c <vTaskDelete+0x28>
    7486:	00 e0       	ldi	r16, 0x00	; 0
    7488:	10 e0       	ldi	r17, 0x00	; 0
    748a:	03 c0       	rjmp	.+6      	; 0x7492 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    748c:	01 15       	cp	r16, r1
    748e:	11 05       	cpc	r17, r1
    7490:	29 f4       	brne	.+10     	; 0x749c <vTaskDelete+0x38>
    7492:	c0 91 94 06 	lds	r28, 0x0694
    7496:	d0 91 95 06 	lds	r29, 0x0695
    749a:	01 c0       	rjmp	.+2      	; 0x749e <vTaskDelete+0x3a>
    749c:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    749e:	42 e0       	ldi	r20, 0x02	; 2
    74a0:	e4 2e       	mov	r14, r20
    74a2:	f1 2c       	mov	r15, r1
    74a4:	ec 0e       	add	r14, r28
    74a6:	fd 1e       	adc	r15, r29
    74a8:	c7 01       	movw	r24, r14
    74aa:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    74ae:	8c 89       	ldd	r24, Y+20	; 0x14
    74b0:	9d 89       	ldd	r25, Y+21	; 0x15
    74b2:	89 2b       	or	r24, r25
    74b4:	21 f0       	breq	.+8      	; 0x74be <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    74b6:	ce 01       	movw	r24, r28
    74b8:	0c 96       	adiw	r24, 0x0c	; 12
    74ba:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    74be:	85 ee       	ldi	r24, 0xE5	; 229
    74c0:	96 e0       	ldi	r25, 0x06	; 6
    74c2:	b7 01       	movw	r22, r14
    74c4:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    74c8:	80 91 9f 06 	lds	r24, 0x069F
    74cc:	8f 5f       	subi	r24, 0xFF	; 255
    74ce:	80 93 9f 06 	sts	0x069F, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    74d2:	80 91 a0 06 	lds	r24, 0x06A0
    74d6:	8f 5f       	subi	r24, 0xFF	; 255
    74d8:	80 93 a0 06 	sts	0x06A0, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    74dc:	0f 90       	pop	r0
    74de:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    74e0:	80 91 9e 06 	lds	r24, 0x069E
    74e4:	88 23       	and	r24, r24
    74e6:	21 f0       	breq	.+8      	; 0x74f0 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    74e8:	01 2b       	or	r16, r17
    74ea:	11 f4       	brne	.+4      	; 0x74f0 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    74ec:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
			}
		}
	}
    74f0:	df 91       	pop	r29
    74f2:	cf 91       	pop	r28
    74f4:	1f 91       	pop	r17
    74f6:	0f 91       	pop	r16
    74f8:	ff 90       	pop	r15
    74fa:	ef 90       	pop	r14
    74fc:	08 95       	ret

000074fe <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    74fe:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    7500:	10 92 9e 06 	sts	0x069E, r1
	vPortEndScheduler();
    7504:	0e 94 ad 32 	call	0x655a	; 0x655a <vPortEndScheduler>
}
    7508:	08 95       	ret

0000750a <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    750a:	0f 93       	push	r16
    750c:	1f 93       	push	r17
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    750e:	80 91 9f 06 	lds	r24, 0x069F
    7512:	88 23       	and	r24, r24
    7514:	e1 f3       	breq	.-8      	; 0x750e <prvIdleTask+0x4>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    7516:	80 91 9a 06 	lds	r24, 0x069A
    751a:	8f 5f       	subi	r24, 0xFF	; 255
    751c:	80 93 9a 06 	sts	0x069A, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    7520:	10 91 e5 06 	lds	r17, 0x06E5
			xTaskResumeAll();
    7524:	0e 94 ba 38 	call	0x7174	; 0x7174 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    7528:	11 23       	and	r17, r17
    752a:	89 f3       	breq	.-30     	; 0x750e <prvIdleTask+0x4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    752c:	0f b6       	in	r0, 0x3f	; 63
    752e:	f8 94       	cli
    7530:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    7532:	e0 91 ea 06 	lds	r30, 0x06EA
    7536:	f0 91 eb 06 	lds	r31, 0x06EB
    753a:	06 81       	ldd	r16, Z+6	; 0x06
    753c:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    753e:	c8 01       	movw	r24, r16
    7540:	02 96       	adiw	r24, 0x02	; 2
    7542:	0e 94 08 32 	call	0x6410	; 0x6410 <vListRemove>
					--uxCurrentNumberOfTasks;
    7546:	80 91 9d 06 	lds	r24, 0x069D
    754a:	81 50       	subi	r24, 0x01	; 1
    754c:	80 93 9d 06 	sts	0x069D, r24
					--uxTasksDeleted;
    7550:	80 91 9f 06 	lds	r24, 0x069F
    7554:	81 50       	subi	r24, 0x01	; 1
    7556:	80 93 9f 06 	sts	0x069F, r24
				}
				taskEXIT_CRITICAL();
    755a:	0f 90       	pop	r0
    755c:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    755e:	f8 01       	movw	r30, r16
    7560:	87 89       	ldd	r24, Z+23	; 0x17
    7562:	90 8d       	ldd	r25, Z+24	; 0x18
    7564:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
		vPortFree( pxTCB );
    7568:	c8 01       	movw	r24, r16
    756a:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
    756e:	cf cf       	rjmp	.-98     	; 0x750e <prvIdleTask+0x4>

00007570 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    7570:	2f 92       	push	r2
    7572:	3f 92       	push	r3
    7574:	5f 92       	push	r5
    7576:	6f 92       	push	r6
    7578:	7f 92       	push	r7
    757a:	8f 92       	push	r8
    757c:	9f 92       	push	r9
    757e:	af 92       	push	r10
    7580:	bf 92       	push	r11
    7582:	cf 92       	push	r12
    7584:	df 92       	push	r13
    7586:	ef 92       	push	r14
    7588:	ff 92       	push	r15
    758a:	0f 93       	push	r16
    758c:	1f 93       	push	r17
    758e:	df 93       	push	r29
    7590:	cf 93       	push	r28
    7592:	00 d0       	rcall	.+0      	; 0x7594 <xTaskGenericCreate+0x24>
    7594:	00 d0       	rcall	.+0      	; 0x7596 <xTaskGenericCreate+0x26>
    7596:	cd b7       	in	r28, 0x3d	; 61
    7598:	de b7       	in	r29, 0x3e	; 62
    759a:	9a 83       	std	Y+2, r25	; 0x02
    759c:	89 83       	std	Y+1, r24	; 0x01
    759e:	4b 01       	movw	r8, r22
    75a0:	5a 01       	movw	r10, r20
    75a2:	19 01       	movw	r2, r18
    75a4:	50 2e       	mov	r5, r16
    75a6:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    75a8:	81 e2       	ldi	r24, 0x21	; 33
    75aa:	90 e0       	ldi	r25, 0x00	; 0
    75ac:	0e 94 6f 31 	call	0x62de	; 0x62de <pvPortMalloc>
    75b0:	8b 83       	std	Y+3, r24	; 0x03
    75b2:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    75b4:	8b 81       	ldd	r24, Y+3	; 0x03
    75b6:	9c 81       	ldd	r25, Y+4	; 0x04
    75b8:	89 2b       	or	r24, r25
    75ba:	89 f0       	breq	.+34     	; 0x75de <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    75bc:	c1 14       	cp	r12, r1
    75be:	d1 04       	cpc	r13, r1
    75c0:	21 f4       	brne	.+8      	; 0x75ca <xTaskGenericCreate+0x5a>
    75c2:	c5 01       	movw	r24, r10
    75c4:	0e 94 6f 31 	call	0x62de	; 0x62de <pvPortMalloc>
    75c8:	6c 01       	movw	r12, r24
    75ca:	eb 81       	ldd	r30, Y+3	; 0x03
    75cc:	fc 81       	ldd	r31, Y+4	; 0x04
    75ce:	d0 8e       	std	Z+24, r13	; 0x18
    75d0:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    75d2:	c1 14       	cp	r12, r1
    75d4:	d1 04       	cpc	r13, r1
    75d6:	29 f4       	brne	.+10     	; 0x75e2 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    75d8:	cf 01       	movw	r24, r30
    75da:	0e 94 5f 31 	call	0x62be	; 0x62be <vPortFree>
    75de:	8f ef       	ldi	r24, 0xFF	; 255
    75e0:	da c0       	rjmp	.+436    	; 0x7796 <xTaskGenericCreate+0x226>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    75e2:	c6 01       	movw	r24, r12
    75e4:	65 ea       	ldi	r22, 0xA5	; 165
    75e6:	70 e0       	ldi	r23, 0x00	; 0
    75e8:	a5 01       	movw	r20, r10
    75ea:	0e 94 33 3d 	call	0x7a66	; 0x7a66 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    75ee:	08 94       	sec
    75f0:	a1 08       	sbc	r10, r1
    75f2:	b1 08       	sbc	r11, r1
    75f4:	eb 81       	ldd	r30, Y+3	; 0x03
    75f6:	fc 81       	ldd	r31, Y+4	; 0x04
    75f8:	e7 88       	ldd	r14, Z+23	; 0x17
    75fa:	f0 8c       	ldd	r15, Z+24	; 0x18
    75fc:	ea 0c       	add	r14, r10
    75fe:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    7600:	cf 01       	movw	r24, r30
    7602:	49 96       	adiw	r24, 0x19	; 25
    7604:	b4 01       	movw	r22, r8
    7606:	48 e0       	ldi	r20, 0x08	; 8
    7608:	50 e0       	ldi	r21, 0x00	; 0
    760a:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    760e:	eb 81       	ldd	r30, Y+3	; 0x03
    7610:	fc 81       	ldd	r31, Y+4	; 0x04
    7612:	10 a2       	std	Z+32, r1	; 0x20
    7614:	05 2d       	mov	r16, r5
    7616:	f3 e0       	ldi	r31, 0x03	; 3
    7618:	f5 15       	cp	r31, r5
    761a:	08 f4       	brcc	.+2      	; 0x761e <xTaskGenericCreate+0xae>
    761c:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    761e:	eb 81       	ldd	r30, Y+3	; 0x03
    7620:	fc 81       	ldd	r31, Y+4	; 0x04
    7622:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    7624:	62 e0       	ldi	r22, 0x02	; 2
    7626:	c6 2e       	mov	r12, r22
    7628:	d1 2c       	mov	r13, r1
    762a:	ce 0e       	add	r12, r30
    762c:	df 1e       	adc	r13, r31
    762e:	c6 01       	movw	r24, r12
    7630:	0e 94 a6 31 	call	0x634c	; 0x634c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    7634:	8b 81       	ldd	r24, Y+3	; 0x03
    7636:	9c 81       	ldd	r25, Y+4	; 0x04
    7638:	0c 96       	adiw	r24, 0x0c	; 12
    763a:	0e 94 a6 31 	call	0x634c	; 0x634c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    763e:	8b 81       	ldd	r24, Y+3	; 0x03
    7640:	9c 81       	ldd	r25, Y+4	; 0x04
    7642:	fc 01       	movw	r30, r24
    7644:	91 87       	std	Z+9, r25	; 0x09
    7646:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    7648:	84 e0       	ldi	r24, 0x04	; 4
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	80 1b       	sub	r24, r16
    764e:	91 09       	sbc	r25, r1
    7650:	95 87       	std	Z+13, r25	; 0x0d
    7652:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    7654:	f3 8b       	std	Z+19, r31	; 0x13
    7656:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7658:	c7 01       	movw	r24, r14
    765a:	69 81       	ldd	r22, Y+1	; 0x01
    765c:	7a 81       	ldd	r23, Y+2	; 0x02
    765e:	a1 01       	movw	r20, r2
    7660:	0e 94 30 32 	call	0x6460	; 0x6460 <pxPortInitialiseStack>
    7664:	eb 81       	ldd	r30, Y+3	; 0x03
    7666:	fc 81       	ldd	r31, Y+4	; 0x04
    7668:	91 83       	std	Z+1, r25	; 0x01
    766a:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    766c:	61 14       	cp	r6, r1
    766e:	71 04       	cpc	r7, r1
    7670:	21 f0       	breq	.+8      	; 0x767a <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    7672:	cf 01       	movw	r24, r30
    7674:	f3 01       	movw	r30, r6
    7676:	91 83       	std	Z+1, r25	; 0x01
    7678:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    767a:	0f b6       	in	r0, 0x3f	; 63
    767c:	f8 94       	cli
    767e:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    7680:	80 91 9d 06 	lds	r24, 0x069D
    7684:	8f 5f       	subi	r24, 0xFF	; 255
    7686:	80 93 9d 06 	sts	0x069D, r24
			if( pxCurrentTCB == NULL )
    768a:	80 91 94 06 	lds	r24, 0x0694
    768e:	90 91 95 06 	lds	r25, 0x0695
    7692:	89 2b       	or	r24, r25
    7694:	e1 f5       	brne	.+120    	; 0x770e <xTaskGenericCreate+0x19e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    7696:	eb 81       	ldd	r30, Y+3	; 0x03
    7698:	fc 81       	ldd	r31, Y+4	; 0x04
    769a:	f0 93 95 06 	sts	0x0695, r31
    769e:	e0 93 94 06 	sts	0x0694, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    76a2:	80 91 9d 06 	lds	r24, 0x069D
    76a6:	81 30       	cpi	r24, 0x01	; 1
    76a8:	09 f0       	breq	.+2      	; 0x76ac <xTaskGenericCreate+0x13c>
    76aa:	42 c0       	rjmp	.+132    	; 0x7730 <xTaskGenericCreate+0x1c0>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    76ac:	82 ea       	ldi	r24, 0xA2	; 162
    76ae:	96 e0       	ldi	r25, 0x06	; 6
    76b0:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
    76b4:	8b ea       	ldi	r24, 0xAB	; 171
    76b6:	96 e0       	ldi	r25, 0x06	; 6
    76b8:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
    76bc:	84 eb       	ldi	r24, 0xB4	; 180
    76be:	96 e0       	ldi	r25, 0x06	; 6
    76c0:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
    76c4:	8d eb       	ldi	r24, 0xBD	; 189
    76c6:	96 e0       	ldi	r25, 0x06	; 6
    76c8:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    76cc:	56 ec       	ldi	r21, 0xC6	; 198
    76ce:	e5 2e       	mov	r14, r21
    76d0:	56 e0       	ldi	r21, 0x06	; 6
    76d2:	f5 2e       	mov	r15, r21
    76d4:	c7 01       	movw	r24, r14
    76d6:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    76da:	0f ec       	ldi	r16, 0xCF	; 207
    76dc:	16 e0       	ldi	r17, 0x06	; 6
    76de:	c8 01       	movw	r24, r16
    76e0:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    76e4:	8c ed       	ldi	r24, 0xDC	; 220
    76e6:	96 e0       	ldi	r25, 0x06	; 6
    76e8:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    76ec:	85 ee       	ldi	r24, 0xE5	; 229
    76ee:	96 e0       	ldi	r25, 0x06	; 6
    76f0:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    76f4:	8e ee       	ldi	r24, 0xEE	; 238
    76f6:	96 e0       	ldi	r25, 0x06	; 6
    76f8:	0e 94 96 31 	call	0x632c	; 0x632c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    76fc:	f0 92 d9 06 	sts	0x06D9, r15
    7700:	e0 92 d8 06 	sts	0x06D8, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    7704:	10 93 db 06 	sts	0x06DB, r17
    7708:	00 93 da 06 	sts	0x06DA, r16
    770c:	11 c0       	rjmp	.+34     	; 0x7730 <xTaskGenericCreate+0x1c0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    770e:	80 91 9e 06 	lds	r24, 0x069E
    7712:	88 23       	and	r24, r24
    7714:	69 f4       	brne	.+26     	; 0x7730 <xTaskGenericCreate+0x1c0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    7716:	e0 91 94 06 	lds	r30, 0x0694
    771a:	f0 91 95 06 	lds	r31, 0x0695
    771e:	86 89       	ldd	r24, Z+22	; 0x16
    7720:	58 16       	cp	r5, r24
    7722:	30 f0       	brcs	.+12     	; 0x7730 <xTaskGenericCreate+0x1c0>
					{
						pxCurrentTCB = pxNewTCB;
    7724:	8b 81       	ldd	r24, Y+3	; 0x03
    7726:	9c 81       	ldd	r25, Y+4	; 0x04
    7728:	90 93 95 06 	sts	0x0695, r25
    772c:	80 93 94 06 	sts	0x0694, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    7730:	eb 81       	ldd	r30, Y+3	; 0x03
    7732:	fc 81       	ldd	r31, Y+4	; 0x04
    7734:	96 89       	ldd	r25, Z+22	; 0x16
    7736:	80 91 a1 06 	lds	r24, 0x06A1
    773a:	89 17       	cp	r24, r25
    773c:	10 f4       	brcc	.+4      	; 0x7742 <xTaskGenericCreate+0x1d2>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    773e:	90 93 a1 06 	sts	0x06A1, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    7742:	80 91 a0 06 	lds	r24, 0x06A0
    7746:	8f 5f       	subi	r24, 0xFF	; 255
    7748:	80 93 a0 06 	sts	0x06A0, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    774c:	eb 81       	ldd	r30, Y+3	; 0x03
    774e:	fc 81       	ldd	r31, Y+4	; 0x04
    7750:	96 89       	ldd	r25, Z+22	; 0x16
    7752:	80 91 9b 06 	lds	r24, 0x069B
    7756:	89 17       	cp	r24, r25
    7758:	10 f4       	brcc	.+4      	; 0x775e <xTaskGenericCreate+0x1ee>
    775a:	90 93 9b 06 	sts	0x069B, r25
    775e:	eb 81       	ldd	r30, Y+3	; 0x03
    7760:	fc 81       	ldd	r31, Y+4	; 0x04
    7762:	86 89       	ldd	r24, Z+22	; 0x16
    7764:	29 e0       	ldi	r18, 0x09	; 9
    7766:	82 9f       	mul	r24, r18
    7768:	c0 01       	movw	r24, r0
    776a:	11 24       	eor	r1, r1
    776c:	8e 55       	subi	r24, 0x5E	; 94
    776e:	99 4f       	sbci	r25, 0xF9	; 249
    7770:	b6 01       	movw	r22, r12
    7772:	0e 94 aa 31 	call	0x6354	; 0x6354 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    7776:	0f 90       	pop	r0
    7778:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    777a:	80 91 9e 06 	lds	r24, 0x069E
    777e:	88 23       	and	r24, r24
    7780:	49 f0       	breq	.+18     	; 0x7794 <xTaskGenericCreate+0x224>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    7782:	e0 91 94 06 	lds	r30, 0x0694
    7786:	f0 91 95 06 	lds	r31, 0x0695
    778a:	86 89       	ldd	r24, Z+22	; 0x16
    778c:	85 15       	cp	r24, r5
    778e:	10 f4       	brcc	.+4      	; 0x7794 <xTaskGenericCreate+0x224>
			{
				portYIELD_WITHIN_API();
    7790:	0e 94 0c 33 	call	0x6618	; 0x6618 <vPortYield>
    7794:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    7796:	0f 90       	pop	r0
    7798:	0f 90       	pop	r0
    779a:	0f 90       	pop	r0
    779c:	0f 90       	pop	r0
    779e:	cf 91       	pop	r28
    77a0:	df 91       	pop	r29
    77a2:	1f 91       	pop	r17
    77a4:	0f 91       	pop	r16
    77a6:	ff 90       	pop	r15
    77a8:	ef 90       	pop	r14
    77aa:	df 90       	pop	r13
    77ac:	cf 90       	pop	r12
    77ae:	bf 90       	pop	r11
    77b0:	af 90       	pop	r10
    77b2:	9f 90       	pop	r9
    77b4:	8f 90       	pop	r8
    77b6:	7f 90       	pop	r7
    77b8:	6f 90       	pop	r6
    77ba:	5f 90       	pop	r5
    77bc:	3f 90       	pop	r3
    77be:	2f 90       	pop	r2
    77c0:	08 95       	ret

000077c2 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    77c2:	af 92       	push	r10
    77c4:	bf 92       	push	r11
    77c6:	cf 92       	push	r12
    77c8:	df 92       	push	r13
    77ca:	ef 92       	push	r14
    77cc:	ff 92       	push	r15
    77ce:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    77d0:	85 e8       	ldi	r24, 0x85	; 133
    77d2:	9a e3       	ldi	r25, 0x3A	; 58
    77d4:	60 e6       	ldi	r22, 0x60	; 96
    77d6:	70 e0       	ldi	r23, 0x00	; 0
    77d8:	42 e3       	ldi	r20, 0x32	; 50
    77da:	50 e0       	ldi	r21, 0x00	; 0
    77dc:	20 e0       	ldi	r18, 0x00	; 0
    77de:	30 e0       	ldi	r19, 0x00	; 0
    77e0:	00 e0       	ldi	r16, 0x00	; 0
    77e2:	ee 24       	eor	r14, r14
    77e4:	ff 24       	eor	r15, r15
    77e6:	cc 24       	eor	r12, r12
    77e8:	dd 24       	eor	r13, r13
    77ea:	aa 24       	eor	r10, r10
    77ec:	bb 24       	eor	r11, r11
    77ee:	0e 94 b8 3a 	call	0x7570	; 0x7570 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    77f2:	81 30       	cpi	r24, 0x01	; 1
    77f4:	49 f4       	brne	.+18     	; 0x7808 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    77f6:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    77f8:	80 93 9e 06 	sts	0x069E, r24
		xTickCount = ( portTickType ) 0U;
    77fc:	10 92 99 06 	sts	0x0699, r1
    7800:	10 92 98 06 	sts	0x0698, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7804:	0e 94 78 32 	call	0x64f0	; 0x64f0 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    7808:	0f 91       	pop	r16
    780a:	ff 90       	pop	r15
    780c:	ef 90       	pop	r14
    780e:	df 90       	pop	r13
    7810:	cf 90       	pop	r12
    7812:	bf 90       	pop	r11
    7814:	af 90       	pop	r10
    7816:	08 95       	ret

00007818 <TempRead_Task>:
		xQueueSend(TempState_Queue,(void*)&Local_u8ReceivedValue,0);
	}
}

void TempRead_Task(void *ptr)
{
    7818:	ef 92       	push	r14
    781a:	ff 92       	push	r15
    781c:	0f 93       	push	r16
    781e:	1f 93       	push	r17
    7820:	df 93       	push	r29
    7822:	cf 93       	push	r28
    7824:	00 d0       	rcall	.+0      	; 0x7826 <TempRead_Task+0xe>
    7826:	cd b7       	in	r28, 0x3d	; 61
    7828:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ReceivedValue = 0,Local_DummyReceived=0xff;
    782a:	19 82       	std	Y+1, r1	; 0x01
    782c:	8f ef       	ldi	r24, 0xFF	; 255
    782e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TempValue1=0,Local_u8TempValue2=0 ;
	while(1)
	{
		xQueueReceive(TempState_Queue,(void*)&Local_u8ReceivedValue,MAX_TIME);
    7830:	7e 01       	movw	r14, r28
    7832:	08 94       	sec
    7834:	e1 1c       	adc	r14, r1
    7836:	f1 1c       	adc	r15, r1
			SPI_u8Tranceive(Local_u8TempValue1,&Local_DummyReceived);
		}
		else if(Local_u8ReceivedValue == TEMP2_READ)
		{
			Local_u8TempValue2 = LM35_u16GetTempReading(CHANNEL1);
			SPI_u8Tranceive(Local_u8TempValue2,&Local_DummyReceived);
    7838:	8e 01       	movw	r16, r28
    783a:	0e 5f       	subi	r16, 0xFE	; 254
    783c:	1f 4f       	sbci	r17, 0xFF	; 255
{
	u8 Local_u8ReceivedValue = 0,Local_DummyReceived=0xff;
	u8 Local_u8TempValue1=0,Local_u8TempValue2=0 ;
	while(1)
	{
		xQueueReceive(TempState_Queue,(void*)&Local_u8ReceivedValue,MAX_TIME);
    783e:	80 91 f7 06 	lds	r24, 0x06F7
    7842:	90 91 f8 06 	lds	r25, 0x06F8
    7846:	b7 01       	movw	r22, r14
    7848:	4f ef       	ldi	r20, 0xFF	; 255
    784a:	5f ef       	ldi	r21, 0xFF	; 255
    784c:	20 e0       	ldi	r18, 0x00	; 0
    784e:	0e 94 77 34 	call	0x68ee	; 0x68ee <xQueueGenericReceive>
		if(Local_u8ReceivedValue == TEMP1_READ)
    7852:	89 81       	ldd	r24, Y+1	; 0x01
    7854:	81 30       	cpi	r24, 0x01	; 1
    7856:	11 f4       	brne	.+4      	; 0x785c <TempRead_Task+0x44>
		{
			Local_u8TempValue1 = LM35_u16GetTempReading(CHANNEL0);
    7858:	80 e0       	ldi	r24, 0x00	; 0
    785a:	03 c0       	rjmp	.+6      	; 0x7862 <TempRead_Task+0x4a>
			SPI_u8Tranceive(Local_u8TempValue1,&Local_DummyReceived);
		}
		else if(Local_u8ReceivedValue == TEMP2_READ)
    785c:	82 30       	cpi	r24, 0x02	; 2
    785e:	31 f4       	brne	.+12     	; 0x786c <TempRead_Task+0x54>
		{
			Local_u8TempValue2 = LM35_u16GetTempReading(CHANNEL1);
    7860:	81 e0       	ldi	r24, 0x01	; 1
    7862:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <LM35_u16GetTempReading>
			SPI_u8Tranceive(Local_u8TempValue2,&Local_DummyReceived);
    7866:	b8 01       	movw	r22, r16
    7868:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <SPI_u8Tranceive>
		}
		Local_u8ReceivedValue=0;
    786c:	19 82       	std	Y+1, r1	; 0x01
    786e:	e7 cf       	rjmp	.-50     	; 0x783e <TempRead_Task+0x26>

00007870 <SPI_Task>:

	return 0;
}

void SPI_Task(void *ptr)
{
    7870:	0f 93       	push	r16
    7872:	1f 93       	push	r17
    7874:	df 93       	push	r29
    7876:	cf 93       	push	r28
    7878:	0f 92       	push	r0
    787a:	cd b7       	in	r28, 0x3d	; 61
    787c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ReceivedValue = 0,Local_DummySent=0xff;
    787e:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		SPI_u8Tranceive(Local_DummySent,&Local_u8ReceivedValue);
    7880:	8e 01       	movw	r16, r28
    7882:	0f 5f       	subi	r16, 0xFF	; 255
    7884:	1f 4f       	sbci	r17, 0xFF	; 255
    7886:	8f ef       	ldi	r24, 0xFF	; 255
    7888:	b8 01       	movw	r22, r16
    788a:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <SPI_u8Tranceive>
		xQueueSend(TempState_Queue,(void*)&Local_u8ReceivedValue,0);
    788e:	80 91 f7 06 	lds	r24, 0x06F7
    7892:	90 91 f8 06 	lds	r25, 0x06F8
    7896:	b8 01       	movw	r22, r16
    7898:	40 e0       	ldi	r20, 0x00	; 0
    789a:	50 e0       	ldi	r21, 0x00	; 0
    789c:	20 e0       	ldi	r18, 0x00	; 0
    789e:	0e 94 43 35 	call	0x6a86	; 0x6a86 <xQueueGenericSend>
    78a2:	f1 cf       	rjmp	.-30     	; 0x7886 <SPI_Task+0x16>

000078a4 <main>:

void SPI_Task(void *ptr);
void TempRead_Task(void *ptr);

s32 main(void)
{
    78a4:	af 92       	push	r10
    78a6:	bf 92       	push	r11
    78a8:	cf 92       	push	r12
    78aa:	df 92       	push	r13
    78ac:	ef 92       	push	r14
    78ae:	ff 92       	push	r15
    78b0:	0f 93       	push	r16

	GIE_voidEnable();
    78b2:	0e 94 8a 28 	call	0x5114	; 0x5114 <GIE_voidEnable>
	EXTI_voidInit();
    78b6:	0e 94 92 28 	call	0x5124	; 0x5124 <EXTI_voidInit>

	/*POWER ON PIN*/
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_INPUT);
    78ba:	83 e0       	ldi	r24, 0x03	; 3
    78bc:	64 e0       	ldi	r22, 0x04	; 4
    78be:	40 e0       	ldi	r20, 0x00	; 0
    78c0:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	CPU_Sleep();
    78c4:	0e 94 7e 28 	call	0x50fc	; 0x50fc <CPU_Sleep>

	DIO_u8SetPinDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_INPUT);
    78c8:	80 e0       	ldi	r24, 0x00	; 0
    78ca:	60 e0       	ldi	r22, 0x00	; 0
    78cc:	40 e0       	ldi	r20, 0x00	; 0
    78ce:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_INPUT);
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	61 e0       	ldi	r22, 0x01	; 1
    78d6:	40 e0       	ldi	r20, 0x00	; 0
    78d8:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>




	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN4, DIO_PIN_INPUT);
    78dc:	81 e0       	ldi	r24, 0x01	; 1
    78de:	64 e0       	ldi	r22, 0x04	; 4
    78e0:	40 e0       	ldi	r20, 0x00	; 0
    78e2:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN5, DIO_PIN_INPUT);
    78e6:	81 e0       	ldi	r24, 0x01	; 1
    78e8:	65 e0       	ldi	r22, 0x05	; 5
    78ea:	40 e0       	ldi	r20, 0x00	; 0
    78ec:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
    78f0:	81 e0       	ldi	r24, 0x01	; 1
    78f2:	66 e0       	ldi	r22, 0x06	; 6
    78f4:	41 e0       	ldi	r20, 0x01	; 1
    78f6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTB, DIO_PIN7, DIO_PIN_INPUT);
    78fa:	81 e0       	ldi	r24, 0x01	; 1
    78fc:	67 e0       	ldi	r22, 0x07	; 7
    78fe:	40 e0       	ldi	r20, 0x00	; 0
    7900:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
    7904:	82 e0       	ldi	r24, 0x02	; 2
    7906:	60 e0       	ldi	r22, 0x00	; 0
    7908:	41 e0       	ldi	r20, 0x01	; 1
    790a:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <DIO_u8SetPinDirection>

	SPI_VoidInit();
    790e:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <SPI_VoidInit>
	LM35_voidInit();
    7912:	0e 94 91 2c 	call	0x5922	; 0x5922 <LM35_voidInit>

	TempState_Queue= xQueueCreate(1,sizeof(u16));
    7916:	81 e0       	ldi	r24, 0x01	; 1
    7918:	62 e0       	ldi	r22, 0x02	; 2
    791a:	0e 94 e7 35 	call	0x6bce	; 0x6bce <xQueueCreate>
    791e:	90 93 f8 06 	sts	0x06F8, r25
    7922:	80 93 f7 06 	sts	0x06F7, r24
	xTaskCreate(&SPI_Task,NULL,250,NULL,1,NULL);
    7926:	88 e3       	ldi	r24, 0x38	; 56
    7928:	9c e3       	ldi	r25, 0x3C	; 60
    792a:	60 e0       	ldi	r22, 0x00	; 0
    792c:	70 e0       	ldi	r23, 0x00	; 0
    792e:	4a ef       	ldi	r20, 0xFA	; 250
    7930:	50 e0       	ldi	r21, 0x00	; 0
    7932:	20 e0       	ldi	r18, 0x00	; 0
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	01 e0       	ldi	r16, 0x01	; 1
    7938:	ee 24       	eor	r14, r14
    793a:	ff 24       	eor	r15, r15
    793c:	cc 24       	eor	r12, r12
    793e:	dd 24       	eor	r13, r13
    7940:	aa 24       	eor	r10, r10
    7942:	bb 24       	eor	r11, r11
    7944:	0e 94 b8 3a 	call	0x7570	; 0x7570 <xTaskGenericCreate>
	xTaskCreate(&TempRead_Task,NULL,250,NULL,2,NULL);
    7948:	8c e0       	ldi	r24, 0x0C	; 12
    794a:	9c e3       	ldi	r25, 0x3C	; 60
    794c:	60 e0       	ldi	r22, 0x00	; 0
    794e:	70 e0       	ldi	r23, 0x00	; 0
    7950:	4a ef       	ldi	r20, 0xFA	; 250
    7952:	50 e0       	ldi	r21, 0x00	; 0
    7954:	20 e0       	ldi	r18, 0x00	; 0
    7956:	30 e0       	ldi	r19, 0x00	; 0
    7958:	02 e0       	ldi	r16, 0x02	; 2
    795a:	0e 94 b8 3a 	call	0x7570	; 0x7570 <xTaskGenericCreate>
	vTaskStartScheduler();
    795e:	0e 94 e1 3b 	call	0x77c2	; 0x77c2 <vTaskStartScheduler>
    7962:	ff cf       	rjmp	.-2      	; 0x7962 <main+0xbe>

00007964 <__mulsi3>:
    7964:	62 9f       	mul	r22, r18
    7966:	d0 01       	movw	r26, r0
    7968:	73 9f       	mul	r23, r19
    796a:	f0 01       	movw	r30, r0
    796c:	82 9f       	mul	r24, r18
    796e:	e0 0d       	add	r30, r0
    7970:	f1 1d       	adc	r31, r1
    7972:	64 9f       	mul	r22, r20
    7974:	e0 0d       	add	r30, r0
    7976:	f1 1d       	adc	r31, r1
    7978:	92 9f       	mul	r25, r18
    797a:	f0 0d       	add	r31, r0
    797c:	83 9f       	mul	r24, r19
    797e:	f0 0d       	add	r31, r0
    7980:	74 9f       	mul	r23, r20
    7982:	f0 0d       	add	r31, r0
    7984:	65 9f       	mul	r22, r21
    7986:	f0 0d       	add	r31, r0
    7988:	99 27       	eor	r25, r25
    798a:	72 9f       	mul	r23, r18
    798c:	b0 0d       	add	r27, r0
    798e:	e1 1d       	adc	r30, r1
    7990:	f9 1f       	adc	r31, r25
    7992:	63 9f       	mul	r22, r19
    7994:	b0 0d       	add	r27, r0
    7996:	e1 1d       	adc	r30, r1
    7998:	f9 1f       	adc	r31, r25
    799a:	bd 01       	movw	r22, r26
    799c:	cf 01       	movw	r24, r30
    799e:	11 24       	eor	r1, r1
    79a0:	08 95       	ret

000079a2 <__udivmodsi4>:
    79a2:	a1 e2       	ldi	r26, 0x21	; 33
    79a4:	1a 2e       	mov	r1, r26
    79a6:	aa 1b       	sub	r26, r26
    79a8:	bb 1b       	sub	r27, r27
    79aa:	fd 01       	movw	r30, r26
    79ac:	0d c0       	rjmp	.+26     	; 0x79c8 <__udivmodsi4_ep>

000079ae <__udivmodsi4_loop>:
    79ae:	aa 1f       	adc	r26, r26
    79b0:	bb 1f       	adc	r27, r27
    79b2:	ee 1f       	adc	r30, r30
    79b4:	ff 1f       	adc	r31, r31
    79b6:	a2 17       	cp	r26, r18
    79b8:	b3 07       	cpc	r27, r19
    79ba:	e4 07       	cpc	r30, r20
    79bc:	f5 07       	cpc	r31, r21
    79be:	20 f0       	brcs	.+8      	; 0x79c8 <__udivmodsi4_ep>
    79c0:	a2 1b       	sub	r26, r18
    79c2:	b3 0b       	sbc	r27, r19
    79c4:	e4 0b       	sbc	r30, r20
    79c6:	f5 0b       	sbc	r31, r21

000079c8 <__udivmodsi4_ep>:
    79c8:	66 1f       	adc	r22, r22
    79ca:	77 1f       	adc	r23, r23
    79cc:	88 1f       	adc	r24, r24
    79ce:	99 1f       	adc	r25, r25
    79d0:	1a 94       	dec	r1
    79d2:	69 f7       	brne	.-38     	; 0x79ae <__udivmodsi4_loop>
    79d4:	60 95       	com	r22
    79d6:	70 95       	com	r23
    79d8:	80 95       	com	r24
    79da:	90 95       	com	r25
    79dc:	9b 01       	movw	r18, r22
    79de:	ac 01       	movw	r20, r24
    79e0:	bd 01       	movw	r22, r26
    79e2:	cf 01       	movw	r24, r30
    79e4:	08 95       	ret

000079e6 <__prologue_saves__>:
    79e6:	2f 92       	push	r2
    79e8:	3f 92       	push	r3
    79ea:	4f 92       	push	r4
    79ec:	5f 92       	push	r5
    79ee:	6f 92       	push	r6
    79f0:	7f 92       	push	r7
    79f2:	8f 92       	push	r8
    79f4:	9f 92       	push	r9
    79f6:	af 92       	push	r10
    79f8:	bf 92       	push	r11
    79fa:	cf 92       	push	r12
    79fc:	df 92       	push	r13
    79fe:	ef 92       	push	r14
    7a00:	ff 92       	push	r15
    7a02:	0f 93       	push	r16
    7a04:	1f 93       	push	r17
    7a06:	cf 93       	push	r28
    7a08:	df 93       	push	r29
    7a0a:	cd b7       	in	r28, 0x3d	; 61
    7a0c:	de b7       	in	r29, 0x3e	; 62
    7a0e:	ca 1b       	sub	r28, r26
    7a10:	db 0b       	sbc	r29, r27
    7a12:	0f b6       	in	r0, 0x3f	; 63
    7a14:	f8 94       	cli
    7a16:	de bf       	out	0x3e, r29	; 62
    7a18:	0f be       	out	0x3f, r0	; 63
    7a1a:	cd bf       	out	0x3d, r28	; 61
    7a1c:	09 94       	ijmp

00007a1e <__epilogue_restores__>:
    7a1e:	2a 88       	ldd	r2, Y+18	; 0x12
    7a20:	39 88       	ldd	r3, Y+17	; 0x11
    7a22:	48 88       	ldd	r4, Y+16	; 0x10
    7a24:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a26:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a28:	7d 84       	ldd	r7, Y+13	; 0x0d
    7a2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    7a2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    7a2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7a30:	b9 84       	ldd	r11, Y+9	; 0x09
    7a32:	c8 84       	ldd	r12, Y+8	; 0x08
    7a34:	df 80       	ldd	r13, Y+7	; 0x07
    7a36:	ee 80       	ldd	r14, Y+6	; 0x06
    7a38:	fd 80       	ldd	r15, Y+5	; 0x05
    7a3a:	0c 81       	ldd	r16, Y+4	; 0x04
    7a3c:	1b 81       	ldd	r17, Y+3	; 0x03
    7a3e:	aa 81       	ldd	r26, Y+2	; 0x02
    7a40:	b9 81       	ldd	r27, Y+1	; 0x01
    7a42:	ce 0f       	add	r28, r30
    7a44:	d1 1d       	adc	r29, r1
    7a46:	0f b6       	in	r0, 0x3f	; 63
    7a48:	f8 94       	cli
    7a4a:	de bf       	out	0x3e, r29	; 62
    7a4c:	0f be       	out	0x3f, r0	; 63
    7a4e:	cd bf       	out	0x3d, r28	; 61
    7a50:	ed 01       	movw	r28, r26
    7a52:	08 95       	ret

00007a54 <memcpy>:
    7a54:	fb 01       	movw	r30, r22
    7a56:	dc 01       	movw	r26, r24
    7a58:	02 c0       	rjmp	.+4      	; 0x7a5e <memcpy+0xa>
    7a5a:	01 90       	ld	r0, Z+
    7a5c:	0d 92       	st	X+, r0
    7a5e:	41 50       	subi	r20, 0x01	; 1
    7a60:	50 40       	sbci	r21, 0x00	; 0
    7a62:	d8 f7       	brcc	.-10     	; 0x7a5a <memcpy+0x6>
    7a64:	08 95       	ret

00007a66 <memset>:
    7a66:	dc 01       	movw	r26, r24
    7a68:	01 c0       	rjmp	.+2      	; 0x7a6c <memset+0x6>
    7a6a:	6d 93       	st	X+, r22
    7a6c:	41 50       	subi	r20, 0x01	; 1
    7a6e:	50 40       	sbci	r21, 0x00	; 0
    7a70:	e0 f7       	brcc	.-8      	; 0x7a6a <memset+0x4>
    7a72:	08 95       	ret

00007a74 <strncpy>:
    7a74:	fb 01       	movw	r30, r22
    7a76:	dc 01       	movw	r26, r24
    7a78:	41 50       	subi	r20, 0x01	; 1
    7a7a:	50 40       	sbci	r21, 0x00	; 0
    7a7c:	48 f0       	brcs	.+18     	; 0x7a90 <strncpy+0x1c>
    7a7e:	01 90       	ld	r0, Z+
    7a80:	0d 92       	st	X+, r0
    7a82:	00 20       	and	r0, r0
    7a84:	c9 f7       	brne	.-14     	; 0x7a78 <strncpy+0x4>
    7a86:	01 c0       	rjmp	.+2      	; 0x7a8a <strncpy+0x16>
    7a88:	1d 92       	st	X+, r1
    7a8a:	41 50       	subi	r20, 0x01	; 1
    7a8c:	50 40       	sbci	r21, 0x00	; 0
    7a8e:	e0 f7       	brcc	.-8      	; 0x7a88 <strncpy+0x14>
    7a90:	08 95       	ret

00007a92 <_exit>:
    7a92:	f8 94       	cli

00007a94 <__stop_program>:
    7a94:	ff cf       	rjmp	.-2      	; 0x7a94 <__stop_program>
