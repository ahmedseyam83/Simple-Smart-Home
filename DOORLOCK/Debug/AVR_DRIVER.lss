
AVR_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  00006e42  00006ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000585  008001ea  008001ea  00007060  2**0
                  ALLOC
  3 .stab         00007eb4  00000000  00000000  00007060  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004786  00000000  00000000  0000ef14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0001369a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000be  00000000  00000000  0001373a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f74  00000000  00000000  000137f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007a7  00000000  00000000  0001576c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a03  00000000  00000000  00015f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  00016918  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000017c  00000000  00000000  000169b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003410  00000000  00000000  00016b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00019f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__vector_4>
      14:	0c 94 87 23 	jmp	0x470e	; 0x470e <__vector_5>
      18:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__vector_6>
      1c:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__vector_7>
      20:	0c 94 35 23 	jmp	0x466a	; 0x466a <__vector_8>
      24:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__vector_9>
      28:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__vector_10>
      2c:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fe e6       	ldi	r31, 0x6E	; 110
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <main>
      8a:	0c 94 1f 37 	jmp	0x6e3e	; 0x6e3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__divdi3>:
     190:	a2 e7       	ldi	r26, 0x72	; 114
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 c9 36 	jmp	0x6d92	; 0x6d92 <__prologue_saves__>
     19c:	98 2e       	mov	r9, r24
     19e:	89 2e       	mov	r8, r25
     1a0:	71 2e       	mov	r7, r17
     1a2:	88 e0       	ldi	r24, 0x08	; 8
     1a4:	fe 01       	movw	r30, r28
     1a6:	31 96       	adiw	r30, 0x01	; 1
     1a8:	df 01       	movw	r26, r30
     1aa:	68 2e       	mov	r6, r24
     1ac:	1d 92       	st	X+, r1
     1ae:	6a 94       	dec	r6
     1b0:	e9 f7       	brne	.-6      	; 0x1ac <__divdi3+0x1c>
     1b2:	29 83       	std	Y+1, r18	; 0x01
     1b4:	3a 83       	std	Y+2, r19	; 0x02
     1b6:	4b 83       	std	Y+3, r20	; 0x03
     1b8:	5c 83       	std	Y+4, r21	; 0x04
     1ba:	6d 83       	std	Y+5, r22	; 0x05
     1bc:	7e 83       	std	Y+6, r23	; 0x06
     1be:	9f 82       	std	Y+7, r9	; 0x07
     1c0:	98 87       	std	Y+8, r25	; 0x08
     1c2:	fe 01       	movw	r30, r28
     1c4:	39 96       	adiw	r30, 0x09	; 9
     1c6:	df 01       	movw	r26, r30
     1c8:	1d 92       	st	X+, r1
     1ca:	8a 95       	dec	r24
     1cc:	e9 f7       	brne	.-6      	; 0x1c8 <__divdi3+0x38>
     1ce:	a9 86       	std	Y+9, r10	; 0x09
     1d0:	ba 86       	std	Y+10, r11	; 0x0a
     1d2:	cb 86       	std	Y+11, r12	; 0x0b
     1d4:	dc 86       	std	Y+12, r13	; 0x0c
     1d6:	ed 86       	std	Y+13, r14	; 0x0d
     1d8:	fe 86       	std	Y+14, r15	; 0x0e
     1da:	0f 87       	std	Y+15, r16	; 0x0f
     1dc:	18 8b       	std	Y+16, r17	; 0x10
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	af 81       	ldd	r26, Y+7	; 0x07
     1e4:	b8 85       	ldd	r27, Y+8	; 0x08
     1e6:	b7 fd       	sbrc	r27, 7
     1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__divdi3+0x68>
     1ea:	e1 96       	adiw	r28, 0x31	; 49
     1ec:	1c ae       	std	Y+60, r1	; 0x3c
     1ee:	1d ae       	std	Y+61, r1	; 0x3d
     1f0:	1e ae       	std	Y+62, r1	; 0x3e
     1f2:	1f ae       	std	Y+63, r1	; 0x3f
     1f4:	e1 97       	sbiw	r28, 0x31	; 49
     1f6:	64 c0       	rjmp	.+200    	; 0x2c0 <__divdi3+0x130>
     1f8:	21 95       	neg	r18
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	12 16       	cp	r1, r18
     1fe:	08 f0       	brcs	.+2      	; 0x202 <__divdi3+0x72>
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	31 95       	neg	r19
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	13 16       	cp	r1, r19
     208:	08 f0       	brcs	.+2      	; 0x20c <__divdi3+0x7c>
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	b3 2f       	mov	r27, r19
     20e:	b8 1b       	sub	r27, r24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	3b 17       	cp	r19, r27
     214:	08 f0       	brcs	.+2      	; 0x218 <__divdi3+0x88>
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	98 2b       	or	r25, r24
     21a:	41 95       	neg	r20
     21c:	31 e0       	ldi	r19, 0x01	; 1
     21e:	14 16       	cp	r1, r20
     220:	08 f0       	brcs	.+2      	; 0x224 <__divdi3+0x94>
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	a4 2f       	mov	r26, r20
     226:	a9 1b       	sub	r26, r25
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	4a 17       	cp	r20, r26
     22c:	08 f0       	brcs	.+2      	; 0x230 <__divdi3+0xa0>
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	38 2b       	or	r19, r24
     232:	51 95       	neg	r21
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	15 16       	cp	r1, r21
     238:	08 f0       	brcs	.+2      	; 0x23c <__divdi3+0xac>
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f5 2f       	mov	r31, r21
     23e:	f3 1b       	sub	r31, r19
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	5f 17       	cp	r21, r31
     244:	08 f0       	brcs	.+2      	; 0x248 <__divdi3+0xb8>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	98 2b       	or	r25, r24
     24a:	61 95       	neg	r22
     24c:	31 e0       	ldi	r19, 0x01	; 1
     24e:	16 16       	cp	r1, r22
     250:	08 f0       	brcs	.+2      	; 0x254 <__divdi3+0xc4>
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	e6 2f       	mov	r30, r22
     256:	e9 1b       	sub	r30, r25
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	6e 17       	cp	r22, r30
     25c:	08 f0       	brcs	.+2      	; 0x260 <__divdi3+0xd0>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	38 2b       	or	r19, r24
     262:	71 95       	neg	r23
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	17 16       	cp	r1, r23
     268:	08 f0       	brcs	.+2      	; 0x26c <__divdi3+0xdc>
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	57 2f       	mov	r21, r23
     26e:	53 1b       	sub	r21, r19
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	75 17       	cp	r23, r21
     274:	08 f0       	brcs	.+2      	; 0x278 <__divdi3+0xe8>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	48 2b       	or	r20, r24
     27a:	89 2d       	mov	r24, r9
     27c:	81 95       	neg	r24
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	18 16       	cp	r1, r24
     282:	08 f0       	brcs	.+2      	; 0x286 <__divdi3+0xf6>
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	68 2e       	mov	r6, r24
     288:	64 1a       	sub	r6, r20
     28a:	46 2d       	mov	r20, r6
     28c:	31 e0       	ldi	r19, 0x01	; 1
     28e:	86 15       	cp	r24, r6
     290:	08 f0       	brcs	.+2      	; 0x294 <__divdi3+0x104>
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	93 2b       	or	r25, r19
     296:	88 2d       	mov	r24, r8
     298:	81 95       	neg	r24
     29a:	89 1b       	sub	r24, r25
     29c:	29 83       	std	Y+1, r18	; 0x01
     29e:	ba 83       	std	Y+2, r27	; 0x02
     2a0:	ab 83       	std	Y+3, r26	; 0x03
     2a2:	fc 83       	std	Y+4, r31	; 0x04
     2a4:	ed 83       	std	Y+5, r30	; 0x05
     2a6:	5e 83       	std	Y+6, r21	; 0x06
     2a8:	4f 83       	std	Y+7, r20	; 0x07
     2aa:	88 87       	std	Y+8, r24	; 0x08
     2ac:	2f ef       	ldi	r18, 0xFF	; 255
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f ef       	ldi	r20, 0xFF	; 255
     2b2:	5f ef       	ldi	r21, 0xFF	; 255
     2b4:	e1 96       	adiw	r28, 0x31	; 49
     2b6:	2c af       	std	Y+60, r18	; 0x3c
     2b8:	3d af       	std	Y+61, r19	; 0x3d
     2ba:	4e af       	std	Y+62, r20	; 0x3e
     2bc:	5f af       	std	Y+63, r21	; 0x3f
     2be:	e1 97       	sbiw	r28, 0x31	; 49
     2c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c4:	af 85       	ldd	r26, Y+15	; 0x0f
     2c6:	b8 89       	ldd	r27, Y+16	; 0x10
     2c8:	b7 ff       	sbrs	r27, 7
     2ca:	6a c0       	rjmp	.+212    	; 0x3a0 <__divdi3+0x210>
     2cc:	e1 96       	adiw	r28, 0x31	; 49
     2ce:	4c ad       	ldd	r20, Y+60	; 0x3c
     2d0:	5d ad       	ldd	r21, Y+61	; 0x3d
     2d2:	6e ad       	ldd	r22, Y+62	; 0x3e
     2d4:	7f ad       	ldd	r23, Y+63	; 0x3f
     2d6:	e1 97       	sbiw	r28, 0x31	; 49
     2d8:	40 95       	com	r20
     2da:	50 95       	com	r21
     2dc:	60 95       	com	r22
     2de:	70 95       	com	r23
     2e0:	e1 96       	adiw	r28, 0x31	; 49
     2e2:	4c af       	std	Y+60, r20	; 0x3c
     2e4:	5d af       	std	Y+61, r21	; 0x3d
     2e6:	6e af       	std	Y+62, r22	; 0x3e
     2e8:	7f af       	std	Y+63, r23	; 0x3f
     2ea:	e1 97       	sbiw	r28, 0x31	; 49
     2ec:	a1 94       	neg	r10
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	1a 14       	cp	r1, r10
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <__divdi3+0x166>
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	b1 94       	neg	r11
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	1b 14       	cp	r1, r11
     2fc:	08 f0       	brcs	.+2      	; 0x300 <__divdi3+0x170>
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	6b 2d       	mov	r22, r11
     302:	68 1b       	sub	r22, r24
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	b6 16       	cp	r11, r22
     308:	08 f0       	brcs	.+2      	; 0x30c <__divdi3+0x17c>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	98 2b       	or	r25, r24
     30e:	c1 94       	neg	r12
     310:	21 e0       	ldi	r18, 0x01	; 1
     312:	1c 14       	cp	r1, r12
     314:	08 f0       	brcs	.+2      	; 0x318 <__divdi3+0x188>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	5c 2d       	mov	r21, r12
     31a:	59 1b       	sub	r21, r25
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	c5 16       	cp	r12, r21
     320:	08 f0       	brcs	.+2      	; 0x324 <__divdi3+0x194>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	28 2b       	or	r18, r24
     326:	d1 94       	neg	r13
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	1d 14       	cp	r1, r13
     32c:	08 f0       	brcs	.+2      	; 0x330 <__divdi3+0x1a0>
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	4d 2d       	mov	r20, r13
     332:	42 1b       	sub	r20, r18
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	d4 16       	cp	r13, r20
     338:	08 f0       	brcs	.+2      	; 0x33c <__divdi3+0x1ac>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	98 2b       	or	r25, r24
     33e:	e1 94       	neg	r14
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	1e 14       	cp	r1, r14
     344:	08 f0       	brcs	.+2      	; 0x348 <__divdi3+0x1b8>
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	3e 2d       	mov	r19, r14
     34a:	39 1b       	sub	r19, r25
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	e3 16       	cp	r14, r19
     350:	08 f0       	brcs	.+2      	; 0x354 <__divdi3+0x1c4>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	28 2b       	or	r18, r24
     356:	f1 94       	neg	r15
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	1f 14       	cp	r1, r15
     35c:	08 f0       	brcs	.+2      	; 0x360 <__divdi3+0x1d0>
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	7f 2d       	mov	r23, r15
     362:	72 1b       	sub	r23, r18
     364:	27 2f       	mov	r18, r23
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	f7 16       	cp	r15, r23
     36a:	08 f0       	brcs	.+2      	; 0x36e <__divdi3+0x1de>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	98 2b       	or	r25, r24
     370:	01 95       	neg	r16
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	10 16       	cp	r1, r16
     376:	08 f0       	brcs	.+2      	; 0x37a <__divdi3+0x1ea>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	80 2f       	mov	r24, r16
     37c:	89 1b       	sub	r24, r25
     37e:	98 2f       	mov	r25, r24
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	09 17       	cp	r16, r25
     384:	08 f0       	brcs	.+2      	; 0x388 <__divdi3+0x1f8>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	18 2b       	or	r17, r24
     38a:	87 2d       	mov	r24, r7
     38c:	81 95       	neg	r24
     38e:	81 1b       	sub	r24, r17
     390:	a9 86       	std	Y+9, r10	; 0x09
     392:	6a 87       	std	Y+10, r22	; 0x0a
     394:	5b 87       	std	Y+11, r21	; 0x0b
     396:	4c 87       	std	Y+12, r20	; 0x0c
     398:	3d 87       	std	Y+13, r19	; 0x0d
     39a:	2e 87       	std	Y+14, r18	; 0x0e
     39c:	9f 87       	std	Y+15, r25	; 0x0f
     39e:	88 8b       	std	Y+16, r24	; 0x10
     3a0:	99 81       	ldd	r25, Y+1	; 0x01
     3a2:	2a 81       	ldd	r18, Y+2	; 0x02
     3a4:	3b 81       	ldd	r19, Y+3	; 0x03
     3a6:	4c 81       	ldd	r20, Y+4	; 0x04
     3a8:	5d 81       	ldd	r21, Y+5	; 0x05
     3aa:	6e 81       	ldd	r22, Y+6	; 0x06
     3ac:	7f 81       	ldd	r23, Y+7	; 0x07
     3ae:	a8 85       	ldd	r26, Y+8	; 0x08
     3b0:	b9 85       	ldd	r27, Y+9	; 0x09
     3b2:	1a 85       	ldd	r17, Y+10	; 0x0a
     3b4:	0b 85       	ldd	r16, Y+11	; 0x0b
     3b6:	fc 84       	ldd	r15, Y+12	; 0x0c
     3b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     3ba:	de 84       	ldd	r13, Y+14	; 0x0e
     3bc:	cf 84       	ldd	r12, Y+15	; 0x0f
     3be:	b8 88       	ldd	r11, Y+16	; 0x10
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	e1 e1       	ldi	r30, 0x11	; 17
     3c4:	8e 2e       	mov	r8, r30
     3c6:	91 2c       	mov	r9, r1
     3c8:	8c 0e       	add	r8, r28
     3ca:	9d 1e       	adc	r9, r29
     3cc:	f4 01       	movw	r30, r8
     3ce:	68 2e       	mov	r6, r24
     3d0:	11 92       	st	Z+, r1
     3d2:	6a 94       	dec	r6
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <__divdi3+0x240>
     3d6:	99 8b       	std	Y+17, r25	; 0x11
     3d8:	2a 8b       	std	Y+18, r18	; 0x12
     3da:	3b 8b       	std	Y+19, r19	; 0x13
     3dc:	4c 8b       	std	Y+20, r20	; 0x14
     3de:	5d 8b       	std	Y+21, r21	; 0x15
     3e0:	6e 8b       	std	Y+22, r22	; 0x16
     3e2:	7f 8b       	std	Y+23, r23	; 0x17
     3e4:	a8 8f       	std	Y+24, r26	; 0x18
     3e6:	9e 01       	movw	r18, r28
     3e8:	27 5e       	subi	r18, 0xE7	; 231
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	f9 01       	movw	r30, r18
     3ee:	11 92       	st	Z+, r1
     3f0:	8a 95       	dec	r24
     3f2:	e9 f7       	brne	.-6      	; 0x3ee <__divdi3+0x25e>
     3f4:	b9 8f       	std	Y+25, r27	; 0x19
     3f6:	1a 8f       	std	Y+26, r17	; 0x1a
     3f8:	0b 8f       	std	Y+27, r16	; 0x1b
     3fa:	fc 8e       	std	Y+28, r15	; 0x1c
     3fc:	ed 8e       	std	Y+29, r14	; 0x1d
     3fe:	de 8e       	std	Y+30, r13	; 0x1e
     400:	cf 8e       	std	Y+31, r12	; 0x1f
     402:	b8 a2       	std	Y+32, r11	; 0x20
     404:	29 8c       	ldd	r2, Y+25	; 0x19
     406:	3a 8c       	ldd	r3, Y+26	; 0x1a
     408:	4b 8c       	ldd	r4, Y+27	; 0x1b
     40a:	5c 8c       	ldd	r5, Y+28	; 0x1c
     40c:	ed 8c       	ldd	r14, Y+29	; 0x1d
     40e:	fe 8c       	ldd	r15, Y+30	; 0x1e
     410:	0f 8d       	ldd	r16, Y+31	; 0x1f
     412:	18 a1       	ldd	r17, Y+32	; 0x20
     414:	69 88       	ldd	r6, Y+17	; 0x11
     416:	7a 88       	ldd	r7, Y+18	; 0x12
     418:	8b 88       	ldd	r8, Y+19	; 0x13
     41a:	9c 88       	ldd	r9, Y+20	; 0x14
     41c:	21 96       	adiw	r28, 0x01	; 1
     41e:	6c ae       	std	Y+60, r6	; 0x3c
     420:	7d ae       	std	Y+61, r7	; 0x3d
     422:	8e ae       	std	Y+62, r8	; 0x3e
     424:	9f ae       	std	Y+63, r9	; 0x3f
     426:	21 97       	sbiw	r28, 0x01	; 1
     428:	6d 88       	ldd	r6, Y+21	; 0x15
     42a:	7e 88       	ldd	r7, Y+22	; 0x16
     42c:	8f 88       	ldd	r8, Y+23	; 0x17
     42e:	98 8c       	ldd	r9, Y+24	; 0x18
     430:	e1 14       	cp	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	01 05       	cpc	r16, r1
     436:	11 05       	cpc	r17, r1
     438:	09 f0       	breq	.+2      	; 0x43c <__divdi3+0x2ac>
     43a:	d9 c3       	rjmp	.+1970   	; 0xbee <__stack+0x38f>
     43c:	62 14       	cp	r6, r2
     43e:	73 04       	cpc	r7, r3
     440:	84 04       	cpc	r8, r4
     442:	95 04       	cpc	r9, r5
     444:	08 f0       	brcs	.+2      	; 0x448 <__divdi3+0x2b8>
     446:	57 c1       	rjmp	.+686    	; 0x6f6 <__divdi3+0x566>
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	20 16       	cp	r2, r16
     44c:	00 e0       	ldi	r16, 0x00	; 0
     44e:	30 06       	cpc	r3, r16
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	40 06       	cpc	r4, r16
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	50 06       	cpc	r5, r16
     458:	88 f4       	brcc	.+34     	; 0x47c <__divdi3+0x2ec>
     45a:	1f ef       	ldi	r17, 0xFF	; 255
     45c:	21 16       	cp	r2, r17
     45e:	31 04       	cpc	r3, r1
     460:	41 04       	cpc	r4, r1
     462:	51 04       	cpc	r5, r1
     464:	39 f0       	breq	.+14     	; 0x474 <__divdi3+0x2e4>
     466:	30 f0       	brcs	.+12     	; 0x474 <__divdi3+0x2e4>
     468:	48 e0       	ldi	r20, 0x08	; 8
     46a:	e4 2e       	mov	r14, r20
     46c:	f1 2c       	mov	r15, r1
     46e:	01 2d       	mov	r16, r1
     470:	11 2d       	mov	r17, r1
     472:	18 c0       	rjmp	.+48     	; 0x4a4 <__divdi3+0x314>
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15
     478:	87 01       	movw	r16, r14
     47a:	14 c0       	rjmp	.+40     	; 0x4a4 <__divdi3+0x314>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	22 16       	cp	r2, r18
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	32 06       	cpc	r3, r18
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	42 06       	cpc	r4, r18
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	52 06       	cpc	r5, r18
     48c:	30 f0       	brcs	.+12     	; 0x49a <__divdi3+0x30a>
     48e:	38 e1       	ldi	r19, 0x18	; 24
     490:	e3 2e       	mov	r14, r19
     492:	f1 2c       	mov	r15, r1
     494:	01 2d       	mov	r16, r1
     496:	11 2d       	mov	r17, r1
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <__divdi3+0x314>
     49a:	20 e1       	ldi	r18, 0x10	; 16
     49c:	e2 2e       	mov	r14, r18
     49e:	f1 2c       	mov	r15, r1
     4a0:	01 2d       	mov	r16, r1
     4a2:	11 2d       	mov	r17, r1
     4a4:	d2 01       	movw	r26, r4
     4a6:	c1 01       	movw	r24, r2
     4a8:	0e 2c       	mov	r0, r14
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__divdi3+0x324>
     4ac:	b6 95       	lsr	r27
     4ae:	a7 95       	ror	r26
     4b0:	97 95       	ror	r25
     4b2:	87 95       	ror	r24
     4b4:	0a 94       	dec	r0
     4b6:	d2 f7       	brpl	.-12     	; 0x4ac <__divdi3+0x31c>
     4b8:	8f 52       	subi	r24, 0x2F	; 47
     4ba:	9f 4f       	sbci	r25, 0xFF	; 255
     4bc:	dc 01       	movw	r26, r24
     4be:	2c 91       	ld	r18, X
     4c0:	80 e2       	ldi	r24, 0x20	; 32
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	a0 e0       	ldi	r26, 0x00	; 0
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	8e 19       	sub	r24, r14
     4ca:	9f 09       	sbc	r25, r15
     4cc:	a0 0b       	sbc	r26, r16
     4ce:	b1 0b       	sbc	r27, r17
     4d0:	7c 01       	movw	r14, r24
     4d2:	8d 01       	movw	r16, r26
     4d4:	e2 1a       	sub	r14, r18
     4d6:	f1 08       	sbc	r15, r1
     4d8:	01 09       	sbc	r16, r1
     4da:	11 09       	sbc	r17, r1
     4dc:	e1 14       	cp	r14, r1
     4de:	f1 04       	cpc	r15, r1
     4e0:	01 05       	cpc	r16, r1
     4e2:	11 05       	cpc	r17, r1
     4e4:	d1 f1       	breq	.+116    	; 0x55a <__divdi3+0x3ca>
     4e6:	0e 2c       	mov	r0, r14
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__divdi3+0x362>
     4ea:	22 0c       	add	r2, r2
     4ec:	33 1c       	adc	r3, r3
     4ee:	44 1c       	adc	r4, r4
     4f0:	55 1c       	adc	r5, r5
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__divdi3+0x35a>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	0e 2c       	mov	r0, r14
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__divdi3+0x376>
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	44 1f       	adc	r20, r20
     504:	55 1f       	adc	r21, r21
     506:	0a 94       	dec	r0
     508:	d2 f7       	brpl	.-12     	; 0x4fe <__divdi3+0x36e>
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8e 19       	sub	r24, r14
     510:	9f 09       	sbc	r25, r15
     512:	21 96       	adiw	r28, 0x01	; 1
     514:	6c ac       	ldd	r6, Y+60	; 0x3c
     516:	7d ac       	ldd	r7, Y+61	; 0x3d
     518:	8e ac       	ldd	r8, Y+62	; 0x3e
     51a:	9f ac       	ldd	r9, Y+63	; 0x3f
     51c:	21 97       	sbiw	r28, 0x01	; 1
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__divdi3+0x398>
     520:	96 94       	lsr	r9
     522:	87 94       	ror	r8
     524:	77 94       	ror	r7
     526:	67 94       	ror	r6
     528:	8a 95       	dec	r24
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__divdi3+0x390>
     52c:	62 2a       	or	r6, r18
     52e:	73 2a       	or	r7, r19
     530:	84 2a       	or	r8, r20
     532:	95 2a       	or	r9, r21
     534:	21 96       	adiw	r28, 0x01	; 1
     536:	ac ac       	ldd	r10, Y+60	; 0x3c
     538:	bd ac       	ldd	r11, Y+61	; 0x3d
     53a:	ce ac       	ldd	r12, Y+62	; 0x3e
     53c:	df ac       	ldd	r13, Y+63	; 0x3f
     53e:	21 97       	sbiw	r28, 0x01	; 1
     540:	04 c0       	rjmp	.+8      	; 0x54a <__divdi3+0x3ba>
     542:	aa 0c       	add	r10, r10
     544:	bb 1c       	adc	r11, r11
     546:	cc 1c       	adc	r12, r12
     548:	dd 1c       	adc	r13, r13
     54a:	ea 94       	dec	r14
     54c:	d2 f7       	brpl	.-12     	; 0x542 <__divdi3+0x3b2>
     54e:	21 96       	adiw	r28, 0x01	; 1
     550:	ac ae       	std	Y+60, r10	; 0x3c
     552:	bd ae       	std	Y+61, r11	; 0x3d
     554:	ce ae       	std	Y+62, r12	; 0x3e
     556:	df ae       	std	Y+63, r13	; 0x3f
     558:	21 97       	sbiw	r28, 0x01	; 1
     55a:	62 01       	movw	r12, r4
     55c:	ee 24       	eor	r14, r14
     55e:	ff 24       	eor	r15, r15
     560:	29 96       	adiw	r28, 0x09	; 9
     562:	cc ae       	std	Y+60, r12	; 0x3c
     564:	dd ae       	std	Y+61, r13	; 0x3d
     566:	ee ae       	std	Y+62, r14	; 0x3e
     568:	ff ae       	std	Y+63, r15	; 0x3f
     56a:	29 97       	sbiw	r28, 0x09	; 9
     56c:	92 01       	movw	r18, r4
     56e:	81 01       	movw	r16, r2
     570:	20 70       	andi	r18, 0x00	; 0
     572:	30 70       	andi	r19, 0x00	; 0
     574:	2d 96       	adiw	r28, 0x0d	; 13
     576:	0c af       	std	Y+60, r16	; 0x3c
     578:	1d af       	std	Y+61, r17	; 0x3d
     57a:	2e af       	std	Y+62, r18	; 0x3e
     57c:	3f af       	std	Y+63, r19	; 0x3f
     57e:	2d 97       	sbiw	r28, 0x0d	; 13
     580:	c4 01       	movw	r24, r8
     582:	b3 01       	movw	r22, r6
     584:	a7 01       	movw	r20, r14
     586:	96 01       	movw	r18, r12
     588:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     58c:	7b 01       	movw	r14, r22
     58e:	8c 01       	movw	r16, r24
     590:	c4 01       	movw	r24, r8
     592:	b3 01       	movw	r22, r6
     594:	29 96       	adiw	r28, 0x09	; 9
     596:	2c ad       	ldd	r18, Y+60	; 0x3c
     598:	3d ad       	ldd	r19, Y+61	; 0x3d
     59a:	4e ad       	ldd	r20, Y+62	; 0x3e
     59c:	5f ad       	ldd	r21, Y+63	; 0x3f
     59e:	29 97       	sbiw	r28, 0x09	; 9
     5a0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     5a4:	c9 01       	movw	r24, r18
     5a6:	da 01       	movw	r26, r20
     5a8:	3c 01       	movw	r6, r24
     5aa:	4d 01       	movw	r8, r26
     5ac:	c4 01       	movw	r24, r8
     5ae:	b3 01       	movw	r22, r6
     5b0:	2d 96       	adiw	r28, 0x0d	; 13
     5b2:	2c ad       	ldd	r18, Y+60	; 0x3c
     5b4:	3d ad       	ldd	r19, Y+61	; 0x3d
     5b6:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b8:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ba:	2d 97       	sbiw	r28, 0x0d	; 13
     5bc:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	87 01       	movw	r16, r14
     5c6:	ff 24       	eor	r15, r15
     5c8:	ee 24       	eor	r14, r14
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	ac ac       	ldd	r10, Y+60	; 0x3c
     5ce:	bd ac       	ldd	r11, Y+61	; 0x3d
     5d0:	ce ac       	ldd	r12, Y+62	; 0x3e
     5d2:	df ac       	ldd	r13, Y+63	; 0x3f
     5d4:	21 97       	sbiw	r28, 0x01	; 1
     5d6:	c6 01       	movw	r24, r12
     5d8:	aa 27       	eor	r26, r26
     5da:	bb 27       	eor	r27, r27
     5dc:	57 01       	movw	r10, r14
     5de:	68 01       	movw	r12, r16
     5e0:	a8 2a       	or	r10, r24
     5e2:	b9 2a       	or	r11, r25
     5e4:	ca 2a       	or	r12, r26
     5e6:	db 2a       	or	r13, r27
     5e8:	a2 16       	cp	r10, r18
     5ea:	b3 06       	cpc	r11, r19
     5ec:	c4 06       	cpc	r12, r20
     5ee:	d5 06       	cpc	r13, r21
     5f0:	e0 f4       	brcc	.+56     	; 0x62a <__divdi3+0x49a>
     5f2:	08 94       	sec
     5f4:	61 08       	sbc	r6, r1
     5f6:	71 08       	sbc	r7, r1
     5f8:	81 08       	sbc	r8, r1
     5fa:	91 08       	sbc	r9, r1
     5fc:	a2 0c       	add	r10, r2
     5fe:	b3 1c       	adc	r11, r3
     600:	c4 1c       	adc	r12, r4
     602:	d5 1c       	adc	r13, r5
     604:	a2 14       	cp	r10, r2
     606:	b3 04       	cpc	r11, r3
     608:	c4 04       	cpc	r12, r4
     60a:	d5 04       	cpc	r13, r5
     60c:	70 f0       	brcs	.+28     	; 0x62a <__divdi3+0x49a>
     60e:	a2 16       	cp	r10, r18
     610:	b3 06       	cpc	r11, r19
     612:	c4 06       	cpc	r12, r20
     614:	d5 06       	cpc	r13, r21
     616:	48 f4       	brcc	.+18     	; 0x62a <__divdi3+0x49a>
     618:	08 94       	sec
     61a:	61 08       	sbc	r6, r1
     61c:	71 08       	sbc	r7, r1
     61e:	81 08       	sbc	r8, r1
     620:	91 08       	sbc	r9, r1
     622:	a2 0c       	add	r10, r2
     624:	b3 1c       	adc	r11, r3
     626:	c4 1c       	adc	r12, r4
     628:	d5 1c       	adc	r13, r5
     62a:	a2 1a       	sub	r10, r18
     62c:	b3 0a       	sbc	r11, r19
     62e:	c4 0a       	sbc	r12, r20
     630:	d5 0a       	sbc	r13, r21
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	29 96       	adiw	r28, 0x09	; 9
     638:	2c ad       	ldd	r18, Y+60	; 0x3c
     63a:	3d ad       	ldd	r19, Y+61	; 0x3d
     63c:	4e ad       	ldd	r20, Y+62	; 0x3e
     63e:	5f ad       	ldd	r21, Y+63	; 0x3f
     640:	29 97       	sbiw	r28, 0x09	; 9
     642:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     646:	7b 01       	movw	r14, r22
     648:	8c 01       	movw	r16, r24
     64a:	c6 01       	movw	r24, r12
     64c:	b5 01       	movw	r22, r10
     64e:	29 96       	adiw	r28, 0x09	; 9
     650:	2c ad       	ldd	r18, Y+60	; 0x3c
     652:	3d ad       	ldd	r19, Y+61	; 0x3d
     654:	4e ad       	ldd	r20, Y+62	; 0x3e
     656:	5f ad       	ldd	r21, Y+63	; 0x3f
     658:	29 97       	sbiw	r28, 0x09	; 9
     65a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     65e:	c9 01       	movw	r24, r18
     660:	da 01       	movw	r26, r20
     662:	5c 01       	movw	r10, r24
     664:	6d 01       	movw	r12, r26
     666:	c6 01       	movw	r24, r12
     668:	b5 01       	movw	r22, r10
     66a:	2d 96       	adiw	r28, 0x0d	; 13
     66c:	2c ad       	ldd	r18, Y+60	; 0x3c
     66e:	3d ad       	ldd	r19, Y+61	; 0x3d
     670:	4e ad       	ldd	r20, Y+62	; 0x3e
     672:	5f ad       	ldd	r21, Y+63	; 0x3f
     674:	2d 97       	sbiw	r28, 0x0d	; 13
     676:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	87 01       	movw	r16, r14
     680:	ff 24       	eor	r15, r15
     682:	ee 24       	eor	r14, r14
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	8c ad       	ldd	r24, Y+60	; 0x3c
     688:	9d ad       	ldd	r25, Y+61	; 0x3d
     68a:	ae ad       	ldd	r26, Y+62	; 0x3e
     68c:	bf ad       	ldd	r27, Y+63	; 0x3f
     68e:	21 97       	sbiw	r28, 0x01	; 1
     690:	a0 70       	andi	r26, 0x00	; 0
     692:	b0 70       	andi	r27, 0x00	; 0
     694:	e8 2a       	or	r14, r24
     696:	f9 2a       	or	r15, r25
     698:	0a 2b       	or	r16, r26
     69a:	1b 2b       	or	r17, r27
     69c:	e2 16       	cp	r14, r18
     69e:	f3 06       	cpc	r15, r19
     6a0:	04 07       	cpc	r16, r20
     6a2:	15 07       	cpc	r17, r21
     6a4:	c0 f4       	brcc	.+48     	; 0x6d6 <__divdi3+0x546>
     6a6:	08 94       	sec
     6a8:	a1 08       	sbc	r10, r1
     6aa:	b1 08       	sbc	r11, r1
     6ac:	c1 08       	sbc	r12, r1
     6ae:	d1 08       	sbc	r13, r1
     6b0:	e2 0c       	add	r14, r2
     6b2:	f3 1c       	adc	r15, r3
     6b4:	04 1d       	adc	r16, r4
     6b6:	15 1d       	adc	r17, r5
     6b8:	e2 14       	cp	r14, r2
     6ba:	f3 04       	cpc	r15, r3
     6bc:	04 05       	cpc	r16, r4
     6be:	15 05       	cpc	r17, r5
     6c0:	50 f0       	brcs	.+20     	; 0x6d6 <__divdi3+0x546>
     6c2:	e2 16       	cp	r14, r18
     6c4:	f3 06       	cpc	r15, r19
     6c6:	04 07       	cpc	r16, r20
     6c8:	15 07       	cpc	r17, r21
     6ca:	28 f4       	brcc	.+10     	; 0x6d6 <__divdi3+0x546>
     6cc:	08 94       	sec
     6ce:	a1 08       	sbc	r10, r1
     6d0:	b1 08       	sbc	r11, r1
     6d2:	c1 08       	sbc	r12, r1
     6d4:	d1 08       	sbc	r13, r1
     6d6:	d3 01       	movw	r26, r6
     6d8:	99 27       	eor	r25, r25
     6da:	88 27       	eor	r24, r24
     6dc:	86 01       	movw	r16, r12
     6de:	75 01       	movw	r14, r10
     6e0:	e8 2a       	or	r14, r24
     6e2:	f9 2a       	or	r15, r25
     6e4:	0a 2b       	or	r16, r26
     6e6:	1b 2b       	or	r17, r27
     6e8:	25 96       	adiw	r28, 0x05	; 5
     6ea:	ec ae       	std	Y+60, r14	; 0x3c
     6ec:	fd ae       	std	Y+61, r15	; 0x3d
     6ee:	0e af       	std	Y+62, r16	; 0x3e
     6f0:	1f af       	std	Y+63, r17	; 0x3f
     6f2:	25 97       	sbiw	r28, 0x05	; 5
     6f4:	eb c4       	rjmp	.+2518   	; 0x10cc <__stack+0x86d>
     6f6:	21 14       	cp	r2, r1
     6f8:	31 04       	cpc	r3, r1
     6fa:	41 04       	cpc	r4, r1
     6fc:	51 04       	cpc	r5, r1
     6fe:	71 f4       	brne	.+28     	; 0x71c <__divdi3+0x58c>
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     714:	c9 01       	movw	r24, r18
     716:	da 01       	movw	r26, r20
     718:	1c 01       	movw	r2, r24
     71a:	2d 01       	movw	r4, r26
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	20 16       	cp	r2, r16
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	30 06       	cpc	r3, r16
     724:	01 e0       	ldi	r16, 0x01	; 1
     726:	40 06       	cpc	r4, r16
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	50 06       	cpc	r5, r16
     72c:	88 f4       	brcc	.+34     	; 0x750 <__divdi3+0x5c0>
     72e:	1f ef       	ldi	r17, 0xFF	; 255
     730:	21 16       	cp	r2, r17
     732:	31 04       	cpc	r3, r1
     734:	41 04       	cpc	r4, r1
     736:	51 04       	cpc	r5, r1
     738:	31 f0       	breq	.+12     	; 0x746 <__divdi3+0x5b6>
     73a:	28 f0       	brcs	.+10     	; 0x746 <__divdi3+0x5b6>
     73c:	48 e0       	ldi	r20, 0x08	; 8
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	17 c0       	rjmp	.+46     	; 0x774 <__divdi3+0x5e4>
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	12 c0       	rjmp	.+36     	; 0x774 <__divdi3+0x5e4>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	22 16       	cp	r2, r18
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	32 06       	cpc	r3, r18
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	42 06       	cpc	r4, r18
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	52 06       	cpc	r5, r18
     760:	28 f0       	brcs	.+10     	; 0x76c <__divdi3+0x5dc>
     762:	48 e1       	ldi	r20, 0x18	; 24
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	04 c0       	rjmp	.+8      	; 0x774 <__divdi3+0x5e4>
     76c:	40 e1       	ldi	r20, 0x10	; 16
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	d2 01       	movw	r26, r4
     776:	c1 01       	movw	r24, r2
     778:	04 2e       	mov	r0, r20
     77a:	04 c0       	rjmp	.+8      	; 0x784 <__divdi3+0x5f4>
     77c:	b6 95       	lsr	r27
     77e:	a7 95       	ror	r26
     780:	97 95       	ror	r25
     782:	87 95       	ror	r24
     784:	0a 94       	dec	r0
     786:	d2 f7       	brpl	.-12     	; 0x77c <__divdi3+0x5ec>
     788:	8f 52       	subi	r24, 0x2F	; 47
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	dc 01       	movw	r26, r24
     78e:	2c 91       	ld	r18, X
     790:	e0 e2       	ldi	r30, 0x20	; 32
     792:	ee 2e       	mov	r14, r30
     794:	f1 2c       	mov	r15, r1
     796:	01 2d       	mov	r16, r1
     798:	11 2d       	mov	r17, r1
     79a:	d8 01       	movw	r26, r16
     79c:	c7 01       	movw	r24, r14
     79e:	84 1b       	sub	r24, r20
     7a0:	95 0b       	sbc	r25, r21
     7a2:	a6 0b       	sbc	r26, r22
     7a4:	b7 0b       	sbc	r27, r23
     7a6:	82 1b       	sub	r24, r18
     7a8:	91 09       	sbc	r25, r1
     7aa:	a1 09       	sbc	r26, r1
     7ac:	b1 09       	sbc	r27, r1
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	a1 05       	cpc	r26, r1
     7b2:	b1 05       	cpc	r27, r1
     7b4:	61 f4       	brne	.+24     	; 0x7ce <__divdi3+0x63e>
     7b6:	64 01       	movw	r12, r8
     7b8:	53 01       	movw	r10, r6
     7ba:	a2 18       	sub	r10, r2
     7bc:	b3 08       	sbc	r11, r3
     7be:	c4 08       	sbc	r12, r4
     7c0:	d5 08       	sbc	r13, r5
     7c2:	31 e0       	ldi	r19, 0x01	; 1
     7c4:	63 2e       	mov	r6, r19
     7c6:	71 2c       	mov	r7, r1
     7c8:	81 2c       	mov	r8, r1
     7ca:	91 2c       	mov	r9, r1
     7cc:	24 c1       	rjmp	.+584    	; 0xa16 <__stack+0x1b7>
     7ce:	e3 96       	adiw	r28, 0x33	; 51
     7d0:	8f af       	std	Y+63, r24	; 0x3f
     7d2:	e3 97       	sbiw	r28, 0x33	; 51
     7d4:	08 2e       	mov	r0, r24
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <__divdi3+0x650>
     7d8:	22 0c       	add	r2, r2
     7da:	33 1c       	adc	r3, r3
     7dc:	44 1c       	adc	r4, r4
     7de:	55 1c       	adc	r5, r5
     7e0:	0a 94       	dec	r0
     7e2:	d2 f7       	brpl	.-12     	; 0x7d8 <__divdi3+0x648>
     7e4:	ee 2d       	mov	r30, r14
     7e6:	e8 1b       	sub	r30, r24
     7e8:	64 01       	movw	r12, r8
     7ea:	53 01       	movw	r10, r6
     7ec:	0e 2e       	mov	r0, r30
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__divdi3+0x668>
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	b7 94       	ror	r11
     7f6:	a7 94       	ror	r10
     7f8:	0a 94       	dec	r0
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__divdi3+0x660>
     7fc:	a4 01       	movw	r20, r8
     7fe:	93 01       	movw	r18, r6
     800:	e3 96       	adiw	r28, 0x33	; 51
     802:	0f ac       	ldd	r0, Y+63	; 0x3f
     804:	e3 97       	sbiw	r28, 0x33	; 51
     806:	04 c0       	rjmp	.+8      	; 0x810 <__divdi3+0x680>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	44 1f       	adc	r20, r20
     80e:	55 1f       	adc	r21, r21
     810:	0a 94       	dec	r0
     812:	d2 f7       	brpl	.-12     	; 0x808 <__divdi3+0x678>
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	6c ac       	ldd	r6, Y+60	; 0x3c
     818:	7d ac       	ldd	r7, Y+61	; 0x3d
     81a:	8e ac       	ldd	r8, Y+62	; 0x3e
     81c:	9f ac       	ldd	r9, Y+63	; 0x3f
     81e:	21 97       	sbiw	r28, 0x01	; 1
     820:	0e 2e       	mov	r0, r30
     822:	04 c0       	rjmp	.+8      	; 0x82c <__divdi3+0x69c>
     824:	96 94       	lsr	r9
     826:	87 94       	ror	r8
     828:	77 94       	ror	r7
     82a:	67 94       	ror	r6
     82c:	0a 94       	dec	r0
     82e:	d2 f7       	brpl	.-12     	; 0x824 <__divdi3+0x694>
     830:	84 01       	movw	r16, r8
     832:	73 01       	movw	r14, r6
     834:	e2 2a       	or	r14, r18
     836:	f3 2a       	or	r15, r19
     838:	04 2b       	or	r16, r20
     83a:	15 2b       	or	r17, r21
     83c:	e9 ae       	std	Y+57, r14	; 0x39
     83e:	fa ae       	std	Y+58, r15	; 0x3a
     840:	0b af       	std	Y+59, r16	; 0x3b
     842:	1c af       	std	Y+60, r17	; 0x3c
     844:	32 01       	movw	r6, r4
     846:	88 24       	eor	r8, r8
     848:	99 24       	eor	r9, r9
     84a:	92 01       	movw	r18, r4
     84c:	81 01       	movw	r16, r2
     84e:	20 70       	andi	r18, 0x00	; 0
     850:	30 70       	andi	r19, 0x00	; 0
     852:	61 96       	adiw	r28, 0x11	; 17
     854:	0c af       	std	Y+60, r16	; 0x3c
     856:	1d af       	std	Y+61, r17	; 0x3d
     858:	2e af       	std	Y+62, r18	; 0x3e
     85a:	3f af       	std	Y+63, r19	; 0x3f
     85c:	61 97       	sbiw	r28, 0x11	; 17
     85e:	c6 01       	movw	r24, r12
     860:	b5 01       	movw	r22, r10
     862:	a4 01       	movw	r20, r8
     864:	93 01       	movw	r18, r6
     866:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     86a:	7b 01       	movw	r14, r22
     86c:	8c 01       	movw	r16, r24
     86e:	c6 01       	movw	r24, r12
     870:	b5 01       	movw	r22, r10
     872:	a4 01       	movw	r20, r8
     874:	93 01       	movw	r18, r6
     876:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     87a:	c9 01       	movw	r24, r18
     87c:	da 01       	movw	r26, r20
     87e:	65 96       	adiw	r28, 0x15	; 21
     880:	8c af       	std	Y+60, r24	; 0x3c
     882:	9d af       	std	Y+61, r25	; 0x3d
     884:	ae af       	std	Y+62, r26	; 0x3e
     886:	bf af       	std	Y+63, r27	; 0x3f
     888:	65 97       	sbiw	r28, 0x15	; 21
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	61 96       	adiw	r28, 0x11	; 17
     890:	2c ad       	ldd	r18, Y+60	; 0x3c
     892:	3d ad       	ldd	r19, Y+61	; 0x3d
     894:	4e ad       	ldd	r20, Y+62	; 0x3e
     896:	5f ad       	ldd	r21, Y+63	; 0x3f
     898:	61 97       	sbiw	r28, 0x11	; 17
     89a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	87 01       	movw	r16, r14
     8a4:	ff 24       	eor	r15, r15
     8a6:	ee 24       	eor	r14, r14
     8a8:	a9 ac       	ldd	r10, Y+57	; 0x39
     8aa:	ba ac       	ldd	r11, Y+58	; 0x3a
     8ac:	cb ac       	ldd	r12, Y+59	; 0x3b
     8ae:	dc ac       	ldd	r13, Y+60	; 0x3c
     8b0:	c6 01       	movw	r24, r12
     8b2:	aa 27       	eor	r26, r26
     8b4:	bb 27       	eor	r27, r27
     8b6:	5c 01       	movw	r10, r24
     8b8:	6d 01       	movw	r12, r26
     8ba:	ae 28       	or	r10, r14
     8bc:	bf 28       	or	r11, r15
     8be:	c0 2a       	or	r12, r16
     8c0:	d1 2a       	or	r13, r17
     8c2:	a2 16       	cp	r10, r18
     8c4:	b3 06       	cpc	r11, r19
     8c6:	c4 06       	cpc	r12, r20
     8c8:	d5 06       	cpc	r13, r21
     8ca:	60 f5       	brcc	.+88     	; 0x924 <__stack+0xc5>
     8cc:	65 96       	adiw	r28, 0x15	; 21
     8ce:	6c ad       	ldd	r22, Y+60	; 0x3c
     8d0:	7d ad       	ldd	r23, Y+61	; 0x3d
     8d2:	8e ad       	ldd	r24, Y+62	; 0x3e
     8d4:	9f ad       	ldd	r25, Y+63	; 0x3f
     8d6:	65 97       	sbiw	r28, 0x15	; 21
     8d8:	61 50       	subi	r22, 0x01	; 1
     8da:	70 40       	sbci	r23, 0x00	; 0
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	90 40       	sbci	r25, 0x00	; 0
     8e0:	65 96       	adiw	r28, 0x15	; 21
     8e2:	6c af       	std	Y+60, r22	; 0x3c
     8e4:	7d af       	std	Y+61, r23	; 0x3d
     8e6:	8e af       	std	Y+62, r24	; 0x3e
     8e8:	9f af       	std	Y+63, r25	; 0x3f
     8ea:	65 97       	sbiw	r28, 0x15	; 21
     8ec:	a2 0c       	add	r10, r2
     8ee:	b3 1c       	adc	r11, r3
     8f0:	c4 1c       	adc	r12, r4
     8f2:	d5 1c       	adc	r13, r5
     8f4:	a2 14       	cp	r10, r2
     8f6:	b3 04       	cpc	r11, r3
     8f8:	c4 04       	cpc	r12, r4
     8fa:	d5 04       	cpc	r13, r5
     8fc:	98 f0       	brcs	.+38     	; 0x924 <__stack+0xc5>
     8fe:	a2 16       	cp	r10, r18
     900:	b3 06       	cpc	r11, r19
     902:	c4 06       	cpc	r12, r20
     904:	d5 06       	cpc	r13, r21
     906:	70 f4       	brcc	.+28     	; 0x924 <__stack+0xc5>
     908:	61 50       	subi	r22, 0x01	; 1
     90a:	70 40       	sbci	r23, 0x00	; 0
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	65 96       	adiw	r28, 0x15	; 21
     912:	6c af       	std	Y+60, r22	; 0x3c
     914:	7d af       	std	Y+61, r23	; 0x3d
     916:	8e af       	std	Y+62, r24	; 0x3e
     918:	9f af       	std	Y+63, r25	; 0x3f
     91a:	65 97       	sbiw	r28, 0x15	; 21
     91c:	a2 0c       	add	r10, r2
     91e:	b3 1c       	adc	r11, r3
     920:	c4 1c       	adc	r12, r4
     922:	d5 1c       	adc	r13, r5
     924:	a2 1a       	sub	r10, r18
     926:	b3 0a       	sbc	r11, r19
     928:	c4 0a       	sbc	r12, r20
     92a:	d5 0a       	sbc	r13, r21
     92c:	c6 01       	movw	r24, r12
     92e:	b5 01       	movw	r22, r10
     930:	a4 01       	movw	r20, r8
     932:	93 01       	movw	r18, r6
     934:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     938:	7b 01       	movw	r14, r22
     93a:	8c 01       	movw	r16, r24
     93c:	c6 01       	movw	r24, r12
     93e:	b5 01       	movw	r22, r10
     940:	a4 01       	movw	r20, r8
     942:	93 01       	movw	r18, r6
     944:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     948:	c9 01       	movw	r24, r18
     94a:	da 01       	movw	r26, r20
     94c:	3c 01       	movw	r6, r24
     94e:	4d 01       	movw	r8, r26
     950:	c4 01       	movw	r24, r8
     952:	b3 01       	movw	r22, r6
     954:	61 96       	adiw	r28, 0x11	; 17
     956:	2c ad       	ldd	r18, Y+60	; 0x3c
     958:	3d ad       	ldd	r19, Y+61	; 0x3d
     95a:	4e ad       	ldd	r20, Y+62	; 0x3e
     95c:	5f ad       	ldd	r21, Y+63	; 0x3f
     95e:	61 97       	sbiw	r28, 0x11	; 17
     960:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	87 01       	movw	r16, r14
     96a:	ff 24       	eor	r15, r15
     96c:	ee 24       	eor	r14, r14
     96e:	89 ad       	ldd	r24, Y+57	; 0x39
     970:	9a ad       	ldd	r25, Y+58	; 0x3a
     972:	ab ad       	ldd	r26, Y+59	; 0x3b
     974:	bc ad       	ldd	r27, Y+60	; 0x3c
     976:	a0 70       	andi	r26, 0x00	; 0
     978:	b0 70       	andi	r27, 0x00	; 0
     97a:	57 01       	movw	r10, r14
     97c:	68 01       	movw	r12, r16
     97e:	a8 2a       	or	r10, r24
     980:	b9 2a       	or	r11, r25
     982:	ca 2a       	or	r12, r26
     984:	db 2a       	or	r13, r27
     986:	a2 16       	cp	r10, r18
     988:	b3 06       	cpc	r11, r19
     98a:	c4 06       	cpc	r12, r20
     98c:	d5 06       	cpc	r13, r21
     98e:	e0 f4       	brcc	.+56     	; 0x9c8 <__stack+0x169>
     990:	08 94       	sec
     992:	61 08       	sbc	r6, r1
     994:	71 08       	sbc	r7, r1
     996:	81 08       	sbc	r8, r1
     998:	91 08       	sbc	r9, r1
     99a:	a2 0c       	add	r10, r2
     99c:	b3 1c       	adc	r11, r3
     99e:	c4 1c       	adc	r12, r4
     9a0:	d5 1c       	adc	r13, r5
     9a2:	a2 14       	cp	r10, r2
     9a4:	b3 04       	cpc	r11, r3
     9a6:	c4 04       	cpc	r12, r4
     9a8:	d5 04       	cpc	r13, r5
     9aa:	70 f0       	brcs	.+28     	; 0x9c8 <__stack+0x169>
     9ac:	a2 16       	cp	r10, r18
     9ae:	b3 06       	cpc	r11, r19
     9b0:	c4 06       	cpc	r12, r20
     9b2:	d5 06       	cpc	r13, r21
     9b4:	48 f4       	brcc	.+18     	; 0x9c8 <__stack+0x169>
     9b6:	08 94       	sec
     9b8:	61 08       	sbc	r6, r1
     9ba:	71 08       	sbc	r7, r1
     9bc:	81 08       	sbc	r8, r1
     9be:	91 08       	sbc	r9, r1
     9c0:	a2 0c       	add	r10, r2
     9c2:	b3 1c       	adc	r11, r3
     9c4:	c4 1c       	adc	r12, r4
     9c6:	d5 1c       	adc	r13, r5
     9c8:	21 96       	adiw	r28, 0x01	; 1
     9ca:	8c ad       	ldd	r24, Y+60	; 0x3c
     9cc:	9d ad       	ldd	r25, Y+61	; 0x3d
     9ce:	ae ad       	ldd	r26, Y+62	; 0x3e
     9d0:	bf ad       	ldd	r27, Y+63	; 0x3f
     9d2:	21 97       	sbiw	r28, 0x01	; 1
     9d4:	e3 96       	adiw	r28, 0x33	; 51
     9d6:	0f ac       	ldd	r0, Y+63	; 0x3f
     9d8:	e3 97       	sbiw	r28, 0x33	; 51
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <__stack+0x185>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	aa 1f       	adc	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	0a 94       	dec	r0
     9e6:	d2 f7       	brpl	.-12     	; 0x9dc <__stack+0x17d>
     9e8:	21 96       	adiw	r28, 0x01	; 1
     9ea:	8c af       	std	Y+60, r24	; 0x3c
     9ec:	9d af       	std	Y+61, r25	; 0x3d
     9ee:	ae af       	std	Y+62, r26	; 0x3e
     9f0:	bf af       	std	Y+63, r27	; 0x3f
     9f2:	21 97       	sbiw	r28, 0x01	; 1
     9f4:	a2 1a       	sub	r10, r18
     9f6:	b3 0a       	sbc	r11, r19
     9f8:	c4 0a       	sbc	r12, r20
     9fa:	d5 0a       	sbc	r13, r21
     9fc:	65 96       	adiw	r28, 0x15	; 21
     9fe:	ec ac       	ldd	r14, Y+60	; 0x3c
     a00:	fd ac       	ldd	r15, Y+61	; 0x3d
     a02:	0e ad       	ldd	r16, Y+62	; 0x3e
     a04:	1f ad       	ldd	r17, Y+63	; 0x3f
     a06:	65 97       	sbiw	r28, 0x15	; 21
     a08:	d7 01       	movw	r26, r14
     a0a:	99 27       	eor	r25, r25
     a0c:	88 27       	eor	r24, r24
     a0e:	68 2a       	or	r6, r24
     a10:	79 2a       	or	r7, r25
     a12:	8a 2a       	or	r8, r26
     a14:	9b 2a       	or	r9, r27
     a16:	82 01       	movw	r16, r4
     a18:	22 27       	eor	r18, r18
     a1a:	33 27       	eor	r19, r19
     a1c:	69 96       	adiw	r28, 0x19	; 25
     a1e:	0c af       	std	Y+60, r16	; 0x3c
     a20:	1d af       	std	Y+61, r17	; 0x3d
     a22:	2e af       	std	Y+62, r18	; 0x3e
     a24:	3f af       	std	Y+63, r19	; 0x3f
     a26:	69 97       	sbiw	r28, 0x19	; 25
     a28:	a2 01       	movw	r20, r4
     a2a:	91 01       	movw	r18, r2
     a2c:	40 70       	andi	r20, 0x00	; 0
     a2e:	50 70       	andi	r21, 0x00	; 0
     a30:	6d 96       	adiw	r28, 0x1d	; 29
     a32:	2c af       	std	Y+60, r18	; 0x3c
     a34:	3d af       	std	Y+61, r19	; 0x3d
     a36:	4e af       	std	Y+62, r20	; 0x3e
     a38:	5f af       	std	Y+63, r21	; 0x3f
     a3a:	6d 97       	sbiw	r28, 0x1d	; 29
     a3c:	c6 01       	movw	r24, r12
     a3e:	b5 01       	movw	r22, r10
     a40:	69 96       	adiw	r28, 0x19	; 25
     a42:	2c ad       	ldd	r18, Y+60	; 0x3c
     a44:	3d ad       	ldd	r19, Y+61	; 0x3d
     a46:	4e ad       	ldd	r20, Y+62	; 0x3e
     a48:	5f ad       	ldd	r21, Y+63	; 0x3f
     a4a:	69 97       	sbiw	r28, 0x19	; 25
     a4c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     a50:	7b 01       	movw	r14, r22
     a52:	8c 01       	movw	r16, r24
     a54:	c6 01       	movw	r24, r12
     a56:	b5 01       	movw	r22, r10
     a58:	69 96       	adiw	r28, 0x19	; 25
     a5a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a5c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a5e:	4e ad       	ldd	r20, Y+62	; 0x3e
     a60:	5f ad       	ldd	r21, Y+63	; 0x3f
     a62:	69 97       	sbiw	r28, 0x19	; 25
     a64:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     a68:	c9 01       	movw	r24, r18
     a6a:	da 01       	movw	r26, r20
     a6c:	a1 96       	adiw	r28, 0x21	; 33
     a6e:	8c af       	std	Y+60, r24	; 0x3c
     a70:	9d af       	std	Y+61, r25	; 0x3d
     a72:	ae af       	std	Y+62, r26	; 0x3e
     a74:	bf af       	std	Y+63, r27	; 0x3f
     a76:	a1 97       	sbiw	r28, 0x21	; 33
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	6d 96       	adiw	r28, 0x1d	; 29
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	6d 97       	sbiw	r28, 0x1d	; 29
     a88:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	87 01       	movw	r16, r14
     a92:	ff 24       	eor	r15, r15
     a94:	ee 24       	eor	r14, r14
     a96:	21 96       	adiw	r28, 0x01	; 1
     a98:	ac ac       	ldd	r10, Y+60	; 0x3c
     a9a:	bd ac       	ldd	r11, Y+61	; 0x3d
     a9c:	ce ac       	ldd	r12, Y+62	; 0x3e
     a9e:	df ac       	ldd	r13, Y+63	; 0x3f
     aa0:	21 97       	sbiw	r28, 0x01	; 1
     aa2:	c6 01       	movw	r24, r12
     aa4:	aa 27       	eor	r26, r26
     aa6:	bb 27       	eor	r27, r27
     aa8:	57 01       	movw	r10, r14
     aaa:	68 01       	movw	r12, r16
     aac:	a8 2a       	or	r10, r24
     aae:	b9 2a       	or	r11, r25
     ab0:	ca 2a       	or	r12, r26
     ab2:	db 2a       	or	r13, r27
     ab4:	a2 16       	cp	r10, r18
     ab6:	b3 06       	cpc	r11, r19
     ab8:	c4 06       	cpc	r12, r20
     aba:	d5 06       	cpc	r13, r21
     abc:	60 f5       	brcc	.+88     	; 0xb16 <__stack+0x2b7>
     abe:	a1 96       	adiw	r28, 0x21	; 33
     ac0:	6c ad       	ldd	r22, Y+60	; 0x3c
     ac2:	7d ad       	ldd	r23, Y+61	; 0x3d
     ac4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ac6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ac8:	a1 97       	sbiw	r28, 0x21	; 33
     aca:	61 50       	subi	r22, 0x01	; 1
     acc:	70 40       	sbci	r23, 0x00	; 0
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	a1 96       	adiw	r28, 0x21	; 33
     ad4:	6c af       	std	Y+60, r22	; 0x3c
     ad6:	7d af       	std	Y+61, r23	; 0x3d
     ad8:	8e af       	std	Y+62, r24	; 0x3e
     ada:	9f af       	std	Y+63, r25	; 0x3f
     adc:	a1 97       	sbiw	r28, 0x21	; 33
     ade:	a2 0c       	add	r10, r2
     ae0:	b3 1c       	adc	r11, r3
     ae2:	c4 1c       	adc	r12, r4
     ae4:	d5 1c       	adc	r13, r5
     ae6:	a2 14       	cp	r10, r2
     ae8:	b3 04       	cpc	r11, r3
     aea:	c4 04       	cpc	r12, r4
     aec:	d5 04       	cpc	r13, r5
     aee:	98 f0       	brcs	.+38     	; 0xb16 <__stack+0x2b7>
     af0:	a2 16       	cp	r10, r18
     af2:	b3 06       	cpc	r11, r19
     af4:	c4 06       	cpc	r12, r20
     af6:	d5 06       	cpc	r13, r21
     af8:	70 f4       	brcc	.+28     	; 0xb16 <__stack+0x2b7>
     afa:	61 50       	subi	r22, 0x01	; 1
     afc:	70 40       	sbci	r23, 0x00	; 0
     afe:	80 40       	sbci	r24, 0x00	; 0
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	a1 96       	adiw	r28, 0x21	; 33
     b04:	6c af       	std	Y+60, r22	; 0x3c
     b06:	7d af       	std	Y+61, r23	; 0x3d
     b08:	8e af       	std	Y+62, r24	; 0x3e
     b0a:	9f af       	std	Y+63, r25	; 0x3f
     b0c:	a1 97       	sbiw	r28, 0x21	; 33
     b0e:	a2 0c       	add	r10, r2
     b10:	b3 1c       	adc	r11, r3
     b12:	c4 1c       	adc	r12, r4
     b14:	d5 1c       	adc	r13, r5
     b16:	a2 1a       	sub	r10, r18
     b18:	b3 0a       	sbc	r11, r19
     b1a:	c4 0a       	sbc	r12, r20
     b1c:	d5 0a       	sbc	r13, r21
     b1e:	c6 01       	movw	r24, r12
     b20:	b5 01       	movw	r22, r10
     b22:	69 96       	adiw	r28, 0x19	; 25
     b24:	2c ad       	ldd	r18, Y+60	; 0x3c
     b26:	3d ad       	ldd	r19, Y+61	; 0x3d
     b28:	4e ad       	ldd	r20, Y+62	; 0x3e
     b2a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b2c:	69 97       	sbiw	r28, 0x19	; 25
     b2e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     b32:	7b 01       	movw	r14, r22
     b34:	8c 01       	movw	r16, r24
     b36:	c6 01       	movw	r24, r12
     b38:	b5 01       	movw	r22, r10
     b3a:	69 96       	adiw	r28, 0x19	; 25
     b3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     b3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     b40:	4e ad       	ldd	r20, Y+62	; 0x3e
     b42:	5f ad       	ldd	r21, Y+63	; 0x3f
     b44:	69 97       	sbiw	r28, 0x19	; 25
     b46:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     b4a:	c9 01       	movw	r24, r18
     b4c:	da 01       	movw	r26, r20
     b4e:	5c 01       	movw	r10, r24
     b50:	6d 01       	movw	r12, r26
     b52:	c6 01       	movw	r24, r12
     b54:	b5 01       	movw	r22, r10
     b56:	6d 96       	adiw	r28, 0x1d	; 29
     b58:	2c ad       	ldd	r18, Y+60	; 0x3c
     b5a:	3d ad       	ldd	r19, Y+61	; 0x3d
     b5c:	4e ad       	ldd	r20, Y+62	; 0x3e
     b5e:	5f ad       	ldd	r21, Y+63	; 0x3f
     b60:	6d 97       	sbiw	r28, 0x1d	; 29
     b62:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	87 01       	movw	r16, r14
     b6c:	ff 24       	eor	r15, r15
     b6e:	ee 24       	eor	r14, r14
     b70:	21 96       	adiw	r28, 0x01	; 1
     b72:	8c ad       	ldd	r24, Y+60	; 0x3c
     b74:	9d ad       	ldd	r25, Y+61	; 0x3d
     b76:	ae ad       	ldd	r26, Y+62	; 0x3e
     b78:	bf ad       	ldd	r27, Y+63	; 0x3f
     b7a:	21 97       	sbiw	r28, 0x01	; 1
     b7c:	a0 70       	andi	r26, 0x00	; 0
     b7e:	b0 70       	andi	r27, 0x00	; 0
     b80:	e8 2a       	or	r14, r24
     b82:	f9 2a       	or	r15, r25
     b84:	0a 2b       	or	r16, r26
     b86:	1b 2b       	or	r17, r27
     b88:	e2 16       	cp	r14, r18
     b8a:	f3 06       	cpc	r15, r19
     b8c:	04 07       	cpc	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	c0 f4       	brcc	.+48     	; 0xbc2 <__stack+0x363>
     b92:	08 94       	sec
     b94:	a1 08       	sbc	r10, r1
     b96:	b1 08       	sbc	r11, r1
     b98:	c1 08       	sbc	r12, r1
     b9a:	d1 08       	sbc	r13, r1
     b9c:	e2 0c       	add	r14, r2
     b9e:	f3 1c       	adc	r15, r3
     ba0:	04 1d       	adc	r16, r4
     ba2:	15 1d       	adc	r17, r5
     ba4:	e2 14       	cp	r14, r2
     ba6:	f3 04       	cpc	r15, r3
     ba8:	04 05       	cpc	r16, r4
     baa:	15 05       	cpc	r17, r5
     bac:	50 f0       	brcs	.+20     	; 0xbc2 <__stack+0x363>
     bae:	e2 16       	cp	r14, r18
     bb0:	f3 06       	cpc	r15, r19
     bb2:	04 07       	cpc	r16, r20
     bb4:	15 07       	cpc	r17, r21
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <__stack+0x363>
     bb8:	08 94       	sec
     bba:	a1 08       	sbc	r10, r1
     bbc:	b1 08       	sbc	r11, r1
     bbe:	c1 08       	sbc	r12, r1
     bc0:	d1 08       	sbc	r13, r1
     bc2:	a1 96       	adiw	r28, 0x21	; 33
     bc4:	ec ac       	ldd	r14, Y+60	; 0x3c
     bc6:	fd ac       	ldd	r15, Y+61	; 0x3d
     bc8:	0e ad       	ldd	r16, Y+62	; 0x3e
     bca:	1f ad       	ldd	r17, Y+63	; 0x3f
     bcc:	a1 97       	sbiw	r28, 0x21	; 33
     bce:	d7 01       	movw	r26, r14
     bd0:	99 27       	eor	r25, r25
     bd2:	88 27       	eor	r24, r24
     bd4:	96 01       	movw	r18, r12
     bd6:	85 01       	movw	r16, r10
     bd8:	08 2b       	or	r16, r24
     bda:	19 2b       	or	r17, r25
     bdc:	2a 2b       	or	r18, r26
     bde:	3b 2b       	or	r19, r27
     be0:	25 96       	adiw	r28, 0x05	; 5
     be2:	0c af       	std	Y+60, r16	; 0x3c
     be4:	1d af       	std	Y+61, r17	; 0x3d
     be6:	2e af       	std	Y+62, r18	; 0x3e
     be8:	3f af       	std	Y+63, r19	; 0x3f
     bea:	25 97       	sbiw	r28, 0x05	; 5
     bec:	72 c2       	rjmp	.+1252   	; 0x10d2 <__stack+0x873>
     bee:	6e 14       	cp	r6, r14
     bf0:	7f 04       	cpc	r7, r15
     bf2:	80 06       	cpc	r8, r16
     bf4:	91 06       	cpc	r9, r17
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	5f c2       	rjmp	.+1214   	; 0x10b8 <__stack+0x859>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	e2 16       	cp	r14, r18
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	f2 06       	cpc	r15, r18
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	02 07       	cpc	r16, r18
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	12 07       	cpc	r17, r18
     c0a:	88 f4       	brcc	.+34     	; 0xc2e <__stack+0x3cf>
     c0c:	3f ef       	ldi	r19, 0xFF	; 255
     c0e:	e3 16       	cp	r14, r19
     c10:	f1 04       	cpc	r15, r1
     c12:	01 05       	cpc	r16, r1
     c14:	11 05       	cpc	r17, r1
     c16:	31 f0       	breq	.+12     	; 0xc24 <__stack+0x3c5>
     c18:	28 f0       	brcs	.+10     	; 0xc24 <__stack+0x3c5>
     c1a:	48 e0       	ldi	r20, 0x08	; 8
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	17 c0       	rjmp	.+46     	; 0xc52 <__stack+0x3f3>
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__stack+0x3f3>
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	e4 16       	cp	r14, r20
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	f4 06       	cpc	r15, r20
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	04 07       	cpc	r16, r20
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	14 07       	cpc	r17, r20
     c3e:	28 f0       	brcs	.+10     	; 0xc4a <__stack+0x3eb>
     c40:	48 e1       	ldi	r20, 0x18	; 24
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <__stack+0x3f3>
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	d8 01       	movw	r26, r16
     c54:	c7 01       	movw	r24, r14
     c56:	04 2e       	mov	r0, r20
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__stack+0x403>
     c5a:	b6 95       	lsr	r27
     c5c:	a7 95       	ror	r26
     c5e:	97 95       	ror	r25
     c60:	87 95       	ror	r24
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__stack+0x3fb>
     c66:	8f 52       	subi	r24, 0x2F	; 47
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	dc 01       	movw	r26, r24
     c6c:	2c 91       	ld	r18, X
     c6e:	30 e2       	ldi	r19, 0x20	; 32
     c70:	a3 2e       	mov	r10, r19
     c72:	b1 2c       	mov	r11, r1
     c74:	c1 2c       	mov	r12, r1
     c76:	d1 2c       	mov	r13, r1
     c78:	d6 01       	movw	r26, r12
     c7a:	c5 01       	movw	r24, r10
     c7c:	84 1b       	sub	r24, r20
     c7e:	95 0b       	sbc	r25, r21
     c80:	a6 0b       	sbc	r26, r22
     c82:	b7 0b       	sbc	r27, r23
     c84:	82 1b       	sub	r24, r18
     c86:	91 09       	sbc	r25, r1
     c88:	a1 09       	sbc	r26, r1
     c8a:	b1 09       	sbc	r27, r1
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	a1 05       	cpc	r26, r1
     c90:	b1 05       	cpc	r27, r1
     c92:	99 f4       	brne	.+38     	; 0xcba <__stack+0x45b>
     c94:	e6 14       	cp	r14, r6
     c96:	f7 04       	cpc	r15, r7
     c98:	08 05       	cpc	r16, r8
     c9a:	19 05       	cpc	r17, r9
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <__stack+0x441>
     c9e:	fe c1       	rjmp	.+1020   	; 0x109c <__stack+0x83d>
     ca0:	21 96       	adiw	r28, 0x01	; 1
     ca2:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca4:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ca8:	9f ac       	ldd	r9, Y+63	; 0x3f
     caa:	21 97       	sbiw	r28, 0x01	; 1
     cac:	62 14       	cp	r6, r2
     cae:	73 04       	cpc	r7, r3
     cb0:	84 04       	cpc	r8, r4
     cb2:	95 04       	cpc	r9, r5
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__stack+0x459>
     cb6:	f2 c1       	rjmp	.+996    	; 0x109c <__stack+0x83d>
     cb8:	ff c1       	rjmp	.+1022   	; 0x10b8 <__stack+0x859>
     cba:	e2 96       	adiw	r28, 0x32	; 50
     cbc:	8f af       	std	Y+63, r24	; 0x3f
     cbe:	e2 97       	sbiw	r28, 0x32	; 50
     cc0:	08 2e       	mov	r0, r24
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__stack+0x46d>
     cc4:	ee 0c       	add	r14, r14
     cc6:	ff 1c       	adc	r15, r15
     cc8:	00 1f       	adc	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	0a 94       	dec	r0
     cce:	d2 f7       	brpl	.-12     	; 0xcc4 <__stack+0x465>
     cd0:	6a 2d       	mov	r22, r10
     cd2:	68 1b       	sub	r22, r24
     cd4:	d2 01       	movw	r26, r4
     cd6:	c1 01       	movw	r24, r2
     cd8:	06 2e       	mov	r0, r22
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__stack+0x485>
     cdc:	b6 95       	lsr	r27
     cde:	a7 95       	ror	r26
     ce0:	97 95       	ror	r25
     ce2:	87 95       	ror	r24
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__stack+0x47d>
     ce8:	5c 01       	movw	r10, r24
     cea:	6d 01       	movw	r12, r26
     cec:	ae 28       	or	r10, r14
     cee:	bf 28       	or	r11, r15
     cf0:	c0 2a       	or	r12, r16
     cf2:	d1 2a       	or	r13, r17
     cf4:	ad aa       	std	Y+53, r10	; 0x35
     cf6:	be aa       	std	Y+54, r11	; 0x36
     cf8:	cf aa       	std	Y+55, r12	; 0x37
     cfa:	d8 ae       	std	Y+56, r13	; 0x38
     cfc:	72 01       	movw	r14, r4
     cfe:	61 01       	movw	r12, r2
     d00:	e2 96       	adiw	r28, 0x32	; 50
     d02:	0f ac       	ldd	r0, Y+63	; 0x3f
     d04:	e2 97       	sbiw	r28, 0x32	; 50
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__stack+0x4b1>
     d08:	cc 0c       	add	r12, r12
     d0a:	dd 1c       	adc	r13, r13
     d0c:	ee 1c       	adc	r14, r14
     d0e:	ff 1c       	adc	r15, r15
     d10:	0a 94       	dec	r0
     d12:	d2 f7       	brpl	.-12     	; 0xd08 <__stack+0x4a9>
     d14:	c9 aa       	std	Y+49, r12	; 0x31
     d16:	da aa       	std	Y+50, r13	; 0x32
     d18:	eb aa       	std	Y+51, r14	; 0x33
     d1a:	fc aa       	std	Y+52, r15	; 0x34
     d1c:	64 01       	movw	r12, r8
     d1e:	53 01       	movw	r10, r6
     d20:	06 2e       	mov	r0, r22
     d22:	04 c0       	rjmp	.+8      	; 0xd2c <__stack+0x4cd>
     d24:	d6 94       	lsr	r13
     d26:	c7 94       	ror	r12
     d28:	b7 94       	ror	r11
     d2a:	a7 94       	ror	r10
     d2c:	0a 94       	dec	r0
     d2e:	d2 f7       	brpl	.-12     	; 0xd24 <__stack+0x4c5>
     d30:	d4 01       	movw	r26, r8
     d32:	c3 01       	movw	r24, r6
     d34:	e2 96       	adiw	r28, 0x32	; 50
     d36:	0f ac       	ldd	r0, Y+63	; 0x3f
     d38:	e2 97       	sbiw	r28, 0x32	; 50
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__stack+0x4e5>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <__stack+0x4dd>
     d48:	21 96       	adiw	r28, 0x01	; 1
     d4a:	ec ac       	ldd	r14, Y+60	; 0x3c
     d4c:	fd ac       	ldd	r15, Y+61	; 0x3d
     d4e:	0e ad       	ldd	r16, Y+62	; 0x3e
     d50:	1f ad       	ldd	r17, Y+63	; 0x3f
     d52:	21 97       	sbiw	r28, 0x01	; 1
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <__stack+0x4ff>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	6a 95       	dec	r22
     d60:	d2 f7       	brpl	.-12     	; 0xd56 <__stack+0x4f7>
     d62:	37 01       	movw	r6, r14
     d64:	48 01       	movw	r8, r16
     d66:	68 2a       	or	r6, r24
     d68:	79 2a       	or	r7, r25
     d6a:	8a 2a       	or	r8, r26
     d6c:	9b 2a       	or	r9, r27
     d6e:	6d a6       	std	Y+45, r6	; 0x2d
     d70:	7e a6       	std	Y+46, r7	; 0x2e
     d72:	8f a6       	std	Y+47, r8	; 0x2f
     d74:	98 aa       	std	Y+48, r9	; 0x30
     d76:	ed a8       	ldd	r14, Y+53	; 0x35
     d78:	fe a8       	ldd	r15, Y+54	; 0x36
     d7a:	0f a9       	ldd	r16, Y+55	; 0x37
     d7c:	18 ad       	ldd	r17, Y+56	; 0x38
     d7e:	38 01       	movw	r6, r16
     d80:	88 24       	eor	r8, r8
     d82:	99 24       	eor	r9, r9
     d84:	98 01       	movw	r18, r16
     d86:	87 01       	movw	r16, r14
     d88:	20 70       	andi	r18, 0x00	; 0
     d8a:	30 70       	andi	r19, 0x00	; 0
     d8c:	a5 96       	adiw	r28, 0x25	; 37
     d8e:	0c af       	std	Y+60, r16	; 0x3c
     d90:	1d af       	std	Y+61, r17	; 0x3d
     d92:	2e af       	std	Y+62, r18	; 0x3e
     d94:	3f af       	std	Y+63, r19	; 0x3f
     d96:	a5 97       	sbiw	r28, 0x25	; 37
     d98:	c6 01       	movw	r24, r12
     d9a:	b5 01       	movw	r22, r10
     d9c:	a4 01       	movw	r20, r8
     d9e:	93 01       	movw	r18, r6
     da0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     da4:	7b 01       	movw	r14, r22
     da6:	8c 01       	movw	r16, r24
     da8:	c6 01       	movw	r24, r12
     daa:	b5 01       	movw	r22, r10
     dac:	a4 01       	movw	r20, r8
     dae:	93 01       	movw	r18, r6
     db0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     db4:	c9 01       	movw	r24, r18
     db6:	da 01       	movw	r26, r20
     db8:	1c 01       	movw	r2, r24
     dba:	2d 01       	movw	r4, r26
     dbc:	c2 01       	movw	r24, r4
     dbe:	b1 01       	movw	r22, r2
     dc0:	a5 96       	adiw	r28, 0x25	; 37
     dc2:	2c ad       	ldd	r18, Y+60	; 0x3c
     dc4:	3d ad       	ldd	r19, Y+61	; 0x3d
     dc6:	4e ad       	ldd	r20, Y+62	; 0x3e
     dc8:	5f ad       	ldd	r21, Y+63	; 0x3f
     dca:	a5 97       	sbiw	r28, 0x25	; 37
     dcc:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	87 01       	movw	r16, r14
     dd6:	ff 24       	eor	r15, r15
     dd8:	ee 24       	eor	r14, r14
     dda:	ad a4       	ldd	r10, Y+45	; 0x2d
     ddc:	be a4       	ldd	r11, Y+46	; 0x2e
     dde:	cf a4       	ldd	r12, Y+47	; 0x2f
     de0:	d8 a8       	ldd	r13, Y+48	; 0x30
     de2:	c6 01       	movw	r24, r12
     de4:	aa 27       	eor	r26, r26
     de6:	bb 27       	eor	r27, r27
     de8:	57 01       	movw	r10, r14
     dea:	68 01       	movw	r12, r16
     dec:	a8 2a       	or	r10, r24
     dee:	b9 2a       	or	r11, r25
     df0:	ca 2a       	or	r12, r26
     df2:	db 2a       	or	r13, r27
     df4:	a2 16       	cp	r10, r18
     df6:	b3 06       	cpc	r11, r19
     df8:	c4 06       	cpc	r12, r20
     dfa:	d5 06       	cpc	r13, r21
     dfc:	00 f5       	brcc	.+64     	; 0xe3e <__stack+0x5df>
     dfe:	08 94       	sec
     e00:	21 08       	sbc	r2, r1
     e02:	31 08       	sbc	r3, r1
     e04:	41 08       	sbc	r4, r1
     e06:	51 08       	sbc	r5, r1
     e08:	ed a8       	ldd	r14, Y+53	; 0x35
     e0a:	fe a8       	ldd	r15, Y+54	; 0x36
     e0c:	0f a9       	ldd	r16, Y+55	; 0x37
     e0e:	18 ad       	ldd	r17, Y+56	; 0x38
     e10:	ae 0c       	add	r10, r14
     e12:	bf 1c       	adc	r11, r15
     e14:	c0 1e       	adc	r12, r16
     e16:	d1 1e       	adc	r13, r17
     e18:	ae 14       	cp	r10, r14
     e1a:	bf 04       	cpc	r11, r15
     e1c:	c0 06       	cpc	r12, r16
     e1e:	d1 06       	cpc	r13, r17
     e20:	70 f0       	brcs	.+28     	; 0xe3e <__stack+0x5df>
     e22:	a2 16       	cp	r10, r18
     e24:	b3 06       	cpc	r11, r19
     e26:	c4 06       	cpc	r12, r20
     e28:	d5 06       	cpc	r13, r21
     e2a:	48 f4       	brcc	.+18     	; 0xe3e <__stack+0x5df>
     e2c:	08 94       	sec
     e2e:	21 08       	sbc	r2, r1
     e30:	31 08       	sbc	r3, r1
     e32:	41 08       	sbc	r4, r1
     e34:	51 08       	sbc	r5, r1
     e36:	ae 0c       	add	r10, r14
     e38:	bf 1c       	adc	r11, r15
     e3a:	c0 1e       	adc	r12, r16
     e3c:	d1 1e       	adc	r13, r17
     e3e:	a2 1a       	sub	r10, r18
     e40:	b3 0a       	sbc	r11, r19
     e42:	c4 0a       	sbc	r12, r20
     e44:	d5 0a       	sbc	r13, r21
     e46:	c6 01       	movw	r24, r12
     e48:	b5 01       	movw	r22, r10
     e4a:	a4 01       	movw	r20, r8
     e4c:	93 01       	movw	r18, r6
     e4e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     e52:	7b 01       	movw	r14, r22
     e54:	8c 01       	movw	r16, r24
     e56:	c6 01       	movw	r24, r12
     e58:	b5 01       	movw	r22, r10
     e5a:	a4 01       	movw	r20, r8
     e5c:	93 01       	movw	r18, r6
     e5e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
     e62:	c9 01       	movw	r24, r18
     e64:	da 01       	movw	r26, r20
     e66:	3c 01       	movw	r6, r24
     e68:	4d 01       	movw	r8, r26
     e6a:	c4 01       	movw	r24, r8
     e6c:	b3 01       	movw	r22, r6
     e6e:	a5 96       	adiw	r28, 0x25	; 37
     e70:	2c ad       	ldd	r18, Y+60	; 0x3c
     e72:	3d ad       	ldd	r19, Y+61	; 0x3d
     e74:	4e ad       	ldd	r20, Y+62	; 0x3e
     e76:	5f ad       	ldd	r21, Y+63	; 0x3f
     e78:	a5 97       	sbiw	r28, 0x25	; 37
     e7a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     e7e:	9b 01       	movw	r18, r22
     e80:	ac 01       	movw	r20, r24
     e82:	87 01       	movw	r16, r14
     e84:	ff 24       	eor	r15, r15
     e86:	ee 24       	eor	r14, r14
     e88:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e8c:	af a5       	ldd	r26, Y+47	; 0x2f
     e8e:	b8 a9       	ldd	r27, Y+48	; 0x30
     e90:	a0 70       	andi	r26, 0x00	; 0
     e92:	b0 70       	andi	r27, 0x00	; 0
     e94:	57 01       	movw	r10, r14
     e96:	68 01       	movw	r12, r16
     e98:	a8 2a       	or	r10, r24
     e9a:	b9 2a       	or	r11, r25
     e9c:	ca 2a       	or	r12, r26
     e9e:	db 2a       	or	r13, r27
     ea0:	a2 16       	cp	r10, r18
     ea2:	b3 06       	cpc	r11, r19
     ea4:	c4 06       	cpc	r12, r20
     ea6:	d5 06       	cpc	r13, r21
     ea8:	00 f5       	brcc	.+64     	; 0xeea <__stack+0x68b>
     eaa:	08 94       	sec
     eac:	61 08       	sbc	r6, r1
     eae:	71 08       	sbc	r7, r1
     eb0:	81 08       	sbc	r8, r1
     eb2:	91 08       	sbc	r9, r1
     eb4:	6d a9       	ldd	r22, Y+53	; 0x35
     eb6:	7e a9       	ldd	r23, Y+54	; 0x36
     eb8:	8f a9       	ldd	r24, Y+55	; 0x37
     eba:	98 ad       	ldd	r25, Y+56	; 0x38
     ebc:	a6 0e       	add	r10, r22
     ebe:	b7 1e       	adc	r11, r23
     ec0:	c8 1e       	adc	r12, r24
     ec2:	d9 1e       	adc	r13, r25
     ec4:	a6 16       	cp	r10, r22
     ec6:	b7 06       	cpc	r11, r23
     ec8:	c8 06       	cpc	r12, r24
     eca:	d9 06       	cpc	r13, r25
     ecc:	70 f0       	brcs	.+28     	; 0xeea <__stack+0x68b>
     ece:	a2 16       	cp	r10, r18
     ed0:	b3 06       	cpc	r11, r19
     ed2:	c4 06       	cpc	r12, r20
     ed4:	d5 06       	cpc	r13, r21
     ed6:	48 f4       	brcc	.+18     	; 0xeea <__stack+0x68b>
     ed8:	08 94       	sec
     eda:	61 08       	sbc	r6, r1
     edc:	71 08       	sbc	r7, r1
     ede:	81 08       	sbc	r8, r1
     ee0:	91 08       	sbc	r9, r1
     ee2:	a6 0e       	add	r10, r22
     ee4:	b7 1e       	adc	r11, r23
     ee6:	c8 1e       	adc	r12, r24
     ee8:	d9 1e       	adc	r13, r25
     eea:	d6 01       	movw	r26, r12
     eec:	c5 01       	movw	r24, r10
     eee:	82 1b       	sub	r24, r18
     ef0:	93 0b       	sbc	r25, r19
     ef2:	a4 0b       	sbc	r26, r20
     ef4:	b5 0b       	sbc	r27, r21
     ef6:	89 a7       	std	Y+41, r24	; 0x29
     ef8:	9a a7       	std	Y+42, r25	; 0x2a
     efa:	ab a7       	std	Y+43, r26	; 0x2b
     efc:	bc a7       	std	Y+44, r27	; 0x2c
     efe:	d1 01       	movw	r26, r2
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	64 01       	movw	r12, r8
     f06:	53 01       	movw	r10, r6
     f08:	a8 2a       	or	r10, r24
     f0a:	b9 2a       	or	r11, r25
     f0c:	ca 2a       	or	r12, r26
     f0e:	db 2a       	or	r13, r27
     f10:	25 96       	adiw	r28, 0x05	; 5
     f12:	ac ae       	std	Y+60, r10	; 0x3c
     f14:	bd ae       	std	Y+61, r11	; 0x3d
     f16:	ce ae       	std	Y+62, r12	; 0x3e
     f18:	df ae       	std	Y+63, r13	; 0x3f
     f1a:	25 97       	sbiw	r28, 0x05	; 5
     f1c:	86 01       	movw	r16, r12
     f1e:	75 01       	movw	r14, r10
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	e2 22       	and	r14, r18
     f2a:	f3 22       	and	r15, r19
     f2c:	04 23       	and	r16, r20
     f2e:	15 23       	and	r17, r21
     f30:	a6 01       	movw	r20, r12
     f32:	66 27       	eor	r22, r22
     f34:	77 27       	eor	r23, r23
     f36:	ad 96       	adiw	r28, 0x2d	; 45
     f38:	4c af       	std	Y+60, r20	; 0x3c
     f3a:	5d af       	std	Y+61, r21	; 0x3d
     f3c:	6e af       	std	Y+62, r22	; 0x3e
     f3e:	7f af       	std	Y+63, r23	; 0x3f
     f40:	ad 97       	sbiw	r28, 0x2d	; 45
     f42:	a9 a8       	ldd	r10, Y+49	; 0x31
     f44:	ba a8       	ldd	r11, Y+50	; 0x32
     f46:	cb a8       	ldd	r12, Y+51	; 0x33
     f48:	dc a8       	ldd	r13, Y+52	; 0x34
     f4a:	6f ef       	ldi	r22, 0xFF	; 255
     f4c:	7f ef       	ldi	r23, 0xFF	; 255
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a6 22       	and	r10, r22
     f54:	b7 22       	and	r11, r23
     f56:	c8 22       	and	r12, r24
     f58:	d9 22       	and	r13, r25
     f5a:	89 a9       	ldd	r24, Y+49	; 0x31
     f5c:	9a a9       	ldd	r25, Y+50	; 0x32
     f5e:	ab a9       	ldd	r26, Y+51	; 0x33
     f60:	bc a9       	ldd	r27, Y+52	; 0x34
     f62:	1d 01       	movw	r2, r26
     f64:	44 24       	eor	r4, r4
     f66:	55 24       	eor	r5, r5
     f68:	c8 01       	movw	r24, r16
     f6a:	b7 01       	movw	r22, r14
     f6c:	a6 01       	movw	r20, r12
     f6e:	95 01       	movw	r18, r10
     f70:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     f74:	a9 96       	adiw	r28, 0x29	; 41
     f76:	6c af       	std	Y+60, r22	; 0x3c
     f78:	7d af       	std	Y+61, r23	; 0x3d
     f7a:	8e af       	std	Y+62, r24	; 0x3e
     f7c:	9f af       	std	Y+63, r25	; 0x3f
     f7e:	a9 97       	sbiw	r28, 0x29	; 41
     f80:	c8 01       	movw	r24, r16
     f82:	b7 01       	movw	r22, r14
     f84:	a2 01       	movw	r20, r4
     f86:	91 01       	movw	r18, r2
     f88:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     f8c:	3b 01       	movw	r6, r22
     f8e:	4c 01       	movw	r8, r24
     f90:	ad 96       	adiw	r28, 0x2d	; 45
     f92:	6c ad       	ldd	r22, Y+60	; 0x3c
     f94:	7d ad       	ldd	r23, Y+61	; 0x3d
     f96:	8e ad       	ldd	r24, Y+62	; 0x3e
     f98:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9a:	ad 97       	sbiw	r28, 0x2d	; 45
     f9c:	a6 01       	movw	r20, r12
     f9e:	95 01       	movw	r18, r10
     fa0:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     fa4:	7b 01       	movw	r14, r22
     fa6:	8c 01       	movw	r16, r24
     fa8:	ad 96       	adiw	r28, 0x2d	; 45
     faa:	6c ad       	ldd	r22, Y+60	; 0x3c
     fac:	7d ad       	ldd	r23, Y+61	; 0x3d
     fae:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb2:	ad 97       	sbiw	r28, 0x2d	; 45
     fb4:	a2 01       	movw	r20, r4
     fb6:	91 01       	movw	r18, r2
     fb8:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
     fbc:	5b 01       	movw	r10, r22
     fbe:	6c 01       	movw	r12, r24
     fc0:	a8 01       	movw	r20, r16
     fc2:	97 01       	movw	r18, r14
     fc4:	26 0d       	add	r18, r6
     fc6:	37 1d       	adc	r19, r7
     fc8:	48 1d       	adc	r20, r8
     fca:	59 1d       	adc	r21, r9
     fcc:	a9 96       	adiw	r28, 0x29	; 41
     fce:	6c ac       	ldd	r6, Y+60	; 0x3c
     fd0:	7d ac       	ldd	r7, Y+61	; 0x3d
     fd2:	8e ac       	ldd	r8, Y+62	; 0x3e
     fd4:	9f ac       	ldd	r9, Y+63	; 0x3f
     fd6:	a9 97       	sbiw	r28, 0x29	; 41
     fd8:	c4 01       	movw	r24, r8
     fda:	aa 27       	eor	r26, r26
     fdc:	bb 27       	eor	r27, r27
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	4a 1f       	adc	r20, r26
     fe4:	5b 1f       	adc	r21, r27
     fe6:	2e 15       	cp	r18, r14
     fe8:	3f 05       	cpc	r19, r15
     fea:	40 07       	cpc	r20, r16
     fec:	51 07       	cpc	r21, r17
     fee:	48 f4       	brcc	.+18     	; 0x1002 <__stack+0x7a3>
     ff0:	e1 2c       	mov	r14, r1
     ff2:	f1 2c       	mov	r15, r1
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	06 2f       	mov	r16, r22
     ff8:	11 2d       	mov	r17, r1
     ffa:	ae 0c       	add	r10, r14
     ffc:	bf 1c       	adc	r11, r15
     ffe:	c0 1e       	adc	r12, r16
    1000:	d1 1e       	adc	r13, r17
    1002:	ca 01       	movw	r24, r20
    1004:	aa 27       	eor	r26, r26
    1006:	bb 27       	eor	r27, r27
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	6a 0d       	add	r22, r10
    100e:	7b 1d       	adc	r23, r11
    1010:	8c 1d       	adc	r24, r12
    1012:	9d 1d       	adc	r25, r13
    1014:	69 a4       	ldd	r6, Y+41	; 0x29
    1016:	7a a4       	ldd	r7, Y+42	; 0x2a
    1018:	8b a4       	ldd	r8, Y+43	; 0x2b
    101a:	9c a4       	ldd	r9, Y+44	; 0x2c
    101c:	66 16       	cp	r6, r22
    101e:	77 06       	cpc	r7, r23
    1020:	88 06       	cpc	r8, r24
    1022:	99 06       	cpc	r9, r25
    1024:	50 f1       	brcs	.+84     	; 0x107a <__stack+0x81b>
    1026:	66 15       	cp	r22, r6
    1028:	77 05       	cpc	r23, r7
    102a:	88 05       	cpc	r24, r8
    102c:	99 05       	cpc	r25, r9
    102e:	09 f0       	breq	.+2      	; 0x1032 <__stack+0x7d3>
    1030:	4d c0       	rjmp	.+154    	; 0x10cc <__stack+0x86d>
    1032:	d9 01       	movw	r26, r18
    1034:	99 27       	eor	r25, r25
    1036:	88 27       	eor	r24, r24
    1038:	a9 96       	adiw	r28, 0x29	; 41
    103a:	2c ad       	ldd	r18, Y+60	; 0x3c
    103c:	3d ad       	ldd	r19, Y+61	; 0x3d
    103e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1040:	5f ad       	ldd	r21, Y+63	; 0x3f
    1042:	a9 97       	sbiw	r28, 0x29	; 41
    1044:	40 70       	andi	r20, 0x00	; 0
    1046:	50 70       	andi	r21, 0x00	; 0
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	a4 1f       	adc	r26, r20
    104e:	b5 1f       	adc	r27, r21
    1050:	21 96       	adiw	r28, 0x01	; 1
    1052:	2c ad       	ldd	r18, Y+60	; 0x3c
    1054:	3d ad       	ldd	r19, Y+61	; 0x3d
    1056:	4e ad       	ldd	r20, Y+62	; 0x3e
    1058:	5f ad       	ldd	r21, Y+63	; 0x3f
    105a:	21 97       	sbiw	r28, 0x01	; 1
    105c:	e2 96       	adiw	r28, 0x32	; 50
    105e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1060:	e2 97       	sbiw	r28, 0x32	; 50
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__stack+0x80d>
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	44 1f       	adc	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	0a 94       	dec	r0
    106e:	d2 f7       	brpl	.-12     	; 0x1064 <__stack+0x805>
    1070:	28 17       	cp	r18, r24
    1072:	39 07       	cpc	r19, r25
    1074:	4a 07       	cpc	r20, r26
    1076:	5b 07       	cpc	r21, r27
    1078:	48 f5       	brcc	.+82     	; 0x10cc <__stack+0x86d>
    107a:	25 96       	adiw	r28, 0x05	; 5
    107c:	0c ad       	ldd	r16, Y+60	; 0x3c
    107e:	1d ad       	ldd	r17, Y+61	; 0x3d
    1080:	2e ad       	ldd	r18, Y+62	; 0x3e
    1082:	3f ad       	ldd	r19, Y+63	; 0x3f
    1084:	25 97       	sbiw	r28, 0x05	; 5
    1086:	01 50       	subi	r16, 0x01	; 1
    1088:	10 40       	sbci	r17, 0x00	; 0
    108a:	20 40       	sbci	r18, 0x00	; 0
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	25 96       	adiw	r28, 0x05	; 5
    1090:	0c af       	std	Y+60, r16	; 0x3c
    1092:	1d af       	std	Y+61, r17	; 0x3d
    1094:	2e af       	std	Y+62, r18	; 0x3e
    1096:	3f af       	std	Y+63, r19	; 0x3f
    1098:	25 97       	sbiw	r28, 0x05	; 5
    109a:	18 c0       	rjmp	.+48     	; 0x10cc <__stack+0x86d>
    109c:	66 24       	eor	r6, r6
    109e:	77 24       	eor	r7, r7
    10a0:	43 01       	movw	r8, r6
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	25 96       	adiw	r28, 0x05	; 5
    10ac:	2c af       	std	Y+60, r18	; 0x3c
    10ae:	3d af       	std	Y+61, r19	; 0x3d
    10b0:	4e af       	std	Y+62, r20	; 0x3e
    10b2:	5f af       	std	Y+63, r21	; 0x3f
    10b4:	25 97       	sbiw	r28, 0x05	; 5
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__stack+0x873>
    10b8:	66 24       	eor	r6, r6
    10ba:	77 24       	eor	r7, r7
    10bc:	43 01       	movw	r8, r6
    10be:	25 96       	adiw	r28, 0x05	; 5
    10c0:	1c ae       	std	Y+60, r1	; 0x3c
    10c2:	1d ae       	std	Y+61, r1	; 0x3d
    10c4:	1e ae       	std	Y+62, r1	; 0x3e
    10c6:	1f ae       	std	Y+63, r1	; 0x3f
    10c8:	25 97       	sbiw	r28, 0x05	; 5
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <__stack+0x873>
    10cc:	66 24       	eor	r6, r6
    10ce:	77 24       	eor	r7, r7
    10d0:	43 01       	movw	r8, r6
    10d2:	fe 01       	movw	r30, r28
    10d4:	b1 96       	adiw	r30, 0x21	; 33
    10d6:	88 e0       	ldi	r24, 0x08	; 8
    10d8:	df 01       	movw	r26, r30
    10da:	1d 92       	st	X+, r1
    10dc:	8a 95       	dec	r24
    10de:	e9 f7       	brne	.-6      	; 0x10da <__stack+0x87b>
    10e0:	25 96       	adiw	r28, 0x05	; 5
    10e2:	ac ac       	ldd	r10, Y+60	; 0x3c
    10e4:	bd ac       	ldd	r11, Y+61	; 0x3d
    10e6:	ce ac       	ldd	r12, Y+62	; 0x3e
    10e8:	df ac       	ldd	r13, Y+63	; 0x3f
    10ea:	25 97       	sbiw	r28, 0x05	; 5
    10ec:	a9 a2       	std	Y+33, r10	; 0x21
    10ee:	ba a2       	std	Y+34, r11	; 0x22
    10f0:	cb a2       	std	Y+35, r12	; 0x23
    10f2:	dc a2       	std	Y+36, r13	; 0x24
    10f4:	6d a2       	std	Y+37, r6	; 0x25
    10f6:	7e a2       	std	Y+38, r7	; 0x26
    10f8:	8f a2       	std	Y+39, r8	; 0x27
    10fa:	98 a6       	std	Y+40, r9	; 0x28
    10fc:	22 96       	adiw	r28, 0x02	; 2
    10fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    1100:	22 97       	sbiw	r28, 0x02	; 2
    1102:	3a a1       	ldd	r19, Y+34	; 0x22
    1104:	4b a1       	ldd	r20, Y+35	; 0x23
    1106:	5c a1       	ldd	r21, Y+36	; 0x24
    1108:	66 2d       	mov	r22, r6
    110a:	7e a1       	ldd	r23, Y+38	; 0x26
    110c:	df a0       	ldd	r13, Y+39	; 0x27
    110e:	98 a5       	ldd	r25, Y+40	; 0x28
    1110:	e1 96       	adiw	r28, 0x31	; 49
    1112:	ec ac       	ldd	r14, Y+60	; 0x3c
    1114:	fd ac       	ldd	r15, Y+61	; 0x3d
    1116:	0e ad       	ldd	r16, Y+62	; 0x3e
    1118:	1f ad       	ldd	r17, Y+63	; 0x3f
    111a:	e1 97       	sbiw	r28, 0x31	; 49
    111c:	e1 14       	cp	r14, r1
    111e:	f1 04       	cpc	r15, r1
    1120:	01 05       	cpc	r16, r1
    1122:	11 05       	cpc	r17, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <__stack+0x8c9>
    1126:	56 c0       	rjmp	.+172    	; 0x11d4 <__stack+0x975>
    1128:	21 95       	neg	r18
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	12 16       	cp	r1, r18
    112e:	08 f0       	brcs	.+2      	; 0x1132 <__stack+0x8d3>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	31 95       	neg	r19
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	13 16       	cp	r1, r19
    1138:	08 f0       	brcs	.+2      	; 0x113c <__stack+0x8dd>
    113a:	e0 e0       	ldi	r30, 0x00	; 0
    113c:	93 2e       	mov	r9, r19
    113e:	98 1a       	sub	r9, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	39 15       	cp	r19, r9
    1144:	08 f0       	brcs	.+2      	; 0x1148 <__stack+0x8e9>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	e8 2b       	or	r30, r24
    114a:	41 95       	neg	r20
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	14 16       	cp	r1, r20
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__stack+0x8f5>
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	a4 2e       	mov	r10, r20
    1156:	ae 1a       	sub	r10, r30
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	4a 15       	cp	r20, r10
    115c:	08 f0       	brcs	.+2      	; 0x1160 <__stack+0x901>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	f8 2b       	or	r31, r24
    1162:	51 95       	neg	r21
    1164:	e1 e0       	ldi	r30, 0x01	; 1
    1166:	15 16       	cp	r1, r21
    1168:	08 f0       	brcs	.+2      	; 0x116c <__stack+0x90d>
    116a:	e0 e0       	ldi	r30, 0x00	; 0
    116c:	b5 2e       	mov	r11, r21
    116e:	bf 1a       	sub	r11, r31
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	5b 15       	cp	r21, r11
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__stack+0x919>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	e8 2b       	or	r30, r24
    117a:	61 95       	neg	r22
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	16 16       	cp	r1, r22
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__stack+0x925>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	a6 2f       	mov	r26, r22
    1186:	ae 1b       	sub	r26, r30
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	6a 17       	cp	r22, r26
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__stack+0x931>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	f8 2b       	or	r31, r24
    1192:	71 95       	neg	r23
    1194:	e1 e0       	ldi	r30, 0x01	; 1
    1196:	17 16       	cp	r1, r23
    1198:	08 f0       	brcs	.+2      	; 0x119c <__stack+0x93d>
    119a:	e0 e0       	ldi	r30, 0x00	; 0
    119c:	c7 2e       	mov	r12, r23
    119e:	cf 1a       	sub	r12, r31
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	7c 15       	cp	r23, r12
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <__stack+0x949>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	e8 2b       	or	r30, r24
    11aa:	8d 2d       	mov	r24, r13
    11ac:	81 95       	neg	r24
    11ae:	f1 e0       	ldi	r31, 0x01	; 1
    11b0:	18 16       	cp	r1, r24
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__stack+0x957>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	d8 2e       	mov	r13, r24
    11b8:	de 1a       	sub	r13, r30
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	8d 15       	cp	r24, r13
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__stack+0x963>
    11c0:	e0 e0       	ldi	r30, 0x00	; 0
    11c2:	fe 2b       	or	r31, r30
    11c4:	89 2f       	mov	r24, r25
    11c6:	81 95       	neg	r24
    11c8:	39 2d       	mov	r19, r9
    11ca:	a5 01       	movw	r20, r10
    11cc:	6a 2f       	mov	r22, r26
    11ce:	7c 2d       	mov	r23, r12
    11d0:	98 2f       	mov	r25, r24
    11d2:	9f 1b       	sub	r25, r31
    11d4:	8d 2d       	mov	r24, r13
    11d6:	ce 58       	subi	r28, 0x8E	; 142
    11d8:	df 4f       	sbci	r29, 0xFF	; 255
    11da:	e2 e1       	ldi	r30, 0x12	; 18
    11dc:	0c 94 e5 36 	jmp	0x6dca	; 0x6dca <__epilogue_restores__>

000011e0 <__moddi3>:
    11e0:	a7 e7       	ldi	r26, 0x77	; 119
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 ef       	ldi	r30, 0xF6	; 246
    11e6:	f8 e0       	ldi	r31, 0x08	; 8
    11e8:	0c 94 c9 36 	jmp	0x6d92	; 0x6d92 <__prologue_saves__>
    11ec:	98 2e       	mov	r9, r24
    11ee:	89 2e       	mov	r8, r25
    11f0:	71 2e       	mov	r7, r17
    11f2:	88 e0       	ldi	r24, 0x08	; 8
    11f4:	fe 01       	movw	r30, r28
    11f6:	31 96       	adiw	r30, 0x01	; 1
    11f8:	df 01       	movw	r26, r30
    11fa:	68 2e       	mov	r6, r24
    11fc:	1d 92       	st	X+, r1
    11fe:	6a 94       	dec	r6
    1200:	e9 f7       	brne	.-6      	; 0x11fc <__moddi3+0x1c>
    1202:	29 83       	std	Y+1, r18	; 0x01
    1204:	3a 83       	std	Y+2, r19	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
    1208:	5c 83       	std	Y+4, r21	; 0x04
    120a:	6d 83       	std	Y+5, r22	; 0x05
    120c:	7e 83       	std	Y+6, r23	; 0x06
    120e:	9f 82       	std	Y+7, r9	; 0x07
    1210:	98 87       	std	Y+8, r25	; 0x08
    1212:	fe 01       	movw	r30, r28
    1214:	39 96       	adiw	r30, 0x09	; 9
    1216:	df 01       	movw	r26, r30
    1218:	1d 92       	st	X+, r1
    121a:	8a 95       	dec	r24
    121c:	e9 f7       	brne	.-6      	; 0x1218 <__moddi3+0x38>
    121e:	a9 86       	std	Y+9, r10	; 0x09
    1220:	ba 86       	std	Y+10, r11	; 0x0a
    1222:	cb 86       	std	Y+11, r12	; 0x0b
    1224:	dc 86       	std	Y+12, r13	; 0x0c
    1226:	ed 86       	std	Y+13, r14	; 0x0d
    1228:	fe 86       	std	Y+14, r15	; 0x0e
    122a:	0f 87       	std	Y+15, r16	; 0x0f
    122c:	18 8b       	std	Y+16, r17	; 0x10
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	af 81       	ldd	r26, Y+7	; 0x07
    1234:	b8 85       	ldd	r27, Y+8	; 0x08
    1236:	b7 fd       	sbrc	r27, 7
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <__moddi3+0x68>
    123a:	e1 96       	adiw	r28, 0x31	; 49
    123c:	1c ae       	std	Y+60, r1	; 0x3c
    123e:	1d ae       	std	Y+61, r1	; 0x3d
    1240:	1e ae       	std	Y+62, r1	; 0x3e
    1242:	1f ae       	std	Y+63, r1	; 0x3f
    1244:	e1 97       	sbiw	r28, 0x31	; 49
    1246:	64 c0       	rjmp	.+200    	; 0x1310 <__moddi3+0x130>
    1248:	21 95       	neg	r18
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	12 16       	cp	r1, r18
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__moddi3+0x72>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	31 95       	neg	r19
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	13 16       	cp	r1, r19
    1258:	08 f0       	brcs	.+2      	; 0x125c <__moddi3+0x7c>
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	b3 2f       	mov	r27, r19
    125e:	b8 1b       	sub	r27, r24
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	3b 17       	cp	r19, r27
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__moddi3+0x88>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	98 2b       	or	r25, r24
    126a:	41 95       	neg	r20
    126c:	31 e0       	ldi	r19, 0x01	; 1
    126e:	14 16       	cp	r1, r20
    1270:	08 f0       	brcs	.+2      	; 0x1274 <__moddi3+0x94>
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	a4 2f       	mov	r26, r20
    1276:	a9 1b       	sub	r26, r25
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	4a 17       	cp	r20, r26
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0xa0>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	38 2b       	or	r19, r24
    1282:	51 95       	neg	r21
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	15 16       	cp	r1, r21
    1288:	08 f0       	brcs	.+2      	; 0x128c <__moddi3+0xac>
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f5 2f       	mov	r31, r21
    128e:	f3 1b       	sub	r31, r19
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	5f 17       	cp	r21, r31
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__moddi3+0xb8>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	98 2b       	or	r25, r24
    129a:	61 95       	neg	r22
    129c:	31 e0       	ldi	r19, 0x01	; 1
    129e:	16 16       	cp	r1, r22
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__moddi3+0xc4>
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	e6 2f       	mov	r30, r22
    12a6:	e9 1b       	sub	r30, r25
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	6e 17       	cp	r22, r30
    12ac:	08 f0       	brcs	.+2      	; 0x12b0 <__moddi3+0xd0>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	38 2b       	or	r19, r24
    12b2:	71 95       	neg	r23
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	17 16       	cp	r1, r23
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__moddi3+0xdc>
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	57 2f       	mov	r21, r23
    12be:	53 1b       	sub	r21, r19
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	75 17       	cp	r23, r21
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <__moddi3+0xe8>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	48 2b       	or	r20, r24
    12ca:	89 2d       	mov	r24, r9
    12cc:	81 95       	neg	r24
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	18 16       	cp	r1, r24
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__moddi3+0xf6>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	68 2e       	mov	r6, r24
    12d8:	64 1a       	sub	r6, r20
    12da:	46 2d       	mov	r20, r6
    12dc:	31 e0       	ldi	r19, 0x01	; 1
    12de:	86 15       	cp	r24, r6
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <__moddi3+0x104>
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	93 2b       	or	r25, r19
    12e6:	88 2d       	mov	r24, r8
    12e8:	81 95       	neg	r24
    12ea:	89 1b       	sub	r24, r25
    12ec:	29 83       	std	Y+1, r18	; 0x01
    12ee:	ba 83       	std	Y+2, r27	; 0x02
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	fc 83       	std	Y+4, r31	; 0x04
    12f4:	ed 83       	std	Y+5, r30	; 0x05
    12f6:	5e 83       	std	Y+6, r21	; 0x06
    12f8:	4f 83       	std	Y+7, r20	; 0x07
    12fa:	88 87       	std	Y+8, r24	; 0x08
    12fc:	2f ef       	ldi	r18, 0xFF	; 255
    12fe:	3f ef       	ldi	r19, 0xFF	; 255
    1300:	4f ef       	ldi	r20, 0xFF	; 255
    1302:	5f ef       	ldi	r21, 0xFF	; 255
    1304:	e1 96       	adiw	r28, 0x31	; 49
    1306:	2c af       	std	Y+60, r18	; 0x3c
    1308:	3d af       	std	Y+61, r19	; 0x3d
    130a:	4e af       	std	Y+62, r20	; 0x3e
    130c:	5f af       	std	Y+63, r21	; 0x3f
    130e:	e1 97       	sbiw	r28, 0x31	; 49
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	af 85       	ldd	r26, Y+15	; 0x0f
    1316:	b8 89       	ldd	r27, Y+16	; 0x10
    1318:	b7 ff       	sbrs	r27, 7
    131a:	5a c0       	rjmp	.+180    	; 0x13d0 <__moddi3+0x1f0>
    131c:	a1 94       	neg	r10
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	1a 14       	cp	r1, r10
    1322:	08 f0       	brcs	.+2      	; 0x1326 <__moddi3+0x146>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	b1 94       	neg	r11
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	1b 14       	cp	r1, r11
    132c:	08 f0       	brcs	.+2      	; 0x1330 <__moddi3+0x150>
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	6b 2d       	mov	r22, r11
    1332:	68 1b       	sub	r22, r24
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	b6 16       	cp	r11, r22
    1338:	08 f0       	brcs	.+2      	; 0x133c <__moddi3+0x15c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	98 2b       	or	r25, r24
    133e:	c1 94       	neg	r12
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	1c 14       	cp	r1, r12
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__moddi3+0x168>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	5c 2d       	mov	r21, r12
    134a:	59 1b       	sub	r21, r25
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	c5 16       	cp	r12, r21
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__moddi3+0x174>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	28 2b       	or	r18, r24
    1356:	d1 94       	neg	r13
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	1d 14       	cp	r1, r13
    135c:	08 f0       	brcs	.+2      	; 0x1360 <__moddi3+0x180>
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	4d 2d       	mov	r20, r13
    1362:	42 1b       	sub	r20, r18
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	d4 16       	cp	r13, r20
    1368:	08 f0       	brcs	.+2      	; 0x136c <__moddi3+0x18c>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	98 2b       	or	r25, r24
    136e:	e1 94       	neg	r14
    1370:	21 e0       	ldi	r18, 0x01	; 1
    1372:	1e 14       	cp	r1, r14
    1374:	08 f0       	brcs	.+2      	; 0x1378 <__moddi3+0x198>
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	3e 2d       	mov	r19, r14
    137a:	39 1b       	sub	r19, r25
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	e3 16       	cp	r14, r19
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__moddi3+0x1a4>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	28 2b       	or	r18, r24
    1386:	f1 94       	neg	r15
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	1f 14       	cp	r1, r15
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__moddi3+0x1b0>
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	7f 2d       	mov	r23, r15
    1392:	72 1b       	sub	r23, r18
    1394:	27 2f       	mov	r18, r23
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	f7 16       	cp	r15, r23
    139a:	08 f0       	brcs	.+2      	; 0x139e <__moddi3+0x1be>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	98 2b       	or	r25, r24
    13a0:	01 95       	neg	r16
    13a2:	11 e0       	ldi	r17, 0x01	; 1
    13a4:	10 16       	cp	r1, r16
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <__moddi3+0x1ca>
    13a8:	10 e0       	ldi	r17, 0x00	; 0
    13aa:	80 2f       	mov	r24, r16
    13ac:	89 1b       	sub	r24, r25
    13ae:	98 2f       	mov	r25, r24
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	09 17       	cp	r16, r25
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__moddi3+0x1d8>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	18 2b       	or	r17, r24
    13ba:	87 2d       	mov	r24, r7
    13bc:	81 95       	neg	r24
    13be:	81 1b       	sub	r24, r17
    13c0:	a9 86       	std	Y+9, r10	; 0x09
    13c2:	6a 87       	std	Y+10, r22	; 0x0a
    13c4:	5b 87       	std	Y+11, r21	; 0x0b
    13c6:	4c 87       	std	Y+12, r20	; 0x0c
    13c8:	3d 87       	std	Y+13, r19	; 0x0d
    13ca:	2e 87       	std	Y+14, r18	; 0x0e
    13cc:	9f 87       	std	Y+15, r25	; 0x0f
    13ce:	88 8b       	std	Y+16, r24	; 0x10
    13d0:	99 81       	ldd	r25, Y+1	; 0x01
    13d2:	2a 81       	ldd	r18, Y+2	; 0x02
    13d4:	3b 81       	ldd	r19, Y+3	; 0x03
    13d6:	4c 81       	ldd	r20, Y+4	; 0x04
    13d8:	5d 81       	ldd	r21, Y+5	; 0x05
    13da:	6e 81       	ldd	r22, Y+6	; 0x06
    13dc:	7f 81       	ldd	r23, Y+7	; 0x07
    13de:	a8 85       	ldd	r26, Y+8	; 0x08
    13e0:	b9 85       	ldd	r27, Y+9	; 0x09
    13e2:	1a 85       	ldd	r17, Y+10	; 0x0a
    13e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    13e6:	fc 84       	ldd	r15, Y+12	; 0x0c
    13e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ea:	de 84       	ldd	r13, Y+14	; 0x0e
    13ec:	cf 84       	ldd	r12, Y+15	; 0x0f
    13ee:	b8 88       	ldd	r11, Y+16	; 0x10
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	e9 e1       	ldi	r30, 0x19	; 25
    13f4:	8e 2e       	mov	r8, r30
    13f6:	91 2c       	mov	r9, r1
    13f8:	8c 0e       	add	r8, r28
    13fa:	9d 1e       	adc	r9, r29
    13fc:	f4 01       	movw	r30, r8
    13fe:	68 2e       	mov	r6, r24
    1400:	11 92       	st	Z+, r1
    1402:	6a 94       	dec	r6
    1404:	e9 f7       	brne	.-6      	; 0x1400 <__moddi3+0x220>
    1406:	99 8f       	std	Y+25, r25	; 0x19
    1408:	2a 8f       	std	Y+26, r18	; 0x1a
    140a:	3b 8f       	std	Y+27, r19	; 0x1b
    140c:	4c 8f       	std	Y+28, r20	; 0x1c
    140e:	5d 8f       	std	Y+29, r21	; 0x1d
    1410:	6e 8f       	std	Y+30, r22	; 0x1e
    1412:	7f 8f       	std	Y+31, r23	; 0x1f
    1414:	a8 a3       	std	Y+32, r26	; 0x20
    1416:	9e 01       	movw	r18, r28
    1418:	2f 5d       	subi	r18, 0xDF	; 223
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	f9 01       	movw	r30, r18
    141e:	11 92       	st	Z+, r1
    1420:	8a 95       	dec	r24
    1422:	e9 f7       	brne	.-6      	; 0x141e <__moddi3+0x23e>
    1424:	b9 a3       	std	Y+33, r27	; 0x21
    1426:	1a a3       	std	Y+34, r17	; 0x22
    1428:	0b a3       	std	Y+35, r16	; 0x23
    142a:	fc a2       	std	Y+36, r15	; 0x24
    142c:	ed a2       	std	Y+37, r14	; 0x25
    142e:	de a2       	std	Y+38, r13	; 0x26
    1430:	cf a2       	std	Y+39, r12	; 0x27
    1432:	b8 a6       	std	Y+40, r11	; 0x28
    1434:	29 a0       	ldd	r2, Y+33	; 0x21
    1436:	3a a0       	ldd	r3, Y+34	; 0x22
    1438:	4b a0       	ldd	r4, Y+35	; 0x23
    143a:	5c a0       	ldd	r5, Y+36	; 0x24
    143c:	ad a0       	ldd	r10, Y+37	; 0x25
    143e:	be a0       	ldd	r11, Y+38	; 0x26
    1440:	cf a0       	ldd	r12, Y+39	; 0x27
    1442:	d8 a4       	ldd	r13, Y+40	; 0x28
    1444:	49 8d       	ldd	r20, Y+25	; 0x19
    1446:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1448:	6b 8d       	ldd	r22, Y+27	; 0x1b
    144a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    144c:	e5 96       	adiw	r28, 0x35	; 53
    144e:	4f af       	std	Y+63, r20	; 0x3f
    1450:	e5 97       	sbiw	r28, 0x35	; 53
    1452:	e6 96       	adiw	r28, 0x36	; 54
    1454:	5f af       	std	Y+63, r21	; 0x3f
    1456:	e6 97       	sbiw	r28, 0x36	; 54
    1458:	e7 96       	adiw	r28, 0x37	; 55
    145a:	6f af       	std	Y+63, r22	; 0x3f
    145c:	e7 97       	sbiw	r28, 0x37	; 55
    145e:	e8 96       	adiw	r28, 0x38	; 56
    1460:	7f af       	std	Y+63, r23	; 0x3f
    1462:	e8 97       	sbiw	r28, 0x38	; 56
    1464:	e8 96       	adiw	r28, 0x38	; 56
    1466:	6c ac       	ldd	r6, Y+60	; 0x3c
    1468:	7d ac       	ldd	r7, Y+61	; 0x3d
    146a:	8e ac       	ldd	r8, Y+62	; 0x3e
    146c:	9f ac       	ldd	r9, Y+63	; 0x3f
    146e:	e8 97       	sbiw	r28, 0x38	; 56
    1470:	2d 96       	adiw	r28, 0x0d	; 13
    1472:	6c ae       	std	Y+60, r6	; 0x3c
    1474:	7d ae       	std	Y+61, r7	; 0x3d
    1476:	8e ae       	std	Y+62, r8	; 0x3e
    1478:	9f ae       	std	Y+63, r9	; 0x3f
    147a:	2d 97       	sbiw	r28, 0x0d	; 13
    147c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    147e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1480:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1482:	38 a1       	ldd	r19, Y+32	; 0x20
    1484:	3c 01       	movw	r6, r24
    1486:	49 01       	movw	r8, r18
    1488:	61 96       	adiw	r28, 0x11	; 17
    148a:	6c ae       	std	Y+60, r6	; 0x3c
    148c:	7d ae       	std	Y+61, r7	; 0x3d
    148e:	8e ae       	std	Y+62, r8	; 0x3e
    1490:	9f ae       	std	Y+63, r9	; 0x3f
    1492:	61 97       	sbiw	r28, 0x11	; 17
    1494:	a1 14       	cp	r10, r1
    1496:	b1 04       	cpc	r11, r1
    1498:	c1 04       	cpc	r12, r1
    149a:	d1 04       	cpc	r13, r1
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__moddi3+0x2c0>
    149e:	28 c3       	rjmp	.+1616   	; 0x1af0 <__moddi3+0x910>
    14a0:	62 14       	cp	r6, r2
    14a2:	73 04       	cpc	r7, r3
    14a4:	84 04       	cpc	r8, r4
    14a6:	95 04       	cpc	r9, r5
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <__moddi3+0x2cc>
    14aa:	0e c1       	rjmp	.+540    	; 0x16c8 <__moddi3+0x4e8>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	20 16       	cp	r2, r16
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	30 06       	cpc	r3, r16
    14b4:	01 e0       	ldi	r16, 0x01	; 1
    14b6:	40 06       	cpc	r4, r16
    14b8:	00 e0       	ldi	r16, 0x00	; 0
    14ba:	50 06       	cpc	r5, r16
    14bc:	88 f4       	brcc	.+34     	; 0x14e0 <__moddi3+0x300>
    14be:	1f ef       	ldi	r17, 0xFF	; 255
    14c0:	21 16       	cp	r2, r17
    14c2:	31 04       	cpc	r3, r1
    14c4:	41 04       	cpc	r4, r1
    14c6:	51 04       	cpc	r5, r1
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <__moddi3+0x2f8>
    14ca:	30 f0       	brcs	.+12     	; 0x14d8 <__moddi3+0x2f8>
    14cc:	88 e0       	ldi	r24, 0x08	; 8
    14ce:	e8 2e       	mov	r14, r24
    14d0:	f1 2c       	mov	r15, r1
    14d2:	01 2d       	mov	r16, r1
    14d4:	11 2d       	mov	r17, r1
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <__moddi3+0x328>
    14d8:	ee 24       	eor	r14, r14
    14da:	ff 24       	eor	r15, r15
    14dc:	87 01       	movw	r16, r14
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <__moddi3+0x328>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	22 16       	cp	r2, r18
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	32 06       	cpc	r3, r18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	42 06       	cpc	r4, r18
    14ec:	21 e0       	ldi	r18, 0x01	; 1
    14ee:	52 06       	cpc	r5, r18
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <__moddi3+0x31e>
    14f2:	b8 e1       	ldi	r27, 0x18	; 24
    14f4:	eb 2e       	mov	r14, r27
    14f6:	f1 2c       	mov	r15, r1
    14f8:	01 2d       	mov	r16, r1
    14fa:	11 2d       	mov	r17, r1
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <__moddi3+0x328>
    14fe:	a0 e1       	ldi	r26, 0x10	; 16
    1500:	ea 2e       	mov	r14, r26
    1502:	f1 2c       	mov	r15, r1
    1504:	01 2d       	mov	r16, r1
    1506:	11 2d       	mov	r17, r1
    1508:	d2 01       	movw	r26, r4
    150a:	c1 01       	movw	r24, r2
    150c:	0e 2c       	mov	r0, r14
    150e:	04 c0       	rjmp	.+8      	; 0x1518 <__moddi3+0x338>
    1510:	b6 95       	lsr	r27
    1512:	a7 95       	ror	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	0a 94       	dec	r0
    151a:	d2 f7       	brpl	.-12     	; 0x1510 <__moddi3+0x330>
    151c:	8f 52       	subi	r24, 0x2F	; 47
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	dc 01       	movw	r26, r24
    1522:	2c 91       	ld	r18, X
    1524:	80 e2       	ldi	r24, 0x20	; 32
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	8e 19       	sub	r24, r14
    152e:	9f 09       	sbc	r25, r15
    1530:	a0 0b       	sbc	r26, r16
    1532:	b1 0b       	sbc	r27, r17
    1534:	5c 01       	movw	r10, r24
    1536:	6d 01       	movw	r12, r26
    1538:	a2 1a       	sub	r10, r18
    153a:	b1 08       	sbc	r11, r1
    153c:	c1 08       	sbc	r12, r1
    153e:	d1 08       	sbc	r13, r1
    1540:	65 96       	adiw	r28, 0x15	; 21
    1542:	ac ae       	std	Y+60, r10	; 0x3c
    1544:	bd ae       	std	Y+61, r11	; 0x3d
    1546:	ce ae       	std	Y+62, r12	; 0x3e
    1548:	df ae       	std	Y+63, r13	; 0x3f
    154a:	65 97       	sbiw	r28, 0x15	; 21
    154c:	a1 14       	cp	r10, r1
    154e:	b1 04       	cpc	r11, r1
    1550:	c1 04       	cpc	r12, r1
    1552:	d1 04       	cpc	r13, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <__moddi3+0x378>
    1556:	45 c0       	rjmp	.+138    	; 0x15e2 <__moddi3+0x402>
    1558:	62 96       	adiw	r28, 0x12	; 18
    155a:	6f ad       	ldd	r22, Y+63	; 0x3f
    155c:	62 97       	sbiw	r28, 0x12	; 18
    155e:	06 2e       	mov	r0, r22
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__moddi3+0x38a>
    1562:	22 0c       	add	r2, r2
    1564:	33 1c       	adc	r3, r3
    1566:	44 1c       	adc	r4, r4
    1568:	55 1c       	adc	r5, r5
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__moddi3+0x382>
    156e:	a4 01       	movw	r20, r8
    1570:	93 01       	movw	r18, r6
    1572:	06 2e       	mov	r0, r22
    1574:	04 c0       	rjmp	.+8      	; 0x157e <__moddi3+0x39e>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	0a 94       	dec	r0
    1580:	d2 f7       	brpl	.-12     	; 0x1576 <__moddi3+0x396>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	8a 19       	sub	r24, r10
    1588:	9b 09       	sbc	r25, r11
    158a:	e8 96       	adiw	r28, 0x38	; 56
    158c:	cc ac       	ldd	r12, Y+60	; 0x3c
    158e:	dd ac       	ldd	r13, Y+61	; 0x3d
    1590:	ee ac       	ldd	r14, Y+62	; 0x3e
    1592:	ff ac       	ldd	r15, Y+63	; 0x3f
    1594:	e8 97       	sbiw	r28, 0x38	; 56
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__moddi3+0x3c0>
    1598:	f6 94       	lsr	r15
    159a:	e7 94       	ror	r14
    159c:	d7 94       	ror	r13
    159e:	c7 94       	ror	r12
    15a0:	8a 95       	dec	r24
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__moddi3+0x3b8>
    15a4:	87 01       	movw	r16, r14
    15a6:	76 01       	movw	r14, r12
    15a8:	e2 2a       	or	r14, r18
    15aa:	f3 2a       	or	r15, r19
    15ac:	04 2b       	or	r16, r20
    15ae:	15 2b       	or	r17, r21
    15b0:	61 96       	adiw	r28, 0x11	; 17
    15b2:	ec ae       	std	Y+60, r14	; 0x3c
    15b4:	fd ae       	std	Y+61, r15	; 0x3d
    15b6:	0e af       	std	Y+62, r16	; 0x3e
    15b8:	1f af       	std	Y+63, r17	; 0x3f
    15ba:	61 97       	sbiw	r28, 0x11	; 17
    15bc:	e8 96       	adiw	r28, 0x38	; 56
    15be:	0c ad       	ldd	r16, Y+60	; 0x3c
    15c0:	1d ad       	ldd	r17, Y+61	; 0x3d
    15c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    15c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    15c6:	e8 97       	sbiw	r28, 0x38	; 56
    15c8:	04 c0       	rjmp	.+8      	; 0x15d2 <__moddi3+0x3f2>
    15ca:	00 0f       	add	r16, r16
    15cc:	11 1f       	adc	r17, r17
    15ce:	22 1f       	adc	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	6a 95       	dec	r22
    15d4:	d2 f7       	brpl	.-12     	; 0x15ca <__moddi3+0x3ea>
    15d6:	2d 96       	adiw	r28, 0x0d	; 13
    15d8:	0c af       	std	Y+60, r16	; 0x3c
    15da:	1d af       	std	Y+61, r17	; 0x3d
    15dc:	2e af       	std	Y+62, r18	; 0x3e
    15de:	3f af       	std	Y+63, r19	; 0x3f
    15e0:	2d 97       	sbiw	r28, 0x0d	; 13
    15e2:	32 01       	movw	r6, r4
    15e4:	88 24       	eor	r8, r8
    15e6:	99 24       	eor	r9, r9
    15e8:	a2 01       	movw	r20, r4
    15ea:	91 01       	movw	r18, r2
    15ec:	40 70       	andi	r20, 0x00	; 0
    15ee:	50 70       	andi	r21, 0x00	; 0
    15f0:	69 96       	adiw	r28, 0x19	; 25
    15f2:	2c af       	std	Y+60, r18	; 0x3c
    15f4:	3d af       	std	Y+61, r19	; 0x3d
    15f6:	4e af       	std	Y+62, r20	; 0x3e
    15f8:	5f af       	std	Y+63, r21	; 0x3f
    15fa:	69 97       	sbiw	r28, 0x19	; 25
    15fc:	61 96       	adiw	r28, 0x11	; 17
    15fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1600:	7d ad       	ldd	r23, Y+61	; 0x3d
    1602:	8e ad       	ldd	r24, Y+62	; 0x3e
    1604:	9f ad       	ldd	r25, Y+63	; 0x3f
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1610:	7b 01       	movw	r14, r22
    1612:	8c 01       	movw	r16, r24
    1614:	61 96       	adiw	r28, 0x11	; 17
    1616:	6c ad       	ldd	r22, Y+60	; 0x3c
    1618:	7d ad       	ldd	r23, Y+61	; 0x3d
    161a:	8e ad       	ldd	r24, Y+62	; 0x3e
    161c:	9f ad       	ldd	r25, Y+63	; 0x3f
    161e:	61 97       	sbiw	r28, 0x11	; 17
    1620:	a4 01       	movw	r20, r8
    1622:	93 01       	movw	r18, r6
    1624:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1628:	ca 01       	movw	r24, r20
    162a:	b9 01       	movw	r22, r18
    162c:	69 96       	adiw	r28, 0x19	; 25
    162e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1630:	3d ad       	ldd	r19, Y+61	; 0x3d
    1632:	4e ad       	ldd	r20, Y+62	; 0x3e
    1634:	5f ad       	ldd	r21, Y+63	; 0x3f
    1636:	69 97       	sbiw	r28, 0x19	; 25
    1638:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    163c:	9b 01       	movw	r18, r22
    163e:	ac 01       	movw	r20, r24
    1640:	87 01       	movw	r16, r14
    1642:	ff 24       	eor	r15, r15
    1644:	ee 24       	eor	r14, r14
    1646:	2d 96       	adiw	r28, 0x0d	; 13
    1648:	ac ac       	ldd	r10, Y+60	; 0x3c
    164a:	bd ac       	ldd	r11, Y+61	; 0x3d
    164c:	ce ac       	ldd	r12, Y+62	; 0x3e
    164e:	df ac       	ldd	r13, Y+63	; 0x3f
    1650:	2d 97       	sbiw	r28, 0x0d	; 13
    1652:	c6 01       	movw	r24, r12
    1654:	aa 27       	eor	r26, r26
    1656:	bb 27       	eor	r27, r27
    1658:	57 01       	movw	r10, r14
    165a:	68 01       	movw	r12, r16
    165c:	a8 2a       	or	r10, r24
    165e:	b9 2a       	or	r11, r25
    1660:	ca 2a       	or	r12, r26
    1662:	db 2a       	or	r13, r27
    1664:	a2 16       	cp	r10, r18
    1666:	b3 06       	cpc	r11, r19
    1668:	c4 06       	cpc	r12, r20
    166a:	d5 06       	cpc	r13, r21
    166c:	90 f4       	brcc	.+36     	; 0x1692 <__moddi3+0x4b2>
    166e:	a2 0c       	add	r10, r2
    1670:	b3 1c       	adc	r11, r3
    1672:	c4 1c       	adc	r12, r4
    1674:	d5 1c       	adc	r13, r5
    1676:	a2 14       	cp	r10, r2
    1678:	b3 04       	cpc	r11, r3
    167a:	c4 04       	cpc	r12, r4
    167c:	d5 04       	cpc	r13, r5
    167e:	48 f0       	brcs	.+18     	; 0x1692 <__moddi3+0x4b2>
    1680:	a2 16       	cp	r10, r18
    1682:	b3 06       	cpc	r11, r19
    1684:	c4 06       	cpc	r12, r20
    1686:	d5 06       	cpc	r13, r21
    1688:	20 f4       	brcc	.+8      	; 0x1692 <__moddi3+0x4b2>
    168a:	a2 0c       	add	r10, r2
    168c:	b3 1c       	adc	r11, r3
    168e:	c4 1c       	adc	r12, r4
    1690:	d5 1c       	adc	r13, r5
    1692:	a2 1a       	sub	r10, r18
    1694:	b3 0a       	sbc	r11, r19
    1696:	c4 0a       	sbc	r12, r20
    1698:	d5 0a       	sbc	r13, r21
    169a:	c6 01       	movw	r24, r12
    169c:	b5 01       	movw	r22, r10
    169e:	a4 01       	movw	r20, r8
    16a0:	93 01       	movw	r18, r6
    16a2:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    16a6:	7b 01       	movw	r14, r22
    16a8:	8c 01       	movw	r16, r24
    16aa:	c6 01       	movw	r24, r12
    16ac:	b5 01       	movw	r22, r10
    16ae:	a4 01       	movw	r20, r8
    16b0:	93 01       	movw	r18, r6
    16b2:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    16b6:	ca 01       	movw	r24, r20
    16b8:	b9 01       	movw	r22, r18
    16ba:	69 96       	adiw	r28, 0x19	; 25
    16bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    16be:	3d ad       	ldd	r19, Y+61	; 0x3d
    16c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    16c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16c4:	69 97       	sbiw	r28, 0x19	; 25
    16c6:	c8 c1       	rjmp	.+912    	; 0x1a58 <__moddi3+0x878>
    16c8:	21 14       	cp	r2, r1
    16ca:	31 04       	cpc	r3, r1
    16cc:	41 04       	cpc	r4, r1
    16ce:	51 04       	cpc	r5, r1
    16d0:	71 f4       	brne	.+28     	; 0x16ee <__moddi3+0x50e>
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    16e6:	c9 01       	movw	r24, r18
    16e8:	da 01       	movw	r26, r20
    16ea:	1c 01       	movw	r2, r24
    16ec:	2d 01       	movw	r4, r26
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	20 16       	cp	r2, r16
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	30 06       	cpc	r3, r16
    16f6:	01 e0       	ldi	r16, 0x01	; 1
    16f8:	40 06       	cpc	r4, r16
    16fa:	00 e0       	ldi	r16, 0x00	; 0
    16fc:	50 06       	cpc	r5, r16
    16fe:	88 f4       	brcc	.+34     	; 0x1722 <__moddi3+0x542>
    1700:	1f ef       	ldi	r17, 0xFF	; 255
    1702:	21 16       	cp	r2, r17
    1704:	31 04       	cpc	r3, r1
    1706:	41 04       	cpc	r4, r1
    1708:	51 04       	cpc	r5, r1
    170a:	39 f0       	breq	.+14     	; 0x171a <__moddi3+0x53a>
    170c:	30 f0       	brcs	.+12     	; 0x171a <__moddi3+0x53a>
    170e:	68 e0       	ldi	r22, 0x08	; 8
    1710:	e6 2e       	mov	r14, r22
    1712:	f1 2c       	mov	r15, r1
    1714:	01 2d       	mov	r16, r1
    1716:	11 2d       	mov	r17, r1
    1718:	18 c0       	rjmp	.+48     	; 0x174a <__moddi3+0x56a>
    171a:	ee 24       	eor	r14, r14
    171c:	ff 24       	eor	r15, r15
    171e:	87 01       	movw	r16, r14
    1720:	14 c0       	rjmp	.+40     	; 0x174a <__moddi3+0x56a>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	22 16       	cp	r2, r18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	32 06       	cpc	r3, r18
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	42 06       	cpc	r4, r18
    172e:	21 e0       	ldi	r18, 0x01	; 1
    1730:	52 06       	cpc	r5, r18
    1732:	30 f0       	brcs	.+12     	; 0x1740 <__moddi3+0x560>
    1734:	58 e1       	ldi	r21, 0x18	; 24
    1736:	e5 2e       	mov	r14, r21
    1738:	f1 2c       	mov	r15, r1
    173a:	01 2d       	mov	r16, r1
    173c:	11 2d       	mov	r17, r1
    173e:	05 c0       	rjmp	.+10     	; 0x174a <__moddi3+0x56a>
    1740:	40 e1       	ldi	r20, 0x10	; 16
    1742:	e4 2e       	mov	r14, r20
    1744:	f1 2c       	mov	r15, r1
    1746:	01 2d       	mov	r16, r1
    1748:	11 2d       	mov	r17, r1
    174a:	d2 01       	movw	r26, r4
    174c:	c1 01       	movw	r24, r2
    174e:	0e 2c       	mov	r0, r14
    1750:	04 c0       	rjmp	.+8      	; 0x175a <__moddi3+0x57a>
    1752:	b6 95       	lsr	r27
    1754:	a7 95       	ror	r26
    1756:	97 95       	ror	r25
    1758:	87 95       	ror	r24
    175a:	0a 94       	dec	r0
    175c:	d2 f7       	brpl	.-12     	; 0x1752 <__moddi3+0x572>
    175e:	8f 52       	subi	r24, 0x2F	; 47
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	dc 01       	movw	r26, r24
    1764:	2c 91       	ld	r18, X
    1766:	30 e2       	ldi	r19, 0x20	; 32
    1768:	a3 2e       	mov	r10, r19
    176a:	b1 2c       	mov	r11, r1
    176c:	c1 2c       	mov	r12, r1
    176e:	d1 2c       	mov	r13, r1
    1770:	d6 01       	movw	r26, r12
    1772:	c5 01       	movw	r24, r10
    1774:	8e 19       	sub	r24, r14
    1776:	9f 09       	sbc	r25, r15
    1778:	a0 0b       	sbc	r26, r16
    177a:	b1 0b       	sbc	r27, r17
    177c:	7c 01       	movw	r14, r24
    177e:	8d 01       	movw	r16, r26
    1780:	e2 1a       	sub	r14, r18
    1782:	f1 08       	sbc	r15, r1
    1784:	01 09       	sbc	r16, r1
    1786:	11 09       	sbc	r17, r1
    1788:	65 96       	adiw	r28, 0x15	; 21
    178a:	ec ae       	std	Y+60, r14	; 0x3c
    178c:	fd ae       	std	Y+61, r15	; 0x3d
    178e:	0e af       	std	Y+62, r16	; 0x3e
    1790:	1f af       	std	Y+63, r17	; 0x3f
    1792:	65 97       	sbiw	r28, 0x15	; 21
    1794:	e1 14       	cp	r14, r1
    1796:	f1 04       	cpc	r15, r1
    1798:	01 05       	cpc	r16, r1
    179a:	11 05       	cpc	r17, r1
    179c:	39 f4       	brne	.+14     	; 0x17ac <__moddi3+0x5cc>
    179e:	64 01       	movw	r12, r8
    17a0:	53 01       	movw	r10, r6
    17a2:	a2 18       	sub	r10, r2
    17a4:	b3 08       	sbc	r11, r3
    17a6:	c4 08       	sbc	r12, r4
    17a8:	d5 08       	sbc	r13, r5
    17aa:	ec c0       	rjmp	.+472    	; 0x1984 <__moddi3+0x7a4>
    17ac:	62 96       	adiw	r28, 0x12	; 18
    17ae:	ff ac       	ldd	r15, Y+63	; 0x3f
    17b0:	62 97       	sbiw	r28, 0x12	; 18
    17b2:	e4 96       	adiw	r28, 0x34	; 52
    17b4:	ff ae       	std	Y+63, r15	; 0x3f
    17b6:	e4 97       	sbiw	r28, 0x34	; 52
    17b8:	0f 2c       	mov	r0, r15
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <__moddi3+0x5e4>
    17bc:	22 0c       	add	r2, r2
    17be:	33 1c       	adc	r3, r3
    17c0:	44 1c       	adc	r4, r4
    17c2:	55 1c       	adc	r5, r5
    17c4:	0a 94       	dec	r0
    17c6:	d2 f7       	brpl	.-12     	; 0x17bc <__moddi3+0x5dc>
    17c8:	8a 2d       	mov	r24, r10
    17ca:	8f 19       	sub	r24, r15
    17cc:	64 01       	movw	r12, r8
    17ce:	53 01       	movw	r10, r6
    17d0:	08 2e       	mov	r0, r24
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__moddi3+0x5fc>
    17d4:	d6 94       	lsr	r13
    17d6:	c7 94       	ror	r12
    17d8:	b7 94       	ror	r11
    17da:	a7 94       	ror	r10
    17dc:	0a 94       	dec	r0
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <__moddi3+0x5f4>
    17e0:	a4 01       	movw	r20, r8
    17e2:	93 01       	movw	r18, r6
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__moddi3+0x60e>
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	44 1f       	adc	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	fa 94       	dec	r15
    17f0:	d2 f7       	brpl	.-12     	; 0x17e6 <__moddi3+0x606>
    17f2:	e8 96       	adiw	r28, 0x38	; 56
    17f4:	6c ac       	ldd	r6, Y+60	; 0x3c
    17f6:	7d ac       	ldd	r7, Y+61	; 0x3d
    17f8:	8e ac       	ldd	r8, Y+62	; 0x3e
    17fa:	9f ac       	ldd	r9, Y+63	; 0x3f
    17fc:	e8 97       	sbiw	r28, 0x38	; 56
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <__moddi3+0x628>
    1800:	96 94       	lsr	r9
    1802:	87 94       	ror	r8
    1804:	77 94       	ror	r7
    1806:	67 94       	ror	r6
    1808:	8a 95       	dec	r24
    180a:	d2 f7       	brpl	.-12     	; 0x1800 <__moddi3+0x620>
    180c:	84 01       	movw	r16, r8
    180e:	73 01       	movw	r14, r6
    1810:	e2 2a       	or	r14, r18
    1812:	f3 2a       	or	r15, r19
    1814:	04 2b       	or	r16, r20
    1816:	15 2b       	or	r17, r21
    1818:	29 96       	adiw	r28, 0x09	; 9
    181a:	ec ae       	std	Y+60, r14	; 0x3c
    181c:	fd ae       	std	Y+61, r15	; 0x3d
    181e:	0e af       	std	Y+62, r16	; 0x3e
    1820:	1f af       	std	Y+63, r17	; 0x3f
    1822:	29 97       	sbiw	r28, 0x09	; 9
    1824:	32 01       	movw	r6, r4
    1826:	88 24       	eor	r8, r8
    1828:	99 24       	eor	r9, r9
    182a:	92 01       	movw	r18, r4
    182c:	81 01       	movw	r16, r2
    182e:	20 70       	andi	r18, 0x00	; 0
    1830:	30 70       	andi	r19, 0x00	; 0
    1832:	6d 96       	adiw	r28, 0x1d	; 29
    1834:	0c af       	std	Y+60, r16	; 0x3c
    1836:	1d af       	std	Y+61, r17	; 0x3d
    1838:	2e af       	std	Y+62, r18	; 0x3e
    183a:	3f af       	std	Y+63, r19	; 0x3f
    183c:	6d 97       	sbiw	r28, 0x1d	; 29
    183e:	c6 01       	movw	r24, r12
    1840:	b5 01       	movw	r22, r10
    1842:	a4 01       	movw	r20, r8
    1844:	93 01       	movw	r18, r6
    1846:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    184a:	7b 01       	movw	r14, r22
    184c:	8c 01       	movw	r16, r24
    184e:	c6 01       	movw	r24, r12
    1850:	b5 01       	movw	r22, r10
    1852:	a4 01       	movw	r20, r8
    1854:	93 01       	movw	r18, r6
    1856:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    185a:	ca 01       	movw	r24, r20
    185c:	b9 01       	movw	r22, r18
    185e:	6d 96       	adiw	r28, 0x1d	; 29
    1860:	2c ad       	ldd	r18, Y+60	; 0x3c
    1862:	3d ad       	ldd	r19, Y+61	; 0x3d
    1864:	4e ad       	ldd	r20, Y+62	; 0x3e
    1866:	5f ad       	ldd	r21, Y+63	; 0x3f
    1868:	6d 97       	sbiw	r28, 0x1d	; 29
    186a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    186e:	9b 01       	movw	r18, r22
    1870:	ac 01       	movw	r20, r24
    1872:	87 01       	movw	r16, r14
    1874:	ff 24       	eor	r15, r15
    1876:	ee 24       	eor	r14, r14
    1878:	29 96       	adiw	r28, 0x09	; 9
    187a:	ac ac       	ldd	r10, Y+60	; 0x3c
    187c:	bd ac       	ldd	r11, Y+61	; 0x3d
    187e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1880:	df ac       	ldd	r13, Y+63	; 0x3f
    1882:	29 97       	sbiw	r28, 0x09	; 9
    1884:	c6 01       	movw	r24, r12
    1886:	aa 27       	eor	r26, r26
    1888:	bb 27       	eor	r27, r27
    188a:	5c 01       	movw	r10, r24
    188c:	6d 01       	movw	r12, r26
    188e:	ae 28       	or	r10, r14
    1890:	bf 28       	or	r11, r15
    1892:	c0 2a       	or	r12, r16
    1894:	d1 2a       	or	r13, r17
    1896:	a2 16       	cp	r10, r18
    1898:	b3 06       	cpc	r11, r19
    189a:	c4 06       	cpc	r12, r20
    189c:	d5 06       	cpc	r13, r21
    189e:	90 f4       	brcc	.+36     	; 0x18c4 <__moddi3+0x6e4>
    18a0:	a2 0c       	add	r10, r2
    18a2:	b3 1c       	adc	r11, r3
    18a4:	c4 1c       	adc	r12, r4
    18a6:	d5 1c       	adc	r13, r5
    18a8:	a2 14       	cp	r10, r2
    18aa:	b3 04       	cpc	r11, r3
    18ac:	c4 04       	cpc	r12, r4
    18ae:	d5 04       	cpc	r13, r5
    18b0:	48 f0       	brcs	.+18     	; 0x18c4 <__moddi3+0x6e4>
    18b2:	a2 16       	cp	r10, r18
    18b4:	b3 06       	cpc	r11, r19
    18b6:	c4 06       	cpc	r12, r20
    18b8:	d5 06       	cpc	r13, r21
    18ba:	20 f4       	brcc	.+8      	; 0x18c4 <__moddi3+0x6e4>
    18bc:	a2 0c       	add	r10, r2
    18be:	b3 1c       	adc	r11, r3
    18c0:	c4 1c       	adc	r12, r4
    18c2:	d5 1c       	adc	r13, r5
    18c4:	a2 1a       	sub	r10, r18
    18c6:	b3 0a       	sbc	r11, r19
    18c8:	c4 0a       	sbc	r12, r20
    18ca:	d5 0a       	sbc	r13, r21
    18cc:	c6 01       	movw	r24, r12
    18ce:	b5 01       	movw	r22, r10
    18d0:	a4 01       	movw	r20, r8
    18d2:	93 01       	movw	r18, r6
    18d4:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    18d8:	7b 01       	movw	r14, r22
    18da:	8c 01       	movw	r16, r24
    18dc:	c6 01       	movw	r24, r12
    18de:	b5 01       	movw	r22, r10
    18e0:	a4 01       	movw	r20, r8
    18e2:	93 01       	movw	r18, r6
    18e4:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    18e8:	ca 01       	movw	r24, r20
    18ea:	b9 01       	movw	r22, r18
    18ec:	6d 96       	adiw	r28, 0x1d	; 29
    18ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f6:	6d 97       	sbiw	r28, 0x1d	; 29
    18f8:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	87 01       	movw	r16, r14
    1902:	ff 24       	eor	r15, r15
    1904:	ee 24       	eor	r14, r14
    1906:	29 96       	adiw	r28, 0x09	; 9
    1908:	8c ad       	ldd	r24, Y+60	; 0x3c
    190a:	9d ad       	ldd	r25, Y+61	; 0x3d
    190c:	ae ad       	ldd	r26, Y+62	; 0x3e
    190e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1910:	29 97       	sbiw	r28, 0x09	; 9
    1912:	a0 70       	andi	r26, 0x00	; 0
    1914:	b0 70       	andi	r27, 0x00	; 0
    1916:	57 01       	movw	r10, r14
    1918:	68 01       	movw	r12, r16
    191a:	a8 2a       	or	r10, r24
    191c:	b9 2a       	or	r11, r25
    191e:	ca 2a       	or	r12, r26
    1920:	db 2a       	or	r13, r27
    1922:	a2 16       	cp	r10, r18
    1924:	b3 06       	cpc	r11, r19
    1926:	c4 06       	cpc	r12, r20
    1928:	d5 06       	cpc	r13, r21
    192a:	90 f4       	brcc	.+36     	; 0x1950 <__moddi3+0x770>
    192c:	a2 0c       	add	r10, r2
    192e:	b3 1c       	adc	r11, r3
    1930:	c4 1c       	adc	r12, r4
    1932:	d5 1c       	adc	r13, r5
    1934:	a2 14       	cp	r10, r2
    1936:	b3 04       	cpc	r11, r3
    1938:	c4 04       	cpc	r12, r4
    193a:	d5 04       	cpc	r13, r5
    193c:	48 f0       	brcs	.+18     	; 0x1950 <__moddi3+0x770>
    193e:	a2 16       	cp	r10, r18
    1940:	b3 06       	cpc	r11, r19
    1942:	c4 06       	cpc	r12, r20
    1944:	d5 06       	cpc	r13, r21
    1946:	20 f4       	brcc	.+8      	; 0x1950 <__moddi3+0x770>
    1948:	a2 0c       	add	r10, r2
    194a:	b3 1c       	adc	r11, r3
    194c:	c4 1c       	adc	r12, r4
    194e:	d5 1c       	adc	r13, r5
    1950:	e8 96       	adiw	r28, 0x38	; 56
    1952:	ec ac       	ldd	r14, Y+60	; 0x3c
    1954:	fd ac       	ldd	r15, Y+61	; 0x3d
    1956:	0e ad       	ldd	r16, Y+62	; 0x3e
    1958:	1f ad       	ldd	r17, Y+63	; 0x3f
    195a:	e8 97       	sbiw	r28, 0x38	; 56
    195c:	e4 96       	adiw	r28, 0x34	; 52
    195e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1960:	e4 97       	sbiw	r28, 0x34	; 52
    1962:	04 c0       	rjmp	.+8      	; 0x196c <__moddi3+0x78c>
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	00 1f       	adc	r16, r16
    196a:	11 1f       	adc	r17, r17
    196c:	0a 94       	dec	r0
    196e:	d2 f7       	brpl	.-12     	; 0x1964 <__moddi3+0x784>
    1970:	2d 96       	adiw	r28, 0x0d	; 13
    1972:	ec ae       	std	Y+60, r14	; 0x3c
    1974:	fd ae       	std	Y+61, r15	; 0x3d
    1976:	0e af       	std	Y+62, r16	; 0x3e
    1978:	1f af       	std	Y+63, r17	; 0x3f
    197a:	2d 97       	sbiw	r28, 0x0d	; 13
    197c:	a2 1a       	sub	r10, r18
    197e:	b3 0a       	sbc	r11, r19
    1980:	c4 0a       	sbc	r12, r20
    1982:	d5 0a       	sbc	r13, r21
    1984:	32 01       	movw	r6, r4
    1986:	88 24       	eor	r8, r8
    1988:	99 24       	eor	r9, r9
    198a:	92 01       	movw	r18, r4
    198c:	81 01       	movw	r16, r2
    198e:	20 70       	andi	r18, 0x00	; 0
    1990:	30 70       	andi	r19, 0x00	; 0
    1992:	a1 96       	adiw	r28, 0x21	; 33
    1994:	0c af       	std	Y+60, r16	; 0x3c
    1996:	1d af       	std	Y+61, r17	; 0x3d
    1998:	2e af       	std	Y+62, r18	; 0x3e
    199a:	3f af       	std	Y+63, r19	; 0x3f
    199c:	a1 97       	sbiw	r28, 0x21	; 33
    199e:	c6 01       	movw	r24, r12
    19a0:	b5 01       	movw	r22, r10
    19a2:	a4 01       	movw	r20, r8
    19a4:	93 01       	movw	r18, r6
    19a6:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    19aa:	7b 01       	movw	r14, r22
    19ac:	8c 01       	movw	r16, r24
    19ae:	c6 01       	movw	r24, r12
    19b0:	b5 01       	movw	r22, r10
    19b2:	a4 01       	movw	r20, r8
    19b4:	93 01       	movw	r18, r6
    19b6:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    19ba:	ca 01       	movw	r24, r20
    19bc:	b9 01       	movw	r22, r18
    19be:	a1 96       	adiw	r28, 0x21	; 33
    19c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    19c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    19c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    19c8:	a1 97       	sbiw	r28, 0x21	; 33
    19ca:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	87 01       	movw	r16, r14
    19d4:	ff 24       	eor	r15, r15
    19d6:	ee 24       	eor	r14, r14
    19d8:	2d 96       	adiw	r28, 0x0d	; 13
    19da:	ac ac       	ldd	r10, Y+60	; 0x3c
    19dc:	bd ac       	ldd	r11, Y+61	; 0x3d
    19de:	ce ac       	ldd	r12, Y+62	; 0x3e
    19e0:	df ac       	ldd	r13, Y+63	; 0x3f
    19e2:	2d 97       	sbiw	r28, 0x0d	; 13
    19e4:	c6 01       	movw	r24, r12
    19e6:	aa 27       	eor	r26, r26
    19e8:	bb 27       	eor	r27, r27
    19ea:	57 01       	movw	r10, r14
    19ec:	68 01       	movw	r12, r16
    19ee:	a8 2a       	or	r10, r24
    19f0:	b9 2a       	or	r11, r25
    19f2:	ca 2a       	or	r12, r26
    19f4:	db 2a       	or	r13, r27
    19f6:	a2 16       	cp	r10, r18
    19f8:	b3 06       	cpc	r11, r19
    19fa:	c4 06       	cpc	r12, r20
    19fc:	d5 06       	cpc	r13, r21
    19fe:	90 f4       	brcc	.+36     	; 0x1a24 <__moddi3+0x844>
    1a00:	a2 0c       	add	r10, r2
    1a02:	b3 1c       	adc	r11, r3
    1a04:	c4 1c       	adc	r12, r4
    1a06:	d5 1c       	adc	r13, r5
    1a08:	a2 14       	cp	r10, r2
    1a0a:	b3 04       	cpc	r11, r3
    1a0c:	c4 04       	cpc	r12, r4
    1a0e:	d5 04       	cpc	r13, r5
    1a10:	48 f0       	brcs	.+18     	; 0x1a24 <__moddi3+0x844>
    1a12:	a2 16       	cp	r10, r18
    1a14:	b3 06       	cpc	r11, r19
    1a16:	c4 06       	cpc	r12, r20
    1a18:	d5 06       	cpc	r13, r21
    1a1a:	20 f4       	brcc	.+8      	; 0x1a24 <__moddi3+0x844>
    1a1c:	a2 0c       	add	r10, r2
    1a1e:	b3 1c       	adc	r11, r3
    1a20:	c4 1c       	adc	r12, r4
    1a22:	d5 1c       	adc	r13, r5
    1a24:	a2 1a       	sub	r10, r18
    1a26:	b3 0a       	sbc	r11, r19
    1a28:	c4 0a       	sbc	r12, r20
    1a2a:	d5 0a       	sbc	r13, r21
    1a2c:	c6 01       	movw	r24, r12
    1a2e:	b5 01       	movw	r22, r10
    1a30:	a4 01       	movw	r20, r8
    1a32:	93 01       	movw	r18, r6
    1a34:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1a38:	7b 01       	movw	r14, r22
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	b5 01       	movw	r22, r10
    1a40:	a4 01       	movw	r20, r8
    1a42:	93 01       	movw	r18, r6
    1a44:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1a48:	ca 01       	movw	r24, r20
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	a1 96       	adiw	r28, 0x21	; 33
    1a4e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a50:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a52:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a54:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a56:	a1 97       	sbiw	r28, 0x21	; 33
    1a58:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1a5c:	9b 01       	movw	r18, r22
    1a5e:	ac 01       	movw	r20, r24
    1a60:	87 01       	movw	r16, r14
    1a62:	ff 24       	eor	r15, r15
    1a64:	ee 24       	eor	r14, r14
    1a66:	2d 96       	adiw	r28, 0x0d	; 13
    1a68:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a6a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a6c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a6e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a70:	2d 97       	sbiw	r28, 0x0d	; 13
    1a72:	a0 70       	andi	r26, 0x00	; 0
    1a74:	b0 70       	andi	r27, 0x00	; 0
    1a76:	e8 2a       	or	r14, r24
    1a78:	f9 2a       	or	r15, r25
    1a7a:	0a 2b       	or	r16, r26
    1a7c:	1b 2b       	or	r17, r27
    1a7e:	e2 16       	cp	r14, r18
    1a80:	f3 06       	cpc	r15, r19
    1a82:	04 07       	cpc	r16, r20
    1a84:	15 07       	cpc	r17, r21
    1a86:	90 f4       	brcc	.+36     	; 0x1aac <__moddi3+0x8cc>
    1a88:	e2 0c       	add	r14, r2
    1a8a:	f3 1c       	adc	r15, r3
    1a8c:	04 1d       	adc	r16, r4
    1a8e:	15 1d       	adc	r17, r5
    1a90:	e2 14       	cp	r14, r2
    1a92:	f3 04       	cpc	r15, r3
    1a94:	04 05       	cpc	r16, r4
    1a96:	15 05       	cpc	r17, r5
    1a98:	48 f0       	brcs	.+18     	; 0x1aac <__moddi3+0x8cc>
    1a9a:	e2 16       	cp	r14, r18
    1a9c:	f3 06       	cpc	r15, r19
    1a9e:	04 07       	cpc	r16, r20
    1aa0:	15 07       	cpc	r17, r21
    1aa2:	20 f4       	brcc	.+8      	; 0x1aac <__moddi3+0x8cc>
    1aa4:	e2 0c       	add	r14, r2
    1aa6:	f3 1c       	adc	r15, r3
    1aa8:	04 1d       	adc	r16, r4
    1aaa:	15 1d       	adc	r17, r5
    1aac:	e2 1a       	sub	r14, r18
    1aae:	f3 0a       	sbc	r15, r19
    1ab0:	04 0b       	sbc	r16, r20
    1ab2:	15 0b       	sbc	r17, r21
    1ab4:	d8 01       	movw	r26, r16
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	62 96       	adiw	r28, 0x12	; 18
    1aba:	0f ac       	ldd	r0, Y+63	; 0x3f
    1abc:	62 97       	sbiw	r28, 0x12	; 18
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <__moddi3+0x8e8>
    1ac0:	b6 95       	lsr	r27
    1ac2:	a7 95       	ror	r26
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
    1ac8:	0a 94       	dec	r0
    1aca:	d2 f7       	brpl	.-12     	; 0x1ac0 <__moddi3+0x8e0>
    1acc:	89 a7       	std	Y+41, r24	; 0x29
    1ace:	9a a7       	std	Y+42, r25	; 0x2a
    1ad0:	ab a7       	std	Y+43, r26	; 0x2b
    1ad2:	bc a7       	std	Y+44, r27	; 0x2c
    1ad4:	1d a6       	std	Y+45, r1	; 0x2d
    1ad6:	1e a6       	std	Y+46, r1	; 0x2e
    1ad8:	1f a6       	std	Y+47, r1	; 0x2f
    1ada:	18 aa       	std	Y+48, r1	; 0x30
    1adc:	89 8b       	std	Y+17, r24	; 0x11
    1ade:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ae0:	8a 8b       	std	Y+18, r24	; 0x12
    1ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ae8:	8c 8b       	std	Y+20, r24	; 0x14
    1aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aec:	8d 8b       	std	Y+21, r24	; 0x15
    1aee:	2f c3       	rjmp	.+1630   	; 0x214e <__moddi3+0xf6e>
    1af0:	6a 14       	cp	r6, r10
    1af2:	7b 04       	cpc	r7, r11
    1af4:	8c 04       	cpc	r8, r12
    1af6:	9d 04       	cpc	r9, r13
    1af8:	48 f4       	brcc	.+18     	; 0x1b0c <__moddi3+0x92c>
    1afa:	49 8b       	std	Y+17, r20	; 0x11
    1afc:	5a 8b       	std	Y+18, r21	; 0x12
    1afe:	6b 8b       	std	Y+19, r22	; 0x13
    1b00:	7c 8b       	std	Y+20, r23	; 0x14
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	2f 8b       	std	Y+23, r18	; 0x17
    1b08:	38 8f       	std	Y+24, r19	; 0x18
    1b0a:	27 c3       	rjmp	.+1614   	; 0x215a <__moddi3+0xf7a>
    1b0c:	00 e0       	ldi	r16, 0x00	; 0
    1b0e:	a0 16       	cp	r10, r16
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	b0 06       	cpc	r11, r16
    1b14:	01 e0       	ldi	r16, 0x01	; 1
    1b16:	c0 06       	cpc	r12, r16
    1b18:	00 e0       	ldi	r16, 0x00	; 0
    1b1a:	d0 06       	cpc	r13, r16
    1b1c:	88 f4       	brcc	.+34     	; 0x1b40 <__moddi3+0x960>
    1b1e:	1f ef       	ldi	r17, 0xFF	; 255
    1b20:	a1 16       	cp	r10, r17
    1b22:	b1 04       	cpc	r11, r1
    1b24:	c1 04       	cpc	r12, r1
    1b26:	d1 04       	cpc	r13, r1
    1b28:	39 f0       	breq	.+14     	; 0x1b38 <__moddi3+0x958>
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <__moddi3+0x958>
    1b2c:	28 e0       	ldi	r18, 0x08	; 8
    1b2e:	e2 2e       	mov	r14, r18
    1b30:	f1 2c       	mov	r15, r1
    1b32:	01 2d       	mov	r16, r1
    1b34:	11 2d       	mov	r17, r1
    1b36:	18 c0       	rjmp	.+48     	; 0x1b68 <__moddi3+0x988>
    1b38:	ee 24       	eor	r14, r14
    1b3a:	ff 24       	eor	r15, r15
    1b3c:	87 01       	movw	r16, r14
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <__moddi3+0x988>
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	a2 16       	cp	r10, r18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	b2 06       	cpc	r11, r18
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	c2 06       	cpc	r12, r18
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	d2 06       	cpc	r13, r18
    1b50:	30 f0       	brcs	.+12     	; 0x1b5e <__moddi3+0x97e>
    1b52:	98 e1       	ldi	r25, 0x18	; 24
    1b54:	e9 2e       	mov	r14, r25
    1b56:	f1 2c       	mov	r15, r1
    1b58:	01 2d       	mov	r16, r1
    1b5a:	11 2d       	mov	r17, r1
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <__moddi3+0x988>
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	e8 2e       	mov	r14, r24
    1b62:	f1 2c       	mov	r15, r1
    1b64:	01 2d       	mov	r16, r1
    1b66:	11 2d       	mov	r17, r1
    1b68:	d6 01       	movw	r26, r12
    1b6a:	c5 01       	movw	r24, r10
    1b6c:	0e 2c       	mov	r0, r14
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <__moddi3+0x998>
    1b70:	b6 95       	lsr	r27
    1b72:	a7 95       	ror	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	0a 94       	dec	r0
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <__moddi3+0x990>
    1b7c:	8f 52       	subi	r24, 0x2F	; 47
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	dc 01       	movw	r26, r24
    1b82:	2c 91       	ld	r18, X
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	8e 19       	sub	r24, r14
    1b8e:	9f 09       	sbc	r25, r15
    1b90:	a0 0b       	sbc	r26, r16
    1b92:	b1 0b       	sbc	r27, r17
    1b94:	82 1b       	sub	r24, r18
    1b96:	91 09       	sbc	r25, r1
    1b98:	a1 09       	sbc	r26, r1
    1b9a:	b1 09       	sbc	r27, r1
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	a1 05       	cpc	r26, r1
    1ba0:	b1 05       	cpc	r27, r1
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <__moddi3+0x9c6>
    1ba4:	59 c0       	rjmp	.+178    	; 0x1c58 <__moddi3+0xa78>
    1ba6:	a6 14       	cp	r10, r6
    1ba8:	b7 04       	cpc	r11, r7
    1baa:	c8 04       	cpc	r12, r8
    1bac:	d9 04       	cpc	r13, r9
    1bae:	70 f0       	brcs	.+28     	; 0x1bcc <__moddi3+0x9ec>
    1bb0:	e8 96       	adiw	r28, 0x38	; 56
    1bb2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1bb4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1bb6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1bb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bba:	e8 97       	sbiw	r28, 0x38	; 56
    1bbc:	e2 14       	cp	r14, r2
    1bbe:	f3 04       	cpc	r15, r3
    1bc0:	04 05       	cpc	r16, r4
    1bc2:	15 05       	cpc	r17, r5
    1bc4:	18 f4       	brcc	.+6      	; 0x1bcc <__moddi3+0x9ec>
    1bc6:	d8 01       	movw	r26, r16
    1bc8:	c7 01       	movw	r24, r14
    1bca:	2f c0       	rjmp	.+94     	; 0x1c2a <__moddi3+0xa4a>
    1bcc:	e8 96       	adiw	r28, 0x38	; 56
    1bce:	8c ad       	ldd	r24, Y+60	; 0x3c
    1bd0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bd2:	ae ad       	ldd	r26, Y+62	; 0x3e
    1bd4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1bd6:	e8 97       	sbiw	r28, 0x38	; 56
    1bd8:	82 19       	sub	r24, r2
    1bda:	93 09       	sbc	r25, r3
    1bdc:	a4 09       	sbc	r26, r4
    1bde:	b5 09       	sbc	r27, r5
    1be0:	a4 01       	movw	r20, r8
    1be2:	93 01       	movw	r18, r6
    1be4:	2a 19       	sub	r18, r10
    1be6:	3b 09       	sbc	r19, r11
    1be8:	4c 09       	sbc	r20, r12
    1bea:	5d 09       	sbc	r21, r13
    1bec:	aa 24       	eor	r10, r10
    1bee:	bb 24       	eor	r11, r11
    1bf0:	65 01       	movw	r12, r10
    1bf2:	e8 96       	adiw	r28, 0x38	; 56
    1bf4:	6c ac       	ldd	r6, Y+60	; 0x3c
    1bf6:	7d ac       	ldd	r7, Y+61	; 0x3d
    1bf8:	8e ac       	ldd	r8, Y+62	; 0x3e
    1bfa:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bfc:	e8 97       	sbiw	r28, 0x38	; 56
    1bfe:	68 16       	cp	r6, r24
    1c00:	79 06       	cpc	r7, r25
    1c02:	8a 06       	cpc	r8, r26
    1c04:	9b 06       	cpc	r9, r27
    1c06:	28 f4       	brcc	.+10     	; 0x1c12 <__moddi3+0xa32>
    1c08:	11 e0       	ldi	r17, 0x01	; 1
    1c0a:	a1 2e       	mov	r10, r17
    1c0c:	b1 2c       	mov	r11, r1
    1c0e:	c1 2c       	mov	r12, r1
    1c10:	d1 2c       	mov	r13, r1
    1c12:	79 01       	movw	r14, r18
    1c14:	8a 01       	movw	r16, r20
    1c16:	ea 18       	sub	r14, r10
    1c18:	fb 08       	sbc	r15, r11
    1c1a:	0c 09       	sbc	r16, r12
    1c1c:	1d 09       	sbc	r17, r13
    1c1e:	61 96       	adiw	r28, 0x11	; 17
    1c20:	ec ae       	std	Y+60, r14	; 0x3c
    1c22:	fd ae       	std	Y+61, r15	; 0x3d
    1c24:	0e af       	std	Y+62, r16	; 0x3e
    1c26:	1f af       	std	Y+63, r17	; 0x3f
    1c28:	61 97       	sbiw	r28, 0x11	; 17
    1c2a:	89 a7       	std	Y+41, r24	; 0x29
    1c2c:	9a a7       	std	Y+42, r25	; 0x2a
    1c2e:	ab a7       	std	Y+43, r26	; 0x2b
    1c30:	bc a7       	std	Y+44, r27	; 0x2c
    1c32:	61 96       	adiw	r28, 0x11	; 17
    1c34:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c36:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c38:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c3c:	61 97       	sbiw	r28, 0x11	; 17
    1c3e:	0d a7       	std	Y+45, r16	; 0x2d
    1c40:	1e a7       	std	Y+46, r17	; 0x2e
    1c42:	2f a7       	std	Y+47, r18	; 0x2f
    1c44:	38 ab       	std	Y+48, r19	; 0x30
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c4a:	8a 8b       	std	Y+18, r24	; 0x12
    1c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
    1c50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c52:	8c 8b       	std	Y+20, r24	; 0x14
    1c54:	0d 8b       	std	Y+21, r16	; 0x15
    1c56:	7b c2       	rjmp	.+1270   	; 0x214e <__moddi3+0xf6e>
    1c58:	e3 96       	adiw	r28, 0x33	; 51
    1c5a:	8f af       	std	Y+63, r24	; 0x3f
    1c5c:	e3 97       	sbiw	r28, 0x33	; 51
    1c5e:	a6 01       	movw	r20, r12
    1c60:	95 01       	movw	r18, r10
    1c62:	08 2e       	mov	r0, r24
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__moddi3+0xa8e>
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	44 1f       	adc	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	0a 94       	dec	r0
    1c70:	d2 f7       	brpl	.-12     	; 0x1c66 <__moddi3+0xa86>
    1c72:	10 e2       	ldi	r17, 0x20	; 32
    1c74:	18 1b       	sub	r17, r24
    1c76:	e2 96       	adiw	r28, 0x32	; 50
    1c78:	1f af       	std	Y+63, r17	; 0x3f
    1c7a:	e2 97       	sbiw	r28, 0x32	; 50
    1c7c:	d2 01       	movw	r26, r4
    1c7e:	c1 01       	movw	r24, r2
    1c80:	01 2e       	mov	r0, r17
    1c82:	04 c0       	rjmp	.+8      	; 0x1c8c <__moddi3+0xaac>
    1c84:	b6 95       	lsr	r27
    1c86:	a7 95       	ror	r26
    1c88:	97 95       	ror	r25
    1c8a:	87 95       	ror	r24
    1c8c:	0a 94       	dec	r0
    1c8e:	d2 f7       	brpl	.-12     	; 0x1c84 <__moddi3+0xaa4>
    1c90:	5c 01       	movw	r10, r24
    1c92:	6d 01       	movw	r12, r26
    1c94:	a2 2a       	or	r10, r18
    1c96:	b3 2a       	or	r11, r19
    1c98:	c4 2a       	or	r12, r20
    1c9a:	d5 2a       	or	r13, r21
    1c9c:	25 96       	adiw	r28, 0x05	; 5
    1c9e:	ac ae       	std	Y+60, r10	; 0x3c
    1ca0:	bd ae       	std	Y+61, r11	; 0x3d
    1ca2:	ce ae       	std	Y+62, r12	; 0x3e
    1ca4:	df ae       	std	Y+63, r13	; 0x3f
    1ca6:	25 97       	sbiw	r28, 0x05	; 5
    1ca8:	72 01       	movw	r14, r4
    1caa:	61 01       	movw	r12, r2
    1cac:	e3 96       	adiw	r28, 0x33	; 51
    1cae:	0f ac       	ldd	r0, Y+63	; 0x3f
    1cb0:	e3 97       	sbiw	r28, 0x33	; 51
    1cb2:	04 c0       	rjmp	.+8      	; 0x1cbc <__moddi3+0xadc>
    1cb4:	cc 0c       	add	r12, r12
    1cb6:	dd 1c       	adc	r13, r13
    1cb8:	ee 1c       	adc	r14, r14
    1cba:	ff 1c       	adc	r15, r15
    1cbc:	0a 94       	dec	r0
    1cbe:	d2 f7       	brpl	.-12     	; 0x1cb4 <__moddi3+0xad4>
    1cc0:	21 96       	adiw	r28, 0x01	; 1
    1cc2:	cc ae       	std	Y+60, r12	; 0x3c
    1cc4:	dd ae       	std	Y+61, r13	; 0x3d
    1cc6:	ee ae       	std	Y+62, r14	; 0x3e
    1cc8:	ff ae       	std	Y+63, r15	; 0x3f
    1cca:	21 97       	sbiw	r28, 0x01	; 1
    1ccc:	64 01       	movw	r12, r8
    1cce:	53 01       	movw	r10, r6
    1cd0:	01 2e       	mov	r0, r17
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <__moddi3+0xafc>
    1cd4:	d6 94       	lsr	r13
    1cd6:	c7 94       	ror	r12
    1cd8:	b7 94       	ror	r11
    1cda:	a7 94       	ror	r10
    1cdc:	0a 94       	dec	r0
    1cde:	d2 f7       	brpl	.-12     	; 0x1cd4 <__moddi3+0xaf4>
    1ce0:	a4 01       	movw	r20, r8
    1ce2:	93 01       	movw	r18, r6
    1ce4:	e3 96       	adiw	r28, 0x33	; 51
    1ce6:	0f ac       	ldd	r0, Y+63	; 0x3f
    1ce8:	e3 97       	sbiw	r28, 0x33	; 51
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <__moddi3+0xb14>
    1cec:	22 0f       	add	r18, r18
    1cee:	33 1f       	adc	r19, r19
    1cf0:	44 1f       	adc	r20, r20
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	0a 94       	dec	r0
    1cf6:	d2 f7       	brpl	.-12     	; 0x1cec <__moddi3+0xb0c>
    1cf8:	e8 96       	adiw	r28, 0x38	; 56
    1cfa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1cfc:	9d ad       	ldd	r25, Y+61	; 0x3d
    1cfe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d00:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d02:	e8 97       	sbiw	r28, 0x38	; 56
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <__moddi3+0xb2e>
    1d06:	b6 95       	lsr	r27
    1d08:	a7 95       	ror	r26
    1d0a:	97 95       	ror	r25
    1d0c:	87 95       	ror	r24
    1d0e:	1a 95       	dec	r17
    1d10:	d2 f7       	brpl	.-12     	; 0x1d06 <__moddi3+0xb26>
    1d12:	7c 01       	movw	r14, r24
    1d14:	8d 01       	movw	r16, r26
    1d16:	e2 2a       	or	r14, r18
    1d18:	f3 2a       	or	r15, r19
    1d1a:	04 2b       	or	r16, r20
    1d1c:	15 2b       	or	r17, r21
    1d1e:	e9 ae       	std	Y+57, r14	; 0x39
    1d20:	fa ae       	std	Y+58, r15	; 0x3a
    1d22:	0b af       	std	Y+59, r16	; 0x3b
    1d24:	1c af       	std	Y+60, r17	; 0x3c
    1d26:	e8 96       	adiw	r28, 0x38	; 56
    1d28:	0c ad       	ldd	r16, Y+60	; 0x3c
    1d2a:	1d ad       	ldd	r17, Y+61	; 0x3d
    1d2c:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d2e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d30:	e8 97       	sbiw	r28, 0x38	; 56
    1d32:	e3 96       	adiw	r28, 0x33	; 51
    1d34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1d36:	e3 97       	sbiw	r28, 0x33	; 51
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <__moddi3+0xb62>
    1d3a:	00 0f       	add	r16, r16
    1d3c:	11 1f       	adc	r17, r17
    1d3e:	22 1f       	adc	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	0a 94       	dec	r0
    1d44:	d2 f7       	brpl	.-12     	; 0x1d3a <__moddi3+0xb5a>
    1d46:	0d ab       	std	Y+53, r16	; 0x35
    1d48:	1e ab       	std	Y+54, r17	; 0x36
    1d4a:	2f ab       	std	Y+55, r18	; 0x37
    1d4c:	38 af       	std	Y+56, r19	; 0x38
    1d4e:	25 96       	adiw	r28, 0x05	; 5
    1d50:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d52:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d54:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d56:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d58:	25 97       	sbiw	r28, 0x05	; 5
    1d5a:	3a 01       	movw	r6, r20
    1d5c:	88 24       	eor	r8, r8
    1d5e:	99 24       	eor	r9, r9
    1d60:	40 70       	andi	r20, 0x00	; 0
    1d62:	50 70       	andi	r21, 0x00	; 0
    1d64:	a5 96       	adiw	r28, 0x25	; 37
    1d66:	2c af       	std	Y+60, r18	; 0x3c
    1d68:	3d af       	std	Y+61, r19	; 0x3d
    1d6a:	4e af       	std	Y+62, r20	; 0x3e
    1d6c:	5f af       	std	Y+63, r21	; 0x3f
    1d6e:	a5 97       	sbiw	r28, 0x25	; 37
    1d70:	c6 01       	movw	r24, r12
    1d72:	b5 01       	movw	r22, r10
    1d74:	a4 01       	movw	r20, r8
    1d76:	93 01       	movw	r18, r6
    1d78:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1d7c:	7b 01       	movw	r14, r22
    1d7e:	8c 01       	movw	r16, r24
    1d80:	c6 01       	movw	r24, r12
    1d82:	b5 01       	movw	r22, r10
    1d84:	a4 01       	movw	r20, r8
    1d86:	93 01       	movw	r18, r6
    1d88:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1d8c:	c9 01       	movw	r24, r18
    1d8e:	da 01       	movw	r26, r20
    1d90:	1c 01       	movw	r2, r24
    1d92:	2d 01       	movw	r4, r26
    1d94:	c2 01       	movw	r24, r4
    1d96:	b1 01       	movw	r22, r2
    1d98:	a5 96       	adiw	r28, 0x25	; 37
    1d9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1da0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1da2:	a5 97       	sbiw	r28, 0x25	; 37
    1da4:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1da8:	9b 01       	movw	r18, r22
    1daa:	ac 01       	movw	r20, r24
    1dac:	87 01       	movw	r16, r14
    1dae:	ff 24       	eor	r15, r15
    1db0:	ee 24       	eor	r14, r14
    1db2:	a9 ac       	ldd	r10, Y+57	; 0x39
    1db4:	ba ac       	ldd	r11, Y+58	; 0x3a
    1db6:	cb ac       	ldd	r12, Y+59	; 0x3b
    1db8:	dc ac       	ldd	r13, Y+60	; 0x3c
    1dba:	c6 01       	movw	r24, r12
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	bb 27       	eor	r27, r27
    1dc0:	57 01       	movw	r10, r14
    1dc2:	68 01       	movw	r12, r16
    1dc4:	a8 2a       	or	r10, r24
    1dc6:	b9 2a       	or	r11, r25
    1dc8:	ca 2a       	or	r12, r26
    1dca:	db 2a       	or	r13, r27
    1dcc:	a2 16       	cp	r10, r18
    1dce:	b3 06       	cpc	r11, r19
    1dd0:	c4 06       	cpc	r12, r20
    1dd2:	d5 06       	cpc	r13, r21
    1dd4:	10 f5       	brcc	.+68     	; 0x1e1a <__moddi3+0xc3a>
    1dd6:	08 94       	sec
    1dd8:	21 08       	sbc	r2, r1
    1dda:	31 08       	sbc	r3, r1
    1ddc:	41 08       	sbc	r4, r1
    1dde:	51 08       	sbc	r5, r1
    1de0:	25 96       	adiw	r28, 0x05	; 5
    1de2:	ec ac       	ldd	r14, Y+60	; 0x3c
    1de4:	fd ac       	ldd	r15, Y+61	; 0x3d
    1de6:	0e ad       	ldd	r16, Y+62	; 0x3e
    1de8:	1f ad       	ldd	r17, Y+63	; 0x3f
    1dea:	25 97       	sbiw	r28, 0x05	; 5
    1dec:	ae 0c       	add	r10, r14
    1dee:	bf 1c       	adc	r11, r15
    1df0:	c0 1e       	adc	r12, r16
    1df2:	d1 1e       	adc	r13, r17
    1df4:	ae 14       	cp	r10, r14
    1df6:	bf 04       	cpc	r11, r15
    1df8:	c0 06       	cpc	r12, r16
    1dfa:	d1 06       	cpc	r13, r17
    1dfc:	70 f0       	brcs	.+28     	; 0x1e1a <__moddi3+0xc3a>
    1dfe:	a2 16       	cp	r10, r18
    1e00:	b3 06       	cpc	r11, r19
    1e02:	c4 06       	cpc	r12, r20
    1e04:	d5 06       	cpc	r13, r21
    1e06:	48 f4       	brcc	.+18     	; 0x1e1a <__moddi3+0xc3a>
    1e08:	08 94       	sec
    1e0a:	21 08       	sbc	r2, r1
    1e0c:	31 08       	sbc	r3, r1
    1e0e:	41 08       	sbc	r4, r1
    1e10:	51 08       	sbc	r5, r1
    1e12:	ae 0c       	add	r10, r14
    1e14:	bf 1c       	adc	r11, r15
    1e16:	c0 1e       	adc	r12, r16
    1e18:	d1 1e       	adc	r13, r17
    1e1a:	a2 1a       	sub	r10, r18
    1e1c:	b3 0a       	sbc	r11, r19
    1e1e:	c4 0a       	sbc	r12, r20
    1e20:	d5 0a       	sbc	r13, r21
    1e22:	c6 01       	movw	r24, r12
    1e24:	b5 01       	movw	r22, r10
    1e26:	a4 01       	movw	r20, r8
    1e28:	93 01       	movw	r18, r6
    1e2a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1e2e:	7b 01       	movw	r14, r22
    1e30:	8c 01       	movw	r16, r24
    1e32:	c6 01       	movw	r24, r12
    1e34:	b5 01       	movw	r22, r10
    1e36:	a4 01       	movw	r20, r8
    1e38:	93 01       	movw	r18, r6
    1e3a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    1e3e:	c9 01       	movw	r24, r18
    1e40:	da 01       	movw	r26, r20
    1e42:	3c 01       	movw	r6, r24
    1e44:	4d 01       	movw	r8, r26
    1e46:	c4 01       	movw	r24, r8
    1e48:	b3 01       	movw	r22, r6
    1e4a:	a5 96       	adiw	r28, 0x25	; 37
    1e4c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1e4e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1e50:	4e ad       	ldd	r20, Y+62	; 0x3e
    1e52:	5f ad       	ldd	r21, Y+63	; 0x3f
    1e54:	a5 97       	sbiw	r28, 0x25	; 37
    1e56:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
    1e5e:	87 01       	movw	r16, r14
    1e60:	ff 24       	eor	r15, r15
    1e62:	ee 24       	eor	r14, r14
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e68:	ab ad       	ldd	r26, Y+59	; 0x3b
    1e6a:	bc ad       	ldd	r27, Y+60	; 0x3c
    1e6c:	a0 70       	andi	r26, 0x00	; 0
    1e6e:	b0 70       	andi	r27, 0x00	; 0
    1e70:	57 01       	movw	r10, r14
    1e72:	68 01       	movw	r12, r16
    1e74:	a8 2a       	or	r10, r24
    1e76:	b9 2a       	or	r11, r25
    1e78:	ca 2a       	or	r12, r26
    1e7a:	db 2a       	or	r13, r27
    1e7c:	a2 16       	cp	r10, r18
    1e7e:	b3 06       	cpc	r11, r19
    1e80:	c4 06       	cpc	r12, r20
    1e82:	d5 06       	cpc	r13, r21
    1e84:	10 f5       	brcc	.+68     	; 0x1eca <__moddi3+0xcea>
    1e86:	08 94       	sec
    1e88:	61 08       	sbc	r6, r1
    1e8a:	71 08       	sbc	r7, r1
    1e8c:	81 08       	sbc	r8, r1
    1e8e:	91 08       	sbc	r9, r1
    1e90:	25 96       	adiw	r28, 0x05	; 5
    1e92:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e94:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9a:	25 97       	sbiw	r28, 0x05	; 5
    1e9c:	a6 0e       	add	r10, r22
    1e9e:	b7 1e       	adc	r11, r23
    1ea0:	c8 1e       	adc	r12, r24
    1ea2:	d9 1e       	adc	r13, r25
    1ea4:	a6 16       	cp	r10, r22
    1ea6:	b7 06       	cpc	r11, r23
    1ea8:	c8 06       	cpc	r12, r24
    1eaa:	d9 06       	cpc	r13, r25
    1eac:	70 f0       	brcs	.+28     	; 0x1eca <__moddi3+0xcea>
    1eae:	a2 16       	cp	r10, r18
    1eb0:	b3 06       	cpc	r11, r19
    1eb2:	c4 06       	cpc	r12, r20
    1eb4:	d5 06       	cpc	r13, r21
    1eb6:	48 f4       	brcc	.+18     	; 0x1eca <__moddi3+0xcea>
    1eb8:	08 94       	sec
    1eba:	61 08       	sbc	r6, r1
    1ebc:	71 08       	sbc	r7, r1
    1ebe:	81 08       	sbc	r8, r1
    1ec0:	91 08       	sbc	r9, r1
    1ec2:	a6 0e       	add	r10, r22
    1ec4:	b7 1e       	adc	r11, r23
    1ec6:	c8 1e       	adc	r12, r24
    1ec8:	d9 1e       	adc	r13, r25
    1eca:	d6 01       	movw	r26, r12
    1ecc:	c5 01       	movw	r24, r10
    1ece:	82 1b       	sub	r24, r18
    1ed0:	93 0b       	sbc	r25, r19
    1ed2:	a4 0b       	sbc	r26, r20
    1ed4:	b5 0b       	sbc	r27, r21
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	9a ab       	std	Y+50, r25	; 0x32
    1eda:	ab ab       	std	Y+51, r26	; 0x33
    1edc:	bc ab       	std	Y+52, r27	; 0x34
    1ede:	d1 01       	movw	r26, r2
    1ee0:	99 27       	eor	r25, r25
    1ee2:	88 27       	eor	r24, r24
    1ee4:	84 01       	movw	r16, r8
    1ee6:	73 01       	movw	r14, r6
    1ee8:	e8 2a       	or	r14, r24
    1eea:	f9 2a       	or	r15, r25
    1eec:	0a 2b       	or	r16, r26
    1eee:	1b 2b       	or	r17, r27
    1ef0:	8f ef       	ldi	r24, 0xFF	; 255
    1ef2:	a8 2e       	mov	r10, r24
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	b8 2e       	mov	r11, r24
    1ef8:	c1 2c       	mov	r12, r1
    1efa:	d1 2c       	mov	r13, r1
    1efc:	ae 20       	and	r10, r14
    1efe:	bf 20       	and	r11, r15
    1f00:	c0 22       	and	r12, r16
    1f02:	d1 22       	and	r13, r17
    1f04:	78 01       	movw	r14, r16
    1f06:	00 27       	eor	r16, r16
    1f08:	11 27       	eor	r17, r17
    1f0a:	21 96       	adiw	r28, 0x01	; 1
    1f0c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f0e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f10:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f12:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f14:	21 97       	sbiw	r28, 0x01	; 1
    1f16:	2f ef       	ldi	r18, 0xFF	; 255
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	62 22       	and	r6, r18
    1f20:	73 22       	and	r7, r19
    1f22:	84 22       	and	r8, r20
    1f24:	95 22       	and	r9, r21
    1f26:	21 96       	adiw	r28, 0x01	; 1
    1f28:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f2a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	ac 01       	movw	r20, r24
    1f34:	66 27       	eor	r22, r22
    1f36:	77 27       	eor	r23, r23
    1f38:	ad 96       	adiw	r28, 0x2d	; 45
    1f3a:	4c af       	std	Y+60, r20	; 0x3c
    1f3c:	5d af       	std	Y+61, r21	; 0x3d
    1f3e:	6e af       	std	Y+62, r22	; 0x3e
    1f40:	7f af       	std	Y+63, r23	; 0x3f
    1f42:	ad 97       	sbiw	r28, 0x2d	; 45
    1f44:	c6 01       	movw	r24, r12
    1f46:	b5 01       	movw	r22, r10
    1f48:	a4 01       	movw	r20, r8
    1f4a:	93 01       	movw	r18, r6
    1f4c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	6c af       	std	Y+60, r22	; 0x3c
    1f54:	7d af       	std	Y+61, r23	; 0x3d
    1f56:	8e af       	std	Y+62, r24	; 0x3e
    1f58:	9f af       	std	Y+63, r25	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	c6 01       	movw	r24, r12
    1f5e:	b5 01       	movw	r22, r10
    1f60:	ad 96       	adiw	r28, 0x2d	; 45
    1f62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f6a:	ad 97       	sbiw	r28, 0x2d	; 45
    1f6c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1f70:	1b 01       	movw	r2, r22
    1f72:	2c 01       	movw	r4, r24
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	a4 01       	movw	r20, r8
    1f7a:	93 01       	movw	r18, r6
    1f7c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1f80:	5b 01       	movw	r10, r22
    1f82:	6c 01       	movw	r12, r24
    1f84:	c8 01       	movw	r24, r16
    1f86:	b7 01       	movw	r22, r14
    1f88:	ad 96       	adiw	r28, 0x2d	; 45
    1f8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f90:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f92:	ad 97       	sbiw	r28, 0x2d	; 45
    1f94:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    1f98:	7b 01       	movw	r14, r22
    1f9a:	8c 01       	movw	r16, r24
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	95 01       	movw	r18, r10
    1fa0:	22 0d       	add	r18, r2
    1fa2:	33 1d       	adc	r19, r3
    1fa4:	44 1d       	adc	r20, r4
    1fa6:	55 1d       	adc	r21, r5
    1fa8:	a9 96       	adiw	r28, 0x29	; 41
    1faa:	6c ac       	ldd	r6, Y+60	; 0x3c
    1fac:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fae:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fb0:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fb2:	a9 97       	sbiw	r28, 0x29	; 41
    1fb4:	c4 01       	movw	r24, r8
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	bb 27       	eor	r27, r27
    1fba:	28 0f       	add	r18, r24
    1fbc:	39 1f       	adc	r19, r25
    1fbe:	4a 1f       	adc	r20, r26
    1fc0:	5b 1f       	adc	r21, r27
    1fc2:	2a 15       	cp	r18, r10
    1fc4:	3b 05       	cpc	r19, r11
    1fc6:	4c 05       	cpc	r20, r12
    1fc8:	5d 05       	cpc	r21, r13
    1fca:	48 f4       	brcc	.+18     	; 0x1fde <__moddi3+0xdfe>
    1fcc:	81 2c       	mov	r8, r1
    1fce:	91 2c       	mov	r9, r1
    1fd0:	e1 e0       	ldi	r30, 0x01	; 1
    1fd2:	ae 2e       	mov	r10, r30
    1fd4:	b1 2c       	mov	r11, r1
    1fd6:	e8 0c       	add	r14, r8
    1fd8:	f9 1c       	adc	r15, r9
    1fda:	0a 1d       	adc	r16, r10
    1fdc:	1b 1d       	adc	r17, r11
    1fde:	ca 01       	movw	r24, r20
    1fe0:	aa 27       	eor	r26, r26
    1fe2:	bb 27       	eor	r27, r27
    1fe4:	57 01       	movw	r10, r14
    1fe6:	68 01       	movw	r12, r16
    1fe8:	a8 0e       	add	r10, r24
    1fea:	b9 1e       	adc	r11, r25
    1fec:	ca 1e       	adc	r12, r26
    1fee:	db 1e       	adc	r13, r27
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	33 27       	eor	r19, r19
    1ff4:	22 27       	eor	r18, r18
    1ff6:	a9 96       	adiw	r28, 0x29	; 41
    1ff8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ffa:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ffc:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ffe:	bf ad       	ldd	r27, Y+63	; 0x3f
    2000:	a9 97       	sbiw	r28, 0x29	; 41
    2002:	a0 70       	andi	r26, 0x00	; 0
    2004:	b0 70       	andi	r27, 0x00	; 0
    2006:	28 0f       	add	r18, r24
    2008:	39 1f       	adc	r19, r25
    200a:	4a 1f       	adc	r20, r26
    200c:	5b 1f       	adc	r21, r27
    200e:	e9 a8       	ldd	r14, Y+49	; 0x31
    2010:	fa a8       	ldd	r15, Y+50	; 0x32
    2012:	0b a9       	ldd	r16, Y+51	; 0x33
    2014:	1c a9       	ldd	r17, Y+52	; 0x34
    2016:	ea 14       	cp	r14, r10
    2018:	fb 04       	cpc	r15, r11
    201a:	0c 05       	cpc	r16, r12
    201c:	1d 05       	cpc	r17, r13
    201e:	70 f0       	brcs	.+28     	; 0x203c <__moddi3+0xe5c>
    2020:	ae 14       	cp	r10, r14
    2022:	bf 04       	cpc	r11, r15
    2024:	c0 06       	cpc	r12, r16
    2026:	d1 06       	cpc	r13, r17
    2028:	89 f5       	brne	.+98     	; 0x208c <__moddi3+0xeac>
    202a:	6d a9       	ldd	r22, Y+53	; 0x35
    202c:	7e a9       	ldd	r23, Y+54	; 0x36
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	62 17       	cp	r22, r18
    2034:	73 07       	cpc	r23, r19
    2036:	84 07       	cpc	r24, r20
    2038:	95 07       	cpc	r25, r21
    203a:	40 f5       	brcc	.+80     	; 0x208c <__moddi3+0xeac>
    203c:	da 01       	movw	r26, r20
    203e:	c9 01       	movw	r24, r18
    2040:	21 96       	adiw	r28, 0x01	; 1
    2042:	6c ac       	ldd	r6, Y+60	; 0x3c
    2044:	7d ac       	ldd	r7, Y+61	; 0x3d
    2046:	8e ac       	ldd	r8, Y+62	; 0x3e
    2048:	9f ac       	ldd	r9, Y+63	; 0x3f
    204a:	21 97       	sbiw	r28, 0x01	; 1
    204c:	86 19       	sub	r24, r6
    204e:	97 09       	sbc	r25, r7
    2050:	a8 09       	sbc	r26, r8
    2052:	b9 09       	sbc	r27, r9
    2054:	25 96       	adiw	r28, 0x05	; 5
    2056:	ec ac       	ldd	r14, Y+60	; 0x3c
    2058:	fd ac       	ldd	r15, Y+61	; 0x3d
    205a:	0e ad       	ldd	r16, Y+62	; 0x3e
    205c:	1f ad       	ldd	r17, Y+63	; 0x3f
    205e:	25 97       	sbiw	r28, 0x05	; 5
    2060:	ae 18       	sub	r10, r14
    2062:	bf 08       	sbc	r11, r15
    2064:	c0 0a       	sbc	r12, r16
    2066:	d1 0a       	sbc	r13, r17
    2068:	ee 24       	eor	r14, r14
    206a:	ff 24       	eor	r15, r15
    206c:	87 01       	movw	r16, r14
    206e:	28 17       	cp	r18, r24
    2070:	39 07       	cpc	r19, r25
    2072:	4a 07       	cpc	r20, r26
    2074:	5b 07       	cpc	r21, r27
    2076:	28 f4       	brcc	.+10     	; 0x2082 <__moddi3+0xea2>
    2078:	21 e0       	ldi	r18, 0x01	; 1
    207a:	e2 2e       	mov	r14, r18
    207c:	f1 2c       	mov	r15, r1
    207e:	01 2d       	mov	r16, r1
    2080:	11 2d       	mov	r17, r1
    2082:	ae 18       	sub	r10, r14
    2084:	bf 08       	sbc	r11, r15
    2086:	c0 0a       	sbc	r12, r16
    2088:	d1 0a       	sbc	r13, r17
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <__moddi3+0xeb0>
    208c:	da 01       	movw	r26, r20
    208e:	c9 01       	movw	r24, r18
    2090:	6d a8       	ldd	r6, Y+53	; 0x35
    2092:	7e a8       	ldd	r7, Y+54	; 0x36
    2094:	8f a8       	ldd	r8, Y+55	; 0x37
    2096:	98 ac       	ldd	r9, Y+56	; 0x38
    2098:	68 1a       	sub	r6, r24
    209a:	79 0a       	sbc	r7, r25
    209c:	8a 0a       	sbc	r8, r26
    209e:	9b 0a       	sbc	r9, r27
    20a0:	09 a9       	ldd	r16, Y+49	; 0x31
    20a2:	1a a9       	ldd	r17, Y+50	; 0x32
    20a4:	2b a9       	ldd	r18, Y+51	; 0x33
    20a6:	3c a9       	ldd	r19, Y+52	; 0x34
    20a8:	0a 19       	sub	r16, r10
    20aa:	1b 09       	sbc	r17, r11
    20ac:	2c 09       	sbc	r18, r12
    20ae:	3d 09       	sbc	r19, r13
    20b0:	58 01       	movw	r10, r16
    20b2:	69 01       	movw	r12, r18
    20b4:	22 24       	eor	r2, r2
    20b6:	33 24       	eor	r3, r3
    20b8:	21 01       	movw	r4, r2
    20ba:	2d a9       	ldd	r18, Y+53	; 0x35
    20bc:	3e a9       	ldd	r19, Y+54	; 0x36
    20be:	4f a9       	ldd	r20, Y+55	; 0x37
    20c0:	58 ad       	ldd	r21, Y+56	; 0x38
    20c2:	26 15       	cp	r18, r6
    20c4:	37 05       	cpc	r19, r7
    20c6:	48 05       	cpc	r20, r8
    20c8:	59 05       	cpc	r21, r9
    20ca:	28 f4       	brcc	.+10     	; 0x20d6 <__moddi3+0xef6>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	28 2e       	mov	r2, r24
    20d0:	31 2c       	mov	r3, r1
    20d2:	41 2c       	mov	r4, r1
    20d4:	51 2c       	mov	r5, r1
    20d6:	86 01       	movw	r16, r12
    20d8:	75 01       	movw	r14, r10
    20da:	e2 18       	sub	r14, r2
    20dc:	f3 08       	sbc	r15, r3
    20de:	04 09       	sbc	r16, r4
    20e0:	15 09       	sbc	r17, r5
    20e2:	a8 01       	movw	r20, r16
    20e4:	97 01       	movw	r18, r14
    20e6:	e2 96       	adiw	r28, 0x32	; 50
    20e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    20ea:	e2 97       	sbiw	r28, 0x32	; 50
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <__moddi3+0xf16>
    20ee:	22 0f       	add	r18, r18
    20f0:	33 1f       	adc	r19, r19
    20f2:	44 1f       	adc	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	0a 94       	dec	r0
    20f8:	d2 f7       	brpl	.-12     	; 0x20ee <__moddi3+0xf0e>
    20fa:	d4 01       	movw	r26, r8
    20fc:	c3 01       	movw	r24, r6
    20fe:	e3 96       	adiw	r28, 0x33	; 51
    2100:	0f ac       	ldd	r0, Y+63	; 0x3f
    2102:	e3 97       	sbiw	r28, 0x33	; 51
    2104:	04 c0       	rjmp	.+8      	; 0x210e <__moddi3+0xf2e>
    2106:	b6 95       	lsr	r27
    2108:	a7 95       	ror	r26
    210a:	97 95       	ror	r25
    210c:	87 95       	ror	r24
    210e:	0a 94       	dec	r0
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <__moddi3+0xf26>
    2112:	28 2b       	or	r18, r24
    2114:	39 2b       	or	r19, r25
    2116:	4a 2b       	or	r20, r26
    2118:	5b 2b       	or	r21, r27
    211a:	29 a7       	std	Y+41, r18	; 0x29
    211c:	3a a7       	std	Y+42, r19	; 0x2a
    211e:	4b a7       	std	Y+43, r20	; 0x2b
    2120:	5c a7       	std	Y+44, r21	; 0x2c
    2122:	e3 96       	adiw	r28, 0x33	; 51
    2124:	0f ac       	ldd	r0, Y+63	; 0x3f
    2126:	e3 97       	sbiw	r28, 0x33	; 51
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <__moddi3+0xf52>
    212a:	16 95       	lsr	r17
    212c:	07 95       	ror	r16
    212e:	f7 94       	ror	r15
    2130:	e7 94       	ror	r14
    2132:	0a 94       	dec	r0
    2134:	d2 f7       	brpl	.-12     	; 0x212a <__moddi3+0xf4a>
    2136:	ed a6       	std	Y+45, r14	; 0x2d
    2138:	fe a6       	std	Y+46, r15	; 0x2e
    213a:	0f a7       	std	Y+47, r16	; 0x2f
    213c:	18 ab       	std	Y+48, r17	; 0x30
    213e:	29 8b       	std	Y+17, r18	; 0x11
    2140:	8a a5       	ldd	r24, Y+42	; 0x2a
    2142:	8a 8b       	std	Y+18, r24	; 0x12
    2144:	8b a5       	ldd	r24, Y+43	; 0x2b
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	8c a5       	ldd	r24, Y+44	; 0x2c
    214a:	8c 8b       	std	Y+20, r24	; 0x14
    214c:	ed 8a       	std	Y+21, r14	; 0x15
    214e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2150:	8e 8b       	std	Y+22, r24	; 0x16
    2152:	8f a5       	ldd	r24, Y+47	; 0x2f
    2154:	8f 8b       	std	Y+23, r24	; 0x17
    2156:	88 a9       	ldd	r24, Y+48	; 0x30
    2158:	88 8f       	std	Y+24, r24	; 0x18
    215a:	e1 96       	adiw	r28, 0x31	; 49
    215c:	4c ad       	ldd	r20, Y+60	; 0x3c
    215e:	5d ad       	ldd	r21, Y+61	; 0x3d
    2160:	6e ad       	ldd	r22, Y+62	; 0x3e
    2162:	7f ad       	ldd	r23, Y+63	; 0x3f
    2164:	e1 97       	sbiw	r28, 0x31	; 49
    2166:	41 15       	cp	r20, r1
    2168:	51 05       	cpc	r21, r1
    216a:	61 05       	cpc	r22, r1
    216c:	71 05       	cpc	r23, r1
    216e:	09 f4       	brne	.+2      	; 0x2172 <__moddi3+0xf92>
    2170:	67 c0       	rjmp	.+206    	; 0x2240 <__moddi3+0x1060>
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	2a 89       	ldd	r18, Y+18	; 0x12
    2176:	3b 89       	ldd	r19, Y+19	; 0x13
    2178:	4c 89       	ldd	r20, Y+20	; 0x14
    217a:	5d 89       	ldd	r21, Y+21	; 0x15
    217c:	ae 89       	ldd	r26, Y+22	; 0x16
    217e:	bf 89       	ldd	r27, Y+23	; 0x17
    2180:	18 8d       	ldd	r17, Y+24	; 0x18
    2182:	f8 2f       	mov	r31, r24
    2184:	f1 95       	neg	r31
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	1f 16       	cp	r1, r31
    218a:	08 f0       	brcs	.+2      	; 0x218e <__moddi3+0xfae>
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	82 2f       	mov	r24, r18
    2190:	81 95       	neg	r24
    2192:	21 e0       	ldi	r18, 0x01	; 1
    2194:	18 16       	cp	r1, r24
    2196:	08 f0       	brcs	.+2      	; 0x219a <__moddi3+0xfba>
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	e8 2f       	mov	r30, r24
    219c:	e9 1b       	sub	r30, r25
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	8e 17       	cp	r24, r30
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__moddi3+0xfc6>
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	29 2b       	or	r18, r25
    21a8:	83 2f       	mov	r24, r19
    21aa:	81 95       	neg	r24
    21ac:	31 e0       	ldi	r19, 0x01	; 1
    21ae:	18 16       	cp	r1, r24
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__moddi3+0xfd4>
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	78 2f       	mov	r23, r24
    21b6:	72 1b       	sub	r23, r18
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	87 17       	cp	r24, r23
    21bc:	08 f0       	brcs	.+2      	; 0x21c0 <__moddi3+0xfe0>
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	39 2b       	or	r19, r25
    21c2:	84 2f       	mov	r24, r20
    21c4:	81 95       	neg	r24
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	18 16       	cp	r1, r24
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <__moddi3+0xfee>
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	68 2f       	mov	r22, r24
    21d0:	63 1b       	sub	r22, r19
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	86 17       	cp	r24, r22
    21d6:	08 f0       	brcs	.+2      	; 0x21da <__moddi3+0xffa>
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	29 2b       	or	r18, r25
    21dc:	85 2f       	mov	r24, r21
    21de:	81 95       	neg	r24
    21e0:	31 e0       	ldi	r19, 0x01	; 1
    21e2:	18 16       	cp	r1, r24
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <__moddi3+0x1008>
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	58 2f       	mov	r21, r24
    21ea:	52 1b       	sub	r21, r18
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	85 17       	cp	r24, r21
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <__moddi3+0x1014>
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	39 2b       	or	r19, r25
    21f6:	8a 2f       	mov	r24, r26
    21f8:	81 95       	neg	r24
    21fa:	21 e0       	ldi	r18, 0x01	; 1
    21fc:	18 16       	cp	r1, r24
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <__moddi3+0x1022>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	48 2f       	mov	r20, r24
    2204:	43 1b       	sub	r20, r19
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	84 17       	cp	r24, r20
    220a:	08 f0       	brcs	.+2      	; 0x220e <__moddi3+0x102e>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	29 2b       	or	r18, r25
    2210:	8b 2f       	mov	r24, r27
    2212:	81 95       	neg	r24
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	18 16       	cp	r1, r24
    2218:	08 f0       	brcs	.+2      	; 0x221c <__moddi3+0x103c>
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	38 2f       	mov	r19, r24
    221e:	32 1b       	sub	r19, r18
    2220:	21 e0       	ldi	r18, 0x01	; 1
    2222:	83 17       	cp	r24, r19
    2224:	08 f0       	brcs	.+2      	; 0x2228 <__moddi3+0x1048>
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	92 2b       	or	r25, r18
    222a:	81 2f       	mov	r24, r17
    222c:	81 95       	neg	r24
    222e:	89 1b       	sub	r24, r25
    2230:	f9 8b       	std	Y+17, r31	; 0x11
    2232:	ea 8b       	std	Y+18, r30	; 0x12
    2234:	7b 8b       	std	Y+19, r23	; 0x13
    2236:	6c 8b       	std	Y+20, r22	; 0x14
    2238:	5d 8b       	std	Y+21, r21	; 0x15
    223a:	4e 8b       	std	Y+22, r20	; 0x16
    223c:	3f 8b       	std	Y+23, r19	; 0x17
    223e:	88 8f       	std	Y+24, r24	; 0x18
    2240:	29 89       	ldd	r18, Y+17	; 0x11
    2242:	3a 89       	ldd	r19, Y+18	; 0x12
    2244:	4b 89       	ldd	r20, Y+19	; 0x13
    2246:	5c 89       	ldd	r21, Y+20	; 0x14
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	c9 58       	subi	r28, 0x89	; 137
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	e2 e1       	ldi	r30, 0x12	; 18
    2256:	0c 94 e5 36 	jmp	0x6dca	; 0x6dca <__epilogue_restores__>

0000225a <__udivdi3>:
    225a:	ae e5       	ldi	r26, 0x5E	; 94
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e3 e3       	ldi	r30, 0x33	; 51
    2260:	f1 e1       	ldi	r31, 0x11	; 17
    2262:	0c 94 c9 36 	jmp	0x6d92	; 0x6d92 <__prologue_saves__>
    2266:	a8 e0       	ldi	r26, 0x08	; 8
    2268:	4e 01       	movw	r8, r28
    226a:	08 94       	sec
    226c:	81 1c       	adc	r8, r1
    226e:	91 1c       	adc	r9, r1
    2270:	f4 01       	movw	r30, r8
    2272:	6a 2e       	mov	r6, r26
    2274:	11 92       	st	Z+, r1
    2276:	6a 94       	dec	r6
    2278:	e9 f7       	brne	.-6      	; 0x2274 <__udivdi3+0x1a>
    227a:	29 83       	std	Y+1, r18	; 0x01
    227c:	3a 83       	std	Y+2, r19	; 0x02
    227e:	4b 83       	std	Y+3, r20	; 0x03
    2280:	5c 83       	std	Y+4, r21	; 0x04
    2282:	6d 83       	std	Y+5, r22	; 0x05
    2284:	7e 83       	std	Y+6, r23	; 0x06
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	ce 01       	movw	r24, r28
    228c:	09 96       	adiw	r24, 0x09	; 9
    228e:	fc 01       	movw	r30, r24
    2290:	11 92       	st	Z+, r1
    2292:	aa 95       	dec	r26
    2294:	e9 f7       	brne	.-6      	; 0x2290 <__udivdi3+0x36>
    2296:	a9 86       	std	Y+9, r10	; 0x09
    2298:	ba 86       	std	Y+10, r11	; 0x0a
    229a:	cb 86       	std	Y+11, r12	; 0x0b
    229c:	dc 86       	std	Y+12, r13	; 0x0c
    229e:	ed 86       	std	Y+13, r14	; 0x0d
    22a0:	fe 86       	std	Y+14, r15	; 0x0e
    22a2:	0f 87       	std	Y+15, r16	; 0x0f
    22a4:	18 8b       	std	Y+16, r17	; 0x10
    22a6:	29 84       	ldd	r2, Y+9	; 0x09
    22a8:	3a 84       	ldd	r3, Y+10	; 0x0a
    22aa:	4b 84       	ldd	r4, Y+11	; 0x0b
    22ac:	5c 84       	ldd	r5, Y+12	; 0x0c
    22ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    22b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    22b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    22b4:	18 89       	ldd	r17, Y+16	; 0x10
    22b6:	69 80       	ldd	r6, Y+1	; 0x01
    22b8:	7a 80       	ldd	r7, Y+2	; 0x02
    22ba:	8b 80       	ldd	r8, Y+3	; 0x03
    22bc:	9c 80       	ldd	r9, Y+4	; 0x04
    22be:	6d a6       	std	Y+45, r6	; 0x2d
    22c0:	7e a6       	std	Y+46, r7	; 0x2e
    22c2:	8f a6       	std	Y+47, r8	; 0x2f
    22c4:	98 aa       	std	Y+48, r9	; 0x30
    22c6:	6d 80       	ldd	r6, Y+5	; 0x05
    22c8:	7e 80       	ldd	r7, Y+6	; 0x06
    22ca:	8f 80       	ldd	r8, Y+7	; 0x07
    22cc:	98 84       	ldd	r9, Y+8	; 0x08
    22ce:	e1 14       	cp	r14, r1
    22d0:	f1 04       	cpc	r15, r1
    22d2:	01 05       	cpc	r16, r1
    22d4:	11 05       	cpc	r17, r1
    22d6:	09 f0       	breq	.+2      	; 0x22da <__udivdi3+0x80>
    22d8:	b3 c3       	rjmp	.+1894   	; 0x2a40 <__udivdi3+0x7e6>
    22da:	62 14       	cp	r6, r2
    22dc:	73 04       	cpc	r7, r3
    22de:	84 04       	cpc	r8, r4
    22e0:	95 04       	cpc	r9, r5
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <__udivdi3+0x8c>
    22e4:	3d c1       	rjmp	.+634    	; 0x2560 <__udivdi3+0x306>
    22e6:	00 e0       	ldi	r16, 0x00	; 0
    22e8:	20 16       	cp	r2, r16
    22ea:	00 e0       	ldi	r16, 0x00	; 0
    22ec:	30 06       	cpc	r3, r16
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	40 06       	cpc	r4, r16
    22f2:	00 e0       	ldi	r16, 0x00	; 0
    22f4:	50 06       	cpc	r5, r16
    22f6:	88 f4       	brcc	.+34     	; 0x231a <__udivdi3+0xc0>
    22f8:	1f ef       	ldi	r17, 0xFF	; 255
    22fa:	21 16       	cp	r2, r17
    22fc:	31 04       	cpc	r3, r1
    22fe:	41 04       	cpc	r4, r1
    2300:	51 04       	cpc	r5, r1
    2302:	39 f0       	breq	.+14     	; 0x2312 <__udivdi3+0xb8>
    2304:	30 f0       	brcs	.+12     	; 0x2312 <__udivdi3+0xb8>
    2306:	48 e0       	ldi	r20, 0x08	; 8
    2308:	e4 2e       	mov	r14, r20
    230a:	f1 2c       	mov	r15, r1
    230c:	01 2d       	mov	r16, r1
    230e:	11 2d       	mov	r17, r1
    2310:	18 c0       	rjmp	.+48     	; 0x2342 <__udivdi3+0xe8>
    2312:	ee 24       	eor	r14, r14
    2314:	ff 24       	eor	r15, r15
    2316:	87 01       	movw	r16, r14
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <__udivdi3+0xe8>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	22 16       	cp	r2, r18
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	32 06       	cpc	r3, r18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	42 06       	cpc	r4, r18
    2326:	21 e0       	ldi	r18, 0x01	; 1
    2328:	52 06       	cpc	r5, r18
    232a:	30 f0       	brcs	.+12     	; 0x2338 <__udivdi3+0xde>
    232c:	38 e1       	ldi	r19, 0x18	; 24
    232e:	e3 2e       	mov	r14, r19
    2330:	f1 2c       	mov	r15, r1
    2332:	01 2d       	mov	r16, r1
    2334:	11 2d       	mov	r17, r1
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <__udivdi3+0xe8>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	e2 2e       	mov	r14, r18
    233c:	f1 2c       	mov	r15, r1
    233e:	01 2d       	mov	r16, r1
    2340:	11 2d       	mov	r17, r1
    2342:	d2 01       	movw	r26, r4
    2344:	c1 01       	movw	r24, r2
    2346:	0e 2c       	mov	r0, r14
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <__udivdi3+0xf8>
    234a:	b6 95       	lsr	r27
    234c:	a7 95       	ror	r26
    234e:	97 95       	ror	r25
    2350:	87 95       	ror	r24
    2352:	0a 94       	dec	r0
    2354:	d2 f7       	brpl	.-12     	; 0x234a <__udivdi3+0xf0>
    2356:	8f 52       	subi	r24, 0x2F	; 47
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	dc 01       	movw	r26, r24
    235c:	2c 91       	ld	r18, X
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e0       	ldi	r26, 0x00	; 0
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	8e 19       	sub	r24, r14
    2368:	9f 09       	sbc	r25, r15
    236a:	a0 0b       	sbc	r26, r16
    236c:	b1 0b       	sbc	r27, r17
    236e:	7c 01       	movw	r14, r24
    2370:	8d 01       	movw	r16, r26
    2372:	e2 1a       	sub	r14, r18
    2374:	f1 08       	sbc	r15, r1
    2376:	01 09       	sbc	r16, r1
    2378:	11 09       	sbc	r17, r1
    237a:	e1 14       	cp	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	01 05       	cpc	r16, r1
    2380:	11 05       	cpc	r17, r1
    2382:	a1 f1       	breq	.+104    	; 0x23ec <__udivdi3+0x192>
    2384:	0e 2c       	mov	r0, r14
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <__udivdi3+0x136>
    2388:	22 0c       	add	r2, r2
    238a:	33 1c       	adc	r3, r3
    238c:	44 1c       	adc	r4, r4
    238e:	55 1c       	adc	r5, r5
    2390:	0a 94       	dec	r0
    2392:	d2 f7       	brpl	.-12     	; 0x2388 <__udivdi3+0x12e>
    2394:	a4 01       	movw	r20, r8
    2396:	93 01       	movw	r18, r6
    2398:	0e 2c       	mov	r0, r14
    239a:	04 c0       	rjmp	.+8      	; 0x23a4 <__udivdi3+0x14a>
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	44 1f       	adc	r20, r20
    23a2:	55 1f       	adc	r21, r21
    23a4:	0a 94       	dec	r0
    23a6:	d2 f7       	brpl	.-12     	; 0x239c <__udivdi3+0x142>
    23a8:	80 e2       	ldi	r24, 0x20	; 32
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	8e 19       	sub	r24, r14
    23ae:	9f 09       	sbc	r25, r15
    23b0:	6d a4       	ldd	r6, Y+45	; 0x2d
    23b2:	7e a4       	ldd	r7, Y+46	; 0x2e
    23b4:	8f a4       	ldd	r8, Y+47	; 0x2f
    23b6:	98 a8       	ldd	r9, Y+48	; 0x30
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__udivdi3+0x168>
    23ba:	96 94       	lsr	r9
    23bc:	87 94       	ror	r8
    23be:	77 94       	ror	r7
    23c0:	67 94       	ror	r6
    23c2:	8a 95       	dec	r24
    23c4:	d2 f7       	brpl	.-12     	; 0x23ba <__udivdi3+0x160>
    23c6:	62 2a       	or	r6, r18
    23c8:	73 2a       	or	r7, r19
    23ca:	84 2a       	or	r8, r20
    23cc:	95 2a       	or	r9, r21
    23ce:	ad a4       	ldd	r10, Y+45	; 0x2d
    23d0:	be a4       	ldd	r11, Y+46	; 0x2e
    23d2:	cf a4       	ldd	r12, Y+47	; 0x2f
    23d4:	d8 a8       	ldd	r13, Y+48	; 0x30
    23d6:	04 c0       	rjmp	.+8      	; 0x23e0 <__udivdi3+0x186>
    23d8:	aa 0c       	add	r10, r10
    23da:	bb 1c       	adc	r11, r11
    23dc:	cc 1c       	adc	r12, r12
    23de:	dd 1c       	adc	r13, r13
    23e0:	ea 94       	dec	r14
    23e2:	d2 f7       	brpl	.-12     	; 0x23d8 <__udivdi3+0x17e>
    23e4:	ad a6       	std	Y+45, r10	; 0x2d
    23e6:	be a6       	std	Y+46, r11	; 0x2e
    23e8:	cf a6       	std	Y+47, r12	; 0x2f
    23ea:	d8 aa       	std	Y+48, r13	; 0x30
    23ec:	62 01       	movw	r12, r4
    23ee:	ee 24       	eor	r14, r14
    23f0:	ff 24       	eor	r15, r15
    23f2:	cd aa       	std	Y+53, r12	; 0x35
    23f4:	de aa       	std	Y+54, r13	; 0x36
    23f6:	ef aa       	std	Y+55, r14	; 0x37
    23f8:	f8 ae       	std	Y+56, r15	; 0x38
    23fa:	92 01       	movw	r18, r4
    23fc:	81 01       	movw	r16, r2
    23fe:	20 70       	andi	r18, 0x00	; 0
    2400:	30 70       	andi	r19, 0x00	; 0
    2402:	09 af       	std	Y+57, r16	; 0x39
    2404:	1a af       	std	Y+58, r17	; 0x3a
    2406:	2b af       	std	Y+59, r18	; 0x3b
    2408:	3c af       	std	Y+60, r19	; 0x3c
    240a:	c4 01       	movw	r24, r8
    240c:	b3 01       	movw	r22, r6
    240e:	a7 01       	movw	r20, r14
    2410:	96 01       	movw	r18, r12
    2412:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    2416:	7b 01       	movw	r14, r22
    2418:	8c 01       	movw	r16, r24
    241a:	c4 01       	movw	r24, r8
    241c:	b3 01       	movw	r22, r6
    241e:	2d a9       	ldd	r18, Y+53	; 0x35
    2420:	3e a9       	ldd	r19, Y+54	; 0x36
    2422:	4f a9       	ldd	r20, Y+55	; 0x37
    2424:	58 ad       	ldd	r21, Y+56	; 0x38
    2426:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    242a:	c9 01       	movw	r24, r18
    242c:	da 01       	movw	r26, r20
    242e:	3c 01       	movw	r6, r24
    2430:	4d 01       	movw	r8, r26
    2432:	c4 01       	movw	r24, r8
    2434:	b3 01       	movw	r22, r6
    2436:	29 ad       	ldd	r18, Y+57	; 0x39
    2438:	3a ad       	ldd	r19, Y+58	; 0x3a
    243a:	4b ad       	ldd	r20, Y+59	; 0x3b
    243c:	5c ad       	ldd	r21, Y+60	; 0x3c
    243e:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2442:	9b 01       	movw	r18, r22
    2444:	ac 01       	movw	r20, r24
    2446:	87 01       	movw	r16, r14
    2448:	ff 24       	eor	r15, r15
    244a:	ee 24       	eor	r14, r14
    244c:	ad a4       	ldd	r10, Y+45	; 0x2d
    244e:	be a4       	ldd	r11, Y+46	; 0x2e
    2450:	cf a4       	ldd	r12, Y+47	; 0x2f
    2452:	d8 a8       	ldd	r13, Y+48	; 0x30
    2454:	c6 01       	movw	r24, r12
    2456:	aa 27       	eor	r26, r26
    2458:	bb 27       	eor	r27, r27
    245a:	57 01       	movw	r10, r14
    245c:	68 01       	movw	r12, r16
    245e:	a8 2a       	or	r10, r24
    2460:	b9 2a       	or	r11, r25
    2462:	ca 2a       	or	r12, r26
    2464:	db 2a       	or	r13, r27
    2466:	a2 16       	cp	r10, r18
    2468:	b3 06       	cpc	r11, r19
    246a:	c4 06       	cpc	r12, r20
    246c:	d5 06       	cpc	r13, r21
    246e:	e0 f4       	brcc	.+56     	; 0x24a8 <__udivdi3+0x24e>
    2470:	08 94       	sec
    2472:	61 08       	sbc	r6, r1
    2474:	71 08       	sbc	r7, r1
    2476:	81 08       	sbc	r8, r1
    2478:	91 08       	sbc	r9, r1
    247a:	a2 0c       	add	r10, r2
    247c:	b3 1c       	adc	r11, r3
    247e:	c4 1c       	adc	r12, r4
    2480:	d5 1c       	adc	r13, r5
    2482:	a2 14       	cp	r10, r2
    2484:	b3 04       	cpc	r11, r3
    2486:	c4 04       	cpc	r12, r4
    2488:	d5 04       	cpc	r13, r5
    248a:	70 f0       	brcs	.+28     	; 0x24a8 <__udivdi3+0x24e>
    248c:	a2 16       	cp	r10, r18
    248e:	b3 06       	cpc	r11, r19
    2490:	c4 06       	cpc	r12, r20
    2492:	d5 06       	cpc	r13, r21
    2494:	48 f4       	brcc	.+18     	; 0x24a8 <__udivdi3+0x24e>
    2496:	08 94       	sec
    2498:	61 08       	sbc	r6, r1
    249a:	71 08       	sbc	r7, r1
    249c:	81 08       	sbc	r8, r1
    249e:	91 08       	sbc	r9, r1
    24a0:	a2 0c       	add	r10, r2
    24a2:	b3 1c       	adc	r11, r3
    24a4:	c4 1c       	adc	r12, r4
    24a6:	d5 1c       	adc	r13, r5
    24a8:	a2 1a       	sub	r10, r18
    24aa:	b3 0a       	sbc	r11, r19
    24ac:	c4 0a       	sbc	r12, r20
    24ae:	d5 0a       	sbc	r13, r21
    24b0:	c6 01       	movw	r24, r12
    24b2:	b5 01       	movw	r22, r10
    24b4:	2d a9       	ldd	r18, Y+53	; 0x35
    24b6:	3e a9       	ldd	r19, Y+54	; 0x36
    24b8:	4f a9       	ldd	r20, Y+55	; 0x37
    24ba:	58 ad       	ldd	r21, Y+56	; 0x38
    24bc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    24c0:	7b 01       	movw	r14, r22
    24c2:	8c 01       	movw	r16, r24
    24c4:	c6 01       	movw	r24, r12
    24c6:	b5 01       	movw	r22, r10
    24c8:	2d a9       	ldd	r18, Y+53	; 0x35
    24ca:	3e a9       	ldd	r19, Y+54	; 0x36
    24cc:	4f a9       	ldd	r20, Y+55	; 0x37
    24ce:	58 ad       	ldd	r21, Y+56	; 0x38
    24d0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    24d4:	c9 01       	movw	r24, r18
    24d6:	da 01       	movw	r26, r20
    24d8:	5c 01       	movw	r10, r24
    24da:	6d 01       	movw	r12, r26
    24dc:	c6 01       	movw	r24, r12
    24de:	b5 01       	movw	r22, r10
    24e0:	29 ad       	ldd	r18, Y+57	; 0x39
    24e2:	3a ad       	ldd	r19, Y+58	; 0x3a
    24e4:	4b ad       	ldd	r20, Y+59	; 0x3b
    24e6:	5c ad       	ldd	r21, Y+60	; 0x3c
    24e8:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	87 01       	movw	r16, r14
    24f2:	ff 24       	eor	r15, r15
    24f4:	ee 24       	eor	r14, r14
    24f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    24f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fa:	af a5       	ldd	r26, Y+47	; 0x2f
    24fc:	b8 a9       	ldd	r27, Y+48	; 0x30
    24fe:	a0 70       	andi	r26, 0x00	; 0
    2500:	b0 70       	andi	r27, 0x00	; 0
    2502:	e8 2a       	or	r14, r24
    2504:	f9 2a       	or	r15, r25
    2506:	0a 2b       	or	r16, r26
    2508:	1b 2b       	or	r17, r27
    250a:	e2 16       	cp	r14, r18
    250c:	f3 06       	cpc	r15, r19
    250e:	04 07       	cpc	r16, r20
    2510:	15 07       	cpc	r17, r21
    2512:	c0 f4       	brcc	.+48     	; 0x2544 <__udivdi3+0x2ea>
    2514:	08 94       	sec
    2516:	a1 08       	sbc	r10, r1
    2518:	b1 08       	sbc	r11, r1
    251a:	c1 08       	sbc	r12, r1
    251c:	d1 08       	sbc	r13, r1
    251e:	e2 0c       	add	r14, r2
    2520:	f3 1c       	adc	r15, r3
    2522:	04 1d       	adc	r16, r4
    2524:	15 1d       	adc	r17, r5
    2526:	e2 14       	cp	r14, r2
    2528:	f3 04       	cpc	r15, r3
    252a:	04 05       	cpc	r16, r4
    252c:	15 05       	cpc	r17, r5
    252e:	50 f0       	brcs	.+20     	; 0x2544 <__udivdi3+0x2ea>
    2530:	e2 16       	cp	r14, r18
    2532:	f3 06       	cpc	r15, r19
    2534:	04 07       	cpc	r16, r20
    2536:	15 07       	cpc	r17, r21
    2538:	28 f4       	brcc	.+10     	; 0x2544 <__udivdi3+0x2ea>
    253a:	08 94       	sec
    253c:	a1 08       	sbc	r10, r1
    253e:	b1 08       	sbc	r11, r1
    2540:	c1 08       	sbc	r12, r1
    2542:	d1 08       	sbc	r13, r1
    2544:	d3 01       	movw	r26, r6
    2546:	99 27       	eor	r25, r25
    2548:	88 27       	eor	r24, r24
    254a:	86 01       	movw	r16, r12
    254c:	75 01       	movw	r14, r10
    254e:	e8 2a       	or	r14, r24
    2550:	f9 2a       	or	r15, r25
    2552:	0a 2b       	or	r16, r26
    2554:	1b 2b       	or	r17, r27
    2556:	e9 aa       	std	Y+49, r14	; 0x31
    2558:	fa aa       	std	Y+50, r15	; 0x32
    255a:	0b ab       	std	Y+51, r16	; 0x33
    255c:	1c ab       	std	Y+52, r17	; 0x34
    255e:	cf c4       	rjmp	.+2462   	; 0x2efe <__udivdi3+0xca4>
    2560:	21 14       	cp	r2, r1
    2562:	31 04       	cpc	r3, r1
    2564:	41 04       	cpc	r4, r1
    2566:	51 04       	cpc	r5, r1
    2568:	71 f4       	brne	.+28     	; 0x2586 <__udivdi3+0x32c>
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e0       	ldi	r21, 0x00	; 0
    257a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    257e:	c9 01       	movw	r24, r18
    2580:	da 01       	movw	r26, r20
    2582:	1c 01       	movw	r2, r24
    2584:	2d 01       	movw	r4, r26
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	20 16       	cp	r2, r16
    258a:	00 e0       	ldi	r16, 0x00	; 0
    258c:	30 06       	cpc	r3, r16
    258e:	01 e0       	ldi	r16, 0x01	; 1
    2590:	40 06       	cpc	r4, r16
    2592:	00 e0       	ldi	r16, 0x00	; 0
    2594:	50 06       	cpc	r5, r16
    2596:	88 f4       	brcc	.+34     	; 0x25ba <__udivdi3+0x360>
    2598:	1f ef       	ldi	r17, 0xFF	; 255
    259a:	21 16       	cp	r2, r17
    259c:	31 04       	cpc	r3, r1
    259e:	41 04       	cpc	r4, r1
    25a0:	51 04       	cpc	r5, r1
    25a2:	31 f0       	breq	.+12     	; 0x25b0 <__udivdi3+0x356>
    25a4:	28 f0       	brcs	.+10     	; 0x25b0 <__udivdi3+0x356>
    25a6:	48 e0       	ldi	r20, 0x08	; 8
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	17 c0       	rjmp	.+46     	; 0x25de <__udivdi3+0x384>
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	12 c0       	rjmp	.+36     	; 0x25de <__udivdi3+0x384>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	22 16       	cp	r2, r18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	32 06       	cpc	r3, r18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	42 06       	cpc	r4, r18
    25c6:	21 e0       	ldi	r18, 0x01	; 1
    25c8:	52 06       	cpc	r5, r18
    25ca:	28 f0       	brcs	.+10     	; 0x25d6 <__udivdi3+0x37c>
    25cc:	48 e1       	ldi	r20, 0x18	; 24
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <__udivdi3+0x384>
    25d6:	40 e1       	ldi	r20, 0x10	; 16
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	d2 01       	movw	r26, r4
    25e0:	c1 01       	movw	r24, r2
    25e2:	04 2e       	mov	r0, r20
    25e4:	04 c0       	rjmp	.+8      	; 0x25ee <__udivdi3+0x394>
    25e6:	b6 95       	lsr	r27
    25e8:	a7 95       	ror	r26
    25ea:	97 95       	ror	r25
    25ec:	87 95       	ror	r24
    25ee:	0a 94       	dec	r0
    25f0:	d2 f7       	brpl	.-12     	; 0x25e6 <__udivdi3+0x38c>
    25f2:	8f 52       	subi	r24, 0x2F	; 47
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	dc 01       	movw	r26, r24
    25f8:	2c 91       	ld	r18, X
    25fa:	e0 e2       	ldi	r30, 0x20	; 32
    25fc:	ee 2e       	mov	r14, r30
    25fe:	f1 2c       	mov	r15, r1
    2600:	01 2d       	mov	r16, r1
    2602:	11 2d       	mov	r17, r1
    2604:	d8 01       	movw	r26, r16
    2606:	c7 01       	movw	r24, r14
    2608:	84 1b       	sub	r24, r20
    260a:	95 0b       	sbc	r25, r21
    260c:	a6 0b       	sbc	r26, r22
    260e:	b7 0b       	sbc	r27, r23
    2610:	82 1b       	sub	r24, r18
    2612:	91 09       	sbc	r25, r1
    2614:	a1 09       	sbc	r26, r1
    2616:	b1 09       	sbc	r27, r1
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	a1 05       	cpc	r26, r1
    261c:	b1 05       	cpc	r27, r1
    261e:	61 f4       	brne	.+24     	; 0x2638 <__udivdi3+0x3de>
    2620:	64 01       	movw	r12, r8
    2622:	53 01       	movw	r10, r6
    2624:	a2 18       	sub	r10, r2
    2626:	b3 08       	sbc	r11, r3
    2628:	c4 08       	sbc	r12, r4
    262a:	d5 08       	sbc	r13, r5
    262c:	31 e0       	ldi	r19, 0x01	; 1
    262e:	63 2e       	mov	r6, r19
    2630:	71 2c       	mov	r7, r1
    2632:	81 2c       	mov	r8, r1
    2634:	91 2c       	mov	r9, r1
    2636:	1e c1       	rjmp	.+572    	; 0x2874 <__udivdi3+0x61a>
    2638:	6f 96       	adiw	r28, 0x1f	; 31
    263a:	8f af       	std	Y+63, r24	; 0x3f
    263c:	6f 97       	sbiw	r28, 0x1f	; 31
    263e:	08 2e       	mov	r0, r24
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__udivdi3+0x3f0>
    2642:	22 0c       	add	r2, r2
    2644:	33 1c       	adc	r3, r3
    2646:	44 1c       	adc	r4, r4
    2648:	55 1c       	adc	r5, r5
    264a:	0a 94       	dec	r0
    264c:	d2 f7       	brpl	.-12     	; 0x2642 <__udivdi3+0x3e8>
    264e:	ee 2d       	mov	r30, r14
    2650:	e8 1b       	sub	r30, r24
    2652:	64 01       	movw	r12, r8
    2654:	53 01       	movw	r10, r6
    2656:	0e 2e       	mov	r0, r30
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <__udivdi3+0x408>
    265a:	d6 94       	lsr	r13
    265c:	c7 94       	ror	r12
    265e:	b7 94       	ror	r11
    2660:	a7 94       	ror	r10
    2662:	0a 94       	dec	r0
    2664:	d2 f7       	brpl	.-12     	; 0x265a <__udivdi3+0x400>
    2666:	a4 01       	movw	r20, r8
    2668:	93 01       	movw	r18, r6
    266a:	6f 96       	adiw	r28, 0x1f	; 31
    266c:	0f ac       	ldd	r0, Y+63	; 0x3f
    266e:	6f 97       	sbiw	r28, 0x1f	; 31
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__udivdi3+0x420>
    2672:	22 0f       	add	r18, r18
    2674:	33 1f       	adc	r19, r19
    2676:	44 1f       	adc	r20, r20
    2678:	55 1f       	adc	r21, r21
    267a:	0a 94       	dec	r0
    267c:	d2 f7       	brpl	.-12     	; 0x2672 <__udivdi3+0x418>
    267e:	6d a4       	ldd	r6, Y+45	; 0x2d
    2680:	7e a4       	ldd	r7, Y+46	; 0x2e
    2682:	8f a4       	ldd	r8, Y+47	; 0x2f
    2684:	98 a8       	ldd	r9, Y+48	; 0x30
    2686:	0e 2e       	mov	r0, r30
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <__udivdi3+0x438>
    268a:	96 94       	lsr	r9
    268c:	87 94       	ror	r8
    268e:	77 94       	ror	r7
    2690:	67 94       	ror	r6
    2692:	0a 94       	dec	r0
    2694:	d2 f7       	brpl	.-12     	; 0x268a <__udivdi3+0x430>
    2696:	84 01       	movw	r16, r8
    2698:	73 01       	movw	r14, r6
    269a:	e2 2a       	or	r14, r18
    269c:	f3 2a       	or	r15, r19
    269e:	04 2b       	or	r16, r20
    26a0:	15 2b       	or	r17, r21
    26a2:	e9 a6       	std	Y+41, r14	; 0x29
    26a4:	fa a6       	std	Y+42, r15	; 0x2a
    26a6:	0b a7       	std	Y+43, r16	; 0x2b
    26a8:	1c a7       	std	Y+44, r17	; 0x2c
    26aa:	32 01       	movw	r6, r4
    26ac:	88 24       	eor	r8, r8
    26ae:	99 24       	eor	r9, r9
    26b0:	92 01       	movw	r18, r4
    26b2:	81 01       	movw	r16, r2
    26b4:	20 70       	andi	r18, 0x00	; 0
    26b6:	30 70       	andi	r19, 0x00	; 0
    26b8:	21 96       	adiw	r28, 0x01	; 1
    26ba:	0c af       	std	Y+60, r16	; 0x3c
    26bc:	1d af       	std	Y+61, r17	; 0x3d
    26be:	2e af       	std	Y+62, r18	; 0x3e
    26c0:	3f af       	std	Y+63, r19	; 0x3f
    26c2:	21 97       	sbiw	r28, 0x01	; 1
    26c4:	c6 01       	movw	r24, r12
    26c6:	b5 01       	movw	r22, r10
    26c8:	a4 01       	movw	r20, r8
    26ca:	93 01       	movw	r18, r6
    26cc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    26d0:	7b 01       	movw	r14, r22
    26d2:	8c 01       	movw	r16, r24
    26d4:	c6 01       	movw	r24, r12
    26d6:	b5 01       	movw	r22, r10
    26d8:	a4 01       	movw	r20, r8
    26da:	93 01       	movw	r18, r6
    26dc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    26e0:	c9 01       	movw	r24, r18
    26e2:	da 01       	movw	r26, r20
    26e4:	25 96       	adiw	r28, 0x05	; 5
    26e6:	8c af       	std	Y+60, r24	; 0x3c
    26e8:	9d af       	std	Y+61, r25	; 0x3d
    26ea:	ae af       	std	Y+62, r26	; 0x3e
    26ec:	bf af       	std	Y+63, r27	; 0x3f
    26ee:	25 97       	sbiw	r28, 0x05	; 5
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	21 96       	adiw	r28, 0x01	; 1
    26f6:	2c ad       	ldd	r18, Y+60	; 0x3c
    26f8:	3d ad       	ldd	r19, Y+61	; 0x3d
    26fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    26fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    26fe:	21 97       	sbiw	r28, 0x01	; 1
    2700:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	87 01       	movw	r16, r14
    270a:	ff 24       	eor	r15, r15
    270c:	ee 24       	eor	r14, r14
    270e:	a9 a4       	ldd	r10, Y+41	; 0x29
    2710:	ba a4       	ldd	r11, Y+42	; 0x2a
    2712:	cb a4       	ldd	r12, Y+43	; 0x2b
    2714:	dc a4       	ldd	r13, Y+44	; 0x2c
    2716:	c6 01       	movw	r24, r12
    2718:	aa 27       	eor	r26, r26
    271a:	bb 27       	eor	r27, r27
    271c:	5c 01       	movw	r10, r24
    271e:	6d 01       	movw	r12, r26
    2720:	ae 28       	or	r10, r14
    2722:	bf 28       	or	r11, r15
    2724:	c0 2a       	or	r12, r16
    2726:	d1 2a       	or	r13, r17
    2728:	a2 16       	cp	r10, r18
    272a:	b3 06       	cpc	r11, r19
    272c:	c4 06       	cpc	r12, r20
    272e:	d5 06       	cpc	r13, r21
    2730:	60 f5       	brcc	.+88     	; 0x278a <__udivdi3+0x530>
    2732:	25 96       	adiw	r28, 0x05	; 5
    2734:	6c ad       	ldd	r22, Y+60	; 0x3c
    2736:	7d ad       	ldd	r23, Y+61	; 0x3d
    2738:	8e ad       	ldd	r24, Y+62	; 0x3e
    273a:	9f ad       	ldd	r25, Y+63	; 0x3f
    273c:	25 97       	sbiw	r28, 0x05	; 5
    273e:	61 50       	subi	r22, 0x01	; 1
    2740:	70 40       	sbci	r23, 0x00	; 0
    2742:	80 40       	sbci	r24, 0x00	; 0
    2744:	90 40       	sbci	r25, 0x00	; 0
    2746:	25 96       	adiw	r28, 0x05	; 5
    2748:	6c af       	std	Y+60, r22	; 0x3c
    274a:	7d af       	std	Y+61, r23	; 0x3d
    274c:	8e af       	std	Y+62, r24	; 0x3e
    274e:	9f af       	std	Y+63, r25	; 0x3f
    2750:	25 97       	sbiw	r28, 0x05	; 5
    2752:	a2 0c       	add	r10, r2
    2754:	b3 1c       	adc	r11, r3
    2756:	c4 1c       	adc	r12, r4
    2758:	d5 1c       	adc	r13, r5
    275a:	a2 14       	cp	r10, r2
    275c:	b3 04       	cpc	r11, r3
    275e:	c4 04       	cpc	r12, r4
    2760:	d5 04       	cpc	r13, r5
    2762:	98 f0       	brcs	.+38     	; 0x278a <__udivdi3+0x530>
    2764:	a2 16       	cp	r10, r18
    2766:	b3 06       	cpc	r11, r19
    2768:	c4 06       	cpc	r12, r20
    276a:	d5 06       	cpc	r13, r21
    276c:	70 f4       	brcc	.+28     	; 0x278a <__udivdi3+0x530>
    276e:	61 50       	subi	r22, 0x01	; 1
    2770:	70 40       	sbci	r23, 0x00	; 0
    2772:	80 40       	sbci	r24, 0x00	; 0
    2774:	90 40       	sbci	r25, 0x00	; 0
    2776:	25 96       	adiw	r28, 0x05	; 5
    2778:	6c af       	std	Y+60, r22	; 0x3c
    277a:	7d af       	std	Y+61, r23	; 0x3d
    277c:	8e af       	std	Y+62, r24	; 0x3e
    277e:	9f af       	std	Y+63, r25	; 0x3f
    2780:	25 97       	sbiw	r28, 0x05	; 5
    2782:	a2 0c       	add	r10, r2
    2784:	b3 1c       	adc	r11, r3
    2786:	c4 1c       	adc	r12, r4
    2788:	d5 1c       	adc	r13, r5
    278a:	a2 1a       	sub	r10, r18
    278c:	b3 0a       	sbc	r11, r19
    278e:	c4 0a       	sbc	r12, r20
    2790:	d5 0a       	sbc	r13, r21
    2792:	c6 01       	movw	r24, r12
    2794:	b5 01       	movw	r22, r10
    2796:	a4 01       	movw	r20, r8
    2798:	93 01       	movw	r18, r6
    279a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    279e:	7b 01       	movw	r14, r22
    27a0:	8c 01       	movw	r16, r24
    27a2:	c6 01       	movw	r24, r12
    27a4:	b5 01       	movw	r22, r10
    27a6:	a4 01       	movw	r20, r8
    27a8:	93 01       	movw	r18, r6
    27aa:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    27ae:	c9 01       	movw	r24, r18
    27b0:	da 01       	movw	r26, r20
    27b2:	3c 01       	movw	r6, r24
    27b4:	4d 01       	movw	r8, r26
    27b6:	c4 01       	movw	r24, r8
    27b8:	b3 01       	movw	r22, r6
    27ba:	21 96       	adiw	r28, 0x01	; 1
    27bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    27be:	3d ad       	ldd	r19, Y+61	; 0x3d
    27c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    27c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    27c4:	21 97       	sbiw	r28, 0x01	; 1
    27c6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	87 01       	movw	r16, r14
    27d0:	ff 24       	eor	r15, r15
    27d2:	ee 24       	eor	r14, r14
    27d4:	89 a5       	ldd	r24, Y+41	; 0x29
    27d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    27d8:	ab a5       	ldd	r26, Y+43	; 0x2b
    27da:	bc a5       	ldd	r27, Y+44	; 0x2c
    27dc:	a0 70       	andi	r26, 0x00	; 0
    27de:	b0 70       	andi	r27, 0x00	; 0
    27e0:	57 01       	movw	r10, r14
    27e2:	68 01       	movw	r12, r16
    27e4:	a8 2a       	or	r10, r24
    27e6:	b9 2a       	or	r11, r25
    27e8:	ca 2a       	or	r12, r26
    27ea:	db 2a       	or	r13, r27
    27ec:	a2 16       	cp	r10, r18
    27ee:	b3 06       	cpc	r11, r19
    27f0:	c4 06       	cpc	r12, r20
    27f2:	d5 06       	cpc	r13, r21
    27f4:	e0 f4       	brcc	.+56     	; 0x282e <__udivdi3+0x5d4>
    27f6:	08 94       	sec
    27f8:	61 08       	sbc	r6, r1
    27fa:	71 08       	sbc	r7, r1
    27fc:	81 08       	sbc	r8, r1
    27fe:	91 08       	sbc	r9, r1
    2800:	a2 0c       	add	r10, r2
    2802:	b3 1c       	adc	r11, r3
    2804:	c4 1c       	adc	r12, r4
    2806:	d5 1c       	adc	r13, r5
    2808:	a2 14       	cp	r10, r2
    280a:	b3 04       	cpc	r11, r3
    280c:	c4 04       	cpc	r12, r4
    280e:	d5 04       	cpc	r13, r5
    2810:	70 f0       	brcs	.+28     	; 0x282e <__udivdi3+0x5d4>
    2812:	a2 16       	cp	r10, r18
    2814:	b3 06       	cpc	r11, r19
    2816:	c4 06       	cpc	r12, r20
    2818:	d5 06       	cpc	r13, r21
    281a:	48 f4       	brcc	.+18     	; 0x282e <__udivdi3+0x5d4>
    281c:	08 94       	sec
    281e:	61 08       	sbc	r6, r1
    2820:	71 08       	sbc	r7, r1
    2822:	81 08       	sbc	r8, r1
    2824:	91 08       	sbc	r9, r1
    2826:	a2 0c       	add	r10, r2
    2828:	b3 1c       	adc	r11, r3
    282a:	c4 1c       	adc	r12, r4
    282c:	d5 1c       	adc	r13, r5
    282e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2830:	9e a5       	ldd	r25, Y+46	; 0x2e
    2832:	af a5       	ldd	r26, Y+47	; 0x2f
    2834:	b8 a9       	ldd	r27, Y+48	; 0x30
    2836:	6f 96       	adiw	r28, 0x1f	; 31
    2838:	0f ac       	ldd	r0, Y+63	; 0x3f
    283a:	6f 97       	sbiw	r28, 0x1f	; 31
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__udivdi3+0x5ec>
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	0a 94       	dec	r0
    2848:	d2 f7       	brpl	.-12     	; 0x283e <__udivdi3+0x5e4>
    284a:	8d a7       	std	Y+45, r24	; 0x2d
    284c:	9e a7       	std	Y+46, r25	; 0x2e
    284e:	af a7       	std	Y+47, r26	; 0x2f
    2850:	b8 ab       	std	Y+48, r27	; 0x30
    2852:	a2 1a       	sub	r10, r18
    2854:	b3 0a       	sbc	r11, r19
    2856:	c4 0a       	sbc	r12, r20
    2858:	d5 0a       	sbc	r13, r21
    285a:	25 96       	adiw	r28, 0x05	; 5
    285c:	ec ac       	ldd	r14, Y+60	; 0x3c
    285e:	fd ac       	ldd	r15, Y+61	; 0x3d
    2860:	0e ad       	ldd	r16, Y+62	; 0x3e
    2862:	1f ad       	ldd	r17, Y+63	; 0x3f
    2864:	25 97       	sbiw	r28, 0x05	; 5
    2866:	d7 01       	movw	r26, r14
    2868:	99 27       	eor	r25, r25
    286a:	88 27       	eor	r24, r24
    286c:	68 2a       	or	r6, r24
    286e:	79 2a       	or	r7, r25
    2870:	8a 2a       	or	r8, r26
    2872:	9b 2a       	or	r9, r27
    2874:	82 01       	movw	r16, r4
    2876:	22 27       	eor	r18, r18
    2878:	33 27       	eor	r19, r19
    287a:	29 96       	adiw	r28, 0x09	; 9
    287c:	0c af       	std	Y+60, r16	; 0x3c
    287e:	1d af       	std	Y+61, r17	; 0x3d
    2880:	2e af       	std	Y+62, r18	; 0x3e
    2882:	3f af       	std	Y+63, r19	; 0x3f
    2884:	29 97       	sbiw	r28, 0x09	; 9
    2886:	a2 01       	movw	r20, r4
    2888:	91 01       	movw	r18, r2
    288a:	40 70       	andi	r20, 0x00	; 0
    288c:	50 70       	andi	r21, 0x00	; 0
    288e:	2d 96       	adiw	r28, 0x0d	; 13
    2890:	2c af       	std	Y+60, r18	; 0x3c
    2892:	3d af       	std	Y+61, r19	; 0x3d
    2894:	4e af       	std	Y+62, r20	; 0x3e
    2896:	5f af       	std	Y+63, r21	; 0x3f
    2898:	2d 97       	sbiw	r28, 0x0d	; 13
    289a:	c6 01       	movw	r24, r12
    289c:	b5 01       	movw	r22, r10
    289e:	29 96       	adiw	r28, 0x09	; 9
    28a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    28a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    28a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    28a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    28a8:	29 97       	sbiw	r28, 0x09	; 9
    28aa:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    28ae:	7b 01       	movw	r14, r22
    28b0:	8c 01       	movw	r16, r24
    28b2:	c6 01       	movw	r24, r12
    28b4:	b5 01       	movw	r22, r10
    28b6:	29 96       	adiw	r28, 0x09	; 9
    28b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    28ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    28bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    28be:	5f ad       	ldd	r21, Y+63	; 0x3f
    28c0:	29 97       	sbiw	r28, 0x09	; 9
    28c2:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    28c6:	c9 01       	movw	r24, r18
    28c8:	da 01       	movw	r26, r20
    28ca:	61 96       	adiw	r28, 0x11	; 17
    28cc:	8c af       	std	Y+60, r24	; 0x3c
    28ce:	9d af       	std	Y+61, r25	; 0x3d
    28d0:	ae af       	std	Y+62, r26	; 0x3e
    28d2:	bf af       	std	Y+63, r27	; 0x3f
    28d4:	61 97       	sbiw	r28, 0x11	; 17
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	2d 96       	adiw	r28, 0x0d	; 13
    28dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    28de:	3d ad       	ldd	r19, Y+61	; 0x3d
    28e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    28e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    28e4:	2d 97       	sbiw	r28, 0x0d	; 13
    28e6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	87 01       	movw	r16, r14
    28f0:	ff 24       	eor	r15, r15
    28f2:	ee 24       	eor	r14, r14
    28f4:	ad a4       	ldd	r10, Y+45	; 0x2d
    28f6:	be a4       	ldd	r11, Y+46	; 0x2e
    28f8:	cf a4       	ldd	r12, Y+47	; 0x2f
    28fa:	d8 a8       	ldd	r13, Y+48	; 0x30
    28fc:	c6 01       	movw	r24, r12
    28fe:	aa 27       	eor	r26, r26
    2900:	bb 27       	eor	r27, r27
    2902:	57 01       	movw	r10, r14
    2904:	68 01       	movw	r12, r16
    2906:	a8 2a       	or	r10, r24
    2908:	b9 2a       	or	r11, r25
    290a:	ca 2a       	or	r12, r26
    290c:	db 2a       	or	r13, r27
    290e:	a2 16       	cp	r10, r18
    2910:	b3 06       	cpc	r11, r19
    2912:	c4 06       	cpc	r12, r20
    2914:	d5 06       	cpc	r13, r21
    2916:	60 f5       	brcc	.+88     	; 0x2970 <__udivdi3+0x716>
    2918:	61 96       	adiw	r28, 0x11	; 17
    291a:	6c ad       	ldd	r22, Y+60	; 0x3c
    291c:	7d ad       	ldd	r23, Y+61	; 0x3d
    291e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2920:	9f ad       	ldd	r25, Y+63	; 0x3f
    2922:	61 97       	sbiw	r28, 0x11	; 17
    2924:	61 50       	subi	r22, 0x01	; 1
    2926:	70 40       	sbci	r23, 0x00	; 0
    2928:	80 40       	sbci	r24, 0x00	; 0
    292a:	90 40       	sbci	r25, 0x00	; 0
    292c:	61 96       	adiw	r28, 0x11	; 17
    292e:	6c af       	std	Y+60, r22	; 0x3c
    2930:	7d af       	std	Y+61, r23	; 0x3d
    2932:	8e af       	std	Y+62, r24	; 0x3e
    2934:	9f af       	std	Y+63, r25	; 0x3f
    2936:	61 97       	sbiw	r28, 0x11	; 17
    2938:	a2 0c       	add	r10, r2
    293a:	b3 1c       	adc	r11, r3
    293c:	c4 1c       	adc	r12, r4
    293e:	d5 1c       	adc	r13, r5
    2940:	a2 14       	cp	r10, r2
    2942:	b3 04       	cpc	r11, r3
    2944:	c4 04       	cpc	r12, r4
    2946:	d5 04       	cpc	r13, r5
    2948:	98 f0       	brcs	.+38     	; 0x2970 <__udivdi3+0x716>
    294a:	a2 16       	cp	r10, r18
    294c:	b3 06       	cpc	r11, r19
    294e:	c4 06       	cpc	r12, r20
    2950:	d5 06       	cpc	r13, r21
    2952:	70 f4       	brcc	.+28     	; 0x2970 <__udivdi3+0x716>
    2954:	61 50       	subi	r22, 0x01	; 1
    2956:	70 40       	sbci	r23, 0x00	; 0
    2958:	80 40       	sbci	r24, 0x00	; 0
    295a:	90 40       	sbci	r25, 0x00	; 0
    295c:	61 96       	adiw	r28, 0x11	; 17
    295e:	6c af       	std	Y+60, r22	; 0x3c
    2960:	7d af       	std	Y+61, r23	; 0x3d
    2962:	8e af       	std	Y+62, r24	; 0x3e
    2964:	9f af       	std	Y+63, r25	; 0x3f
    2966:	61 97       	sbiw	r28, 0x11	; 17
    2968:	a2 0c       	add	r10, r2
    296a:	b3 1c       	adc	r11, r3
    296c:	c4 1c       	adc	r12, r4
    296e:	d5 1c       	adc	r13, r5
    2970:	a2 1a       	sub	r10, r18
    2972:	b3 0a       	sbc	r11, r19
    2974:	c4 0a       	sbc	r12, r20
    2976:	d5 0a       	sbc	r13, r21
    2978:	c6 01       	movw	r24, r12
    297a:	b5 01       	movw	r22, r10
    297c:	29 96       	adiw	r28, 0x09	; 9
    297e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2980:	3d ad       	ldd	r19, Y+61	; 0x3d
    2982:	4e ad       	ldd	r20, Y+62	; 0x3e
    2984:	5f ad       	ldd	r21, Y+63	; 0x3f
    2986:	29 97       	sbiw	r28, 0x09	; 9
    2988:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    298c:	7b 01       	movw	r14, r22
    298e:	8c 01       	movw	r16, r24
    2990:	c6 01       	movw	r24, r12
    2992:	b5 01       	movw	r22, r10
    2994:	29 96       	adiw	r28, 0x09	; 9
    2996:	2c ad       	ldd	r18, Y+60	; 0x3c
    2998:	3d ad       	ldd	r19, Y+61	; 0x3d
    299a:	4e ad       	ldd	r20, Y+62	; 0x3e
    299c:	5f ad       	ldd	r21, Y+63	; 0x3f
    299e:	29 97       	sbiw	r28, 0x09	; 9
    29a0:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    29a4:	c9 01       	movw	r24, r18
    29a6:	da 01       	movw	r26, r20
    29a8:	5c 01       	movw	r10, r24
    29aa:	6d 01       	movw	r12, r26
    29ac:	c6 01       	movw	r24, r12
    29ae:	b5 01       	movw	r22, r10
    29b0:	2d 96       	adiw	r28, 0x0d	; 13
    29b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    29b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    29b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    29b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    29ba:	2d 97       	sbiw	r28, 0x0d	; 13
    29bc:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	87 01       	movw	r16, r14
    29c6:	ff 24       	eor	r15, r15
    29c8:	ee 24       	eor	r14, r14
    29ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    29cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ce:	af a5       	ldd	r26, Y+47	; 0x2f
    29d0:	b8 a9       	ldd	r27, Y+48	; 0x30
    29d2:	a0 70       	andi	r26, 0x00	; 0
    29d4:	b0 70       	andi	r27, 0x00	; 0
    29d6:	e8 2a       	or	r14, r24
    29d8:	f9 2a       	or	r15, r25
    29da:	0a 2b       	or	r16, r26
    29dc:	1b 2b       	or	r17, r27
    29de:	e2 16       	cp	r14, r18
    29e0:	f3 06       	cpc	r15, r19
    29e2:	04 07       	cpc	r16, r20
    29e4:	15 07       	cpc	r17, r21
    29e6:	c0 f4       	brcc	.+48     	; 0x2a18 <__udivdi3+0x7be>
    29e8:	08 94       	sec
    29ea:	a1 08       	sbc	r10, r1
    29ec:	b1 08       	sbc	r11, r1
    29ee:	c1 08       	sbc	r12, r1
    29f0:	d1 08       	sbc	r13, r1
    29f2:	e2 0c       	add	r14, r2
    29f4:	f3 1c       	adc	r15, r3
    29f6:	04 1d       	adc	r16, r4
    29f8:	15 1d       	adc	r17, r5
    29fa:	e2 14       	cp	r14, r2
    29fc:	f3 04       	cpc	r15, r3
    29fe:	04 05       	cpc	r16, r4
    2a00:	15 05       	cpc	r17, r5
    2a02:	50 f0       	brcs	.+20     	; 0x2a18 <__udivdi3+0x7be>
    2a04:	e2 16       	cp	r14, r18
    2a06:	f3 06       	cpc	r15, r19
    2a08:	04 07       	cpc	r16, r20
    2a0a:	15 07       	cpc	r17, r21
    2a0c:	28 f4       	brcc	.+10     	; 0x2a18 <__udivdi3+0x7be>
    2a0e:	08 94       	sec
    2a10:	a1 08       	sbc	r10, r1
    2a12:	b1 08       	sbc	r11, r1
    2a14:	c1 08       	sbc	r12, r1
    2a16:	d1 08       	sbc	r13, r1
    2a18:	61 96       	adiw	r28, 0x11	; 17
    2a1a:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a1c:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a1e:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a20:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a22:	61 97       	sbiw	r28, 0x11	; 17
    2a24:	d7 01       	movw	r26, r14
    2a26:	99 27       	eor	r25, r25
    2a28:	88 27       	eor	r24, r24
    2a2a:	96 01       	movw	r18, r12
    2a2c:	85 01       	movw	r16, r10
    2a2e:	08 2b       	or	r16, r24
    2a30:	19 2b       	or	r17, r25
    2a32:	2a 2b       	or	r18, r26
    2a34:	3b 2b       	or	r19, r27
    2a36:	09 ab       	std	Y+49, r16	; 0x31
    2a38:	1a ab       	std	Y+50, r17	; 0x32
    2a3a:	2b ab       	std	Y+51, r18	; 0x33
    2a3c:	3c ab       	std	Y+52, r19	; 0x34
    2a3e:	62 c2       	rjmp	.+1220   	; 0x2f04 <__udivdi3+0xcaa>
    2a40:	6e 14       	cp	r6, r14
    2a42:	7f 04       	cpc	r7, r15
    2a44:	80 06       	cpc	r8, r16
    2a46:	91 06       	cpc	r9, r17
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <__udivdi3+0x7f2>
    2a4a:	51 c2       	rjmp	.+1186   	; 0x2eee <__udivdi3+0xc94>
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	e2 16       	cp	r14, r18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	f2 06       	cpc	r15, r18
    2a54:	21 e0       	ldi	r18, 0x01	; 1
    2a56:	02 07       	cpc	r16, r18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	12 07       	cpc	r17, r18
    2a5c:	88 f4       	brcc	.+34     	; 0x2a80 <__udivdi3+0x826>
    2a5e:	3f ef       	ldi	r19, 0xFF	; 255
    2a60:	e3 16       	cp	r14, r19
    2a62:	f1 04       	cpc	r15, r1
    2a64:	01 05       	cpc	r16, r1
    2a66:	11 05       	cpc	r17, r1
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <__udivdi3+0x81c>
    2a6a:	28 f0       	brcs	.+10     	; 0x2a76 <__udivdi3+0x81c>
    2a6c:	48 e0       	ldi	r20, 0x08	; 8
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	70 e0       	ldi	r23, 0x00	; 0
    2a74:	17 c0       	rjmp	.+46     	; 0x2aa4 <__udivdi3+0x84a>
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <__udivdi3+0x84a>
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	e4 16       	cp	r14, r20
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	f4 06       	cpc	r15, r20
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	04 07       	cpc	r16, r20
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	14 07       	cpc	r17, r20
    2a90:	28 f0       	brcs	.+10     	; 0x2a9c <__udivdi3+0x842>
    2a92:	48 e1       	ldi	r20, 0x18	; 24
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <__udivdi3+0x84a>
    2a9c:	40 e1       	ldi	r20, 0x10	; 16
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	d8 01       	movw	r26, r16
    2aa6:	c7 01       	movw	r24, r14
    2aa8:	04 2e       	mov	r0, r20
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <__udivdi3+0x85a>
    2aac:	b6 95       	lsr	r27
    2aae:	a7 95       	ror	r26
    2ab0:	97 95       	ror	r25
    2ab2:	87 95       	ror	r24
    2ab4:	0a 94       	dec	r0
    2ab6:	d2 f7       	brpl	.-12     	; 0x2aac <__udivdi3+0x852>
    2ab8:	8f 52       	subi	r24, 0x2F	; 47
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	dc 01       	movw	r26, r24
    2abe:	2c 91       	ld	r18, X
    2ac0:	30 e2       	ldi	r19, 0x20	; 32
    2ac2:	a3 2e       	mov	r10, r19
    2ac4:	b1 2c       	mov	r11, r1
    2ac6:	c1 2c       	mov	r12, r1
    2ac8:	d1 2c       	mov	r13, r1
    2aca:	d6 01       	movw	r26, r12
    2acc:	c5 01       	movw	r24, r10
    2ace:	84 1b       	sub	r24, r20
    2ad0:	95 0b       	sbc	r25, r21
    2ad2:	a6 0b       	sbc	r26, r22
    2ad4:	b7 0b       	sbc	r27, r23
    2ad6:	82 1b       	sub	r24, r18
    2ad8:	91 09       	sbc	r25, r1
    2ada:	a1 09       	sbc	r26, r1
    2adc:	b1 09       	sbc	r27, r1
    2ade:	00 97       	sbiw	r24, 0x00	; 0
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	89 f4       	brne	.+34     	; 0x2b08 <__udivdi3+0x8ae>
    2ae6:	e6 14       	cp	r14, r6
    2ae8:	f7 04       	cpc	r15, r7
    2aea:	08 05       	cpc	r16, r8
    2aec:	19 05       	cpc	r17, r9
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <__udivdi3+0x898>
    2af0:	f2 c1       	rjmp	.+996    	; 0x2ed6 <__udivdi3+0xc7c>
    2af2:	6d a4       	ldd	r6, Y+45	; 0x2d
    2af4:	7e a4       	ldd	r7, Y+46	; 0x2e
    2af6:	8f a4       	ldd	r8, Y+47	; 0x2f
    2af8:	98 a8       	ldd	r9, Y+48	; 0x30
    2afa:	62 14       	cp	r6, r2
    2afc:	73 04       	cpc	r7, r3
    2afe:	84 04       	cpc	r8, r4
    2b00:	95 04       	cpc	r9, r5
    2b02:	08 f0       	brcs	.+2      	; 0x2b06 <__udivdi3+0x8ac>
    2b04:	e8 c1       	rjmp	.+976    	; 0x2ed6 <__udivdi3+0xc7c>
    2b06:	f3 c1       	rjmp	.+998    	; 0x2eee <__udivdi3+0xc94>
    2b08:	6e 96       	adiw	r28, 0x1e	; 30
    2b0a:	8f af       	std	Y+63, r24	; 0x3f
    2b0c:	6e 97       	sbiw	r28, 0x1e	; 30
    2b0e:	08 2e       	mov	r0, r24
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <__udivdi3+0x8c0>
    2b12:	ee 0c       	add	r14, r14
    2b14:	ff 1c       	adc	r15, r15
    2b16:	00 1f       	adc	r16, r16
    2b18:	11 1f       	adc	r17, r17
    2b1a:	0a 94       	dec	r0
    2b1c:	d2 f7       	brpl	.-12     	; 0x2b12 <__udivdi3+0x8b8>
    2b1e:	6a 2d       	mov	r22, r10
    2b20:	68 1b       	sub	r22, r24
    2b22:	d2 01       	movw	r26, r4
    2b24:	c1 01       	movw	r24, r2
    2b26:	06 2e       	mov	r0, r22
    2b28:	04 c0       	rjmp	.+8      	; 0x2b32 <__udivdi3+0x8d8>
    2b2a:	b6 95       	lsr	r27
    2b2c:	a7 95       	ror	r26
    2b2e:	97 95       	ror	r25
    2b30:	87 95       	ror	r24
    2b32:	0a 94       	dec	r0
    2b34:	d2 f7       	brpl	.-12     	; 0x2b2a <__udivdi3+0x8d0>
    2b36:	5c 01       	movw	r10, r24
    2b38:	6d 01       	movw	r12, r26
    2b3a:	ae 28       	or	r10, r14
    2b3c:	bf 28       	or	r11, r15
    2b3e:	c0 2a       	or	r12, r16
    2b40:	d1 2a       	or	r13, r17
    2b42:	ad a2       	std	Y+37, r10	; 0x25
    2b44:	be a2       	std	Y+38, r11	; 0x26
    2b46:	cf a2       	std	Y+39, r12	; 0x27
    2b48:	d8 a6       	std	Y+40, r13	; 0x28
    2b4a:	72 01       	movw	r14, r4
    2b4c:	61 01       	movw	r12, r2
    2b4e:	6e 96       	adiw	r28, 0x1e	; 30
    2b50:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b52:	6e 97       	sbiw	r28, 0x1e	; 30
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <__udivdi3+0x904>
    2b56:	cc 0c       	add	r12, r12
    2b58:	dd 1c       	adc	r13, r13
    2b5a:	ee 1c       	adc	r14, r14
    2b5c:	ff 1c       	adc	r15, r15
    2b5e:	0a 94       	dec	r0
    2b60:	d2 f7       	brpl	.-12     	; 0x2b56 <__udivdi3+0x8fc>
    2b62:	c9 a2       	std	Y+33, r12	; 0x21
    2b64:	da a2       	std	Y+34, r13	; 0x22
    2b66:	eb a2       	std	Y+35, r14	; 0x23
    2b68:	fc a2       	std	Y+36, r15	; 0x24
    2b6a:	64 01       	movw	r12, r8
    2b6c:	53 01       	movw	r10, r6
    2b6e:	06 2e       	mov	r0, r22
    2b70:	04 c0       	rjmp	.+8      	; 0x2b7a <__udivdi3+0x920>
    2b72:	d6 94       	lsr	r13
    2b74:	c7 94       	ror	r12
    2b76:	b7 94       	ror	r11
    2b78:	a7 94       	ror	r10
    2b7a:	0a 94       	dec	r0
    2b7c:	d2 f7       	brpl	.-12     	; 0x2b72 <__udivdi3+0x918>
    2b7e:	d4 01       	movw	r26, r8
    2b80:	c3 01       	movw	r24, r6
    2b82:	6e 96       	adiw	r28, 0x1e	; 30
    2b84:	0f ac       	ldd	r0, Y+63	; 0x3f
    2b86:	6e 97       	sbiw	r28, 0x1e	; 30
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__udivdi3+0x938>
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	0a 94       	dec	r0
    2b94:	d2 f7       	brpl	.-12     	; 0x2b8a <__udivdi3+0x930>
    2b96:	ed a4       	ldd	r14, Y+45	; 0x2d
    2b98:	fe a4       	ldd	r15, Y+46	; 0x2e
    2b9a:	0f a5       	ldd	r16, Y+47	; 0x2f
    2b9c:	18 a9       	ldd	r17, Y+48	; 0x30
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <__udivdi3+0x94e>
    2ba0:	16 95       	lsr	r17
    2ba2:	07 95       	ror	r16
    2ba4:	f7 94       	ror	r15
    2ba6:	e7 94       	ror	r14
    2ba8:	6a 95       	dec	r22
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <__udivdi3+0x946>
    2bac:	37 01       	movw	r6, r14
    2bae:	48 01       	movw	r8, r16
    2bb0:	68 2a       	or	r6, r24
    2bb2:	79 2a       	or	r7, r25
    2bb4:	8a 2a       	or	r8, r26
    2bb6:	9b 2a       	or	r9, r27
    2bb8:	6d 8e       	std	Y+29, r6	; 0x1d
    2bba:	7e 8e       	std	Y+30, r7	; 0x1e
    2bbc:	8f 8e       	std	Y+31, r8	; 0x1f
    2bbe:	98 a2       	std	Y+32, r9	; 0x20
    2bc0:	ed a0       	ldd	r14, Y+37	; 0x25
    2bc2:	fe a0       	ldd	r15, Y+38	; 0x26
    2bc4:	0f a1       	ldd	r16, Y+39	; 0x27
    2bc6:	18 a5       	ldd	r17, Y+40	; 0x28
    2bc8:	38 01       	movw	r6, r16
    2bca:	88 24       	eor	r8, r8
    2bcc:	99 24       	eor	r9, r9
    2bce:	98 01       	movw	r18, r16
    2bd0:	87 01       	movw	r16, r14
    2bd2:	20 70       	andi	r18, 0x00	; 0
    2bd4:	30 70       	andi	r19, 0x00	; 0
    2bd6:	65 96       	adiw	r28, 0x15	; 21
    2bd8:	0c af       	std	Y+60, r16	; 0x3c
    2bda:	1d af       	std	Y+61, r17	; 0x3d
    2bdc:	2e af       	std	Y+62, r18	; 0x3e
    2bde:	3f af       	std	Y+63, r19	; 0x3f
    2be0:	65 97       	sbiw	r28, 0x15	; 21
    2be2:	c6 01       	movw	r24, r12
    2be4:	b5 01       	movw	r22, r10
    2be6:	a4 01       	movw	r20, r8
    2be8:	93 01       	movw	r18, r6
    2bea:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    2bee:	7b 01       	movw	r14, r22
    2bf0:	8c 01       	movw	r16, r24
    2bf2:	c6 01       	movw	r24, r12
    2bf4:	b5 01       	movw	r22, r10
    2bf6:	a4 01       	movw	r20, r8
    2bf8:	93 01       	movw	r18, r6
    2bfa:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    2bfe:	c9 01       	movw	r24, r18
    2c00:	da 01       	movw	r26, r20
    2c02:	1c 01       	movw	r2, r24
    2c04:	2d 01       	movw	r4, r26
    2c06:	c2 01       	movw	r24, r4
    2c08:	b1 01       	movw	r22, r2
    2c0a:	65 96       	adiw	r28, 0x15	; 21
    2c0c:	2c ad       	ldd	r18, Y+60	; 0x3c
    2c0e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2c10:	4e ad       	ldd	r20, Y+62	; 0x3e
    2c12:	5f ad       	ldd	r21, Y+63	; 0x3f
    2c14:	65 97       	sbiw	r28, 0x15	; 21
    2c16:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2c1a:	9b 01       	movw	r18, r22
    2c1c:	ac 01       	movw	r20, r24
    2c1e:	87 01       	movw	r16, r14
    2c20:	ff 24       	eor	r15, r15
    2c22:	ee 24       	eor	r14, r14
    2c24:	ad 8c       	ldd	r10, Y+29	; 0x1d
    2c26:	be 8c       	ldd	r11, Y+30	; 0x1e
    2c28:	cf 8c       	ldd	r12, Y+31	; 0x1f
    2c2a:	d8 a0       	ldd	r13, Y+32	; 0x20
    2c2c:	c6 01       	movw	r24, r12
    2c2e:	aa 27       	eor	r26, r26
    2c30:	bb 27       	eor	r27, r27
    2c32:	57 01       	movw	r10, r14
    2c34:	68 01       	movw	r12, r16
    2c36:	a8 2a       	or	r10, r24
    2c38:	b9 2a       	or	r11, r25
    2c3a:	ca 2a       	or	r12, r26
    2c3c:	db 2a       	or	r13, r27
    2c3e:	a2 16       	cp	r10, r18
    2c40:	b3 06       	cpc	r11, r19
    2c42:	c4 06       	cpc	r12, r20
    2c44:	d5 06       	cpc	r13, r21
    2c46:	00 f5       	brcc	.+64     	; 0x2c88 <__udivdi3+0xa2e>
    2c48:	08 94       	sec
    2c4a:	21 08       	sbc	r2, r1
    2c4c:	31 08       	sbc	r3, r1
    2c4e:	41 08       	sbc	r4, r1
    2c50:	51 08       	sbc	r5, r1
    2c52:	ed a0       	ldd	r14, Y+37	; 0x25
    2c54:	fe a0       	ldd	r15, Y+38	; 0x26
    2c56:	0f a1       	ldd	r16, Y+39	; 0x27
    2c58:	18 a5       	ldd	r17, Y+40	; 0x28
    2c5a:	ae 0c       	add	r10, r14
    2c5c:	bf 1c       	adc	r11, r15
    2c5e:	c0 1e       	adc	r12, r16
    2c60:	d1 1e       	adc	r13, r17
    2c62:	ae 14       	cp	r10, r14
    2c64:	bf 04       	cpc	r11, r15
    2c66:	c0 06       	cpc	r12, r16
    2c68:	d1 06       	cpc	r13, r17
    2c6a:	70 f0       	brcs	.+28     	; 0x2c88 <__udivdi3+0xa2e>
    2c6c:	a2 16       	cp	r10, r18
    2c6e:	b3 06       	cpc	r11, r19
    2c70:	c4 06       	cpc	r12, r20
    2c72:	d5 06       	cpc	r13, r21
    2c74:	48 f4       	brcc	.+18     	; 0x2c88 <__udivdi3+0xa2e>
    2c76:	08 94       	sec
    2c78:	21 08       	sbc	r2, r1
    2c7a:	31 08       	sbc	r3, r1
    2c7c:	41 08       	sbc	r4, r1
    2c7e:	51 08       	sbc	r5, r1
    2c80:	ae 0c       	add	r10, r14
    2c82:	bf 1c       	adc	r11, r15
    2c84:	c0 1e       	adc	r12, r16
    2c86:	d1 1e       	adc	r13, r17
    2c88:	a2 1a       	sub	r10, r18
    2c8a:	b3 0a       	sbc	r11, r19
    2c8c:	c4 0a       	sbc	r12, r20
    2c8e:	d5 0a       	sbc	r13, r21
    2c90:	c6 01       	movw	r24, r12
    2c92:	b5 01       	movw	r22, r10
    2c94:	a4 01       	movw	r20, r8
    2c96:	93 01       	movw	r18, r6
    2c98:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    2c9c:	7b 01       	movw	r14, r22
    2c9e:	8c 01       	movw	r16, r24
    2ca0:	c6 01       	movw	r24, r12
    2ca2:	b5 01       	movw	r22, r10
    2ca4:	a4 01       	movw	r20, r8
    2ca6:	93 01       	movw	r18, r6
    2ca8:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    2cac:	c9 01       	movw	r24, r18
    2cae:	da 01       	movw	r26, r20
    2cb0:	3c 01       	movw	r6, r24
    2cb2:	4d 01       	movw	r8, r26
    2cb4:	c4 01       	movw	r24, r8
    2cb6:	b3 01       	movw	r22, r6
    2cb8:	65 96       	adiw	r28, 0x15	; 21
    2cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    2cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    2cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2cc2:	65 97       	sbiw	r28, 0x15	; 21
    2cc4:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2cc8:	9b 01       	movw	r18, r22
    2cca:	ac 01       	movw	r20, r24
    2ccc:	87 01       	movw	r16, r14
    2cce:	ff 24       	eor	r15, r15
    2cd0:	ee 24       	eor	r14, r14
    2cd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd6:	af 8d       	ldd	r26, Y+31	; 0x1f
    2cd8:	b8 a1       	ldd	r27, Y+32	; 0x20
    2cda:	a0 70       	andi	r26, 0x00	; 0
    2cdc:	b0 70       	andi	r27, 0x00	; 0
    2cde:	57 01       	movw	r10, r14
    2ce0:	68 01       	movw	r12, r16
    2ce2:	a8 2a       	or	r10, r24
    2ce4:	b9 2a       	or	r11, r25
    2ce6:	ca 2a       	or	r12, r26
    2ce8:	db 2a       	or	r13, r27
    2cea:	a2 16       	cp	r10, r18
    2cec:	b3 06       	cpc	r11, r19
    2cee:	c4 06       	cpc	r12, r20
    2cf0:	d5 06       	cpc	r13, r21
    2cf2:	00 f5       	brcc	.+64     	; 0x2d34 <__udivdi3+0xada>
    2cf4:	08 94       	sec
    2cf6:	61 08       	sbc	r6, r1
    2cf8:	71 08       	sbc	r7, r1
    2cfa:	81 08       	sbc	r8, r1
    2cfc:	91 08       	sbc	r9, r1
    2cfe:	6d a1       	ldd	r22, Y+37	; 0x25
    2d00:	7e a1       	ldd	r23, Y+38	; 0x26
    2d02:	8f a1       	ldd	r24, Y+39	; 0x27
    2d04:	98 a5       	ldd	r25, Y+40	; 0x28
    2d06:	a6 0e       	add	r10, r22
    2d08:	b7 1e       	adc	r11, r23
    2d0a:	c8 1e       	adc	r12, r24
    2d0c:	d9 1e       	adc	r13, r25
    2d0e:	a6 16       	cp	r10, r22
    2d10:	b7 06       	cpc	r11, r23
    2d12:	c8 06       	cpc	r12, r24
    2d14:	d9 06       	cpc	r13, r25
    2d16:	70 f0       	brcs	.+28     	; 0x2d34 <__udivdi3+0xada>
    2d18:	a2 16       	cp	r10, r18
    2d1a:	b3 06       	cpc	r11, r19
    2d1c:	c4 06       	cpc	r12, r20
    2d1e:	d5 06       	cpc	r13, r21
    2d20:	48 f4       	brcc	.+18     	; 0x2d34 <__udivdi3+0xada>
    2d22:	08 94       	sec
    2d24:	61 08       	sbc	r6, r1
    2d26:	71 08       	sbc	r7, r1
    2d28:	81 08       	sbc	r8, r1
    2d2a:	91 08       	sbc	r9, r1
    2d2c:	a6 0e       	add	r10, r22
    2d2e:	b7 1e       	adc	r11, r23
    2d30:	c8 1e       	adc	r12, r24
    2d32:	d9 1e       	adc	r13, r25
    2d34:	d6 01       	movw	r26, r12
    2d36:	c5 01       	movw	r24, r10
    2d38:	82 1b       	sub	r24, r18
    2d3a:	93 0b       	sbc	r25, r19
    2d3c:	a4 0b       	sbc	r26, r20
    2d3e:	b5 0b       	sbc	r27, r21
    2d40:	89 8f       	std	Y+25, r24	; 0x19
    2d42:	9a 8f       	std	Y+26, r25	; 0x1a
    2d44:	ab 8f       	std	Y+27, r26	; 0x1b
    2d46:	bc 8f       	std	Y+28, r27	; 0x1c
    2d48:	d1 01       	movw	r26, r2
    2d4a:	99 27       	eor	r25, r25
    2d4c:	88 27       	eor	r24, r24
    2d4e:	64 01       	movw	r12, r8
    2d50:	53 01       	movw	r10, r6
    2d52:	a8 2a       	or	r10, r24
    2d54:	b9 2a       	or	r11, r25
    2d56:	ca 2a       	or	r12, r26
    2d58:	db 2a       	or	r13, r27
    2d5a:	a9 aa       	std	Y+49, r10	; 0x31
    2d5c:	ba aa       	std	Y+50, r11	; 0x32
    2d5e:	cb aa       	std	Y+51, r12	; 0x33
    2d60:	dc aa       	std	Y+52, r13	; 0x34
    2d62:	86 01       	movw	r16, r12
    2d64:	75 01       	movw	r14, r10
    2d66:	2f ef       	ldi	r18, 0xFF	; 255
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	e2 22       	and	r14, r18
    2d70:	f3 22       	and	r15, r19
    2d72:	04 23       	and	r16, r20
    2d74:	15 23       	and	r17, r21
    2d76:	a6 01       	movw	r20, r12
    2d78:	66 27       	eor	r22, r22
    2d7a:	77 27       	eor	r23, r23
    2d7c:	6d 96       	adiw	r28, 0x1d	; 29
    2d7e:	4c af       	std	Y+60, r20	; 0x3c
    2d80:	5d af       	std	Y+61, r21	; 0x3d
    2d82:	6e af       	std	Y+62, r22	; 0x3e
    2d84:	7f af       	std	Y+63, r23	; 0x3f
    2d86:	6d 97       	sbiw	r28, 0x1d	; 29
    2d88:	a9 a0       	ldd	r10, Y+33	; 0x21
    2d8a:	ba a0       	ldd	r11, Y+34	; 0x22
    2d8c:	cb a0       	ldd	r12, Y+35	; 0x23
    2d8e:	dc a0       	ldd	r13, Y+36	; 0x24
    2d90:	6f ef       	ldi	r22, 0xFF	; 255
    2d92:	7f ef       	ldi	r23, 0xFF	; 255
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	a6 22       	and	r10, r22
    2d9a:	b7 22       	and	r11, r23
    2d9c:	c8 22       	and	r12, r24
    2d9e:	d9 22       	and	r13, r25
    2da0:	89 a1       	ldd	r24, Y+33	; 0x21
    2da2:	9a a1       	ldd	r25, Y+34	; 0x22
    2da4:	ab a1       	ldd	r26, Y+35	; 0x23
    2da6:	bc a1       	ldd	r27, Y+36	; 0x24
    2da8:	1d 01       	movw	r2, r26
    2daa:	44 24       	eor	r4, r4
    2dac:	55 24       	eor	r5, r5
    2dae:	c8 01       	movw	r24, r16
    2db0:	b7 01       	movw	r22, r14
    2db2:	a6 01       	movw	r20, r12
    2db4:	95 01       	movw	r18, r10
    2db6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2dba:	69 96       	adiw	r28, 0x19	; 25
    2dbc:	6c af       	std	Y+60, r22	; 0x3c
    2dbe:	7d af       	std	Y+61, r23	; 0x3d
    2dc0:	8e af       	std	Y+62, r24	; 0x3e
    2dc2:	9f af       	std	Y+63, r25	; 0x3f
    2dc4:	69 97       	sbiw	r28, 0x19	; 25
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	b7 01       	movw	r22, r14
    2dca:	a2 01       	movw	r20, r4
    2dcc:	91 01       	movw	r18, r2
    2dce:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2dd2:	3b 01       	movw	r6, r22
    2dd4:	4c 01       	movw	r8, r24
    2dd6:	6d 96       	adiw	r28, 0x1d	; 29
    2dd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dda:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ddc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dde:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de0:	6d 97       	sbiw	r28, 0x1d	; 29
    2de2:	a6 01       	movw	r20, r12
    2de4:	95 01       	movw	r18, r10
    2de6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2dea:	7b 01       	movw	r14, r22
    2dec:	8c 01       	movw	r16, r24
    2dee:	6d 96       	adiw	r28, 0x1d	; 29
    2df0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2df2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2df4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2df6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2df8:	6d 97       	sbiw	r28, 0x1d	; 29
    2dfa:	a2 01       	movw	r20, r4
    2dfc:	91 01       	movw	r18, r2
    2dfe:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    2e02:	5b 01       	movw	r10, r22
    2e04:	6c 01       	movw	r12, r24
    2e06:	a8 01       	movw	r20, r16
    2e08:	97 01       	movw	r18, r14
    2e0a:	26 0d       	add	r18, r6
    2e0c:	37 1d       	adc	r19, r7
    2e0e:	48 1d       	adc	r20, r8
    2e10:	59 1d       	adc	r21, r9
    2e12:	69 96       	adiw	r28, 0x19	; 25
    2e14:	6c ac       	ldd	r6, Y+60	; 0x3c
    2e16:	7d ac       	ldd	r7, Y+61	; 0x3d
    2e18:	8e ac       	ldd	r8, Y+62	; 0x3e
    2e1a:	9f ac       	ldd	r9, Y+63	; 0x3f
    2e1c:	69 97       	sbiw	r28, 0x19	; 25
    2e1e:	c4 01       	movw	r24, r8
    2e20:	aa 27       	eor	r26, r26
    2e22:	bb 27       	eor	r27, r27
    2e24:	28 0f       	add	r18, r24
    2e26:	39 1f       	adc	r19, r25
    2e28:	4a 1f       	adc	r20, r26
    2e2a:	5b 1f       	adc	r21, r27
    2e2c:	2e 15       	cp	r18, r14
    2e2e:	3f 05       	cpc	r19, r15
    2e30:	40 07       	cpc	r20, r16
    2e32:	51 07       	cpc	r21, r17
    2e34:	48 f4       	brcc	.+18     	; 0x2e48 <__udivdi3+0xbee>
    2e36:	e1 2c       	mov	r14, r1
    2e38:	f1 2c       	mov	r15, r1
    2e3a:	61 e0       	ldi	r22, 0x01	; 1
    2e3c:	06 2f       	mov	r16, r22
    2e3e:	11 2d       	mov	r17, r1
    2e40:	ae 0c       	add	r10, r14
    2e42:	bf 1c       	adc	r11, r15
    2e44:	c0 1e       	adc	r12, r16
    2e46:	d1 1e       	adc	r13, r17
    2e48:	ca 01       	movw	r24, r20
    2e4a:	aa 27       	eor	r26, r26
    2e4c:	bb 27       	eor	r27, r27
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	6a 0d       	add	r22, r10
    2e54:	7b 1d       	adc	r23, r11
    2e56:	8c 1d       	adc	r24, r12
    2e58:	9d 1d       	adc	r25, r13
    2e5a:	69 8c       	ldd	r6, Y+25	; 0x19
    2e5c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    2e5e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    2e60:	9c 8c       	ldd	r9, Y+28	; 0x1c
    2e62:	66 16       	cp	r6, r22
    2e64:	77 06       	cpc	r7, r23
    2e66:	88 06       	cpc	r8, r24
    2e68:	99 06       	cpc	r9, r25
    2e6a:	40 f1       	brcs	.+80     	; 0x2ebc <__udivdi3+0xc62>
    2e6c:	66 15       	cp	r22, r6
    2e6e:	77 05       	cpc	r23, r7
    2e70:	88 05       	cpc	r24, r8
    2e72:	99 05       	cpc	r25, r9
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <__udivdi3+0xc1e>
    2e76:	43 c0       	rjmp	.+134    	; 0x2efe <__udivdi3+0xca4>
    2e78:	d9 01       	movw	r26, r18
    2e7a:	99 27       	eor	r25, r25
    2e7c:	88 27       	eor	r24, r24
    2e7e:	69 96       	adiw	r28, 0x19	; 25
    2e80:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e82:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e84:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e86:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e88:	69 97       	sbiw	r28, 0x19	; 25
    2e8a:	40 70       	andi	r20, 0x00	; 0
    2e8c:	50 70       	andi	r21, 0x00	; 0
    2e8e:	82 0f       	add	r24, r18
    2e90:	93 1f       	adc	r25, r19
    2e92:	a4 1f       	adc	r26, r20
    2e94:	b5 1f       	adc	r27, r21
    2e96:	2d a5       	ldd	r18, Y+45	; 0x2d
    2e98:	3e a5       	ldd	r19, Y+46	; 0x2e
    2e9a:	4f a5       	ldd	r20, Y+47	; 0x2f
    2e9c:	58 a9       	ldd	r21, Y+48	; 0x30
    2e9e:	6e 96       	adiw	r28, 0x1e	; 30
    2ea0:	0f ac       	ldd	r0, Y+63	; 0x3f
    2ea2:	6e 97       	sbiw	r28, 0x1e	; 30
    2ea4:	04 c0       	rjmp	.+8      	; 0x2eae <__udivdi3+0xc54>
    2ea6:	22 0f       	add	r18, r18
    2ea8:	33 1f       	adc	r19, r19
    2eaa:	44 1f       	adc	r20, r20
    2eac:	55 1f       	adc	r21, r21
    2eae:	0a 94       	dec	r0
    2eb0:	d2 f7       	brpl	.-12     	; 0x2ea6 <__udivdi3+0xc4c>
    2eb2:	28 17       	cp	r18, r24
    2eb4:	39 07       	cpc	r19, r25
    2eb6:	4a 07       	cpc	r20, r26
    2eb8:	5b 07       	cpc	r21, r27
    2eba:	08 f5       	brcc	.+66     	; 0x2efe <__udivdi3+0xca4>
    2ebc:	09 a9       	ldd	r16, Y+49	; 0x31
    2ebe:	1a a9       	ldd	r17, Y+50	; 0x32
    2ec0:	2b a9       	ldd	r18, Y+51	; 0x33
    2ec2:	3c a9       	ldd	r19, Y+52	; 0x34
    2ec4:	01 50       	subi	r16, 0x01	; 1
    2ec6:	10 40       	sbci	r17, 0x00	; 0
    2ec8:	20 40       	sbci	r18, 0x00	; 0
    2eca:	30 40       	sbci	r19, 0x00	; 0
    2ecc:	09 ab       	std	Y+49, r16	; 0x31
    2ece:	1a ab       	std	Y+50, r17	; 0x32
    2ed0:	2b ab       	std	Y+51, r18	; 0x33
    2ed2:	3c ab       	std	Y+52, r19	; 0x34
    2ed4:	14 c0       	rjmp	.+40     	; 0x2efe <__udivdi3+0xca4>
    2ed6:	66 24       	eor	r6, r6
    2ed8:	77 24       	eor	r7, r7
    2eda:	43 01       	movw	r8, r6
    2edc:	21 e0       	ldi	r18, 0x01	; 1
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	29 ab       	std	Y+49, r18	; 0x31
    2ee6:	3a ab       	std	Y+50, r19	; 0x32
    2ee8:	4b ab       	std	Y+51, r20	; 0x33
    2eea:	5c ab       	std	Y+52, r21	; 0x34
    2eec:	0b c0       	rjmp	.+22     	; 0x2f04 <__udivdi3+0xcaa>
    2eee:	66 24       	eor	r6, r6
    2ef0:	77 24       	eor	r7, r7
    2ef2:	43 01       	movw	r8, r6
    2ef4:	19 aa       	std	Y+49, r1	; 0x31
    2ef6:	1a aa       	std	Y+50, r1	; 0x32
    2ef8:	1b aa       	std	Y+51, r1	; 0x33
    2efa:	1c aa       	std	Y+52, r1	; 0x34
    2efc:	03 c0       	rjmp	.+6      	; 0x2f04 <__udivdi3+0xcaa>
    2efe:	66 24       	eor	r6, r6
    2f00:	77 24       	eor	r7, r7
    2f02:	43 01       	movw	r8, r6
    2f04:	fe 01       	movw	r30, r28
    2f06:	71 96       	adiw	r30, 0x11	; 17
    2f08:	88 e0       	ldi	r24, 0x08	; 8
    2f0a:	df 01       	movw	r26, r30
    2f0c:	1d 92       	st	X+, r1
    2f0e:	8a 95       	dec	r24
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <__udivdi3+0xcb2>
    2f12:	a9 a8       	ldd	r10, Y+49	; 0x31
    2f14:	ba a8       	ldd	r11, Y+50	; 0x32
    2f16:	cb a8       	ldd	r12, Y+51	; 0x33
    2f18:	dc a8       	ldd	r13, Y+52	; 0x34
    2f1a:	a9 8a       	std	Y+17, r10	; 0x11
    2f1c:	ba 8a       	std	Y+18, r11	; 0x12
    2f1e:	cb 8a       	std	Y+19, r12	; 0x13
    2f20:	dc 8a       	std	Y+20, r13	; 0x14
    2f22:	6d 8a       	std	Y+21, r6	; 0x15
    2f24:	7e 8a       	std	Y+22, r7	; 0x16
    2f26:	8f 8a       	std	Y+23, r8	; 0x17
    2f28:	98 8e       	std	Y+24, r9	; 0x18
    2f2a:	29 a9       	ldd	r18, Y+49	; 0x31
    2f2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2f2e:	4b 89       	ldd	r20, Y+19	; 0x13
    2f30:	5c 89       	ldd	r21, Y+20	; 0x14
    2f32:	66 2d       	mov	r22, r6
    2f34:	7e 89       	ldd	r23, Y+22	; 0x16
    2f36:	8f 89       	ldd	r24, Y+23	; 0x17
    2f38:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3a:	c2 5a       	subi	r28, 0xA2	; 162
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	e2 e1       	ldi	r30, 0x12	; 18
    2f40:	0c 94 e5 36 	jmp	0x6dca	; 0x6dca <__epilogue_restores__>

00002f44 <__umoddi3>:
    2f44:	ab e5       	ldi	r26, 0x5B	; 91
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 ea       	ldi	r30, 0xA8	; 168
    2f4a:	f7 e1       	ldi	r31, 0x17	; 23
    2f4c:	0c 94 c9 36 	jmp	0x6d92	; 0x6d92 <__prologue_saves__>
    2f50:	a8 e0       	ldi	r26, 0x08	; 8
    2f52:	4e 01       	movw	r8, r28
    2f54:	08 94       	sec
    2f56:	81 1c       	adc	r8, r1
    2f58:	91 1c       	adc	r9, r1
    2f5a:	f4 01       	movw	r30, r8
    2f5c:	6a 2e       	mov	r6, r26
    2f5e:	11 92       	st	Z+, r1
    2f60:	6a 94       	dec	r6
    2f62:	e9 f7       	brne	.-6      	; 0x2f5e <__umoddi3+0x1a>
    2f64:	29 83       	std	Y+1, r18	; 0x01
    2f66:	3a 83       	std	Y+2, r19	; 0x02
    2f68:	4b 83       	std	Y+3, r20	; 0x03
    2f6a:	5c 83       	std	Y+4, r21	; 0x04
    2f6c:	6d 83       	std	Y+5, r22	; 0x05
    2f6e:	7e 83       	std	Y+6, r23	; 0x06
    2f70:	8f 83       	std	Y+7, r24	; 0x07
    2f72:	98 87       	std	Y+8, r25	; 0x08
    2f74:	ce 01       	movw	r24, r28
    2f76:	09 96       	adiw	r24, 0x09	; 9
    2f78:	fc 01       	movw	r30, r24
    2f7a:	11 92       	st	Z+, r1
    2f7c:	aa 95       	dec	r26
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <__umoddi3+0x36>
    2f80:	a9 86       	std	Y+9, r10	; 0x09
    2f82:	ba 86       	std	Y+10, r11	; 0x0a
    2f84:	cb 86       	std	Y+11, r12	; 0x0b
    2f86:	dc 86       	std	Y+12, r13	; 0x0c
    2f88:	ed 86       	std	Y+13, r14	; 0x0d
    2f8a:	fe 86       	std	Y+14, r15	; 0x0e
    2f8c:	0f 87       	std	Y+15, r16	; 0x0f
    2f8e:	18 8b       	std	Y+16, r17	; 0x10
    2f90:	29 84       	ldd	r2, Y+9	; 0x09
    2f92:	3a 84       	ldd	r3, Y+10	; 0x0a
    2f94:	4b 84       	ldd	r4, Y+11	; 0x0b
    2f96:	5c 84       	ldd	r5, Y+12	; 0x0c
    2f98:	ad 84       	ldd	r10, Y+13	; 0x0d
    2f9a:	be 84       	ldd	r11, Y+14	; 0x0e
    2f9c:	cf 84       	ldd	r12, Y+15	; 0x0f
    2f9e:	d8 88       	ldd	r13, Y+16	; 0x10
    2fa0:	29 81       	ldd	r18, Y+1	; 0x01
    2fa2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa4:	4b 81       	ldd	r20, Y+3	; 0x03
    2fa6:	5c 81       	ldd	r21, Y+4	; 0x04
    2fa8:	69 96       	adiw	r28, 0x19	; 25
    2faa:	2f af       	std	Y+63, r18	; 0x3f
    2fac:	69 97       	sbiw	r28, 0x19	; 25
    2fae:	6a 96       	adiw	r28, 0x1a	; 26
    2fb0:	3f af       	std	Y+63, r19	; 0x3f
    2fb2:	6a 97       	sbiw	r28, 0x1a	; 26
    2fb4:	6b 96       	adiw	r28, 0x1b	; 27
    2fb6:	4f af       	std	Y+63, r20	; 0x3f
    2fb8:	6b 97       	sbiw	r28, 0x1b	; 27
    2fba:	6c 96       	adiw	r28, 0x1c	; 28
    2fbc:	5f af       	std	Y+63, r21	; 0x3f
    2fbe:	6c 97       	sbiw	r28, 0x1c	; 28
    2fc0:	6c 96       	adiw	r28, 0x1c	; 28
    2fc2:	6c ac       	ldd	r6, Y+60	; 0x3c
    2fc4:	7d ac       	ldd	r7, Y+61	; 0x3d
    2fc6:	8e ac       	ldd	r8, Y+62	; 0x3e
    2fc8:	9f ac       	ldd	r9, Y+63	; 0x3f
    2fca:	6c 97       	sbiw	r28, 0x1c	; 28
    2fcc:	69 aa       	std	Y+49, r6	; 0x31
    2fce:	7a aa       	std	Y+50, r7	; 0x32
    2fd0:	8b aa       	std	Y+51, r8	; 0x33
    2fd2:	9c aa       	std	Y+52, r9	; 0x34
    2fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    2fd6:	7e 81       	ldd	r23, Y+6	; 0x06
    2fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2fda:	98 85       	ldd	r25, Y+8	; 0x08
    2fdc:	3b 01       	movw	r6, r22
    2fde:	4c 01       	movw	r8, r24
    2fe0:	6d aa       	std	Y+53, r6	; 0x35
    2fe2:	7e aa       	std	Y+54, r7	; 0x36
    2fe4:	8f aa       	std	Y+55, r8	; 0x37
    2fe6:	98 ae       	std	Y+56, r9	; 0x38
    2fe8:	a1 14       	cp	r10, r1
    2fea:	b1 04       	cpc	r11, r1
    2fec:	c1 04       	cpc	r12, r1
    2fee:	d1 04       	cpc	r13, r1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <__umoddi3+0xb0>
    2ff2:	04 c3       	rjmp	.+1544   	; 0x35fc <__umoddi3+0x6b8>
    2ff4:	62 14       	cp	r6, r2
    2ff6:	73 04       	cpc	r7, r3
    2ff8:	84 04       	cpc	r8, r4
    2ffa:	95 04       	cpc	r9, r5
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <__umoddi3+0xbc>
    2ffe:	00 c1       	rjmp	.+512    	; 0x3200 <__umoddi3+0x2bc>
    3000:	00 e0       	ldi	r16, 0x00	; 0
    3002:	20 16       	cp	r2, r16
    3004:	00 e0       	ldi	r16, 0x00	; 0
    3006:	30 06       	cpc	r3, r16
    3008:	01 e0       	ldi	r16, 0x01	; 1
    300a:	40 06       	cpc	r4, r16
    300c:	00 e0       	ldi	r16, 0x00	; 0
    300e:	50 06       	cpc	r5, r16
    3010:	88 f4       	brcc	.+34     	; 0x3034 <__umoddi3+0xf0>
    3012:	1f ef       	ldi	r17, 0xFF	; 255
    3014:	21 16       	cp	r2, r17
    3016:	31 04       	cpc	r3, r1
    3018:	41 04       	cpc	r4, r1
    301a:	51 04       	cpc	r5, r1
    301c:	39 f0       	breq	.+14     	; 0x302c <__umoddi3+0xe8>
    301e:	30 f0       	brcs	.+12     	; 0x302c <__umoddi3+0xe8>
    3020:	88 e0       	ldi	r24, 0x08	; 8
    3022:	e8 2e       	mov	r14, r24
    3024:	f1 2c       	mov	r15, r1
    3026:	01 2d       	mov	r16, r1
    3028:	11 2d       	mov	r17, r1
    302a:	18 c0       	rjmp	.+48     	; 0x305c <__umoddi3+0x118>
    302c:	ee 24       	eor	r14, r14
    302e:	ff 24       	eor	r15, r15
    3030:	87 01       	movw	r16, r14
    3032:	14 c0       	rjmp	.+40     	; 0x305c <__umoddi3+0x118>
    3034:	40 e0       	ldi	r20, 0x00	; 0
    3036:	24 16       	cp	r2, r20
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	34 06       	cpc	r3, r20
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	44 06       	cpc	r4, r20
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	54 06       	cpc	r5, r20
    3044:	30 f0       	brcs	.+12     	; 0x3052 <__umoddi3+0x10e>
    3046:	b8 e1       	ldi	r27, 0x18	; 24
    3048:	eb 2e       	mov	r14, r27
    304a:	f1 2c       	mov	r15, r1
    304c:	01 2d       	mov	r16, r1
    304e:	11 2d       	mov	r17, r1
    3050:	05 c0       	rjmp	.+10     	; 0x305c <__umoddi3+0x118>
    3052:	a0 e1       	ldi	r26, 0x10	; 16
    3054:	ea 2e       	mov	r14, r26
    3056:	f1 2c       	mov	r15, r1
    3058:	01 2d       	mov	r16, r1
    305a:	11 2d       	mov	r17, r1
    305c:	d2 01       	movw	r26, r4
    305e:	c1 01       	movw	r24, r2
    3060:	0e 2c       	mov	r0, r14
    3062:	04 c0       	rjmp	.+8      	; 0x306c <__umoddi3+0x128>
    3064:	b6 95       	lsr	r27
    3066:	a7 95       	ror	r26
    3068:	97 95       	ror	r25
    306a:	87 95       	ror	r24
    306c:	0a 94       	dec	r0
    306e:	d2 f7       	brpl	.-12     	; 0x3064 <__umoddi3+0x120>
    3070:	8f 52       	subi	r24, 0x2F	; 47
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	dc 01       	movw	r26, r24
    3076:	2c 91       	ld	r18, X
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a0 e0       	ldi	r26, 0x00	; 0
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	8e 19       	sub	r24, r14
    3082:	9f 09       	sbc	r25, r15
    3084:	a0 0b       	sbc	r26, r16
    3086:	b1 0b       	sbc	r27, r17
    3088:	5c 01       	movw	r10, r24
    308a:	6d 01       	movw	r12, r26
    308c:	a2 1a       	sub	r10, r18
    308e:	b1 08       	sbc	r11, r1
    3090:	c1 08       	sbc	r12, r1
    3092:	d1 08       	sbc	r13, r1
    3094:	a9 ae       	std	Y+57, r10	; 0x39
    3096:	ba ae       	std	Y+58, r11	; 0x3a
    3098:	cb ae       	std	Y+59, r12	; 0x3b
    309a:	dc ae       	std	Y+60, r13	; 0x3c
    309c:	a1 14       	cp	r10, r1
    309e:	b1 04       	cpc	r11, r1
    30a0:	c1 04       	cpc	r12, r1
    30a2:	d1 04       	cpc	r13, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <__umoddi3+0x164>
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <__umoddi3+0x1e2>
    30a8:	69 ad       	ldd	r22, Y+57	; 0x39
    30aa:	06 2e       	mov	r0, r22
    30ac:	04 c0       	rjmp	.+8      	; 0x30b6 <__umoddi3+0x172>
    30ae:	22 0c       	add	r2, r2
    30b0:	33 1c       	adc	r3, r3
    30b2:	44 1c       	adc	r4, r4
    30b4:	55 1c       	adc	r5, r5
    30b6:	0a 94       	dec	r0
    30b8:	d2 f7       	brpl	.-12     	; 0x30ae <__umoddi3+0x16a>
    30ba:	a4 01       	movw	r20, r8
    30bc:	93 01       	movw	r18, r6
    30be:	06 2e       	mov	r0, r22
    30c0:	04 c0       	rjmp	.+8      	; 0x30ca <__umoddi3+0x186>
    30c2:	22 0f       	add	r18, r18
    30c4:	33 1f       	adc	r19, r19
    30c6:	44 1f       	adc	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	0a 94       	dec	r0
    30cc:	d2 f7       	brpl	.-12     	; 0x30c2 <__umoddi3+0x17e>
    30ce:	80 e2       	ldi	r24, 0x20	; 32
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	8a 19       	sub	r24, r10
    30d4:	9b 09       	sbc	r25, r11
    30d6:	6c 96       	adiw	r28, 0x1c	; 28
    30d8:	cc ac       	ldd	r12, Y+60	; 0x3c
    30da:	dd ac       	ldd	r13, Y+61	; 0x3d
    30dc:	ee ac       	ldd	r14, Y+62	; 0x3e
    30de:	ff ac       	ldd	r15, Y+63	; 0x3f
    30e0:	6c 97       	sbiw	r28, 0x1c	; 28
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <__umoddi3+0x1a8>
    30e4:	f6 94       	lsr	r15
    30e6:	e7 94       	ror	r14
    30e8:	d7 94       	ror	r13
    30ea:	c7 94       	ror	r12
    30ec:	8a 95       	dec	r24
    30ee:	d2 f7       	brpl	.-12     	; 0x30e4 <__umoddi3+0x1a0>
    30f0:	87 01       	movw	r16, r14
    30f2:	76 01       	movw	r14, r12
    30f4:	e2 2a       	or	r14, r18
    30f6:	f3 2a       	or	r15, r19
    30f8:	04 2b       	or	r16, r20
    30fa:	15 2b       	or	r17, r21
    30fc:	ed aa       	std	Y+53, r14	; 0x35
    30fe:	fe aa       	std	Y+54, r15	; 0x36
    3100:	0f ab       	std	Y+55, r16	; 0x37
    3102:	18 af       	std	Y+56, r17	; 0x38
    3104:	6c 96       	adiw	r28, 0x1c	; 28
    3106:	8c ad       	ldd	r24, Y+60	; 0x3c
    3108:	9d ad       	ldd	r25, Y+61	; 0x3d
    310a:	ae ad       	ldd	r26, Y+62	; 0x3e
    310c:	bf ad       	ldd	r27, Y+63	; 0x3f
    310e:	6c 97       	sbiw	r28, 0x1c	; 28
    3110:	04 c0       	rjmp	.+8      	; 0x311a <__umoddi3+0x1d6>
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	aa 1f       	adc	r26, r26
    3118:	bb 1f       	adc	r27, r27
    311a:	6a 95       	dec	r22
    311c:	d2 f7       	brpl	.-12     	; 0x3112 <__umoddi3+0x1ce>
    311e:	89 ab       	std	Y+49, r24	; 0x31
    3120:	9a ab       	std	Y+50, r25	; 0x32
    3122:	ab ab       	std	Y+51, r26	; 0x33
    3124:	bc ab       	std	Y+52, r27	; 0x34
    3126:	32 01       	movw	r6, r4
    3128:	88 24       	eor	r8, r8
    312a:	99 24       	eor	r9, r9
    312c:	b2 01       	movw	r22, r4
    312e:	a1 01       	movw	r20, r2
    3130:	60 70       	andi	r22, 0x00	; 0
    3132:	70 70       	andi	r23, 0x00	; 0
    3134:	21 96       	adiw	r28, 0x01	; 1
    3136:	4c af       	std	Y+60, r20	; 0x3c
    3138:	5d af       	std	Y+61, r21	; 0x3d
    313a:	6e af       	std	Y+62, r22	; 0x3e
    313c:	7f af       	std	Y+63, r23	; 0x3f
    313e:	21 97       	sbiw	r28, 0x01	; 1
    3140:	6d a9       	ldd	r22, Y+53	; 0x35
    3142:	7e a9       	ldd	r23, Y+54	; 0x36
    3144:	8f a9       	ldd	r24, Y+55	; 0x37
    3146:	98 ad       	ldd	r25, Y+56	; 0x38
    3148:	a4 01       	movw	r20, r8
    314a:	93 01       	movw	r18, r6
    314c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3150:	7b 01       	movw	r14, r22
    3152:	8c 01       	movw	r16, r24
    3154:	6d a9       	ldd	r22, Y+53	; 0x35
    3156:	7e a9       	ldd	r23, Y+54	; 0x36
    3158:	8f a9       	ldd	r24, Y+55	; 0x37
    315a:	98 ad       	ldd	r25, Y+56	; 0x38
    315c:	a4 01       	movw	r20, r8
    315e:	93 01       	movw	r18, r6
    3160:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3164:	ca 01       	movw	r24, r20
    3166:	b9 01       	movw	r22, r18
    3168:	21 96       	adiw	r28, 0x01	; 1
    316a:	2c ad       	ldd	r18, Y+60	; 0x3c
    316c:	3d ad       	ldd	r19, Y+61	; 0x3d
    316e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3170:	5f ad       	ldd	r21, Y+63	; 0x3f
    3172:	21 97       	sbiw	r28, 0x01	; 1
    3174:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3178:	9b 01       	movw	r18, r22
    317a:	ac 01       	movw	r20, r24
    317c:	87 01       	movw	r16, r14
    317e:	ff 24       	eor	r15, r15
    3180:	ee 24       	eor	r14, r14
    3182:	a9 a8       	ldd	r10, Y+49	; 0x31
    3184:	ba a8       	ldd	r11, Y+50	; 0x32
    3186:	cb a8       	ldd	r12, Y+51	; 0x33
    3188:	dc a8       	ldd	r13, Y+52	; 0x34
    318a:	c6 01       	movw	r24, r12
    318c:	aa 27       	eor	r26, r26
    318e:	bb 27       	eor	r27, r27
    3190:	57 01       	movw	r10, r14
    3192:	68 01       	movw	r12, r16
    3194:	a8 2a       	or	r10, r24
    3196:	b9 2a       	or	r11, r25
    3198:	ca 2a       	or	r12, r26
    319a:	db 2a       	or	r13, r27
    319c:	a2 16       	cp	r10, r18
    319e:	b3 06       	cpc	r11, r19
    31a0:	c4 06       	cpc	r12, r20
    31a2:	d5 06       	cpc	r13, r21
    31a4:	90 f4       	brcc	.+36     	; 0x31ca <__umoddi3+0x286>
    31a6:	a2 0c       	add	r10, r2
    31a8:	b3 1c       	adc	r11, r3
    31aa:	c4 1c       	adc	r12, r4
    31ac:	d5 1c       	adc	r13, r5
    31ae:	a2 14       	cp	r10, r2
    31b0:	b3 04       	cpc	r11, r3
    31b2:	c4 04       	cpc	r12, r4
    31b4:	d5 04       	cpc	r13, r5
    31b6:	48 f0       	brcs	.+18     	; 0x31ca <__umoddi3+0x286>
    31b8:	a2 16       	cp	r10, r18
    31ba:	b3 06       	cpc	r11, r19
    31bc:	c4 06       	cpc	r12, r20
    31be:	d5 06       	cpc	r13, r21
    31c0:	20 f4       	brcc	.+8      	; 0x31ca <__umoddi3+0x286>
    31c2:	a2 0c       	add	r10, r2
    31c4:	b3 1c       	adc	r11, r3
    31c6:	c4 1c       	adc	r12, r4
    31c8:	d5 1c       	adc	r13, r5
    31ca:	a2 1a       	sub	r10, r18
    31cc:	b3 0a       	sbc	r11, r19
    31ce:	c4 0a       	sbc	r12, r20
    31d0:	d5 0a       	sbc	r13, r21
    31d2:	c6 01       	movw	r24, r12
    31d4:	b5 01       	movw	r22, r10
    31d6:	a4 01       	movw	r20, r8
    31d8:	93 01       	movw	r18, r6
    31da:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    31de:	7b 01       	movw	r14, r22
    31e0:	8c 01       	movw	r16, r24
    31e2:	c6 01       	movw	r24, r12
    31e4:	b5 01       	movw	r22, r10
    31e6:	a4 01       	movw	r20, r8
    31e8:	93 01       	movw	r18, r6
    31ea:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    31ee:	ca 01       	movw	r24, r20
    31f0:	b9 01       	movw	r22, r18
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    31f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    31f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    31fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    31fc:	21 97       	sbiw	r28, 0x01	; 1
    31fe:	ba c1       	rjmp	.+884    	; 0x3574 <__umoddi3+0x630>
    3200:	21 14       	cp	r2, r1
    3202:	31 04       	cpc	r3, r1
    3204:	41 04       	cpc	r4, r1
    3206:	51 04       	cpc	r5, r1
    3208:	71 f4       	brne	.+28     	; 0x3226 <__umoddi3+0x2e2>
    320a:	61 e0       	ldi	r22, 0x01	; 1
    320c:	70 e0       	ldi	r23, 0x00	; 0
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    321e:	c9 01       	movw	r24, r18
    3220:	da 01       	movw	r26, r20
    3222:	1c 01       	movw	r2, r24
    3224:	2d 01       	movw	r4, r26
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	20 16       	cp	r2, r16
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	30 06       	cpc	r3, r16
    322e:	01 e0       	ldi	r16, 0x01	; 1
    3230:	40 06       	cpc	r4, r16
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	50 06       	cpc	r5, r16
    3236:	88 f4       	brcc	.+34     	; 0x325a <__umoddi3+0x316>
    3238:	1f ef       	ldi	r17, 0xFF	; 255
    323a:	21 16       	cp	r2, r17
    323c:	31 04       	cpc	r3, r1
    323e:	41 04       	cpc	r4, r1
    3240:	51 04       	cpc	r5, r1
    3242:	39 f0       	breq	.+14     	; 0x3252 <__umoddi3+0x30e>
    3244:	30 f0       	brcs	.+12     	; 0x3252 <__umoddi3+0x30e>
    3246:	68 e0       	ldi	r22, 0x08	; 8
    3248:	e6 2e       	mov	r14, r22
    324a:	f1 2c       	mov	r15, r1
    324c:	01 2d       	mov	r16, r1
    324e:	11 2d       	mov	r17, r1
    3250:	18 c0       	rjmp	.+48     	; 0x3282 <__umoddi3+0x33e>
    3252:	ee 24       	eor	r14, r14
    3254:	ff 24       	eor	r15, r15
    3256:	87 01       	movw	r16, r14
    3258:	14 c0       	rjmp	.+40     	; 0x3282 <__umoddi3+0x33e>
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	24 16       	cp	r2, r20
    325e:	40 e0       	ldi	r20, 0x00	; 0
    3260:	34 06       	cpc	r3, r20
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	44 06       	cpc	r4, r20
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	54 06       	cpc	r5, r20
    326a:	30 f0       	brcs	.+12     	; 0x3278 <__umoddi3+0x334>
    326c:	58 e1       	ldi	r21, 0x18	; 24
    326e:	e5 2e       	mov	r14, r21
    3270:	f1 2c       	mov	r15, r1
    3272:	01 2d       	mov	r16, r1
    3274:	11 2d       	mov	r17, r1
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__umoddi3+0x33e>
    3278:	40 e1       	ldi	r20, 0x10	; 16
    327a:	e4 2e       	mov	r14, r20
    327c:	f1 2c       	mov	r15, r1
    327e:	01 2d       	mov	r16, r1
    3280:	11 2d       	mov	r17, r1
    3282:	d2 01       	movw	r26, r4
    3284:	c1 01       	movw	r24, r2
    3286:	0e 2c       	mov	r0, r14
    3288:	04 c0       	rjmp	.+8      	; 0x3292 <__umoddi3+0x34e>
    328a:	b6 95       	lsr	r27
    328c:	a7 95       	ror	r26
    328e:	97 95       	ror	r25
    3290:	87 95       	ror	r24
    3292:	0a 94       	dec	r0
    3294:	d2 f7       	brpl	.-12     	; 0x328a <__umoddi3+0x346>
    3296:	8f 52       	subi	r24, 0x2F	; 47
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	dc 01       	movw	r26, r24
    329c:	2c 91       	ld	r18, X
    329e:	30 e2       	ldi	r19, 0x20	; 32
    32a0:	a3 2e       	mov	r10, r19
    32a2:	b1 2c       	mov	r11, r1
    32a4:	c1 2c       	mov	r12, r1
    32a6:	d1 2c       	mov	r13, r1
    32a8:	d6 01       	movw	r26, r12
    32aa:	c5 01       	movw	r24, r10
    32ac:	8e 19       	sub	r24, r14
    32ae:	9f 09       	sbc	r25, r15
    32b0:	a0 0b       	sbc	r26, r16
    32b2:	b1 0b       	sbc	r27, r17
    32b4:	7c 01       	movw	r14, r24
    32b6:	8d 01       	movw	r16, r26
    32b8:	e2 1a       	sub	r14, r18
    32ba:	f1 08       	sbc	r15, r1
    32bc:	01 09       	sbc	r16, r1
    32be:	11 09       	sbc	r17, r1
    32c0:	e9 ae       	std	Y+57, r14	; 0x39
    32c2:	fa ae       	std	Y+58, r15	; 0x3a
    32c4:	0b af       	std	Y+59, r16	; 0x3b
    32c6:	1c af       	std	Y+60, r17	; 0x3c
    32c8:	e1 14       	cp	r14, r1
    32ca:	f1 04       	cpc	r15, r1
    32cc:	01 05       	cpc	r16, r1
    32ce:	11 05       	cpc	r17, r1
    32d0:	39 f4       	brne	.+14     	; 0x32e0 <__umoddi3+0x39c>
    32d2:	64 01       	movw	r12, r8
    32d4:	53 01       	movw	r10, r6
    32d6:	a2 18       	sub	r10, r2
    32d8:	b3 08       	sbc	r11, r3
    32da:	c4 08       	sbc	r12, r4
    32dc:	d5 08       	sbc	r13, r5
    32de:	e2 c0       	rjmp	.+452    	; 0x34a4 <__umoddi3+0x560>
    32e0:	f9 ac       	ldd	r15, Y+57	; 0x39
    32e2:	68 96       	adiw	r28, 0x18	; 24
    32e4:	ff ae       	std	Y+63, r15	; 0x3f
    32e6:	68 97       	sbiw	r28, 0x18	; 24
    32e8:	0f 2c       	mov	r0, r15
    32ea:	04 c0       	rjmp	.+8      	; 0x32f4 <__umoddi3+0x3b0>
    32ec:	22 0c       	add	r2, r2
    32ee:	33 1c       	adc	r3, r3
    32f0:	44 1c       	adc	r4, r4
    32f2:	55 1c       	adc	r5, r5
    32f4:	0a 94       	dec	r0
    32f6:	d2 f7       	brpl	.-12     	; 0x32ec <__umoddi3+0x3a8>
    32f8:	8a 2d       	mov	r24, r10
    32fa:	8f 19       	sub	r24, r15
    32fc:	64 01       	movw	r12, r8
    32fe:	53 01       	movw	r10, r6
    3300:	08 2e       	mov	r0, r24
    3302:	04 c0       	rjmp	.+8      	; 0x330c <__umoddi3+0x3c8>
    3304:	d6 94       	lsr	r13
    3306:	c7 94       	ror	r12
    3308:	b7 94       	ror	r11
    330a:	a7 94       	ror	r10
    330c:	0a 94       	dec	r0
    330e:	d2 f7       	brpl	.-12     	; 0x3304 <__umoddi3+0x3c0>
    3310:	a4 01       	movw	r20, r8
    3312:	93 01       	movw	r18, r6
    3314:	04 c0       	rjmp	.+8      	; 0x331e <__umoddi3+0x3da>
    3316:	22 0f       	add	r18, r18
    3318:	33 1f       	adc	r19, r19
    331a:	44 1f       	adc	r20, r20
    331c:	55 1f       	adc	r21, r21
    331e:	fa 94       	dec	r15
    3320:	d2 f7       	brpl	.-12     	; 0x3316 <__umoddi3+0x3d2>
    3322:	6c 96       	adiw	r28, 0x1c	; 28
    3324:	6c ac       	ldd	r6, Y+60	; 0x3c
    3326:	7d ac       	ldd	r7, Y+61	; 0x3d
    3328:	8e ac       	ldd	r8, Y+62	; 0x3e
    332a:	9f ac       	ldd	r9, Y+63	; 0x3f
    332c:	6c 97       	sbiw	r28, 0x1c	; 28
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <__umoddi3+0x3f4>
    3330:	96 94       	lsr	r9
    3332:	87 94       	ror	r8
    3334:	77 94       	ror	r7
    3336:	67 94       	ror	r6
    3338:	8a 95       	dec	r24
    333a:	d2 f7       	brpl	.-12     	; 0x3330 <__umoddi3+0x3ec>
    333c:	84 01       	movw	r16, r8
    333e:	73 01       	movw	r14, r6
    3340:	e2 2a       	or	r14, r18
    3342:	f3 2a       	or	r15, r19
    3344:	04 2b       	or	r16, r20
    3346:	15 2b       	or	r17, r21
    3348:	ed a6       	std	Y+45, r14	; 0x2d
    334a:	fe a6       	std	Y+46, r15	; 0x2e
    334c:	0f a7       	std	Y+47, r16	; 0x2f
    334e:	18 ab       	std	Y+48, r17	; 0x30
    3350:	32 01       	movw	r6, r4
    3352:	88 24       	eor	r8, r8
    3354:	99 24       	eor	r9, r9
    3356:	b2 01       	movw	r22, r4
    3358:	a1 01       	movw	r20, r2
    335a:	60 70       	andi	r22, 0x00	; 0
    335c:	70 70       	andi	r23, 0x00	; 0
    335e:	25 96       	adiw	r28, 0x05	; 5
    3360:	4c af       	std	Y+60, r20	; 0x3c
    3362:	5d af       	std	Y+61, r21	; 0x3d
    3364:	6e af       	std	Y+62, r22	; 0x3e
    3366:	7f af       	std	Y+63, r23	; 0x3f
    3368:	25 97       	sbiw	r28, 0x05	; 5
    336a:	c6 01       	movw	r24, r12
    336c:	b5 01       	movw	r22, r10
    336e:	a4 01       	movw	r20, r8
    3370:	93 01       	movw	r18, r6
    3372:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3376:	7b 01       	movw	r14, r22
    3378:	8c 01       	movw	r16, r24
    337a:	c6 01       	movw	r24, r12
    337c:	b5 01       	movw	r22, r10
    337e:	a4 01       	movw	r20, r8
    3380:	93 01       	movw	r18, r6
    3382:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3386:	ca 01       	movw	r24, r20
    3388:	b9 01       	movw	r22, r18
    338a:	25 96       	adiw	r28, 0x05	; 5
    338c:	2c ad       	ldd	r18, Y+60	; 0x3c
    338e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3390:	4e ad       	ldd	r20, Y+62	; 0x3e
    3392:	5f ad       	ldd	r21, Y+63	; 0x3f
    3394:	25 97       	sbiw	r28, 0x05	; 5
    3396:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    339a:	9b 01       	movw	r18, r22
    339c:	ac 01       	movw	r20, r24
    339e:	87 01       	movw	r16, r14
    33a0:	ff 24       	eor	r15, r15
    33a2:	ee 24       	eor	r14, r14
    33a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    33a6:	be a4       	ldd	r11, Y+46	; 0x2e
    33a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    33aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    33ac:	c6 01       	movw	r24, r12
    33ae:	aa 27       	eor	r26, r26
    33b0:	bb 27       	eor	r27, r27
    33b2:	5c 01       	movw	r10, r24
    33b4:	6d 01       	movw	r12, r26
    33b6:	ae 28       	or	r10, r14
    33b8:	bf 28       	or	r11, r15
    33ba:	c0 2a       	or	r12, r16
    33bc:	d1 2a       	or	r13, r17
    33be:	a2 16       	cp	r10, r18
    33c0:	b3 06       	cpc	r11, r19
    33c2:	c4 06       	cpc	r12, r20
    33c4:	d5 06       	cpc	r13, r21
    33c6:	90 f4       	brcc	.+36     	; 0x33ec <__umoddi3+0x4a8>
    33c8:	a2 0c       	add	r10, r2
    33ca:	b3 1c       	adc	r11, r3
    33cc:	c4 1c       	adc	r12, r4
    33ce:	d5 1c       	adc	r13, r5
    33d0:	a2 14       	cp	r10, r2
    33d2:	b3 04       	cpc	r11, r3
    33d4:	c4 04       	cpc	r12, r4
    33d6:	d5 04       	cpc	r13, r5
    33d8:	48 f0       	brcs	.+18     	; 0x33ec <__umoddi3+0x4a8>
    33da:	a2 16       	cp	r10, r18
    33dc:	b3 06       	cpc	r11, r19
    33de:	c4 06       	cpc	r12, r20
    33e0:	d5 06       	cpc	r13, r21
    33e2:	20 f4       	brcc	.+8      	; 0x33ec <__umoddi3+0x4a8>
    33e4:	a2 0c       	add	r10, r2
    33e6:	b3 1c       	adc	r11, r3
    33e8:	c4 1c       	adc	r12, r4
    33ea:	d5 1c       	adc	r13, r5
    33ec:	a2 1a       	sub	r10, r18
    33ee:	b3 0a       	sbc	r11, r19
    33f0:	c4 0a       	sbc	r12, r20
    33f2:	d5 0a       	sbc	r13, r21
    33f4:	c6 01       	movw	r24, r12
    33f6:	b5 01       	movw	r22, r10
    33f8:	a4 01       	movw	r20, r8
    33fa:	93 01       	movw	r18, r6
    33fc:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3400:	7b 01       	movw	r14, r22
    3402:	8c 01       	movw	r16, r24
    3404:	c6 01       	movw	r24, r12
    3406:	b5 01       	movw	r22, r10
    3408:	a4 01       	movw	r20, r8
    340a:	93 01       	movw	r18, r6
    340c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3410:	ca 01       	movw	r24, r20
    3412:	b9 01       	movw	r22, r18
    3414:	25 96       	adiw	r28, 0x05	; 5
    3416:	2c ad       	ldd	r18, Y+60	; 0x3c
    3418:	3d ad       	ldd	r19, Y+61	; 0x3d
    341a:	4e ad       	ldd	r20, Y+62	; 0x3e
    341c:	5f ad       	ldd	r21, Y+63	; 0x3f
    341e:	25 97       	sbiw	r28, 0x05	; 5
    3420:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3424:	9b 01       	movw	r18, r22
    3426:	ac 01       	movw	r20, r24
    3428:	87 01       	movw	r16, r14
    342a:	ff 24       	eor	r15, r15
    342c:	ee 24       	eor	r14, r14
    342e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3430:	9e a5       	ldd	r25, Y+46	; 0x2e
    3432:	af a5       	ldd	r26, Y+47	; 0x2f
    3434:	b8 a9       	ldd	r27, Y+48	; 0x30
    3436:	a0 70       	andi	r26, 0x00	; 0
    3438:	b0 70       	andi	r27, 0x00	; 0
    343a:	57 01       	movw	r10, r14
    343c:	68 01       	movw	r12, r16
    343e:	a8 2a       	or	r10, r24
    3440:	b9 2a       	or	r11, r25
    3442:	ca 2a       	or	r12, r26
    3444:	db 2a       	or	r13, r27
    3446:	a2 16       	cp	r10, r18
    3448:	b3 06       	cpc	r11, r19
    344a:	c4 06       	cpc	r12, r20
    344c:	d5 06       	cpc	r13, r21
    344e:	90 f4       	brcc	.+36     	; 0x3474 <__umoddi3+0x530>
    3450:	a2 0c       	add	r10, r2
    3452:	b3 1c       	adc	r11, r3
    3454:	c4 1c       	adc	r12, r4
    3456:	d5 1c       	adc	r13, r5
    3458:	a2 14       	cp	r10, r2
    345a:	b3 04       	cpc	r11, r3
    345c:	c4 04       	cpc	r12, r4
    345e:	d5 04       	cpc	r13, r5
    3460:	48 f0       	brcs	.+18     	; 0x3474 <__umoddi3+0x530>
    3462:	a2 16       	cp	r10, r18
    3464:	b3 06       	cpc	r11, r19
    3466:	c4 06       	cpc	r12, r20
    3468:	d5 06       	cpc	r13, r21
    346a:	20 f4       	brcc	.+8      	; 0x3474 <__umoddi3+0x530>
    346c:	a2 0c       	add	r10, r2
    346e:	b3 1c       	adc	r11, r3
    3470:	c4 1c       	adc	r12, r4
    3472:	d5 1c       	adc	r13, r5
    3474:	6c 96       	adiw	r28, 0x1c	; 28
    3476:	ec ac       	ldd	r14, Y+60	; 0x3c
    3478:	fd ac       	ldd	r15, Y+61	; 0x3d
    347a:	0e ad       	ldd	r16, Y+62	; 0x3e
    347c:	1f ad       	ldd	r17, Y+63	; 0x3f
    347e:	6c 97       	sbiw	r28, 0x1c	; 28
    3480:	68 96       	adiw	r28, 0x18	; 24
    3482:	0f ac       	ldd	r0, Y+63	; 0x3f
    3484:	68 97       	sbiw	r28, 0x18	; 24
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <__umoddi3+0x54c>
    3488:	ee 0c       	add	r14, r14
    348a:	ff 1c       	adc	r15, r15
    348c:	00 1f       	adc	r16, r16
    348e:	11 1f       	adc	r17, r17
    3490:	0a 94       	dec	r0
    3492:	d2 f7       	brpl	.-12     	; 0x3488 <__umoddi3+0x544>
    3494:	e9 aa       	std	Y+49, r14	; 0x31
    3496:	fa aa       	std	Y+50, r15	; 0x32
    3498:	0b ab       	std	Y+51, r16	; 0x33
    349a:	1c ab       	std	Y+52, r17	; 0x34
    349c:	a2 1a       	sub	r10, r18
    349e:	b3 0a       	sbc	r11, r19
    34a0:	c4 0a       	sbc	r12, r20
    34a2:	d5 0a       	sbc	r13, r21
    34a4:	32 01       	movw	r6, r4
    34a6:	88 24       	eor	r8, r8
    34a8:	99 24       	eor	r9, r9
    34aa:	b2 01       	movw	r22, r4
    34ac:	a1 01       	movw	r20, r2
    34ae:	60 70       	andi	r22, 0x00	; 0
    34b0:	70 70       	andi	r23, 0x00	; 0
    34b2:	29 96       	adiw	r28, 0x09	; 9
    34b4:	4c af       	std	Y+60, r20	; 0x3c
    34b6:	5d af       	std	Y+61, r21	; 0x3d
    34b8:	6e af       	std	Y+62, r22	; 0x3e
    34ba:	7f af       	std	Y+63, r23	; 0x3f
    34bc:	29 97       	sbiw	r28, 0x09	; 9
    34be:	c6 01       	movw	r24, r12
    34c0:	b5 01       	movw	r22, r10
    34c2:	a4 01       	movw	r20, r8
    34c4:	93 01       	movw	r18, r6
    34c6:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    34ca:	7b 01       	movw	r14, r22
    34cc:	8c 01       	movw	r16, r24
    34ce:	c6 01       	movw	r24, r12
    34d0:	b5 01       	movw	r22, r10
    34d2:	a4 01       	movw	r20, r8
    34d4:	93 01       	movw	r18, r6
    34d6:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    34da:	ca 01       	movw	r24, r20
    34dc:	b9 01       	movw	r22, r18
    34de:	29 96       	adiw	r28, 0x09	; 9
    34e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    34e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    34e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    34e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    34e8:	29 97       	sbiw	r28, 0x09	; 9
    34ea:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	87 01       	movw	r16, r14
    34f4:	ff 24       	eor	r15, r15
    34f6:	ee 24       	eor	r14, r14
    34f8:	a9 a8       	ldd	r10, Y+49	; 0x31
    34fa:	ba a8       	ldd	r11, Y+50	; 0x32
    34fc:	cb a8       	ldd	r12, Y+51	; 0x33
    34fe:	dc a8       	ldd	r13, Y+52	; 0x34
    3500:	c6 01       	movw	r24, r12
    3502:	aa 27       	eor	r26, r26
    3504:	bb 27       	eor	r27, r27
    3506:	57 01       	movw	r10, r14
    3508:	68 01       	movw	r12, r16
    350a:	a8 2a       	or	r10, r24
    350c:	b9 2a       	or	r11, r25
    350e:	ca 2a       	or	r12, r26
    3510:	db 2a       	or	r13, r27
    3512:	a2 16       	cp	r10, r18
    3514:	b3 06       	cpc	r11, r19
    3516:	c4 06       	cpc	r12, r20
    3518:	d5 06       	cpc	r13, r21
    351a:	90 f4       	brcc	.+36     	; 0x3540 <__umoddi3+0x5fc>
    351c:	a2 0c       	add	r10, r2
    351e:	b3 1c       	adc	r11, r3
    3520:	c4 1c       	adc	r12, r4
    3522:	d5 1c       	adc	r13, r5
    3524:	a2 14       	cp	r10, r2
    3526:	b3 04       	cpc	r11, r3
    3528:	c4 04       	cpc	r12, r4
    352a:	d5 04       	cpc	r13, r5
    352c:	48 f0       	brcs	.+18     	; 0x3540 <__umoddi3+0x5fc>
    352e:	a2 16       	cp	r10, r18
    3530:	b3 06       	cpc	r11, r19
    3532:	c4 06       	cpc	r12, r20
    3534:	d5 06       	cpc	r13, r21
    3536:	20 f4       	brcc	.+8      	; 0x3540 <__umoddi3+0x5fc>
    3538:	a2 0c       	add	r10, r2
    353a:	b3 1c       	adc	r11, r3
    353c:	c4 1c       	adc	r12, r4
    353e:	d5 1c       	adc	r13, r5
    3540:	a2 1a       	sub	r10, r18
    3542:	b3 0a       	sbc	r11, r19
    3544:	c4 0a       	sbc	r12, r20
    3546:	d5 0a       	sbc	r13, r21
    3548:	c6 01       	movw	r24, r12
    354a:	b5 01       	movw	r22, r10
    354c:	a4 01       	movw	r20, r8
    354e:	93 01       	movw	r18, r6
    3550:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3554:	7b 01       	movw	r14, r22
    3556:	8c 01       	movw	r16, r24
    3558:	c6 01       	movw	r24, r12
    355a:	b5 01       	movw	r22, r10
    355c:	a4 01       	movw	r20, r8
    355e:	93 01       	movw	r18, r6
    3560:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3564:	ca 01       	movw	r24, r20
    3566:	b9 01       	movw	r22, r18
    3568:	29 96       	adiw	r28, 0x09	; 9
    356a:	2c ad       	ldd	r18, Y+60	; 0x3c
    356c:	3d ad       	ldd	r19, Y+61	; 0x3d
    356e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3570:	5f ad       	ldd	r21, Y+63	; 0x3f
    3572:	29 97       	sbiw	r28, 0x09	; 9
    3574:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3578:	9b 01       	movw	r18, r22
    357a:	ac 01       	movw	r20, r24
    357c:	87 01       	movw	r16, r14
    357e:	ff 24       	eor	r15, r15
    3580:	ee 24       	eor	r14, r14
    3582:	89 a9       	ldd	r24, Y+49	; 0x31
    3584:	9a a9       	ldd	r25, Y+50	; 0x32
    3586:	ab a9       	ldd	r26, Y+51	; 0x33
    3588:	bc a9       	ldd	r27, Y+52	; 0x34
    358a:	a0 70       	andi	r26, 0x00	; 0
    358c:	b0 70       	andi	r27, 0x00	; 0
    358e:	e8 2a       	or	r14, r24
    3590:	f9 2a       	or	r15, r25
    3592:	0a 2b       	or	r16, r26
    3594:	1b 2b       	or	r17, r27
    3596:	e2 16       	cp	r14, r18
    3598:	f3 06       	cpc	r15, r19
    359a:	04 07       	cpc	r16, r20
    359c:	15 07       	cpc	r17, r21
    359e:	90 f4       	brcc	.+36     	; 0x35c4 <__umoddi3+0x680>
    35a0:	e2 0c       	add	r14, r2
    35a2:	f3 1c       	adc	r15, r3
    35a4:	04 1d       	adc	r16, r4
    35a6:	15 1d       	adc	r17, r5
    35a8:	e2 14       	cp	r14, r2
    35aa:	f3 04       	cpc	r15, r3
    35ac:	04 05       	cpc	r16, r4
    35ae:	15 05       	cpc	r17, r5
    35b0:	48 f0       	brcs	.+18     	; 0x35c4 <__umoddi3+0x680>
    35b2:	e2 16       	cp	r14, r18
    35b4:	f3 06       	cpc	r15, r19
    35b6:	04 07       	cpc	r16, r20
    35b8:	15 07       	cpc	r17, r21
    35ba:	20 f4       	brcc	.+8      	; 0x35c4 <__umoddi3+0x680>
    35bc:	e2 0c       	add	r14, r2
    35be:	f3 1c       	adc	r15, r3
    35c0:	04 1d       	adc	r16, r4
    35c2:	15 1d       	adc	r17, r5
    35c4:	e2 1a       	sub	r14, r18
    35c6:	f3 0a       	sbc	r15, r19
    35c8:	04 0b       	sbc	r16, r20
    35ca:	15 0b       	sbc	r17, r21
    35cc:	d8 01       	movw	r26, r16
    35ce:	c7 01       	movw	r24, r14
    35d0:	09 ac       	ldd	r0, Y+57	; 0x39
    35d2:	04 c0       	rjmp	.+8      	; 0x35dc <__umoddi3+0x698>
    35d4:	b6 95       	lsr	r27
    35d6:	a7 95       	ror	r26
    35d8:	97 95       	ror	r25
    35da:	87 95       	ror	r24
    35dc:	0a 94       	dec	r0
    35de:	d2 f7       	brpl	.-12     	; 0x35d4 <__umoddi3+0x690>
    35e0:	89 8b       	std	Y+17, r24	; 0x11
    35e2:	9a 8b       	std	Y+18, r25	; 0x12
    35e4:	ab 8b       	std	Y+19, r26	; 0x13
    35e6:	bc 8b       	std	Y+20, r27	; 0x14
    35e8:	1d 8a       	std	Y+21, r1	; 0x15
    35ea:	1e 8a       	std	Y+22, r1	; 0x16
    35ec:	1f 8a       	std	Y+23, r1	; 0x17
    35ee:	18 8e       	std	Y+24, r1	; 0x18
    35f0:	28 2f       	mov	r18, r24
    35f2:	3a 89       	ldd	r19, Y+18	; 0x12
    35f4:	4b 89       	ldd	r20, Y+19	; 0x13
    35f6:	5c 89       	ldd	r21, Y+20	; 0x14
    35f8:	6d 89       	ldd	r22, Y+21	; 0x15
    35fa:	0c c3       	rjmp	.+1560   	; 0x3c14 <__umoddi3+0xcd0>
    35fc:	6a 14       	cp	r6, r10
    35fe:	7b 04       	cpc	r7, r11
    3600:	8c 04       	cpc	r8, r12
    3602:	9d 04       	cpc	r9, r13
    3604:	08 f4       	brcc	.+2      	; 0x3608 <__umoddi3+0x6c4>
    3606:	09 c3       	rjmp	.+1554   	; 0x3c1a <__umoddi3+0xcd6>
    3608:	00 e0       	ldi	r16, 0x00	; 0
    360a:	a0 16       	cp	r10, r16
    360c:	00 e0       	ldi	r16, 0x00	; 0
    360e:	b0 06       	cpc	r11, r16
    3610:	01 e0       	ldi	r16, 0x01	; 1
    3612:	c0 06       	cpc	r12, r16
    3614:	00 e0       	ldi	r16, 0x00	; 0
    3616:	d0 06       	cpc	r13, r16
    3618:	88 f4       	brcc	.+34     	; 0x363c <__umoddi3+0x6f8>
    361a:	1f ef       	ldi	r17, 0xFF	; 255
    361c:	a1 16       	cp	r10, r17
    361e:	b1 04       	cpc	r11, r1
    3620:	c1 04       	cpc	r12, r1
    3622:	d1 04       	cpc	r13, r1
    3624:	39 f0       	breq	.+14     	; 0x3634 <__umoddi3+0x6f0>
    3626:	30 f0       	brcs	.+12     	; 0x3634 <__umoddi3+0x6f0>
    3628:	28 e0       	ldi	r18, 0x08	; 8
    362a:	e2 2e       	mov	r14, r18
    362c:	f1 2c       	mov	r15, r1
    362e:	01 2d       	mov	r16, r1
    3630:	11 2d       	mov	r17, r1
    3632:	18 c0       	rjmp	.+48     	; 0x3664 <__umoddi3+0x720>
    3634:	ee 24       	eor	r14, r14
    3636:	ff 24       	eor	r15, r15
    3638:	87 01       	movw	r16, r14
    363a:	14 c0       	rjmp	.+40     	; 0x3664 <__umoddi3+0x720>
    363c:	40 e0       	ldi	r20, 0x00	; 0
    363e:	a4 16       	cp	r10, r20
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	b4 06       	cpc	r11, r20
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	c4 06       	cpc	r12, r20
    3648:	41 e0       	ldi	r20, 0x01	; 1
    364a:	d4 06       	cpc	r13, r20
    364c:	30 f0       	brcs	.+12     	; 0x365a <__umoddi3+0x716>
    364e:	98 e1       	ldi	r25, 0x18	; 24
    3650:	e9 2e       	mov	r14, r25
    3652:	f1 2c       	mov	r15, r1
    3654:	01 2d       	mov	r16, r1
    3656:	11 2d       	mov	r17, r1
    3658:	05 c0       	rjmp	.+10     	; 0x3664 <__umoddi3+0x720>
    365a:	80 e1       	ldi	r24, 0x10	; 16
    365c:	e8 2e       	mov	r14, r24
    365e:	f1 2c       	mov	r15, r1
    3660:	01 2d       	mov	r16, r1
    3662:	11 2d       	mov	r17, r1
    3664:	d6 01       	movw	r26, r12
    3666:	c5 01       	movw	r24, r10
    3668:	0e 2c       	mov	r0, r14
    366a:	04 c0       	rjmp	.+8      	; 0x3674 <__umoddi3+0x730>
    366c:	b6 95       	lsr	r27
    366e:	a7 95       	ror	r26
    3670:	97 95       	ror	r25
    3672:	87 95       	ror	r24
    3674:	0a 94       	dec	r0
    3676:	d2 f7       	brpl	.-12     	; 0x366c <__umoddi3+0x728>
    3678:	8f 52       	subi	r24, 0x2F	; 47
    367a:	9f 4f       	sbci	r25, 0xFF	; 255
    367c:	dc 01       	movw	r26, r24
    367e:	2c 91       	ld	r18, X
    3680:	80 e2       	ldi	r24, 0x20	; 32
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e0       	ldi	r26, 0x00	; 0
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	8e 19       	sub	r24, r14
    368a:	9f 09       	sbc	r25, r15
    368c:	a0 0b       	sbc	r26, r16
    368e:	b1 0b       	sbc	r27, r17
    3690:	82 1b       	sub	r24, r18
    3692:	91 09       	sbc	r25, r1
    3694:	a1 09       	sbc	r26, r1
    3696:	b1 09       	sbc	r27, r1
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	a1 05       	cpc	r26, r1
    369c:	b1 05       	cpc	r27, r1
    369e:	09 f0       	breq	.+2      	; 0x36a2 <__umoddi3+0x75e>
    36a0:	4f c0       	rjmp	.+158    	; 0x3740 <__umoddi3+0x7fc>
    36a2:	a6 14       	cp	r10, r6
    36a4:	b7 04       	cpc	r11, r7
    36a6:	c8 04       	cpc	r12, r8
    36a8:	d9 04       	cpc	r13, r9
    36aa:	58 f0       	brcs	.+22     	; 0x36c2 <__umoddi3+0x77e>
    36ac:	6c 96       	adiw	r28, 0x1c	; 28
    36ae:	ec ac       	ldd	r14, Y+60	; 0x3c
    36b0:	fd ac       	ldd	r15, Y+61	; 0x3d
    36b2:	0e ad       	ldd	r16, Y+62	; 0x3e
    36b4:	1f ad       	ldd	r17, Y+63	; 0x3f
    36b6:	6c 97       	sbiw	r28, 0x1c	; 28
    36b8:	e2 14       	cp	r14, r2
    36ba:	f3 04       	cpc	r15, r3
    36bc:	04 05       	cpc	r16, r4
    36be:	15 05       	cpc	r17, r5
    36c0:	68 f1       	brcs	.+90     	; 0x371c <__umoddi3+0x7d8>
    36c2:	6c 96       	adiw	r28, 0x1c	; 28
    36c4:	ec ac       	ldd	r14, Y+60	; 0x3c
    36c6:	fd ac       	ldd	r15, Y+61	; 0x3d
    36c8:	0e ad       	ldd	r16, Y+62	; 0x3e
    36ca:	1f ad       	ldd	r17, Y+63	; 0x3f
    36cc:	6c 97       	sbiw	r28, 0x1c	; 28
    36ce:	e2 18       	sub	r14, r2
    36d0:	f3 08       	sbc	r15, r3
    36d2:	04 09       	sbc	r16, r4
    36d4:	15 09       	sbc	r17, r5
    36d6:	a4 01       	movw	r20, r8
    36d8:	93 01       	movw	r18, r6
    36da:	2a 19       	sub	r18, r10
    36dc:	3b 09       	sbc	r19, r11
    36de:	4c 09       	sbc	r20, r12
    36e0:	5d 09       	sbc	r21, r13
    36e2:	aa 24       	eor	r10, r10
    36e4:	bb 24       	eor	r11, r11
    36e6:	65 01       	movw	r12, r10
    36e8:	6c 96       	adiw	r28, 0x1c	; 28
    36ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    36ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    36ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    36f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    36f2:	6c 97       	sbiw	r28, 0x1c	; 28
    36f4:	6e 15       	cp	r22, r14
    36f6:	7f 05       	cpc	r23, r15
    36f8:	80 07       	cpc	r24, r16
    36fa:	91 07       	cpc	r25, r17
    36fc:	28 f4       	brcc	.+10     	; 0x3708 <__umoddi3+0x7c4>
    36fe:	b1 e0       	ldi	r27, 0x01	; 1
    3700:	ab 2e       	mov	r10, r27
    3702:	b1 2c       	mov	r11, r1
    3704:	c1 2c       	mov	r12, r1
    3706:	d1 2c       	mov	r13, r1
    3708:	da 01       	movw	r26, r20
    370a:	c9 01       	movw	r24, r18
    370c:	8a 19       	sub	r24, r10
    370e:	9b 09       	sbc	r25, r11
    3710:	ac 09       	sbc	r26, r12
    3712:	bd 09       	sbc	r27, r13
    3714:	8d ab       	std	Y+53, r24	; 0x35
    3716:	9e ab       	std	Y+54, r25	; 0x36
    3718:	af ab       	std	Y+55, r26	; 0x37
    371a:	b8 af       	std	Y+56, r27	; 0x38
    371c:	e9 8a       	std	Y+17, r14	; 0x11
    371e:	fa 8a       	std	Y+18, r15	; 0x12
    3720:	0b 8b       	std	Y+19, r16	; 0x13
    3722:	1c 8b       	std	Y+20, r17	; 0x14
    3724:	6d a8       	ldd	r6, Y+53	; 0x35
    3726:	7e a8       	ldd	r7, Y+54	; 0x36
    3728:	8f a8       	ldd	r8, Y+55	; 0x37
    372a:	98 ac       	ldd	r9, Y+56	; 0x38
    372c:	6d 8a       	std	Y+21, r6	; 0x15
    372e:	7e 8a       	std	Y+22, r7	; 0x16
    3730:	8f 8a       	std	Y+23, r8	; 0x17
    3732:	98 8e       	std	Y+24, r9	; 0x18
    3734:	2e 2d       	mov	r18, r14
    3736:	3a 89       	ldd	r19, Y+18	; 0x12
    3738:	4b 89       	ldd	r20, Y+19	; 0x13
    373a:	5c 89       	ldd	r21, Y+20	; 0x14
    373c:	6d a9       	ldd	r22, Y+53	; 0x35
    373e:	6a c2       	rjmp	.+1236   	; 0x3c14 <__umoddi3+0xcd0>
    3740:	67 96       	adiw	r28, 0x17	; 23
    3742:	8f af       	std	Y+63, r24	; 0x3f
    3744:	67 97       	sbiw	r28, 0x17	; 23
    3746:	a6 01       	movw	r20, r12
    3748:	95 01       	movw	r18, r10
    374a:	08 2e       	mov	r0, r24
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <__umoddi3+0x812>
    374e:	22 0f       	add	r18, r18
    3750:	33 1f       	adc	r19, r19
    3752:	44 1f       	adc	r20, r20
    3754:	55 1f       	adc	r21, r21
    3756:	0a 94       	dec	r0
    3758:	d2 f7       	brpl	.-12     	; 0x374e <__umoddi3+0x80a>
    375a:	a0 e2       	ldi	r26, 0x20	; 32
    375c:	aa 2e       	mov	r10, r26
    375e:	a8 1a       	sub	r10, r24
    3760:	66 96       	adiw	r28, 0x16	; 22
    3762:	af ae       	std	Y+63, r10	; 0x3f
    3764:	66 97       	sbiw	r28, 0x16	; 22
    3766:	d2 01       	movw	r26, r4
    3768:	c1 01       	movw	r24, r2
    376a:	04 c0       	rjmp	.+8      	; 0x3774 <__umoddi3+0x830>
    376c:	b6 95       	lsr	r27
    376e:	a7 95       	ror	r26
    3770:	97 95       	ror	r25
    3772:	87 95       	ror	r24
    3774:	aa 94       	dec	r10
    3776:	d2 f7       	brpl	.-12     	; 0x376c <__umoddi3+0x828>
    3778:	6c 01       	movw	r12, r24
    377a:	7d 01       	movw	r14, r26
    377c:	c2 2a       	or	r12, r18
    377e:	d3 2a       	or	r13, r19
    3780:	e4 2a       	or	r14, r20
    3782:	f5 2a       	or	r15, r21
    3784:	c9 a6       	std	Y+41, r12	; 0x29
    3786:	da a6       	std	Y+42, r13	; 0x2a
    3788:	eb a6       	std	Y+43, r14	; 0x2b
    378a:	fc a6       	std	Y+44, r15	; 0x2c
    378c:	82 01       	movw	r16, r4
    378e:	71 01       	movw	r14, r2
    3790:	67 96       	adiw	r28, 0x17	; 23
    3792:	0f ac       	ldd	r0, Y+63	; 0x3f
    3794:	67 97       	sbiw	r28, 0x17	; 23
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <__umoddi3+0x85c>
    3798:	ee 0c       	add	r14, r14
    379a:	ff 1c       	adc	r15, r15
    379c:	00 1f       	adc	r16, r16
    379e:	11 1f       	adc	r17, r17
    37a0:	0a 94       	dec	r0
    37a2:	d2 f7       	brpl	.-12     	; 0x3798 <__umoddi3+0x854>
    37a4:	ed a2       	std	Y+37, r14	; 0x25
    37a6:	fe a2       	std	Y+38, r15	; 0x26
    37a8:	0f a3       	std	Y+39, r16	; 0x27
    37aa:	18 a7       	std	Y+40, r17	; 0x28
    37ac:	64 01       	movw	r12, r8
    37ae:	53 01       	movw	r10, r6
    37b0:	66 96       	adiw	r28, 0x16	; 22
    37b2:	0f ac       	ldd	r0, Y+63	; 0x3f
    37b4:	66 97       	sbiw	r28, 0x16	; 22
    37b6:	04 c0       	rjmp	.+8      	; 0x37c0 <__umoddi3+0x87c>
    37b8:	d6 94       	lsr	r13
    37ba:	c7 94       	ror	r12
    37bc:	b7 94       	ror	r11
    37be:	a7 94       	ror	r10
    37c0:	0a 94       	dec	r0
    37c2:	d2 f7       	brpl	.-12     	; 0x37b8 <__umoddi3+0x874>
    37c4:	a4 01       	movw	r20, r8
    37c6:	93 01       	movw	r18, r6
    37c8:	67 96       	adiw	r28, 0x17	; 23
    37ca:	0f ac       	ldd	r0, Y+63	; 0x3f
    37cc:	67 97       	sbiw	r28, 0x17	; 23
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <__umoddi3+0x894>
    37d0:	22 0f       	add	r18, r18
    37d2:	33 1f       	adc	r19, r19
    37d4:	44 1f       	adc	r20, r20
    37d6:	55 1f       	adc	r21, r21
    37d8:	0a 94       	dec	r0
    37da:	d2 f7       	brpl	.-12     	; 0x37d0 <__umoddi3+0x88c>
    37dc:	6c 96       	adiw	r28, 0x1c	; 28
    37de:	8c ad       	ldd	r24, Y+60	; 0x3c
    37e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    37e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    37e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    37e6:	6c 97       	sbiw	r28, 0x1c	; 28
    37e8:	66 96       	adiw	r28, 0x16	; 22
    37ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    37ec:	66 97       	sbiw	r28, 0x16	; 22
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <__umoddi3+0x8b4>
    37f0:	b6 95       	lsr	r27
    37f2:	a7 95       	ror	r26
    37f4:	97 95       	ror	r25
    37f6:	87 95       	ror	r24
    37f8:	0a 94       	dec	r0
    37fa:	d2 f7       	brpl	.-12     	; 0x37f0 <__umoddi3+0x8ac>
    37fc:	3c 01       	movw	r6, r24
    37fe:	4d 01       	movw	r8, r26
    3800:	62 2a       	or	r6, r18
    3802:	73 2a       	or	r7, r19
    3804:	84 2a       	or	r8, r20
    3806:	95 2a       	or	r9, r21
    3808:	69 a2       	std	Y+33, r6	; 0x21
    380a:	7a a2       	std	Y+34, r7	; 0x22
    380c:	8b a2       	std	Y+35, r8	; 0x23
    380e:	9c a2       	std	Y+36, r9	; 0x24
    3810:	6c 96       	adiw	r28, 0x1c	; 28
    3812:	ec ac       	ldd	r14, Y+60	; 0x3c
    3814:	fd ac       	ldd	r15, Y+61	; 0x3d
    3816:	0e ad       	ldd	r16, Y+62	; 0x3e
    3818:	1f ad       	ldd	r17, Y+63	; 0x3f
    381a:	6c 97       	sbiw	r28, 0x1c	; 28
    381c:	67 96       	adiw	r28, 0x17	; 23
    381e:	0f ac       	ldd	r0, Y+63	; 0x3f
    3820:	67 97       	sbiw	r28, 0x17	; 23
    3822:	04 c0       	rjmp	.+8      	; 0x382c <__umoddi3+0x8e8>
    3824:	ee 0c       	add	r14, r14
    3826:	ff 1c       	adc	r15, r15
    3828:	00 1f       	adc	r16, r16
    382a:	11 1f       	adc	r17, r17
    382c:	0a 94       	dec	r0
    382e:	d2 f7       	brpl	.-12     	; 0x3824 <__umoddi3+0x8e0>
    3830:	ed 8e       	std	Y+29, r14	; 0x1d
    3832:	fe 8e       	std	Y+30, r15	; 0x1e
    3834:	0f 8f       	std	Y+31, r16	; 0x1f
    3836:	18 a3       	std	Y+32, r17	; 0x20
    3838:	49 a5       	ldd	r20, Y+41	; 0x29
    383a:	5a a5       	ldd	r21, Y+42	; 0x2a
    383c:	6b a5       	ldd	r22, Y+43	; 0x2b
    383e:	7c a5       	ldd	r23, Y+44	; 0x2c
    3840:	3b 01       	movw	r6, r22
    3842:	88 24       	eor	r8, r8
    3844:	99 24       	eor	r9, r9
    3846:	60 70       	andi	r22, 0x00	; 0
    3848:	70 70       	andi	r23, 0x00	; 0
    384a:	2d 96       	adiw	r28, 0x0d	; 13
    384c:	4c af       	std	Y+60, r20	; 0x3c
    384e:	5d af       	std	Y+61, r21	; 0x3d
    3850:	6e af       	std	Y+62, r22	; 0x3e
    3852:	7f af       	std	Y+63, r23	; 0x3f
    3854:	2d 97       	sbiw	r28, 0x0d	; 13
    3856:	c6 01       	movw	r24, r12
    3858:	b5 01       	movw	r22, r10
    385a:	a4 01       	movw	r20, r8
    385c:	93 01       	movw	r18, r6
    385e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3862:	7b 01       	movw	r14, r22
    3864:	8c 01       	movw	r16, r24
    3866:	c6 01       	movw	r24, r12
    3868:	b5 01       	movw	r22, r10
    386a:	a4 01       	movw	r20, r8
    386c:	93 01       	movw	r18, r6
    386e:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3872:	c9 01       	movw	r24, r18
    3874:	da 01       	movw	r26, r20
    3876:	1c 01       	movw	r2, r24
    3878:	2d 01       	movw	r4, r26
    387a:	c2 01       	movw	r24, r4
    387c:	b1 01       	movw	r22, r2
    387e:	2d 96       	adiw	r28, 0x0d	; 13
    3880:	2c ad       	ldd	r18, Y+60	; 0x3c
    3882:	3d ad       	ldd	r19, Y+61	; 0x3d
    3884:	4e ad       	ldd	r20, Y+62	; 0x3e
    3886:	5f ad       	ldd	r21, Y+63	; 0x3f
    3888:	2d 97       	sbiw	r28, 0x0d	; 13
    388a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    388e:	9b 01       	movw	r18, r22
    3890:	ac 01       	movw	r20, r24
    3892:	87 01       	movw	r16, r14
    3894:	ff 24       	eor	r15, r15
    3896:	ee 24       	eor	r14, r14
    3898:	a9 a0       	ldd	r10, Y+33	; 0x21
    389a:	ba a0       	ldd	r11, Y+34	; 0x22
    389c:	cb a0       	ldd	r12, Y+35	; 0x23
    389e:	dc a0       	ldd	r13, Y+36	; 0x24
    38a0:	c6 01       	movw	r24, r12
    38a2:	aa 27       	eor	r26, r26
    38a4:	bb 27       	eor	r27, r27
    38a6:	57 01       	movw	r10, r14
    38a8:	68 01       	movw	r12, r16
    38aa:	a8 2a       	or	r10, r24
    38ac:	b9 2a       	or	r11, r25
    38ae:	ca 2a       	or	r12, r26
    38b0:	db 2a       	or	r13, r27
    38b2:	a2 16       	cp	r10, r18
    38b4:	b3 06       	cpc	r11, r19
    38b6:	c4 06       	cpc	r12, r20
    38b8:	d5 06       	cpc	r13, r21
    38ba:	00 f5       	brcc	.+64     	; 0x38fc <__umoddi3+0x9b8>
    38bc:	08 94       	sec
    38be:	21 08       	sbc	r2, r1
    38c0:	31 08       	sbc	r3, r1
    38c2:	41 08       	sbc	r4, r1
    38c4:	51 08       	sbc	r5, r1
    38c6:	e9 a4       	ldd	r14, Y+41	; 0x29
    38c8:	fa a4       	ldd	r15, Y+42	; 0x2a
    38ca:	0b a5       	ldd	r16, Y+43	; 0x2b
    38cc:	1c a5       	ldd	r17, Y+44	; 0x2c
    38ce:	ae 0c       	add	r10, r14
    38d0:	bf 1c       	adc	r11, r15
    38d2:	c0 1e       	adc	r12, r16
    38d4:	d1 1e       	adc	r13, r17
    38d6:	ae 14       	cp	r10, r14
    38d8:	bf 04       	cpc	r11, r15
    38da:	c0 06       	cpc	r12, r16
    38dc:	d1 06       	cpc	r13, r17
    38de:	70 f0       	brcs	.+28     	; 0x38fc <__umoddi3+0x9b8>
    38e0:	a2 16       	cp	r10, r18
    38e2:	b3 06       	cpc	r11, r19
    38e4:	c4 06       	cpc	r12, r20
    38e6:	d5 06       	cpc	r13, r21
    38e8:	48 f4       	brcc	.+18     	; 0x38fc <__umoddi3+0x9b8>
    38ea:	08 94       	sec
    38ec:	21 08       	sbc	r2, r1
    38ee:	31 08       	sbc	r3, r1
    38f0:	41 08       	sbc	r4, r1
    38f2:	51 08       	sbc	r5, r1
    38f4:	ae 0c       	add	r10, r14
    38f6:	bf 1c       	adc	r11, r15
    38f8:	c0 1e       	adc	r12, r16
    38fa:	d1 1e       	adc	r13, r17
    38fc:	a2 1a       	sub	r10, r18
    38fe:	b3 0a       	sbc	r11, r19
    3900:	c4 0a       	sbc	r12, r20
    3902:	d5 0a       	sbc	r13, r21
    3904:	c6 01       	movw	r24, r12
    3906:	b5 01       	movw	r22, r10
    3908:	a4 01       	movw	r20, r8
    390a:	93 01       	movw	r18, r6
    390c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3910:	7b 01       	movw	r14, r22
    3912:	8c 01       	movw	r16, r24
    3914:	c6 01       	movw	r24, r12
    3916:	b5 01       	movw	r22, r10
    3918:	a4 01       	movw	r20, r8
    391a:	93 01       	movw	r18, r6
    391c:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    3920:	c9 01       	movw	r24, r18
    3922:	da 01       	movw	r26, r20
    3924:	3c 01       	movw	r6, r24
    3926:	4d 01       	movw	r8, r26
    3928:	c4 01       	movw	r24, r8
    392a:	b3 01       	movw	r22, r6
    392c:	2d 96       	adiw	r28, 0x0d	; 13
    392e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3930:	3d ad       	ldd	r19, Y+61	; 0x3d
    3932:	4e ad       	ldd	r20, Y+62	; 0x3e
    3934:	5f ad       	ldd	r21, Y+63	; 0x3f
    3936:	2d 97       	sbiw	r28, 0x0d	; 13
    3938:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    393c:	9b 01       	movw	r18, r22
    393e:	ac 01       	movw	r20, r24
    3940:	87 01       	movw	r16, r14
    3942:	ff 24       	eor	r15, r15
    3944:	ee 24       	eor	r14, r14
    3946:	89 a1       	ldd	r24, Y+33	; 0x21
    3948:	9a a1       	ldd	r25, Y+34	; 0x22
    394a:	ab a1       	ldd	r26, Y+35	; 0x23
    394c:	bc a1       	ldd	r27, Y+36	; 0x24
    394e:	a0 70       	andi	r26, 0x00	; 0
    3950:	b0 70       	andi	r27, 0x00	; 0
    3952:	57 01       	movw	r10, r14
    3954:	68 01       	movw	r12, r16
    3956:	a8 2a       	or	r10, r24
    3958:	b9 2a       	or	r11, r25
    395a:	ca 2a       	or	r12, r26
    395c:	db 2a       	or	r13, r27
    395e:	a2 16       	cp	r10, r18
    3960:	b3 06       	cpc	r11, r19
    3962:	c4 06       	cpc	r12, r20
    3964:	d5 06       	cpc	r13, r21
    3966:	00 f5       	brcc	.+64     	; 0x39a8 <__umoddi3+0xa64>
    3968:	08 94       	sec
    396a:	61 08       	sbc	r6, r1
    396c:	71 08       	sbc	r7, r1
    396e:	81 08       	sbc	r8, r1
    3970:	91 08       	sbc	r9, r1
    3972:	69 a5       	ldd	r22, Y+41	; 0x29
    3974:	7a a5       	ldd	r23, Y+42	; 0x2a
    3976:	8b a5       	ldd	r24, Y+43	; 0x2b
    3978:	9c a5       	ldd	r25, Y+44	; 0x2c
    397a:	a6 0e       	add	r10, r22
    397c:	b7 1e       	adc	r11, r23
    397e:	c8 1e       	adc	r12, r24
    3980:	d9 1e       	adc	r13, r25
    3982:	a6 16       	cp	r10, r22
    3984:	b7 06       	cpc	r11, r23
    3986:	c8 06       	cpc	r12, r24
    3988:	d9 06       	cpc	r13, r25
    398a:	70 f0       	brcs	.+28     	; 0x39a8 <__umoddi3+0xa64>
    398c:	a2 16       	cp	r10, r18
    398e:	b3 06       	cpc	r11, r19
    3990:	c4 06       	cpc	r12, r20
    3992:	d5 06       	cpc	r13, r21
    3994:	48 f4       	brcc	.+18     	; 0x39a8 <__umoddi3+0xa64>
    3996:	08 94       	sec
    3998:	61 08       	sbc	r6, r1
    399a:	71 08       	sbc	r7, r1
    399c:	81 08       	sbc	r8, r1
    399e:	91 08       	sbc	r9, r1
    39a0:	a6 0e       	add	r10, r22
    39a2:	b7 1e       	adc	r11, r23
    39a4:	c8 1e       	adc	r12, r24
    39a6:	d9 1e       	adc	r13, r25
    39a8:	d6 01       	movw	r26, r12
    39aa:	c5 01       	movw	r24, r10
    39ac:	82 1b       	sub	r24, r18
    39ae:	93 0b       	sbc	r25, r19
    39b0:	a4 0b       	sbc	r26, r20
    39b2:	b5 0b       	sbc	r27, r21
    39b4:	89 8f       	std	Y+25, r24	; 0x19
    39b6:	9a 8f       	std	Y+26, r25	; 0x1a
    39b8:	ab 8f       	std	Y+27, r26	; 0x1b
    39ba:	bc 8f       	std	Y+28, r27	; 0x1c
    39bc:	d1 01       	movw	r26, r2
    39be:	99 27       	eor	r25, r25
    39c0:	88 27       	eor	r24, r24
    39c2:	84 01       	movw	r16, r8
    39c4:	73 01       	movw	r14, r6
    39c6:	e8 2a       	or	r14, r24
    39c8:	f9 2a       	or	r15, r25
    39ca:	0a 2b       	or	r16, r26
    39cc:	1b 2b       	or	r17, r27
    39ce:	4f ef       	ldi	r20, 0xFF	; 255
    39d0:	a4 2e       	mov	r10, r20
    39d2:	4f ef       	ldi	r20, 0xFF	; 255
    39d4:	b4 2e       	mov	r11, r20
    39d6:	c1 2c       	mov	r12, r1
    39d8:	d1 2c       	mov	r13, r1
    39da:	ae 20       	and	r10, r14
    39dc:	bf 20       	and	r11, r15
    39de:	c0 22       	and	r12, r16
    39e0:	d1 22       	and	r13, r17
    39e2:	78 01       	movw	r14, r16
    39e4:	00 27       	eor	r16, r16
    39e6:	11 27       	eor	r17, r17
    39e8:	6d a0       	ldd	r6, Y+37	; 0x25
    39ea:	7e a0       	ldd	r7, Y+38	; 0x26
    39ec:	8f a0       	ldd	r8, Y+39	; 0x27
    39ee:	98 a4       	ldd	r9, Y+40	; 0x28
    39f0:	4f ef       	ldi	r20, 0xFF	; 255
    39f2:	5f ef       	ldi	r21, 0xFF	; 255
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	64 22       	and	r6, r20
    39fa:	75 22       	and	r7, r21
    39fc:	86 22       	and	r8, r22
    39fe:	97 22       	and	r9, r23
    3a00:	8d a1       	ldd	r24, Y+37	; 0x25
    3a02:	9e a1       	ldd	r25, Y+38	; 0x26
    3a04:	af a1       	ldd	r26, Y+39	; 0x27
    3a06:	b8 a5       	ldd	r27, Y+40	; 0x28
    3a08:	bd 01       	movw	r22, r26
    3a0a:	88 27       	eor	r24, r24
    3a0c:	99 27       	eor	r25, r25
    3a0e:	65 96       	adiw	r28, 0x15	; 21
    3a10:	6c af       	std	Y+60, r22	; 0x3c
    3a12:	7d af       	std	Y+61, r23	; 0x3d
    3a14:	8e af       	std	Y+62, r24	; 0x3e
    3a16:	9f af       	std	Y+63, r25	; 0x3f
    3a18:	65 97       	sbiw	r28, 0x15	; 21
    3a1a:	c6 01       	movw	r24, r12
    3a1c:	b5 01       	movw	r22, r10
    3a1e:	a4 01       	movw	r20, r8
    3a20:	93 01       	movw	r18, r6
    3a22:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3a26:	61 96       	adiw	r28, 0x11	; 17
    3a28:	6c af       	std	Y+60, r22	; 0x3c
    3a2a:	7d af       	std	Y+61, r23	; 0x3d
    3a2c:	8e af       	std	Y+62, r24	; 0x3e
    3a2e:	9f af       	std	Y+63, r25	; 0x3f
    3a30:	61 97       	sbiw	r28, 0x11	; 17
    3a32:	c6 01       	movw	r24, r12
    3a34:	b5 01       	movw	r22, r10
    3a36:	65 96       	adiw	r28, 0x15	; 21
    3a38:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a40:	65 97       	sbiw	r28, 0x15	; 21
    3a42:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3a46:	1b 01       	movw	r2, r22
    3a48:	2c 01       	movw	r4, r24
    3a4a:	c8 01       	movw	r24, r16
    3a4c:	b7 01       	movw	r22, r14
    3a4e:	a4 01       	movw	r20, r8
    3a50:	93 01       	movw	r18, r6
    3a52:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3a56:	5b 01       	movw	r10, r22
    3a58:	6c 01       	movw	r12, r24
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	65 96       	adiw	r28, 0x15	; 21
    3a60:	2c ad       	ldd	r18, Y+60	; 0x3c
    3a62:	3d ad       	ldd	r19, Y+61	; 0x3d
    3a64:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a66:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a68:	65 97       	sbiw	r28, 0x15	; 21
    3a6a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__mulsi3>
    3a6e:	7b 01       	movw	r14, r22
    3a70:	8c 01       	movw	r16, r24
    3a72:	a6 01       	movw	r20, r12
    3a74:	95 01       	movw	r18, r10
    3a76:	22 0d       	add	r18, r2
    3a78:	33 1d       	adc	r19, r3
    3a7a:	44 1d       	adc	r20, r4
    3a7c:	55 1d       	adc	r21, r5
    3a7e:	61 96       	adiw	r28, 0x11	; 17
    3a80:	6c ac       	ldd	r6, Y+60	; 0x3c
    3a82:	7d ac       	ldd	r7, Y+61	; 0x3d
    3a84:	8e ac       	ldd	r8, Y+62	; 0x3e
    3a86:	9f ac       	ldd	r9, Y+63	; 0x3f
    3a88:	61 97       	sbiw	r28, 0x11	; 17
    3a8a:	c4 01       	movw	r24, r8
    3a8c:	aa 27       	eor	r26, r26
    3a8e:	bb 27       	eor	r27, r27
    3a90:	28 0f       	add	r18, r24
    3a92:	39 1f       	adc	r19, r25
    3a94:	4a 1f       	adc	r20, r26
    3a96:	5b 1f       	adc	r21, r27
    3a98:	2a 15       	cp	r18, r10
    3a9a:	3b 05       	cpc	r19, r11
    3a9c:	4c 05       	cpc	r20, r12
    3a9e:	5d 05       	cpc	r21, r13
    3aa0:	48 f4       	brcc	.+18     	; 0x3ab4 <__umoddi3+0xb70>
    3aa2:	81 2c       	mov	r8, r1
    3aa4:	91 2c       	mov	r9, r1
    3aa6:	e1 e0       	ldi	r30, 0x01	; 1
    3aa8:	ae 2e       	mov	r10, r30
    3aaa:	b1 2c       	mov	r11, r1
    3aac:	e8 0c       	add	r14, r8
    3aae:	f9 1c       	adc	r15, r9
    3ab0:	0a 1d       	adc	r16, r10
    3ab2:	1b 1d       	adc	r17, r11
    3ab4:	ca 01       	movw	r24, r20
    3ab6:	aa 27       	eor	r26, r26
    3ab8:	bb 27       	eor	r27, r27
    3aba:	57 01       	movw	r10, r14
    3abc:	68 01       	movw	r12, r16
    3abe:	a8 0e       	add	r10, r24
    3ac0:	b9 1e       	adc	r11, r25
    3ac2:	ca 1e       	adc	r12, r26
    3ac4:	db 1e       	adc	r13, r27
    3ac6:	a9 01       	movw	r20, r18
    3ac8:	33 27       	eor	r19, r19
    3aca:	22 27       	eor	r18, r18
    3acc:	61 96       	adiw	r28, 0x11	; 17
    3ace:	8c ad       	ldd	r24, Y+60	; 0x3c
    3ad0:	9d ad       	ldd	r25, Y+61	; 0x3d
    3ad2:	ae ad       	ldd	r26, Y+62	; 0x3e
    3ad4:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ad6:	61 97       	sbiw	r28, 0x11	; 17
    3ad8:	a0 70       	andi	r26, 0x00	; 0
    3ada:	b0 70       	andi	r27, 0x00	; 0
    3adc:	28 0f       	add	r18, r24
    3ade:	39 1f       	adc	r19, r25
    3ae0:	4a 1f       	adc	r20, r26
    3ae2:	5b 1f       	adc	r21, r27
    3ae4:	e9 8c       	ldd	r14, Y+25	; 0x19
    3ae6:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3ae8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3aea:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3aec:	ea 14       	cp	r14, r10
    3aee:	fb 04       	cpc	r15, r11
    3af0:	0c 05       	cpc	r16, r12
    3af2:	1d 05       	cpc	r17, r13
    3af4:	70 f0       	brcs	.+28     	; 0x3b12 <__umoddi3+0xbce>
    3af6:	ae 14       	cp	r10, r14
    3af8:	bf 04       	cpc	r11, r15
    3afa:	c0 06       	cpc	r12, r16
    3afc:	d1 06       	cpc	r13, r17
    3afe:	69 f5       	brne	.+90     	; 0x3b5a <__umoddi3+0xc16>
    3b00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b06:	98 a1       	ldd	r25, Y+32	; 0x20
    3b08:	62 17       	cp	r22, r18
    3b0a:	73 07       	cpc	r23, r19
    3b0c:	84 07       	cpc	r24, r20
    3b0e:	95 07       	cpc	r25, r21
    3b10:	20 f5       	brcc	.+72     	; 0x3b5a <__umoddi3+0xc16>
    3b12:	da 01       	movw	r26, r20
    3b14:	c9 01       	movw	r24, r18
    3b16:	6d a0       	ldd	r6, Y+37	; 0x25
    3b18:	7e a0       	ldd	r7, Y+38	; 0x26
    3b1a:	8f a0       	ldd	r8, Y+39	; 0x27
    3b1c:	98 a4       	ldd	r9, Y+40	; 0x28
    3b1e:	86 19       	sub	r24, r6
    3b20:	97 09       	sbc	r25, r7
    3b22:	a8 09       	sbc	r26, r8
    3b24:	b9 09       	sbc	r27, r9
    3b26:	e9 a4       	ldd	r14, Y+41	; 0x29
    3b28:	fa a4       	ldd	r15, Y+42	; 0x2a
    3b2a:	0b a5       	ldd	r16, Y+43	; 0x2b
    3b2c:	1c a5       	ldd	r17, Y+44	; 0x2c
    3b2e:	ae 18       	sub	r10, r14
    3b30:	bf 08       	sbc	r11, r15
    3b32:	c0 0a       	sbc	r12, r16
    3b34:	d1 0a       	sbc	r13, r17
    3b36:	ee 24       	eor	r14, r14
    3b38:	ff 24       	eor	r15, r15
    3b3a:	87 01       	movw	r16, r14
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	4a 07       	cpc	r20, r26
    3b42:	5b 07       	cpc	r21, r27
    3b44:	28 f4       	brcc	.+10     	; 0x3b50 <__umoddi3+0xc0c>
    3b46:	21 e0       	ldi	r18, 0x01	; 1
    3b48:	e2 2e       	mov	r14, r18
    3b4a:	f1 2c       	mov	r15, r1
    3b4c:	01 2d       	mov	r16, r1
    3b4e:	11 2d       	mov	r17, r1
    3b50:	ae 18       	sub	r10, r14
    3b52:	bf 08       	sbc	r11, r15
    3b54:	c0 0a       	sbc	r12, r16
    3b56:	d1 0a       	sbc	r13, r17
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <__umoddi3+0xc1a>
    3b5a:	da 01       	movw	r26, r20
    3b5c:	c9 01       	movw	r24, r18
    3b5e:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3b60:	7e 8c       	ldd	r7, Y+30	; 0x1e
    3b62:	8f 8c       	ldd	r8, Y+31	; 0x1f
    3b64:	98 a0       	ldd	r9, Y+32	; 0x20
    3b66:	68 1a       	sub	r6, r24
    3b68:	79 0a       	sbc	r7, r25
    3b6a:	8a 0a       	sbc	r8, r26
    3b6c:	9b 0a       	sbc	r9, r27
    3b6e:	49 8d       	ldd	r20, Y+25	; 0x19
    3b70:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3b72:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3b74:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3b76:	4a 19       	sub	r20, r10
    3b78:	5b 09       	sbc	r21, r11
    3b7a:	6c 09       	sbc	r22, r12
    3b7c:	7d 09       	sbc	r23, r13
    3b7e:	5a 01       	movw	r10, r20
    3b80:	6b 01       	movw	r12, r22
    3b82:	22 24       	eor	r2, r2
    3b84:	33 24       	eor	r3, r3
    3b86:	21 01       	movw	r4, r2
    3b88:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b8a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b90:	66 15       	cp	r22, r6
    3b92:	77 05       	cpc	r23, r7
    3b94:	88 05       	cpc	r24, r8
    3b96:	99 05       	cpc	r25, r9
    3b98:	28 f4       	brcc	.+10     	; 0x3ba4 <__umoddi3+0xc60>
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	28 2e       	mov	r2, r24
    3b9e:	31 2c       	mov	r3, r1
    3ba0:	41 2c       	mov	r4, r1
    3ba2:	51 2c       	mov	r5, r1
    3ba4:	86 01       	movw	r16, r12
    3ba6:	75 01       	movw	r14, r10
    3ba8:	e2 18       	sub	r14, r2
    3baa:	f3 08       	sbc	r15, r3
    3bac:	04 09       	sbc	r16, r4
    3bae:	15 09       	sbc	r17, r5
    3bb0:	a8 01       	movw	r20, r16
    3bb2:	97 01       	movw	r18, r14
    3bb4:	66 96       	adiw	r28, 0x16	; 22
    3bb6:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bb8:	66 97       	sbiw	r28, 0x16	; 22
    3bba:	04 c0       	rjmp	.+8      	; 0x3bc4 <__umoddi3+0xc80>
    3bbc:	22 0f       	add	r18, r18
    3bbe:	33 1f       	adc	r19, r19
    3bc0:	44 1f       	adc	r20, r20
    3bc2:	55 1f       	adc	r21, r21
    3bc4:	0a 94       	dec	r0
    3bc6:	d2 f7       	brpl	.-12     	; 0x3bbc <__umoddi3+0xc78>
    3bc8:	d4 01       	movw	r26, r8
    3bca:	c3 01       	movw	r24, r6
    3bcc:	67 96       	adiw	r28, 0x17	; 23
    3bce:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bd0:	67 97       	sbiw	r28, 0x17	; 23
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <__umoddi3+0xc98>
    3bd4:	b6 95       	lsr	r27
    3bd6:	a7 95       	ror	r26
    3bd8:	97 95       	ror	r25
    3bda:	87 95       	ror	r24
    3bdc:	0a 94       	dec	r0
    3bde:	d2 f7       	brpl	.-12     	; 0x3bd4 <__umoddi3+0xc90>
    3be0:	28 2b       	or	r18, r24
    3be2:	39 2b       	or	r19, r25
    3be4:	4a 2b       	or	r20, r26
    3be6:	5b 2b       	or	r21, r27
    3be8:	29 8b       	std	Y+17, r18	; 0x11
    3bea:	3a 8b       	std	Y+18, r19	; 0x12
    3bec:	4b 8b       	std	Y+19, r20	; 0x13
    3bee:	5c 8b       	std	Y+20, r21	; 0x14
    3bf0:	67 96       	adiw	r28, 0x17	; 23
    3bf2:	0f ac       	ldd	r0, Y+63	; 0x3f
    3bf4:	67 97       	sbiw	r28, 0x17	; 23
    3bf6:	04 c0       	rjmp	.+8      	; 0x3c00 <__umoddi3+0xcbc>
    3bf8:	16 95       	lsr	r17
    3bfa:	07 95       	ror	r16
    3bfc:	f7 94       	ror	r15
    3bfe:	e7 94       	ror	r14
    3c00:	0a 94       	dec	r0
    3c02:	d2 f7       	brpl	.-12     	; 0x3bf8 <__umoddi3+0xcb4>
    3c04:	ed 8a       	std	Y+21, r14	; 0x15
    3c06:	fe 8a       	std	Y+22, r15	; 0x16
    3c08:	0f 8b       	std	Y+23, r16	; 0x17
    3c0a:	18 8f       	std	Y+24, r17	; 0x18
    3c0c:	3a 89       	ldd	r19, Y+18	; 0x12
    3c0e:	4b 89       	ldd	r20, Y+19	; 0x13
    3c10:	5c 89       	ldd	r21, Y+20	; 0x14
    3c12:	6e 2d       	mov	r22, r14
    3c14:	7e 89       	ldd	r23, Y+22	; 0x16
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1a:	c5 5a       	subi	r28, 0xA5	; 165
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	e2 e1       	ldi	r30, 0x12	; 18
    3c20:	0c 94 e5 36 	jmp	0x6dca	; 0x6dca <__epilogue_restores__>

00003c24 <PW_Check>:
	}

}

void PW_Check(void *ptr)
{
    3c24:	ff 92       	push	r15
    3c26:	0f 93       	push	r16
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
			LCD_voidClearScreen();
			LCD_voidSetPosition(LCD_ROW0,0);
			Local_u16CheckPassword = (u16)(EEPROM_u8ReadDataByte(0x21)<<8);
			Local_u16CheckPassword |= EEPROM_u8ReadDataByte(0x20);

			Global_u8RepPWReq = OTHER_TRY;
    3c2e:	ff 24       	eor	r15, r15
    3c30:	f3 94       	inc	r15
				LCD_voidClearScreen();
				LCD_voidSetPosition(LCD_ROW0,0);
				LCD_voidSendString((u8*)"Max 3 Tries");
				LCD_voidSetPosition(LCD_ROW1,0);
				LCD_voidSendString((u8*)"Try Left ");
				LCD_voidSendNumber((3-Global_u8TryCounter));
    3c32:	03 e0       	ldi	r16, 0x03	; 3
    3c34:	10 e0       	ldi	r17, 0x00	; 0


	while(1)
	{

		xSemaphoreTake(PW_CheckSemaphore,MAX_TIME);
    3c36:	80 91 67 07 	lds	r24, 0x0767
    3c3a:	90 91 68 07 	lds	r25, 0x0768
    3c3e:	60 e0       	ldi	r22, 0x00	; 0
    3c40:	70 e0       	ldi	r23, 0x00	; 0
    3c42:	4f ef       	ldi	r20, 0xFF	; 255
    3c44:	5f ef       	ldi	r21, 0xFF	; 255
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <xQueueGenericReceive>
		xSemaphoreTake(LCD_Mutex,MAX_TIME);
    3c4c:	80 91 69 07 	lds	r24, 0x0769
    3c50:	90 91 6a 07 	lds	r25, 0x076A
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	70 e0       	ldi	r23, 0x00	; 0
    3c58:	4f ef       	ldi	r20, 0xFF	; 255
    3c5a:	5f ef       	ldi	r21, 0xFF	; 255
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <xQueueGenericReceive>
		if(FIRST_TRY == Global_u8RepPWReq)
    3c62:	80 91 ea 01 	lds	r24, 0x01EA
    3c66:	88 23       	and	r24, r24
    3c68:	e9 f4       	brne	.+58     	; 0x3ca4 <PW_Check+0x80>
		{
			LCD_voidClearScreen();
    3c6a:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
			LCD_voidSetPosition(LCD_ROW0,0);
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	60 e0       	ldi	r22, 0x00	; 0
    3c72:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
			Local_u16CheckPassword = (u16)(EEPROM_u8ReadDataByte(0x21)<<8);
    3c76:	81 e2       	ldi	r24, 0x21	; 33
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 3c 29 	call	0x5278	; 0x5278 <EEPROM_u8ReadDataByte>
    3c7e:	d8 2f       	mov	r29, r24
    3c80:	c0 e0       	ldi	r28, 0x00	; 0
    3c82:	d0 93 f1 01 	sts	0x01F1, r29
    3c86:	c0 93 f0 01 	sts	0x01F0, r28
			Local_u16CheckPassword |= EEPROM_u8ReadDataByte(0x20);
    3c8a:	80 e2       	ldi	r24, 0x20	; 32
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	0e 94 3c 29 	call	0x5278	; 0x5278 <EEPROM_u8ReadDataByte>
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	8c 2b       	or	r24, r28
    3c96:	9d 2b       	or	r25, r29
    3c98:	90 93 f1 01 	sts	0x01F1, r25
    3c9c:	80 93 f0 01 	sts	0x01F0, r24

			Global_u8RepPWReq = OTHER_TRY;
    3ca0:	f0 92 ea 01 	sts	0x01EA, r15
		{

		}


		xQueueReceive(PW_Queue,(void *)&Local_pu16Password,MAX_TIME);
    3ca4:	80 91 65 07 	lds	r24, 0x0765
    3ca8:	90 91 66 07 	lds	r25, 0x0766
    3cac:	63 ed       	ldi	r22, 0xD3	; 211
    3cae:	71 e0       	ldi	r23, 0x01	; 1
    3cb0:	4f ef       	ldi	r20, 0xFF	; 255
    3cb2:	5f ef       	ldi	r21, 0xFF	; 255
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <xQueueGenericReceive>

		if(*Local_pu16Password == Local_u16CheckPassword)
    3cba:	e0 91 d3 01 	lds	r30, 0x01D3
    3cbe:	f0 91 d4 01 	lds	r31, 0x01D4
    3cc2:	20 81       	ld	r18, Z
    3cc4:	31 81       	ldd	r19, Z+1	; 0x01
    3cc6:	80 91 f0 01 	lds	r24, 0x01F0
    3cca:	90 91 f1 01 	lds	r25, 0x01F1
    3cce:	28 17       	cp	r18, r24
    3cd0:	39 07       	cpc	r19, r25
    3cd2:	11 f5       	brne	.+68     	; 0x3d18 <PW_Check+0xf4>
		{

			LCD_voidClearScreen();
    3cd4:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
			LCD_voidSetPosition(LCD_ROW0,0);
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"Welcome Home!");
    3ce0:	80 e6       	ldi	r24, 0x60	; 96
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>


			vTaskDelay(1000);
    3ce8:	88 ee       	ldi	r24, 0xE8	; 232
    3cea:	93 e0       	ldi	r25, 0x03	; 3
    3cec:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>

			// Wake Up Controllers
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);
    3cf0:	83 e0       	ldi	r24, 0x03	; 3
    3cf2:	64 e0       	ldi	r22, 0x04	; 4
    3cf4:	41 e0       	ldi	r20, 0x01	; 1
    3cf6:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
			vTaskDelay(50);
    3cfa:	82 e3       	ldi	r24, 0x32	; 50
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>
			DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_LOW);
    3d02:	83 e0       	ldi	r24, 0x03	; 3
    3d04:	64 e0       	ldi	r22, 0x04	; 4
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>


			vTaskDelay(1000);
    3d0c:	88 ee       	ldi	r24, 0xE8	; 232
    3d0e:	93 e0       	ldi	r25, 0x03	; 3
    3d10:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>

			USART_u8SendData(SAFE_ENTER);
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	80 c0       	rjmp	.+256    	; 0x3e18 <PW_Check+0x1f4>
			vTaskDelete(xKeyHandle);
			vTaskDelete(NULL);
		}
		else if(*Local_pu16Password != Local_u16CheckPassword)
		{
			LCD_voidClearScreen();
    3d18:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
			LCD_voidSetPosition(LCD_ROW0,0);
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
			LCD_voidSendString((u8*)"InCorrect PW");
    3d24:	8e e6       	ldi	r24, 0x6E	; 110
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>
			vTaskDelay(500);
    3d2c:	84 ef       	ldi	r24, 0xF4	; 244
    3d2e:	91 e0       	ldi	r25, 0x01	; 1
    3d30:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>
			if(Global_u8TryCounter<3)
    3d34:	80 91 d2 01 	lds	r24, 0x01D2
    3d38:	83 30       	cpi	r24, 0x03	; 3
    3d3a:	08 f0       	brcs	.+2      	; 0x3d3e <PW_Check+0x11a>
    3d3c:	46 c0       	rjmp	.+140    	; 0x3dca <PW_Check+0x1a6>
			{
				LCD_voidClearScreen();
    3d3e:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
				LCD_voidSetPosition(LCD_ROW0,0);
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	60 e0       	ldi	r22, 0x00	; 0
    3d46:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
				LCD_voidSendString((u8*)"Max 3 Tries");
    3d4a:	8b e7       	ldi	r24, 0x7B	; 123
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>
				LCD_voidSetPosition(LCD_ROW1,0);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	60 e0       	ldi	r22, 0x00	; 0
    3d56:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
				LCD_voidSendString((u8*)"Try Left ");
    3d5a:	87 e8       	ldi	r24, 0x87	; 135
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>
				LCD_voidSendNumber((3-Global_u8TryCounter));
    3d62:	80 91 d2 01 	lds	r24, 0x01D2
    3d66:	98 01       	movw	r18, r16
    3d68:	28 1b       	sub	r18, r24
    3d6a:	31 09       	sbc	r19, r1
    3d6c:	c9 01       	movw	r24, r18
    3d6e:	f9 01       	movw	r30, r18
    3d70:	ff 0f       	add	r31, r31
    3d72:	ee 0b       	sbc	r30, r30
    3d74:	fe 2f       	mov	r31, r30
    3d76:	9c 01       	movw	r18, r24
    3d78:	4e 2f       	mov	r20, r30
    3d7a:	5e 2f       	mov	r21, r30
    3d7c:	6e 2f       	mov	r22, r30
    3d7e:	7e 2f       	mov	r23, r30
    3d80:	8e 2f       	mov	r24, r30
    3d82:	9e 2f       	mov	r25, r30
    3d84:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <LCD_voidSendNumber>
				vTaskDelay(500);
    3d88:	84 ef       	ldi	r24, 0xF4	; 244
    3d8a:	91 e0       	ldi	r25, 0x01	; 1
    3d8c:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>
				LCD_voidClearScreen();
    3d90:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
				LCD_voidSendString((u8*)"Enter PW AGAIN: ");
    3d94:	81 e9       	ldi	r24, 0x91	; 145
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>
				Global_u8TryCounter++;
    3d9c:	80 91 d2 01 	lds	r24, 0x01D2
    3da0:	8f 5f       	subi	r24, 0xFF	; 255
    3da2:	80 93 d2 01 	sts	0x01D2, r24
				COL=0;
    3da6:	10 92 ed 01 	sts	0x01ED, r1
				Local_u16Password=0;
    3daa:	10 92 ef 01 	sts	0x01EF, r1
    3dae:	10 92 ee 01 	sts	0x01EE, r1
				xSemaphoreGive(PW_EnterSemaphore);
    3db2:	80 91 6d 07 	lds	r24, 0x076D
    3db6:	90 91 6e 07 	lds	r25, 0x076E
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	40 e0       	ldi	r20, 0x00	; 0
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
    3dc8:	39 c0       	rjmp	.+114    	; 0x3e3c <PW_Check+0x218>
			}
			else
			{
				LCD_voidClearScreen();
    3dca:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
				LCD_voidSetPosition(LCD_ROW0,0);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
				LCD_voidSendString((u8*)"Maximum Tries");
    3dd6:	82 ea       	ldi	r24, 0xA2	; 162
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>


				vTaskDelay(1000);
    3dde:	88 ee       	ldi	r24, 0xE8	; 232
    3de0:	93 e0       	ldi	r25, 0x03	; 3
    3de2:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>

				LCD_voidClearScreen();
    3de6:	0e 94 30 28 	call	0x5060	; 0x5060 <LCD_voidClearScreen>
				LCD_voidSendString((u8*)"Thief Alert!");
    3dea:	80 eb       	ldi	r24, 0xB0	; 176
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>


				// Wake Up Controllers
				DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);
    3df2:	83 e0       	ldi	r24, 0x03	; 3
    3df4:	64 e0       	ldi	r22, 0x04	; 4
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
				vTaskDelay(50);
    3dfc:	82 e3       	ldi	r24, 0x32	; 50
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>
				DIO_u8SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_LOW);
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	64 e0       	ldi	r22, 0x04	; 4
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

				vTaskDelay(1000);
    3e0e:	88 ee       	ldi	r24, 0xE8	; 232
    3e10:	93 e0       	ldi	r25, 0x03	; 3
    3e12:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>

				USART_u8SendData(THIEF_ENTER);
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <USART_u8SendData>

				vTaskDelete(xEnterHandle);
    3e1c:	80 91 5d 07 	lds	r24, 0x075D
    3e20:	90 91 5e 07 	lds	r25, 0x075E
    3e24:	0e 94 0c 34 	call	0x6818	; 0x6818 <vTaskDelete>
				vTaskDelete(xKeyHandle);
    3e28:	80 91 5f 07 	lds	r24, 0x075F
    3e2c:	90 91 60 07 	lds	r25, 0x0760
    3e30:	0e 94 0c 34 	call	0x6818	; 0x6818 <vTaskDelete>
				vTaskDelete(NULL);
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	0e 94 0c 34 	call	0x6818	; 0x6818 <vTaskDelete>
			}
		}
		xSemaphoreGive(LCD_Mutex);
    3e3c:	80 91 69 07 	lds	r24, 0x0769
    3e40:	90 91 6a 07 	lds	r25, 0x076A
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	70 e0       	ldi	r23, 0x00	; 0
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
    3e52:	f1 ce       	rjmp	.-542    	; 0x3c36 <PW_Check+0x12>

00003e54 <PW_Enter>:
		xSemaphoreGive(PW_EnterSemaphore);
		vTaskDelete(NULL);
	}
}
void PW_Enter(void *ptr)
{
    3e54:	1f 93       	push	r17

	static u8 Local_u8Number=0;
	static u16 Local_u16Password= 0;
	static u16* Local_pu16Password= &Local_u16Password;
	LCD_voidSetPosition(0,0);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
	LCD_voidSendString((u8*)"Enter Your PW:");
    3e5e:	8d eb       	ldi	r24, 0xBD	; 189
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <LCD_voidSendString>
	xSemaphoreGive(LCD_Mutex);
    3e66:	80 91 69 07 	lds	r24, 0x0769
    3e6a:	90 91 6a 07 	lds	r25, 0x076A
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	70 e0       	ldi	r23, 0x00	; 0
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	50 e0       	ldi	r21, 0x00	; 0
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
			Local_u8Pressed= NOTPRESSED;
			xSemaphoreGive(PW_EnterSemaphore);
		}
		else if(Local_u8Pressed != NOTPRESSED && Local_u8Pressed == '=')
		{
			Local_u8Pressed= NOTPRESSED;
    3e7c:	1f ef       	ldi	r17, 0xFF	; 255


	while(1)
	{

		xSemaphoreTake(LCD_Mutex,MAX_TIME);
    3e7e:	80 91 69 07 	lds	r24, 0x0769
    3e82:	90 91 6a 07 	lds	r25, 0x076A
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	4f ef       	ldi	r20, 0xFF	; 255
    3e8c:	5f ef       	ldi	r21, 0xFF	; 255
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <xQueueGenericReceive>

		if(Local_u8Pressed != NOTPRESSED && Local_u8Pressed != '=')
    3e94:	80 91 d1 01 	lds	r24, 0x01D1
    3e98:	8f 3f       	cpi	r24, 0xFF	; 255
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <PW_Enter+0x4a>
    3e9c:	70 c0       	rjmp	.+224    	; 0x3f7e <PW_Enter+0x12a>
    3e9e:	8d 33       	cpi	r24, 0x3D	; 61
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <PW_Enter+0x50>
    3ea2:	55 c0       	rjmp	.+170    	; 0x3f4e <PW_Enter+0xfa>
		{
			xSemaphoreTake(PW_EnterSemaphore,MAX_TIME);
    3ea4:	80 91 6d 07 	lds	r24, 0x076D
    3ea8:	90 91 6e 07 	lds	r25, 0x076E
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	4f ef       	ldi	r20, 0xFF	; 255
    3eb2:	5f ef       	ldi	r21, 0xFF	; 255
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <xQueueGenericReceive>
			LCD_voidSetPosition(LCD_ROW1,COL);
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	60 91 ed 01 	lds	r22, 0x01ED
    3ec0:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>
			COL++;
    3ec4:	80 91 ed 01 	lds	r24, 0x01ED
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	80 93 ed 01 	sts	0x01ED, r24
			LCD_voidSendData('*');
    3ece:	8a e2       	ldi	r24, 0x2A	; 42
    3ed0:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>
			Local_u8Number = (Local_u8Pressed - '0');
    3ed4:	40 91 d1 01 	lds	r20, 0x01D1
    3ed8:	40 53       	subi	r20, 0x30	; 48
    3eda:	40 93 f4 01 	sts	0x01F4, r20
			if(FIRST_NUMBER == Global_u8RepEnter )
    3ede:	80 91 eb 01 	lds	r24, 0x01EB
    3ee2:	88 23       	and	r24, r24
    3ee4:	41 f4       	brne	.+16     	; 0x3ef6 <PW_Enter+0xa2>
			{
				Local_u16Password = Local_u8Number;
    3ee6:	40 93 f2 01 	sts	0x01F2, r20
    3eea:	10 92 f3 01 	sts	0x01F3, r1

				Global_u8RepEnter = 1;
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	80 93 eb 01 	sts	0x01EB, r24
    3ef4:	25 c0       	rjmp	.+74     	; 0x3f40 <PW_Enter+0xec>
			}
			else if( OTHER_NUMBER == Global_u8RepEnter && Local_u8Number != 0)
    3ef6:	81 30       	cpi	r24, 0x01	; 1
    3ef8:	19 f5       	brne	.+70     	; 0x3f40 <PW_Enter+0xec>
    3efa:	20 91 f2 01 	lds	r18, 0x01F2
    3efe:	30 91 f3 01 	lds	r19, 0x01F3
    3f02:	44 23       	and	r20, r20
    3f04:	71 f0       	breq	.+28     	; 0x3f22 <PW_Enter+0xce>
			{
				Local_u16Password = ((Local_u16Password *10) + Local_u8Number);
    3f06:	c9 01       	movw	r24, r18
    3f08:	9c 01       	movw	r18, r24
    3f0a:	73 e0       	ldi	r23, 0x03	; 3
    3f0c:	22 0f       	add	r18, r18
    3f0e:	33 1f       	adc	r19, r19
    3f10:	7a 95       	dec	r23
    3f12:	e1 f7       	brne	.-8      	; 0x3f0c <PW_Enter+0xb8>
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	28 0f       	add	r18, r24
    3f1a:	39 1f       	adc	r19, r25
    3f1c:	24 0f       	add	r18, r20
    3f1e:	31 1d       	adc	r19, r1
    3f20:	0b c0       	rjmp	.+22     	; 0x3f38 <PW_Enter+0xe4>
			}
			else if( OTHER_NUMBER == Global_u8RepEnter && Local_u8Number == 0)
			{
				Local_u16Password *= 10;
    3f22:	c9 01       	movw	r24, r18
    3f24:	9c 01       	movw	r18, r24
    3f26:	53 e0       	ldi	r21, 0x03	; 3
    3f28:	22 0f       	add	r18, r18
    3f2a:	33 1f       	adc	r19, r19
    3f2c:	5a 95       	dec	r21
    3f2e:	e1 f7       	brne	.-8      	; 0x3f28 <PW_Enter+0xd4>
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	28 0f       	add	r18, r24
    3f36:	39 1f       	adc	r19, r25
    3f38:	30 93 f3 01 	sts	0x01F3, r19
    3f3c:	20 93 f2 01 	sts	0x01F2, r18
			}
			Local_u8Pressed= NOTPRESSED;
    3f40:	10 93 d1 01 	sts	0x01D1, r17
			xSemaphoreGive(PW_EnterSemaphore);
    3f44:	80 91 6d 07 	lds	r24, 0x076D
    3f48:	90 91 6e 07 	lds	r25, 0x076E
    3f4c:	11 c0       	rjmp	.+34     	; 0x3f70 <PW_Enter+0x11c>
		}
		else if(Local_u8Pressed != NOTPRESSED && Local_u8Pressed == '=')
		{
			Local_u8Pressed= NOTPRESSED;
    3f4e:	10 93 d1 01 	sts	0x01D1, r17
			xQueueSend(PW_Queue,(void*)&Local_pu16Password,0);
    3f52:	80 91 65 07 	lds	r24, 0x0765
    3f56:	90 91 66 07 	lds	r25, 0x0766
    3f5a:	65 ed       	ldi	r22, 0xD5	; 213
    3f5c:	71 e0       	ldi	r23, 0x01	; 1
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	50 e0       	ldi	r21, 0x00	; 0
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
			xSemaphoreGive(PW_CheckSemaphore);
    3f68:	80 91 67 07 	lds	r24, 0x0767
    3f6c:	90 91 68 07 	lds	r25, 0x0768
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	70 e0       	ldi	r23, 0x00	; 0
    3f74:	40 e0       	ldi	r20, 0x00	; 0
    3f76:	50 e0       	ldi	r21, 0x00	; 0
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
		}
		xSemaphoreGive(LCD_Mutex);
    3f7e:	80 91 69 07 	lds	r24, 0x0769
    3f82:	90 91 6a 07 	lds	r25, 0x076A
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
    3f94:	74 cf       	rjmp	.-280    	; 0x3e7e <PW_Enter+0x2a>

00003f96 <PW_Set>:
void PW_Set(void *ptr)
{
	static u16 Local_u16Password=2024;
	while(1)
	{
		EEPROM_voidSendDataByte(0x20,(u8)Local_u16Password);
    3f96:	80 e2       	ldi	r24, 0x20	; 32
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	68 ee       	ldi	r22, 0xE8	; 232
    3f9c:	0e 94 5f 29 	call	0x52be	; 0x52be <EEPROM_voidSendDataByte>
		EEPROM_voidSendDataByte(0x21, ((u8)(Local_u16Password>>8)));
    3fa0:	81 e2       	ldi	r24, 0x21	; 33
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	67 e0       	ldi	r22, 0x07	; 7
    3fa6:	0e 94 5f 29 	call	0x52be	; 0x52be <EEPROM_voidSendDataByte>
		xSemaphoreGive(PW_EnterSemaphore);
    3faa:	80 91 6d 07 	lds	r24, 0x076D
    3fae:	90 91 6e 07 	lds	r25, 0x076E
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	70 e0       	ldi	r23, 0x00	; 0
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
    3fb8:	50 e0       	ldi	r21, 0x00	; 0
    3fba:	20 e0       	ldi	r18, 0x00	; 0
    3fbc:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
		vTaskDelete(NULL);
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	0e 94 0c 34 	call	0x6818	; 0x6818 <vTaskDelete>
    3fc8:	e6 cf       	rjmp	.-52     	; 0x3f96 <PW_Set>

00003fca <Keypad_Task>:

void Keypad_Task(void *ptr)
{
	while(1)
	{
		Local_u8Pressed = KPD_u8GetPressed();
    3fca:	0e 94 93 28 	call	0x5126	; 0x5126 <KPD_u8GetPressed>
    3fce:	80 93 d1 01 	sts	0x01D1, r24
		vTaskDelay(50);
    3fd2:	82 e3       	ldi	r24, 0x32	; 50
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	0e 94 a9 33 	call	0x6752	; 0x6752 <vTaskDelay>
    3fda:	f7 cf       	rjmp	.-18     	; 0x3fca <Keypad_Task>

00003fdc <USART_voidInit>:
	/* Calculate the baud rate from the equation*/
	u16 Local_u16UBR= (u16)(SYSTEM_FREQUENCY / (16*USART_BAUD_RATE) - 1);

	/* Set Baud Rate */
	/* Write in UBRRH then UBRRL */
	UBRRH = (u8)(Local_u16UBR>>8);
    3fdc:	10 bc       	out	0x20, r1	; 32
	UBRRL = (u8)(Local_u16UBR);
    3fde:	83 e3       	ldi	r24, 0x33	; 51
    3fe0:	89 b9       	out	0x09, r24	; 9

	/************* Check 3 Modes ***************/
	#if ( (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1))
		CLR_BIT(UCSRA,UCSRA_U2X);
    3fe2:	59 98       	cbi	0x0b, 1	; 11
	#endif


	/* Multi_processor Mode */
	#if USART_MPCM	== DISABLE
			CLR_BIT(UCSRA,UCSRA_MPCM);
    3fe4:	58 98       	cbi	0x0b, 0	; 11

	/*Set Data Size*/
	#if	UART_DATA_SIZE == DATA_SIZE_5_BIT
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
			CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
			CLR_BIT(UCSRB,UCSRB_UCSZ2);
    3fe6:	52 98       	cbi	0x0a, 2	; 10
	#else
		#error "WRONG USART_CLOCK_POLARITY configuration parameters"
	#endif

	/* Store the local variable in UCSRC Register*/
	UCSRC = Local_u8UCSRC;
    3fe8:	10 bc       	out	0x20, r1	; 32

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXCIE);
	#elif USART_TX_COMPLETE_INTERRUPT == ENABLE
			SET_BIT(UCSRB,UCSRB_TXCIE);
    3fea:	56 9a       	sbi	0x0a, 6	; 10
	#else
		#error "WRONG USART_TX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXCIE);
    3fec:	57 98       	cbi	0x0a, 7	; 10
	#else
		#error "WRONG USART_RX_COMPLETE_INTERRUPT configuration parameters"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
			CLR_BIT(UCSRB,UCSRB_UDRIE);
    3fee:	55 98       	cbi	0x0a, 5	; 10
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_RXEN);
	#elif USART_RECEIVER_ENABLE == ENABLE
			SET_BIT(UCSRB,UCSRB_RXEN);
    3ff0:	54 9a       	sbi	0x0a, 4	; 10
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
			CLR_BIT(UCSRB,UCSRB_TXEN);
	#elif USART_TRANSMITTER_ENABLE == ENABLE
			SET_BIT(UCSRB,UCSRB_TXEN);
    3ff2:	53 9a       	sbi	0x0a, 3	; 10
	#else
		#error "WRONG USART_TRANSMITTER_ENABLE configuration parameters"
	#endif

}
    3ff4:	08 95       	ret

00003ff6 <USART_u8SendData>:

u8 USART_u8SendData(u8 copy_u8Data)
{
    3ff6:	28 2f       	mov	r18, r24
	u8 Local_u8ErrorState = E_OK;
	u32 Local_u32TimeoutCounter = 0;

	if(USART_u8State == IDLE )
    3ff8:	80 91 f7 01 	lds	r24, 0x01F7
    3ffc:	88 23       	and	r24, r24
    3ffe:	11 f0       	breq	.+4      	; 0x4004 <USART_u8SendData+0xe>
    4000:	84 e0       	ldi	r24, 0x04	; 4
    4002:	08 95       	ret
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	07 c0       	rjmp	.+14     	; 0x4018 <USART_u8SendData+0x22>
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
		{
			Local_u32TimeoutCounter++;
    400a:	01 96       	adiw	r24, 0x01	; 1

	if(USART_u8State == IDLE )
	{
		USART_u8State = BUSY;

		while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_UDRE) == 0) )
    400c:	37 e2       	ldi	r19, 0x27	; 39
    400e:	80 31       	cpi	r24, 0x10	; 16
    4010:	93 07       	cpc	r25, r19
    4012:	11 f4       	brne	.+4      	; 0x4018 <USART_u8SendData+0x22>
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	06 c0       	rjmp	.+12     	; 0x4024 <USART_u8SendData+0x2e>
    4018:	5d 9b       	sbis	0x0b, 5	; 11
    401a:	f7 cf       	rjmp	.-18     	; 0x400a <USART_u8SendData+0x14>
    401c:	06 c0       	rjmp	.+12     	; 0x402a <USART_u8SendData+0x34>
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
			while(GET_BIT(UCSRA,UCSRA_TXC) == 0);
    401e:	5e 9b       	sbis	0x0b, 6	; 11
    4020:	fe cf       	rjmp	.-4      	; 0x401e <USART_u8SendData+0x28>
    4022:	80 e0       	ldi	r24, 0x00	; 0
		}

		USART_u8State = IDLE;
    4024:	10 92 f7 01 	sts	0x01F7, r1
		Local_u8ErrorState = E_NOK_BUSY;
	}

	return Local_u8ErrorState;

}
    4028:	08 95       	ret
		{
			Local_u8ErrorState= E_NOK;
		}
		else
		{
			UDR = copy_u8Data;
    402a:	2c b9       	out	0x0c, r18	; 12
    402c:	f8 cf       	rjmp	.-16     	; 0x401e <USART_u8SendData+0x28>

0000402e <USART_u8RecevieData>:
	return Local_u8ErrorState;

}

u8 USART_u8RecevieData(u8 * Copy_u8ReceviedData)
{
    402e:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK;
		u32 Local_u32TimeoutCounter = 0;

		if(USART_u8State == IDLE )
    4030:	80 91 f7 01 	lds	r24, 0x01F7
    4034:	88 23       	and	r24, r24
    4036:	11 f0       	breq	.+4      	; 0x403c <USART_u8RecevieData+0xe>
    4038:	84 e0       	ldi	r24, 0x04	; 4
    403a:	08 95       	ret
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	05 c0       	rjmp	.+10     	; 0x404c <USART_u8RecevieData+0x1e>
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
			{
				Local_u32TimeoutCounter++;
    4042:	01 96       	adiw	r24, 0x01	; 1

		if(USART_u8State == IDLE )
		{
			USART_u8State = BUSY;

			while( (Local_u32TimeoutCounter != USART_TIMEOUT) && (GET_BIT(UCSRA,UCSRA_RXC) == 0) )
    4044:	27 e2       	ldi	r18, 0x27	; 39
    4046:	80 31       	cpi	r24, 0x10	; 16
    4048:	92 07       	cpc	r25, r18
    404a:	19 f0       	breq	.+6      	; 0x4052 <USART_u8RecevieData+0x24>
    404c:	5f 9b       	sbis	0x0b, 7	; 11
    404e:	f9 cf       	rjmp	.-14     	; 0x4042 <USART_u8RecevieData+0x14>
    4050:	04 c0       	rjmp	.+8      	; 0x405a <USART_u8RecevieData+0x2c>
    4052:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				*Copy_u8ReceviedData = UDR;
			}

			USART_u8State = IDLE;
    4054:	10 92 f7 01 	sts	0x01F7, r1
			Local_u8ErrorState = E_NOK_BUSY;
		}

		return Local_u8ErrorState;

}
    4058:	08 95       	ret
			{
				Local_u8ErrorState= E_NOK;
			}
			else
			{
				*Copy_u8ReceviedData = UDR;
    405a:	8c b1       	in	r24, 0x0c	; 12
    405c:	80 83       	st	Z, r24
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	f9 cf       	rjmp	.-14     	; 0x4054 <USART_u8RecevieData+0x26>

00004062 <USART_u8SendStringSynch>:

		return Local_u8ErrorState;

}
u8 USART_u8SendStringSynch(const u8 * Copy_pchString)
{
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    4066:	00 97       	sbiw	r24, 0x00	; 0
    4068:	11 f4       	brne	.+4      	; 0x406e <USART_u8SendStringSynch+0xc>
    406a:	82 e0       	ldi	r24, 0x02	; 2
    406c:	0a c0       	rjmp	.+20     	; 0x4082 <USART_u8SendStringSynch+0x20>
    406e:	ec 01       	movw	r28, r24
    4070:	05 c0       	rjmp	.+10     	; 0x407c <USART_u8SendStringSynch+0x1a>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    4072:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <USART_u8SendData>
    4076:	21 96       	adiw	r28, 0x01	; 1
			Local_u32Index++ ;
			if (Local_u8ErrorState != E_OK)
    4078:	88 23       	and	r24, r24
    407a:	19 f4       	brne	.+6      	; 0x4082 <USART_u8SendStringSynch+0x20>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    407c:	88 81       	ld	r24, Y
    407e:	88 23       	and	r24, r24
    4080:	c1 f7       	brne	.-16     	; 0x4072 <USART_u8SendStringSynch+0x10>
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    4082:	df 91       	pop	r29
    4084:	cf 91       	pop	r28
    4086:	08 95       	ret

00004088 <USART_u8SendStringAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendStringAsynch(const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    4088:	fc 01       	movw	r30, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    408a:	80 91 f7 01 	lds	r24, 0x01F7
    408e:	88 23       	and	r24, r24
    4090:	11 f0       	breq	.+4      	; 0x4096 <USART_u8SendStringAsynch+0xe>
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    4096:	30 97       	sbiw	r30, 0x00	; 0
    4098:	a9 f0       	breq	.+42     	; 0x40c4 <USART_u8SendStringAsynch+0x3c>
    409a:	61 15       	cp	r22, r1
    409c:	71 05       	cpc	r23, r1
    409e:	91 f0       	breq	.+36     	; 0x40c4 <USART_u8SendStringAsynch+0x3c>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	80 93 f7 01 	sts	0x01F7, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString ;
    40a6:	f0 93 f6 01 	sts	0x01F6, r31
    40aa:	e0 93 f5 01 	sts	0x01F5, r30
			USART_pvNotificationFunc = NotificationFunc ;
    40ae:	70 93 f9 01 	sts	0x01F9, r23
    40b2:	60 93 f8 01 	sts	0x01F8, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    40b6:	10 92 fd 01 	sts	0x01FD, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index] ;
    40ba:	80 81       	ld	r24, Z
    40bc:	8c b9       	out	0x0c, r24	; 12

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    40be:	56 9a       	sbi	0x0a, 6	; 10
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    40c4:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    40c6:	08 95       	ret

000040c8 <USART_u8ReceiveBufferSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferSynch(u8 * Copy_pchString , u32 Copy_u32BufferSize)
{
    40c8:	ef 92       	push	r14
    40ca:	ff 92       	push	r15
    40cc:	0f 93       	push	r16
    40ce:	1f 93       	push	r17
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
    40d4:	8c 01       	movw	r16, r24
    40d6:	7b 01       	movw	r14, r22
	u8 Local_u8ErrorState = E_OK ;

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
    40d8:	00 97       	sbiw	r24, 0x00	; 0
    40da:	11 f4       	brne	.+4      	; 0x40e0 <USART_u8ReceiveBufferSynch+0x18>
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	0f c0       	rjmp	.+30     	; 0x40fe <USART_u8ReceiveBufferSynch+0x36>
    40e0:	c0 e0       	ldi	r28, 0x00	; 0
    40e2:	d0 e0       	ldi	r29, 0x00	; 0
    40e4:	08 c0       	rjmp	.+16     	; 0x40f6 <USART_u8ReceiveBufferSynch+0x2e>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    40e6:	c8 01       	movw	r24, r16
    40e8:	8c 0f       	add	r24, r28
    40ea:	9d 1f       	adc	r25, r29
    40ec:	0e 94 17 20 	call	0x402e	; 0x402e <USART_u8RecevieData>
			Local_u32Index++ ;

			if (Local_u8ErrorState != E_OK)
    40f0:	88 23       	and	r24, r24
    40f2:	29 f4       	brne	.+10     	; 0x40fe <USART_u8ReceiveBufferSynch+0x36>
	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
			Local_u32Index++ ;
    40f4:	21 96       	adiw	r28, 0x01	; 1

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    40f6:	ce 15       	cp	r28, r14
    40f8:	df 05       	cpc	r29, r15
    40fa:	a8 f3       	brcs	.-22     	; 0x40e6 <USART_u8ReceiveBufferSynch+0x1e>
    40fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_NULL_PTR ;
	}

	return Local_u8ErrorState ;
}
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	1f 91       	pop	r17
    4104:	0f 91       	pop	r16
    4106:	ff 90       	pop	r15
    4108:	ef 90       	pop	r14
    410a:	08 95       	ret

0000410c <USART_u8ReceiveBufferAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferAsynch(u8 * Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    410c:	9c 01       	movw	r18, r24
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
    410e:	80 91 f7 01 	lds	r24, 0x01F7
    4112:	88 23       	and	r24, r24
    4114:	11 f0       	breq	.+4      	; 0x411a <USART_u8ReceiveBufferAsynch+0xe>
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	08 95       	ret
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    411a:	21 15       	cp	r18, r1
    411c:	31 05       	cpc	r19, r1
    411e:	a9 f0       	breq	.+42     	; 0x414a <USART_u8ReceiveBufferAsynch+0x3e>
    4120:	41 15       	cp	r20, r1
    4122:	51 05       	cpc	r21, r1
    4124:	91 f0       	breq	.+36     	; 0x414a <USART_u8ReceiveBufferAsynch+0x3e>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	80 93 f7 01 	sts	0x01F7, r24

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString ;
    412c:	30 93 fb 01 	sts	0x01FB, r19
    4130:	20 93 fa 01 	sts	0x01FA, r18
			USART_pvNotificationFunc = NotificationFunc ;
    4134:	50 93 f9 01 	sts	0x01F9, r21
    4138:	40 93 f8 01 	sts	0x01F8, r20
			USART_u8BufferSize = Copy_u32BufferSize;
    413c:	60 93 fc 01 	sts	0x01FC, r22

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    4140:	10 92 fd 01 	sts	0x01FD, r1

			/*USART Recieve Interrupt Enable */
			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    4144:	57 9a       	sbi	0x0a, 7	; 10
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	08 95       	ret
{
	u8 Local_u8ErrorState = E_OK ;

	if (USART_u8State == IDLE)
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    414a:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState = E_NOK ;
	}

	return Local_u8ErrorState ;
}
    414c:	08 95       	ret

0000414e <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    414e:	1f 92       	push	r1
    4150:	0f 92       	push	r0
    4152:	0f b6       	in	r0, 0x3f	; 63
    4154:	0f 92       	push	r0
    4156:	11 24       	eor	r1, r1
    4158:	2f 93       	push	r18
    415a:	3f 93       	push	r19
    415c:	4f 93       	push	r20
    415e:	5f 93       	push	r21
    4160:	6f 93       	push	r22
    4162:	7f 93       	push	r23
    4164:	8f 93       	push	r24
    4166:	9f 93       	push	r25
    4168:	af 93       	push	r26
    416a:	bf 93       	push	r27
    416c:	ef 93       	push	r30
    416e:	ff 93       	push	r31
		/*Receive next Data*/
		USART_pu8ReceiveData[USART_u8Index] = UDR ;
    4170:	90 91 fd 01 	lds	r25, 0x01FD
    4174:	8c b1       	in	r24, 0x0c	; 12
    4176:	e0 91 fa 01 	lds	r30, 0x01FA
    417a:	f0 91 fb 01 	lds	r31, 0x01FB
    417e:	e9 0f       	add	r30, r25
    4180:	f1 1d       	adc	r31, r1
    4182:	80 83       	st	Z, r24

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    4184:	9f 5f       	subi	r25, 0xFF	; 255
    4186:	90 93 fd 01 	sts	0x01FD, r25

		if (USART_u8Index == USART_u8BufferSize)
    418a:	80 91 fc 01 	lds	r24, 0x01FC
    418e:	98 17       	cp	r25, r24
    4190:	51 f4       	brne	.+20     	; 0x41a6 <__vector_13+0x58>
		{
			/*Send Data Complete*/

			USART_u8Index=0;
    4192:	10 92 fd 01 	sts	0x01FD, r1
			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    4196:	10 92 f7 01 	sts	0x01F7, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    419a:	e0 91 f8 01 	lds	r30, 0x01F8
    419e:	f0 91 f9 01 	lds	r31, 0x01F9
    41a2:	09 95       	icall

			/*USART Recieve Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    41a4:	57 98       	cbi	0x0a, 7	; 10
		else
		{
			/*Do Noting*/
		}

}
    41a6:	ff 91       	pop	r31
    41a8:	ef 91       	pop	r30
    41aa:	bf 91       	pop	r27
    41ac:	af 91       	pop	r26
    41ae:	9f 91       	pop	r25
    41b0:	8f 91       	pop	r24
    41b2:	7f 91       	pop	r23
    41b4:	6f 91       	pop	r22
    41b6:	5f 91       	pop	r21
    41b8:	4f 91       	pop	r20
    41ba:	3f 91       	pop	r19
    41bc:	2f 91       	pop	r18
    41be:	0f 90       	pop	r0
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	0f 90       	pop	r0
    41c4:	1f 90       	pop	r1
    41c6:	18 95       	reti

000041c8 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    41c8:	1f 92       	push	r1
    41ca:	0f 92       	push	r0
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	0f 92       	push	r0
    41d0:	11 24       	eor	r1, r1
    41d2:	2f 93       	push	r18
    41d4:	3f 93       	push	r19
    41d6:	4f 93       	push	r20
    41d8:	5f 93       	push	r21
    41da:	6f 93       	push	r22
    41dc:	7f 93       	push	r23
    41de:	8f 93       	push	r24
    41e0:	9f 93       	push	r25
    41e2:	af 93       	push	r26
    41e4:	bf 93       	push	r27
    41e6:	ef 93       	push	r30
    41e8:	ff 93       	push	r31

		/*Increment Data index of the buffer*/
		USART_u8Index++ ;
    41ea:	80 91 fd 01 	lds	r24, 0x01FD
    41ee:	8f 5f       	subi	r24, 0xFF	; 255
    41f0:	80 93 fd 01 	sts	0x01FD, r24

		if (USART_pu8SendData[USART_u8Index] == '\0')
    41f4:	e0 91 f5 01 	lds	r30, 0x01F5
    41f8:	f0 91 f6 01 	lds	r31, 0x01F6
    41fc:	e8 0f       	add	r30, r24
    41fe:	f1 1d       	adc	r31, r1
    4200:	e0 81       	ld	r30, Z
    4202:	ee 23       	and	r30, r30
    4204:	59 f4       	brne	.+22     	; 0x421c <__vector_15+0x54>
		{
			/*Receive Data Complete*/
			USART_u8Index=0;
    4206:	10 92 fd 01 	sts	0x01FD, r1

			/*USART is now IDLE*/
			USART_u8State = IDLE ;
    420a:	10 92 f7 01 	sts	0x01F7, r1

			/*Call Notification Function*/
			USART_pvNotificationFunc() ;
    420e:	e0 91 f8 01 	lds	r30, 0x01F8
    4212:	f0 91 f9 01 	lds	r31, 0x01F9
    4216:	09 95       	icall

			/*USART Transmit Interrupt Disable*/
			CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    4218:	56 98       	cbi	0x0a, 6	; 10
    421a:	01 c0       	rjmp	.+2      	; 0x421e <__vector_15+0x56>
		}
		else
		{
			/*Send Data not Complete*/
			/*Send next Data*/
			UDR = USART_pu8SendData[USART_u8Index] ;
    421c:	ec b9       	out	0x0c, r30	; 12
		}

}
    421e:	ff 91       	pop	r31
    4220:	ef 91       	pop	r30
    4222:	bf 91       	pop	r27
    4224:	af 91       	pop	r26
    4226:	9f 91       	pop	r25
    4228:	8f 91       	pop	r24
    422a:	7f 91       	pop	r23
    422c:	6f 91       	pop	r22
    422e:	5f 91       	pop	r21
    4230:	4f 91       	pop	r20
    4232:	3f 91       	pop	r19
    4234:	2f 91       	pop	r18
    4236:	0f 90       	pop	r0
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	0f 90       	pop	r0
    423c:	1f 90       	pop	r1
    423e:	18 95       	reti

00004240 <TWI_voidInitMaster>:

//-------------------------------------------------------------------------------------------------------------------------------

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
    4240:	98 2f       	mov	r25, r24

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
    4242:	80 e2       	ldi	r24, 0x20	; 32
    4244:	80 b9       	out	0x00, r24	; 0

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
    4246:	11 b8       	out	0x01, r1	; 1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
    4248:	99 23       	and	r25, r25
    424a:	11 f0       	breq	.+4      	; 0x4250 <TWI_voidInitMaster+0x10>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
    424c:	99 0f       	add	r25, r25
    424e:	92 b9       	out	0x02, r25	; 2
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    4250:	86 b7       	in	r24, 0x36	; 54
    4252:	80 64       	ori	r24, 0x40	; 64
    4254:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    4256:	86 b7       	in	r24, 0x36	; 54
    4258:	84 60       	ori	r24, 0x04	; 4
    425a:	86 bf       	out	0x36, r24	; 54
}
    425c:	08 95       	ret

0000425e <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
    425e:	88 0f       	add	r24, r24
    4260:	82 b9       	out	0x02, r24	; 2

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    4262:	86 b7       	in	r24, 0x36	; 54
    4264:	80 64       	ori	r24, 0x40	; 64
    4266:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    4268:	86 b7       	in	r24, 0x36	; 54
    426a:	84 60       	ori	r24, 0x04	; 4
    426c:	86 bf       	out	0x36, r24	; 54
}
    426e:	08 95       	ret

00004270 <TWI_SendStartCondition>:
{
	TWI_ErrStatus Local_Error= NoError;


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    4270:	86 b7       	in	r24, 0x36	; 54
    4272:	80 62       	ori	r24, 0x20	; 32
    4274:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4276:	86 b7       	in	r24, 0x36	; 54
    4278:	80 68       	ori	r24, 0x80	; 128
    427a:	86 bf       	out	0x36, r24	; 54
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    427c:	06 b6       	in	r0, 0x36	; 54
    427e:	07 fe       	sbrs	r0, 7
    4280:	fd cf       	rjmp	.-6      	; 0x427c <TWI_SendStartCondition+0xc>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
    4282:	81 b1       	in	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	88 7f       	andi	r24, 0xF8	; 248
    4288:	88 30       	cpi	r24, 0x08	; 8
    428a:	09 f0       	breq	.+2      	; 0x428e <TWI_SendStartCondition+0x1e>
    428c:	91 e0       	ldi	r25, 0x01	; 1
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    428e:	89 2f       	mov	r24, r25
    4290:	08 95       	ret

00004292 <TWI_SendRepeatedStart>:
TWI_ErrStatus TWI_SendRepeatedStart(void)
{
	TWI_ErrStatus Local_Error= NoError;

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
    4292:	86 b7       	in	r24, 0x36	; 54
    4294:	80 62       	ori	r24, 0x20	; 32
    4296:	86 bf       	out	0x36, r24	; 54
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4298:	86 b7       	in	r24, 0x36	; 54
    429a:	80 68       	ori	r24, 0x80	; 128
    429c:	86 bf       	out	0x36, r24	; 54
	Hint : we could use
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    429e:	86 b7       	in	r24, 0x36	; 54
    42a0:	84 60       	ori	r24, 0x04	; 4
    42a2:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    42a4:	06 b6       	in	r0, 0x36	; 54
    42a6:	07 fe       	sbrs	r0, 7
    42a8:	fd cf       	rjmp	.-6      	; 0x42a4 <TWI_SendRepeatedStart+0x12>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
    42aa:	81 b1       	in	r24, 0x01	; 1
    42ac:	88 7f       	andi	r24, 0xF8	; 248
    42ae:	80 31       	cpi	r24, 0x10	; 16
    42b0:	11 f0       	breq	.+4      	; 0x42b6 <TWI_SendRepeatedStart+0x24>
    42b2:	82 e0       	ldi	r24, 0x02	; 2
    42b4:	08 95       	ret
    42b6:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    42b8:	08 95       	ret

000042ba <TWI_SendSlaveAddressWithWrite>:
TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
	TWI_ErrStatus Local_Error= NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
    42ba:	88 0f       	add	r24, r24
    42bc:	83 b9       	out	0x03, r24	; 3
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
    42be:	18 98       	cbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    42c0:	86 b7       	in	r24, 0x36	; 54
    42c2:	8f 7d       	andi	r24, 0xDF	; 223
    42c4:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    42c6:	86 b7       	in	r24, 0x36	; 54
    42c8:	80 68       	ori	r24, 0x80	; 128
    42ca:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    42cc:	86 b7       	in	r24, 0x36	; 54
    42ce:	84 60       	ori	r24, 0x04	; 4
    42d0:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    42d2:	06 b6       	in	r0, 0x36	; 54
    42d4:	07 fe       	sbrs	r0, 7
    42d6:	fd cf       	rjmp	.-6      	; 0x42d2 <TWI_SendSlaveAddressWithWrite+0x18>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    42d8:	81 b1       	in	r24, 0x01	; 1
    42da:	88 7f       	andi	r24, 0xF8	; 248
    42dc:	88 31       	cpi	r24, 0x18	; 24
    42de:	11 f0       	breq	.+4      	; 0x42e4 <TWI_SendSlaveAddressWithWrite+0x2a>
    42e0:	83 e0       	ldi	r24, 0x03	; 3
    42e2:	08 95       	ret
    42e4:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    42e6:	08 95       	ret

000042e8 <TWI_SendSlaveAddressWithRead>:
TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
	TWI_ErrStatus Local_Error= NoError;

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
    42e8:	88 0f       	add	r24, r24
    42ea:	83 b9       	out	0x03, r24	; 3
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
    42ec:	18 9a       	sbi	0x03, 0	; 3

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    42ee:	86 b7       	in	r24, 0x36	; 54
    42f0:	8f 7d       	andi	r24, 0xDF	; 223
    42f2:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    42f4:	86 b7       	in	r24, 0x36	; 54
    42f6:	80 68       	ori	r24, 0x80	; 128
    42f8:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    42fa:	86 b7       	in	r24, 0x36	; 54
    42fc:	84 60       	ori	r24, 0x04	; 4
    42fe:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    4300:	06 b6       	in	r0, 0x36	; 54
    4302:	07 fe       	sbrs	r0, 7
    4304:	fd cf       	rjmp	.-6      	; 0x4300 <TWI_SendSlaveAddressWithRead+0x18>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    4306:	81 b1       	in	r24, 0x01	; 1
    4308:	88 7f       	andi	r24, 0xF8	; 248
    430a:	80 34       	cpi	r24, 0x40	; 64
    430c:	11 f0       	breq	.+4      	; 0x4312 <TWI_SendSlaveAddressWithRead+0x2a>
    430e:	84 e0       	ldi	r24, 0x04	; 4
    4310:	08 95       	ret
    4312:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    4314:	08 95       	ret

00004316 <TWI_MasterWriteDataByte>:
TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
	TWI_ErrStatus Local_Error= NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    4316:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4318:	86 b7       	in	r24, 0x36	; 54
    431a:	80 68       	ori	r24, 0x80	; 128
    431c:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    431e:	86 b7       	in	r24, 0x36	; 54
    4320:	84 60       	ori	r24, 0x04	; 4
    4322:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    4324:	06 b6       	in	r0, 0x36	; 54
    4326:	07 fe       	sbrs	r0, 7
    4328:	fd cf       	rjmp	.-6      	; 0x4324 <TWI_MasterWriteDataByte+0xe>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    432a:	81 b1       	in	r24, 0x01	; 1
    432c:	88 7f       	andi	r24, 0xF8	; 248
    432e:	88 32       	cpi	r24, 0x28	; 40
    4330:	11 f0       	breq	.+4      	; 0x4336 <TWI_MasterWriteDataByte+0x20>
    4332:	85 e0       	ldi	r24, 0x05	; 5
    4334:	08 95       	ret
    4336:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    4338:	08 95       	ret

0000433a <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    433a:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error= NoError;

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    433c:	86 b7       	in	r24, 0x36	; 54
    433e:	80 68       	ori	r24, 0x80	; 128
    4340:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    4342:	86 b7       	in	r24, 0x36	; 54
    4344:	84 60       	ori	r24, 0x04	; 4
    4346:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    4348:	06 b6       	in	r0, 0x36	; 54
    434a:	07 fe       	sbrs	r0, 7
    434c:	fd cf       	rjmp	.-6      	; 0x4348 <TWI_MasterReadDataByte+0xe>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    434e:	81 b1       	in	r24, 0x01	; 1
    4350:	88 7f       	andi	r24, 0xF8	; 248
    4352:	80 35       	cpi	r24, 0x50	; 80
    4354:	11 f0       	breq	.+4      	; 0x435a <TWI_MasterReadDataByte+0x20>
    4356:	86 e0       	ldi	r24, 0x06	; 6
    4358:	08 95       	ret
		Local_Error = MasterReadByteErr;
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    435a:	83 b1       	in	r24, 0x03	; 3
    435c:	80 83       	st	Z, r24
    435e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return Local_Error;
}
    4360:	08 95       	ret

00004362 <TWI_SlaveWriteDataByte>:
TWI_ErrStatus TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
	TWI_ErrStatus Local_Error= NoError;

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    4362:	83 b9       	out	0x03, r24	; 3

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    4364:	86 b7       	in	r24, 0x36	; 54
    4366:	80 68       	ori	r24, 0x80	; 128
    4368:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    436a:	86 b7       	in	r24, 0x36	; 54
    436c:	84 60       	ori	r24, 0x04	; 4
    436e:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    4370:	06 b6       	in	r0, 0x36	; 54
    4372:	07 fe       	sbrs	r0, 7
    4374:	fd cf       	rjmp	.-6      	; 0x4370 <TWI_SlaveWriteDataByte+0xe>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
    4376:	81 b1       	in	r24, 0x01	; 1
    4378:	88 7f       	andi	r24, 0xF8	; 248
    437a:	88 3b       	cpi	r24, 0xB8	; 184
    437c:	11 f0       	breq	.+4      	; 0x4382 <TWI_SlaveWriteDataByte+0x20>
    437e:	87 e0       	ldi	r24, 0x07	; 7
    4380:	08 95       	ret
    4382:	80 e0       	ldi	r24, 0x00	; 0
	{
		/*Do nothing*/
	}

	return Local_Error;
}
    4384:	08 95       	ret

00004386 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    4386:	fc 01       	movw	r30, r24
	TWI_ErrStatus Local_Error= NoError;

	SET_BIT(TWCR,TWCR_TWINT);
    4388:	86 b7       	in	r24, 0x36	; 54
    438a:	80 68       	ori	r24, 0x80	; 128
    438c:	86 bf       	out	0x36, r24	; 54

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    438e:	86 b7       	in	r24, 0x36	; 54
    4390:	84 60       	ori	r24, 0x04	; 4
    4392:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    4394:	06 b6       	in	r0, 0x36	; 54
    4396:	07 fe       	sbrs	r0, 7
    4398:	fd cf       	rjmp	.-6      	; 0x4394 <TWI_SlaveReadDataByte+0xe>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
    439a:	81 b1       	in	r24, 0x01	; 1
    439c:	88 7f       	andi	r24, 0xF8	; 248
    439e:	80 36       	cpi	r24, 0x60	; 96
    43a0:	11 f0       	breq	.+4      	; 0x43a6 <TWI_SlaveReadDataByte+0x20>
    43a2:	98 e0       	ldi	r25, 0x08	; 8
    43a4:	01 c0       	rjmp	.+2      	; 0x43a8 <TWI_SlaveReadDataByte+0x22>
    43a6:	90 e0       	ldi	r25, 0x00	; 0
	{
		Local_Error = SlaveReadByteErr;
	}

	SET_BIT(TWCR,TWCR_TWINT);
    43a8:	86 b7       	in	r24, 0x36	; 54
    43aa:	80 68       	ori	r24, 0x80	; 128
    43ac:	86 bf       	out	0x36, r24	; 54

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    43ae:	06 b6       	in	r0, 0x36	; 54
    43b0:	07 fe       	sbrs	r0, 7
    43b2:	fd cf       	rjmp	.-6      	; 0x43ae <TWI_SlaveReadDataByte+0x28>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    43b4:	81 b1       	in	r24, 0x01	; 1
    43b6:	88 7f       	andi	r24, 0xF8	; 248
    43b8:	80 38       	cpi	r24, 0x80	; 128
    43ba:	11 f0       	breq	.+4      	; 0x43c0 <TWI_SlaveReadDataByte+0x3a>
    43bc:	98 e0       	ldi	r25, 0x08	; 8
    43be:	02 c0       	rjmp	.+4      	; 0x43c4 <TWI_SlaveReadDataByte+0x3e>
		Local_Error = SlaveReadByteErr;
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    43c0:	83 b1       	in	r24, 0x03	; 3
    43c2:	80 83       	st	Z, r24
	}

	return Local_Error;
}
    43c4:	89 2f       	mov	r24, r25
    43c6:	08 95       	ret

000043c8 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    43c8:	86 b7       	in	r24, 0x36	; 54
    43ca:	80 61       	ori	r24, 0x10	; 16
    43cc:	86 bf       	out	0x36, r24	; 54

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    43ce:	86 b7       	in	r24, 0x36	; 54
    43d0:	80 68       	ori	r24, 0x80	; 128
    43d2:	86 bf       	out	0x36, r24	; 54

}
    43d4:	08 95       	ret

000043d6 <TIMER0_voidInit>:
{
	/*Set Configurable Modes*/
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

		/*Initialize Waveform Generation Mode as Normal Mode*/
		CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    43d6:	83 b7       	in	r24, 0x33	; 51
    43d8:	8f 7b       	andi	r24, 0xBF	; 191
    43da:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    43dc:	83 b7       	in	r24, 0x33	; 51
    43de:	87 7f       	andi	r24, 0xF7	; 247
    43e0:	83 bf       	out	0x33, r24	; 51

		/*Set the Required Preload Value*/
		TCNT0 = TIMER0_PRELOAD_VAL ;
    43e2:	12 be       	out	0x32, r1	; 50

		/*Timer0 Overflow Interrupt Enable*/
		#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
			CLR_BIT(TIMSK , TIMSK_TOIE0) ;
		#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
			SET_BIT(TIMSK , TIMSK_TOIE0) ;
    43e4:	89 b7       	in	r24, 0x39	; 57
    43e6:	81 60       	ori	r24, 0x01	; 1
    43e8:	89 bf       	out	0x39, r24	; 57
	#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

	#endif

		/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    43ea:	83 b7       	in	r24, 0x33	; 51
    43ec:	88 7f       	andi	r24, 0xF8	; 248
    43ee:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    43f0:	83 b7       	in	r24, 0x33	; 51
    43f2:	84 60       	ori	r24, 0x04	; 4
    43f4:	83 bf       	out	0x33, r24	; 51
}
    43f6:	08 95       	ret

000043f8 <TIMER0_voidSetPreload>:

void TIMER0_voidSetPreload(u8 copy_u8Preload)
{
	TCNT0 = copy_u8Preload ;
    43f8:	82 bf       	out	0x32, r24	; 50
}
    43fa:	08 95       	ret

000043fc <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC(u8 copy_u8CTC)
{
	OCR0 = copy_u8CTC ;
    43fc:	8c bf       	out	0x3c, r24	; 60
}
    43fe:	08 95       	ret

00004400 <TIMER0_voidSetFastPWM>:
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
	#endif
}
    4400:	08 95       	ret

00004402 <TIMER0_voidSetPhaseCorrectPWM>:
{
	#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
		/*Set the Required CTC Value*/
		OCR0 = copy_u8PWM ;
	#endif
}
    4402:	08 95       	ret

00004404 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue(void)
{

	return TCNT0 ;
    4404:	82 b7       	in	r24, 0x32	; 50
}
    4406:	08 95       	ret

00004408 <TIMER1_voidInit>:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
		SET_BIT(TCCR1A,TCCR1A_WGM11);
		SET_BIT(TCCR1B,TCCR1B_WGM12);
		SET_BIT(TCCR1B,TCCR1B_WGM13);
	#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4408:	8f b5       	in	r24, 0x2f	; 47
    440a:	8e 7f       	andi	r24, 0xFE	; 254
    440c:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    440e:	8f b5       	in	r24, 0x2f	; 47
    4410:	82 60       	ori	r24, 0x02	; 2
    4412:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    4414:	8e b5       	in	r24, 0x2e	; 46
    4416:	88 60       	ori	r24, 0x08	; 8
    4418:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    441a:	8e b5       	in	r24, 0x2e	; 46
    441c:	80 61       	ori	r24, 0x10	; 16
    441e:	8e bd       	out	0x2e, r24	; 46
	#else
	#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
	#endif

	/*Set the require CTC Values*/
	OCR1AL = (u8)TIMER1_CTCA_VAL ;
    4420:	84 ef       	ldi	r24, 0xF4	; 244
    4422:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (TIMER1_CTCA_VAL>>8) ;
    4424:	8b b5       	in	r24, 0x2b	; 43
    4426:	81 60       	ori	r24, 0x01	; 1
    4428:	8b bd       	out	0x2b, r24	; 43

	OCR1BL = TIMER1_CTCB_VAL ;
    442a:	18 bc       	out	0x28, r1	; 40
	OCR1BH |= (TIMER1_CTCB_VAL>>8) ;
    442c:	89 b5       	in	r24, 0x29	; 41
    442e:	89 bd       	out	0x29, r24	; 41
		/*Set ICR1*/
	#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
		ICR1L = (u8)TIMER1_ICR1_VAL ;
    4430:	80 e2       	ldi	r24, 0x20	; 32
    4432:	86 bd       	out	0x26, r24	; 38
		ICR1H = (TIMER1_ICR1_VAL>>8) ;
    4434:	8e e4       	ldi	r24, 0x4E	; 78
    4436:	87 bd       	out	0x27, r24	; 39
		#if TIMER1_ICR_EDGE == RISING_EDGE
			SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    4438:	8e b5       	in	r24, 0x2e	; 46
    443a:	80 64       	ori	r24, 0x40	; 64
    443c:	8e bd       	out	0x2e, r24	; 46
		/*Set OCR1A mode*/
	#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
	#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    443e:	8f b5       	in	r24, 0x2f	; 47
    4440:	8f 7b       	andi	r24, 0xBF	; 191
    4442:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    4444:	8f b5       	in	r24, 0x2f	; 47
    4446:	80 68       	ori	r24, 0x80	; 128
    4448:	8f bd       	out	0x2f, r24	; 47
		/*Set OCR1B mode*/
	#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
		CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
	#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
		CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    444a:	8f b5       	in	r24, 0x2f	; 47
    444c:	8f 7e       	andi	r24, 0xEF	; 239
    444e:	8f bd       	out	0x2f, r24	; 47
		SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    4450:	8f b5       	in	r24, 0x2f	; 47
    4452:	80 62       	ori	r24, 0x20	; 32
    4454:	8f bd       	out	0x2f, r24	; 47
	#error "Wrong TIMER1_OCR1B_MODE Config"
	#endif

		/*Timer1 PWM Interrupt Enable*/
	#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    4456:	89 b7       	in	r24, 0x39	; 57
    4458:	8b 7f       	andi	r24, 0xFB	; 251
    445a:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
	#endif

	#if TIMER1_CTCA_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    445c:	89 b7       	in	r24, 0x39	; 57
    445e:	8f 7e       	andi	r24, 0xEF	; 239
    4460:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCA_INTERRUPT Config"
	#endif

	#if TIMER1_CTCB_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    4462:	89 b7       	in	r24, 0x39	; 57
    4464:	87 7f       	andi	r24, 0xF7	; 247
    4466:	89 bf       	out	0x39, r24	; 57
	#else
	#error "Wrong TIMER1_CTCB_INTERRUPT Config"
	#endif

	#if TIMER1_ICR_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    4468:	89 b7       	in	r24, 0x39	; 57
    446a:	8f 7d       	andi	r24, 0xDF	; 223
    446c:	89 bf       	out	0x39, r24	; 57
#else
#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    446e:	8e b5       	in	r24, 0x2e	; 46
    4470:	88 7f       	andi	r24, 0xF8	; 248
    4472:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    4474:	8e b5       	in	r24, 0x2e	; 46
    4476:	82 60       	ori	r24, 0x02	; 2
    4478:	8e bd       	out	0x2e, r24	; 46
}
    447a:	08 95       	ret

0000447c <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload(u16 copy_u8Preload)
{
	TCNT1L = copy_u8Preload ;
    447c:	8c bd       	out	0x2c, r24	; 44
	TCNT1H |= (copy_u8Preload>>8) ;
    447e:	8d b5       	in	r24, 0x2d	; 45
    4480:	89 2b       	or	r24, r25
    4482:	8d bd       	out	0x2d, r24	; 45
}
    4484:	08 95       	ret

00004486 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA(u16 copy_u8CTCA)
{
	OCR1AL = copy_u8CTCA ;
    4486:	8a bd       	out	0x2a, r24	; 42
	OCR1AH |= (copy_u8CTCA>>8) ;
    4488:	8b b5       	in	r24, 0x2b	; 43
    448a:	89 2b       	or	r24, r25
    448c:	8b bd       	out	0x2b, r24	; 43
}
    448e:	08 95       	ret

00004490 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB(u16 copy_u8CTCB)
{
	OCR1BL = copy_u8CTCB ;
    4490:	88 bd       	out	0x28, r24	; 40
	OCR1BH |= (copy_u8CTCB>>8) ;
    4492:	89 b5       	in	r24, 0x29	; 41
    4494:	89 2b       	or	r24, r25
    4496:	89 bd       	out	0x29, r24	; 41
}
    4498:	08 95       	ret

0000449a <TIMER1_u8GetTimerCounterValue>:

u16 TIMER1_u8GetTimerCounterValue(void)
{
	u16 Local_Var;
	Local_Var = TCNT1L;
    449a:	2c b5       	in	r18, 0x2c	; 44
    449c:	30 e0       	ldi	r19, 0x00	; 0
	Local_Var |= (TCNT1H<<8);
    449e:	4d b5       	in	r20, 0x2d	; 45
    44a0:	94 2f       	mov	r25, r20
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	28 2b       	or	r18, r24
    44a6:	39 2b       	or	r19, r25

	return Local_Var;
}
    44a8:	c9 01       	movw	r24, r18
    44aa:	08 95       	ret

000044ac <TIMER2_voidInit>:
	OCR2 = TIMER2_CTC_VAL ;

#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

	/*Initialize Waveform Generation Mode as CTC Mode*/
	CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    44ac:	85 b5       	in	r24, 0x25	; 37
    44ae:	8f 7b       	andi	r24, 0xBF	; 191
    44b0:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2 , TCCR2_WGM21) ;
    44b2:	85 b5       	in	r24, 0x25	; 37
    44b4:	88 60       	ori	r24, 0x08	; 8
    44b6:	85 bd       	out	0x25, r24	; 37

	/*Set the Required CTC Value*/
	OCR2 = TIMER2_CTC_VAL ;
    44b8:	8f ef       	ldi	r24, 0xFF	; 255
    44ba:	83 bd       	out	0x23, r24	; 35

		/*Set CTC PWM MODE*/
	#if TIMER2_OC2_MODE == TIMER_OC_DISCONNECTED
		CLR_BIT(TCCR2 , TCCR2_COM20) ;
    44bc:	85 b5       	in	r24, 0x25	; 37
    44be:	8f 7e       	andi	r24, 0xEF	; 239
    44c0:	85 bd       	out	0x25, r24	; 37
		CLR_BIT(TCCR2 , TCCR2_COM21) ;
    44c2:	85 b5       	in	r24, 0x25	; 37
    44c4:	8f 7d       	andi	r24, 0xDF	; 223
    44c6:	85 bd       	out	0x25, r24	; 37

		/*Timer2 Compare Match Interrupt Enable*/
	#if TIMER2_CTC_INTERRUPT == DISABLE
		CLR_BIT(TIMSK , TIMSK_OCIE2) ;
	#elif TIMER2_CTC_INTERRUPT == ENABLE
		SET_BIT(TIMSK , TIMSK_OCIE2) ;
    44c8:	89 b7       	in	r24, 0x39	; 57
    44ca:	80 68       	ori	r24, 0x80	; 128
    44cc:	89 bf       	out	0x39, r24	; 57
#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    44ce:	85 b5       	in	r24, 0x25	; 37
    44d0:	88 7f       	andi	r24, 0xF8	; 248
    44d2:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    44d4:	85 b5       	in	r24, 0x25	; 37
    44d6:	87 60       	ori	r24, 0x07	; 7
    44d8:	85 bd       	out	0x25, r24	; 37
}
    44da:	08 95       	ret

000044dc <TIMER2_voidSetPreload>:

void TIMER2_voidSetPreload(u8 copy_u8Preload)
{
	TCNT2 = copy_u8Preload ;
    44dc:	84 bd       	out	0x24, r24	; 36
}
    44de:	08 95       	ret

000044e0 <TIMER2_voidSetCTC>:
void TIMER2_voidSetCTC(u8 copy_u8CTC)
{
	OCR2 = copy_u8CTC ;
    44e0:	83 bd       	out	0x23, r24	; 35
}
    44e2:	08 95       	ret

000044e4 <TIMER2_voidSetFastPWM>:
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_FAST_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    44e4:	08 95       	ret

000044e6 <TIMER2_voidSetPhaseCorrectPWM>:
{
#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_PWM_MODE
	/*Set the Required CTC Value*/
	OCR2 = copy_u8PWM ;
#endif
}
    44e6:	08 95       	ret

000044e8 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue(void)
{
	return TCNT2 ;
    44e8:	84 b5       	in	r24, 0x24	; 36
}
    44ea:	08 95       	ret

000044ec <TIMER_voidICUInitEnable>:


void TIMER_voidICUInitEnable(void)
{
	#if TIMER_ICP_INIT_STATE == TIMER_ICP_RISING_EDGE
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    44ec:	8e b5       	in	r24, 0x2e	; 46
    44ee:	80 64       	ori	r24, 0x40	; 64
    44f0:	8e bd       	out	0x2e, r24	; 46
	#else
		#error "Wrong TIMER_ICP_INIT_STATE Config"
	#endif

	/* Enable interrupt of ICU*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    44f2:	89 b7       	in	r24, 0x39	; 57
    44f4:	80 62       	ori	r24, 0x20	; 32
    44f6:	89 bf       	out	0x39, r24	; 57

}
    44f8:	08 95       	ret

000044fa <TIMER_voidICUSetTriggerEdge>:

u8 TIMER_voidICUSetTriggerEdge(u8 copy_u8Edge)
{
	u8 Local_u8ErrorStatus = E_OK;
	if(copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    44fa:	81 30       	cpi	r24, 0x01	; 1
    44fc:	11 f0       	breq	.+4      	; 0x4502 <TIMER_voidICUSetTriggerEdge+0x8>
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	08 95       	ret
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4502:	8e b5       	in	r24, 0x2e	; 46
    4504:	80 64       	ori	r24, 0x40	; 64
    4506:	8e bd       	out	0x2e, r24	; 46
    4508:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorStatus = E_NOK;
	}
	return Local_u8ErrorStatus;

}
    450a:	08 95       	ret

0000450c <TIMER_voidICUEnableInterrupt>:

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    450c:	89 b7       	in	r24, 0x39	; 57
    450e:	80 62       	ori	r24, 0x20	; 32
    4510:	89 bf       	out	0x39, r24	; 57
}
    4512:	08 95       	ret

00004514 <TIMER_voidICUDisableInterrupt>:

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    4514:	89 b7       	in	r24, 0x39	; 57
    4516:	8f 7d       	andi	r24, 0xDF	; 223
    4518:	89 bf       	out	0x39, r24	; 57
}
    451a:	08 95       	ret

0000451c <TIMER_u16GetICR>:

u16 TIMER_u16GetICR(void)
{
	u16 Local_u16ICRValue;
	Local_u16ICRValue = ICR1L;
    451c:	26 b5       	in	r18, 0x26	; 38
    451e:	30 e0       	ldi	r19, 0x00	; 0
	Local_u16ICRValue |= (ICR1H<<8);
    4520:	47 b5       	in	r20, 0x27	; 39
    4522:	94 2f       	mov	r25, r20
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	28 2b       	or	r18, r24
    4528:	39 2b       	or	r19, r25


	return Local_u16ICRValue;

}
    452a:	c9 01       	movw	r24, r18
    452c:	08 95       	ret

0000452e <TIMER_voidWDTSleep>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    452e:	81 b5       	in	r24, 0x21	; 33
    4530:	88 7f       	andi	r24, 0xF8	; 248
    4532:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    4534:	81 b5       	in	r24, 0x21	; 33
    4536:	86 60       	ori	r24, 0x06	; 6
    4538:	81 bd       	out	0x21, r24	; 33
}
    453a:	08 95       	ret

0000453c <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    453c:	81 b5       	in	r24, 0x21	; 33
    453e:	88 60       	ori	r24, 0x08	; 8
    4540:	81 bd       	out	0x21, r24	; 33
}
    4542:	08 95       	ret

00004544 <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    4544:	81 b5       	in	r24, 0x21	; 33
    4546:	88 61       	ori	r24, 0x18	; 24
    4548:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    454a:	11 bc       	out	0x21, r1	; 33
}
    454c:	08 95       	ret

0000454e <TIMER_u8SetCallBack>:

/*****************************************************************************************************/
u8 TIMER_u8SetCallBack(void(*copy_ptfCallBackFunc)(void),u8 copy_u8VectorID)
{
	u8 Local_u8ErrorState = E_OK;
	if((copy_u8VectorID<=TIMER0_OVF_VECTOR_ID) && (copy_u8VectorID>=TIMER2_CTC_VECTOR_ID))
    454e:	64 50       	subi	r22, 0x04	; 4
    4550:	68 30       	cpi	r22, 0x08	; 8
    4552:	10 f0       	brcs	.+4      	; 0x4558 <TIMER_u8SetCallBack+0xa>
    4554:	83 e0       	ldi	r24, 0x03	; 3
    4556:	08 95       	ret
	{
		u8 Local_u8ArrayIndex = copy_u8VectorID - CBF_OFFSET ;
		if(copy_ptfCallBackFunc!= NULL)
    4558:	00 97       	sbiw	r24, 0x00	; 0
    455a:	11 f4       	brne	.+4      	; 0x4560 <TIMER_u8SetCallBack+0x12>
    455c:	82 e0       	ldi	r24, 0x02	; 2
    455e:	08 95       	ret
		{
			TIMERS_ptfCallBackFuncArr[Local_u8ArrayIndex]= copy_ptfCallBackFunc;
    4560:	e6 2f       	mov	r30, r22
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	ee 0f       	add	r30, r30
    4566:	ff 1f       	adc	r31, r31
    4568:	e2 50       	subi	r30, 0x02	; 2
    456a:	fe 4f       	sbci	r31, 0xFE	; 254
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
    4570:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = E_NOK_OUT_OF_RANGE;
	}

	return Local_u8ErrorState;
}
    4572:	08 95       	ret

00004574 <__vector_11>:


/***************TIMER0 OVF************************/
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    4574:	1f 92       	push	r1
    4576:	0f 92       	push	r0
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	0f 92       	push	r0
    457c:	11 24       	eor	r1, r1
    457e:	2f 93       	push	r18
    4580:	3f 93       	push	r19
    4582:	4f 93       	push	r20
    4584:	5f 93       	push	r21
    4586:	6f 93       	push	r22
    4588:	7f 93       	push	r23
    458a:	8f 93       	push	r24
    458c:	9f 93       	push	r25
    458e:	af 93       	push	r26
    4590:	bf 93       	push	r27
    4592:	ef 93       	push	r30
    4594:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4596:	e0 91 0c 02 	lds	r30, 0x020C
    459a:	f0 91 0d 02 	lds	r31, 0x020D
    459e:	30 97       	sbiw	r30, 0x00	; 0
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <__vector_11+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_OVF_VECTOR_ID - CBF_OFFSET]();
    45a2:	09 95       	icall
	}
}
    45a4:	ff 91       	pop	r31
    45a6:	ef 91       	pop	r30
    45a8:	bf 91       	pop	r27
    45aa:	af 91       	pop	r26
    45ac:	9f 91       	pop	r25
    45ae:	8f 91       	pop	r24
    45b0:	7f 91       	pop	r23
    45b2:	6f 91       	pop	r22
    45b4:	5f 91       	pop	r21
    45b6:	4f 91       	pop	r20
    45b8:	3f 91       	pop	r19
    45ba:	2f 91       	pop	r18
    45bc:	0f 90       	pop	r0
    45be:	0f be       	out	0x3f, r0	; 63
    45c0:	0f 90       	pop	r0
    45c2:	1f 90       	pop	r1
    45c4:	18 95       	reti

000045c6 <__vector_10>:


/***************TIMER0 CTC************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    45c6:	1f 92       	push	r1
    45c8:	0f 92       	push	r0
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	0f 92       	push	r0
    45ce:	11 24       	eor	r1, r1
    45d0:	2f 93       	push	r18
    45d2:	3f 93       	push	r19
    45d4:	4f 93       	push	r20
    45d6:	5f 93       	push	r21
    45d8:	6f 93       	push	r22
    45da:	7f 93       	push	r23
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    45e8:	e0 91 0a 02 	lds	r30, 0x020A
    45ec:	f0 91 0b 02 	lds	r31, 0x020B
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <__vector_10+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER0_CTC_VECTOR_ID - CBF_OFFSET]();
    45f4:	09 95       	icall
	}
}
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	bf 91       	pop	r27
    45fc:	af 91       	pop	r26
    45fe:	9f 91       	pop	r25
    4600:	8f 91       	pop	r24
    4602:	7f 91       	pop	r23
    4604:	6f 91       	pop	r22
    4606:	5f 91       	pop	r21
    4608:	4f 91       	pop	r20
    460a:	3f 91       	pop	r19
    460c:	2f 91       	pop	r18
    460e:	0f 90       	pop	r0
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	0f 90       	pop	r0
    4614:	1f 90       	pop	r1
    4616:	18 95       	reti

00004618 <__vector_9>:


/***************TIMER1 OVF************************/
void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
    4618:	1f 92       	push	r1
    461a:	0f 92       	push	r0
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	0f 92       	push	r0
    4620:	11 24       	eor	r1, r1
    4622:	2f 93       	push	r18
    4624:	3f 93       	push	r19
    4626:	4f 93       	push	r20
    4628:	5f 93       	push	r21
    462a:	6f 93       	push	r22
    462c:	7f 93       	push	r23
    462e:	8f 93       	push	r24
    4630:	9f 93       	push	r25
    4632:	af 93       	push	r26
    4634:	bf 93       	push	r27
    4636:	ef 93       	push	r30
    4638:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    463a:	e0 91 08 02 	lds	r30, 0x0208
    463e:	f0 91 09 02 	lds	r31, 0x0209
    4642:	30 97       	sbiw	r30, 0x00	; 0
    4644:	09 f0       	breq	.+2      	; 0x4648 <__vector_9+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_OVF_VECTOR_ID - CBF_OFFSET]();
    4646:	09 95       	icall
	}
}
    4648:	ff 91       	pop	r31
    464a:	ef 91       	pop	r30
    464c:	bf 91       	pop	r27
    464e:	af 91       	pop	r26
    4650:	9f 91       	pop	r25
    4652:	8f 91       	pop	r24
    4654:	7f 91       	pop	r23
    4656:	6f 91       	pop	r22
    4658:	5f 91       	pop	r21
    465a:	4f 91       	pop	r20
    465c:	3f 91       	pop	r19
    465e:	2f 91       	pop	r18
    4660:	0f 90       	pop	r0
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	0f 90       	pop	r0
    4666:	1f 90       	pop	r1
    4668:	18 95       	reti

0000466a <__vector_8>:


/***************TIMER1 CTCB***********************/
void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
    466a:	1f 92       	push	r1
    466c:	0f 92       	push	r0
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	0f 92       	push	r0
    4672:	11 24       	eor	r1, r1
    4674:	2f 93       	push	r18
    4676:	3f 93       	push	r19
    4678:	4f 93       	push	r20
    467a:	5f 93       	push	r21
    467c:	6f 93       	push	r22
    467e:	7f 93       	push	r23
    4680:	8f 93       	push	r24
    4682:	9f 93       	push	r25
    4684:	af 93       	push	r26
    4686:	bf 93       	push	r27
    4688:	ef 93       	push	r30
    468a:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET] != NULL)
    468c:	e0 91 06 02 	lds	r30, 0x0206
    4690:	f0 91 07 02 	lds	r31, 0x0207
    4694:	30 97       	sbiw	r30, 0x00	; 0
    4696:	09 f0       	breq	.+2      	; 0x469a <__vector_8+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_CTCB_VECTOR_ID - CBF_OFFSET]();
    4698:	09 95       	icall
	}
}
    469a:	ff 91       	pop	r31
    469c:	ef 91       	pop	r30
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	0f 90       	pop	r0
    46b8:	1f 90       	pop	r1
    46ba:	18 95       	reti

000046bc <__vector_6>:


/***************TIMER1 ICU************************/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    46bc:	1f 92       	push	r1
    46be:	0f 92       	push	r0
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	0f 92       	push	r0
    46c4:	11 24       	eor	r1, r1
    46c6:	2f 93       	push	r18
    46c8:	3f 93       	push	r19
    46ca:	4f 93       	push	r20
    46cc:	5f 93       	push	r21
    46ce:	6f 93       	push	r22
    46d0:	7f 93       	push	r23
    46d2:	8f 93       	push	r24
    46d4:	9f 93       	push	r25
    46d6:	af 93       	push	r26
    46d8:	bf 93       	push	r27
    46da:	ef 93       	push	r30
    46dc:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET] != NULL)
    46de:	e0 91 02 02 	lds	r30, 0x0202
    46e2:	f0 91 03 02 	lds	r31, 0x0203
    46e6:	30 97       	sbiw	r30, 0x00	; 0
    46e8:	09 f0       	breq	.+2      	; 0x46ec <__vector_6+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER1_ICU_VECTOR_ID - CBF_OFFSET]();
    46ea:	09 95       	icall
	}
}
    46ec:	ff 91       	pop	r31
    46ee:	ef 91       	pop	r30
    46f0:	bf 91       	pop	r27
    46f2:	af 91       	pop	r26
    46f4:	9f 91       	pop	r25
    46f6:	8f 91       	pop	r24
    46f8:	7f 91       	pop	r23
    46fa:	6f 91       	pop	r22
    46fc:	5f 91       	pop	r21
    46fe:	4f 91       	pop	r20
    4700:	3f 91       	pop	r19
    4702:	2f 91       	pop	r18
    4704:	0f 90       	pop	r0
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	0f 90       	pop	r0
    470a:	1f 90       	pop	r1
    470c:	18 95       	reti

0000470e <__vector_5>:

/***************TIMER2 OVF************************/
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    470e:	1f 92       	push	r1
    4710:	0f 92       	push	r0
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	0f 92       	push	r0
    4716:	11 24       	eor	r1, r1
    4718:	2f 93       	push	r18
    471a:	3f 93       	push	r19
    471c:	4f 93       	push	r20
    471e:	5f 93       	push	r21
    4720:	6f 93       	push	r22
    4722:	7f 93       	push	r23
    4724:	8f 93       	push	r24
    4726:	9f 93       	push	r25
    4728:	af 93       	push	r26
    472a:	bf 93       	push	r27
    472c:	ef 93       	push	r30
    472e:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET] != NULL)
    4730:	e0 91 00 02 	lds	r30, 0x0200
    4734:	f0 91 01 02 	lds	r31, 0x0201
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	09 f0       	breq	.+2      	; 0x473e <__vector_5+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_OVF_VECTOR_ID - CBF_OFFSET]();
    473c:	09 95       	icall
	}
}
    473e:	ff 91       	pop	r31
    4740:	ef 91       	pop	r30
    4742:	bf 91       	pop	r27
    4744:	af 91       	pop	r26
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	7f 91       	pop	r23
    474c:	6f 91       	pop	r22
    474e:	5f 91       	pop	r21
    4750:	4f 91       	pop	r20
    4752:	3f 91       	pop	r19
    4754:	2f 91       	pop	r18
    4756:	0f 90       	pop	r0
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	0f 90       	pop	r0
    475c:	1f 90       	pop	r1
    475e:	18 95       	reti

00004760 <__vector_4>:


/***************TIMER2 CTC************************/
void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    4760:	1f 92       	push	r1
    4762:	0f 92       	push	r0
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	0f 92       	push	r0
    4768:	11 24       	eor	r1, r1
    476a:	2f 93       	push	r18
    476c:	3f 93       	push	r19
    476e:	4f 93       	push	r20
    4770:	5f 93       	push	r21
    4772:	6f 93       	push	r22
    4774:	7f 93       	push	r23
    4776:	8f 93       	push	r24
    4778:	9f 93       	push	r25
    477a:	af 93       	push	r26
    477c:	bf 93       	push	r27
    477e:	ef 93       	push	r30
    4780:	ff 93       	push	r31
	if(TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET] != NULL)
    4782:	e0 91 fe 01 	lds	r30, 0x01FE
    4786:	f0 91 ff 01 	lds	r31, 0x01FF
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	09 f0       	breq	.+2      	; 0x4790 <__vector_4+0x30>
	{
		TIMERS_ptfCallBackFuncArr[TIMER2_CTC_VECTOR_ID - CBF_OFFSET]();
    478e:	09 95       	icall
	}
}
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	bf 91       	pop	r27
    4796:	af 91       	pop	r26
    4798:	9f 91       	pop	r25
    479a:	8f 91       	pop	r24
    479c:	7f 91       	pop	r23
    479e:	6f 91       	pop	r22
    47a0:	5f 91       	pop	r21
    47a2:	4f 91       	pop	r20
    47a4:	3f 91       	pop	r19
    47a6:	2f 91       	pop	r18
    47a8:	0f 90       	pop	r0
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	0f 90       	pop	r0
    47ae:	1f 90       	pop	r1
    47b0:	18 95       	reti

000047b2 <Set_SleepMode>:
#include "POWERMANAGEMENT_Private.h"

void Set_SleepMode(void)
{
	#if POWER_MANAGEMENT_MODE == IDLE_MODE
			CLR_BIT(MCUCR,SM0);
    47b2:	85 b7       	in	r24, 0x35	; 53
    47b4:	8f 7e       	andi	r24, 0xEF	; 239
    47b6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    47b8:	85 b7       	in	r24, 0x35	; 53
    47ba:	8f 7d       	andi	r24, 0xDF	; 223
    47bc:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    47be:	85 b7       	in	r24, 0x35	; 53
    47c0:	8f 7b       	andi	r24, 0xBF	; 191
    47c2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
	#else
		#error "wrong POWER_MANAGEMENT_MODE Configuration Parameter"
	#endif

}
    47c4:	08 95       	ret

000047c6 <Change_SleepMode>:


void Change_SleepMode(u8 SleepMode)
{
	switch(SleepMode)
    47c6:	83 30       	cpi	r24, 0x03	; 3
    47c8:	e9 f0       	breq	.+58     	; 0x4804 <Change_SleepMode+0x3e>
    47ca:	84 30       	cpi	r24, 0x04	; 4
    47cc:	28 f4       	brcc	.+10     	; 0x47d8 <Change_SleepMode+0x12>
    47ce:	81 30       	cpi	r24, 0x01	; 1
    47d0:	69 f0       	breq	.+26     	; 0x47ec <Change_SleepMode+0x26>
    47d2:	82 30       	cpi	r24, 0x02	; 2
    47d4:	a0 f4       	brcc	.+40     	; 0x47fe <Change_SleepMode+0x38>
    47d6:	07 c0       	rjmp	.+14     	; 0x47e6 <Change_SleepMode+0x20>
    47d8:	85 30       	cpi	r24, 0x05	; 5
    47da:	01 f1       	breq	.+64     	; 0x481c <Change_SleepMode+0x56>
    47dc:	85 30       	cpi	r24, 0x05	; 5
    47de:	c0 f0       	brcs	.+48     	; 0x4810 <Change_SleepMode+0x4a>
    47e0:	86 30       	cpi	r24, 0x06	; 6
    47e2:	79 f5       	brne	.+94     	; 0x4842 <Change_SleepMode+0x7c>
    47e4:	25 c0       	rjmp	.+74     	; 0x4830 <Change_SleepMode+0x6a>
		{
			case IDLE_MODE:
			CLR_BIT(MCUCR,SM0);
    47e6:	85 b7       	in	r24, 0x35	; 53
    47e8:	8f 7e       	andi	r24, 0xEF	; 239
    47ea:	02 c0       	rjmp	.+4      	; 0x47f0 <Change_SleepMode+0x2a>
			CLR_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case ADC_NR_MODE:
			SET_BIT(MCUCR,SM0);
    47ec:	85 b7       	in	r24, 0x35	; 53
    47ee:	80 61       	ori	r24, 0x10	; 16
    47f0:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    47f2:	85 b7       	in	r24, 0x35	; 53
    47f4:	8f 7d       	andi	r24, 0xDF	; 223
    47f6:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM2);
    47f8:	85 b7       	in	r24, 0x35	; 53
    47fa:	8f 7b       	andi	r24, 0xBF	; 191
    47fc:	17 c0       	rjmp	.+46     	; 0x482c <Change_SleepMode+0x66>
			break;
			case PWR_DOWN_MODE:
			CLR_BIT(MCUCR,SM0);
    47fe:	85 b7       	in	r24, 0x35	; 53
    4800:	8f 7e       	andi	r24, 0xEF	; 239
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <Change_SleepMode+0x42>
			SET_BIT(MCUCR,SM1);
			CLR_BIT(MCUCR,SM2);
			break;
			case PWR_SAVE_MODE:
			SET_BIT(MCUCR,SM0);
    4804:	85 b7       	in	r24, 0x35	; 53
    4806:	80 61       	ori	r24, 0x10	; 16
    4808:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    480a:	85 b7       	in	r24, 0x35	; 53
    480c:	80 62       	ori	r24, 0x20	; 32
    480e:	f3 cf       	rjmp	.-26     	; 0x47f6 <Change_SleepMode+0x30>
			CLR_BIT(MCUCR,SM2);
			break;
			case RESERVED_MODE:
			CLR_BIT(MCUCR,SM0);
    4810:	85 b7       	in	r24, 0x35	; 53
    4812:	8f 7e       	andi	r24, 0xEF	; 239
    4814:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,SM1);
    4816:	85 b7       	in	r24, 0x35	; 53
    4818:	8f 7d       	andi	r24, 0xDF	; 223
    481a:	05 c0       	rjmp	.+10     	; 0x4826 <Change_SleepMode+0x60>
			SET_BIT(MCUCR,SM2);
			break;
			case STANDBY_MODE:
			CLR_BIT(MCUCR,SM0);
    481c:	85 b7       	in	r24, 0x35	; 53
    481e:	8f 7e       	andi	r24, 0xEF	; 239
    4820:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    4822:	85 b7       	in	r24, 0x35	; 53
    4824:	80 62       	ori	r24, 0x20	; 32
    4826:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    4828:	85 b7       	in	r24, 0x35	; 53
    482a:	80 64       	ori	r24, 0x40	; 64
    482c:	85 bf       	out	0x35, r24	; 53
    482e:	08 95       	ret
			break;
			case EXT_STANDBY_MODE:
			SET_BIT(MCUCR,SM0);
    4830:	85 b7       	in	r24, 0x35	; 53
    4832:	80 61       	ori	r24, 0x10	; 16
    4834:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM1);
    4836:	85 b7       	in	r24, 0x35	; 53
    4838:	80 62       	ori	r24, 0x20	; 32
    483a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,SM2);
    483c:	85 b7       	in	r24, 0x35	; 53
    483e:	80 64       	ori	r24, 0x40	; 64
    4840:	85 bf       	out	0x35, r24	; 53
    4842:	08 95       	ret

00004844 <CPU_SleepEnable>:
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    4844:	85 b7       	in	r24, 0x35	; 53
    4846:	80 68       	ori	r24, 0x80	; 128
    4848:	85 bf       	out	0x35, r24	; 53
}
    484a:	08 95       	ret

0000484c <CPU_SleepDisable>:

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    484c:	85 b7       	in	r24, 0x35	; 53
    484e:	8f 77       	andi	r24, 0x7F	; 127
    4850:	85 bf       	out	0x35, r24	; 53
}
    4852:	08 95       	ret

00004854 <Sleep_CPU>:

void Sleep_CPU(void)
{
	do
	{
		sleep();
    4854:	88 95       	sleep
	} while (0);
}
    4856:	08 95       	ret

00004858 <CPU_Sleep>:

void CPU_Sleep(void)
{
	Set_SleepMode();
    4858:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <Set_SleepMode>
	cli();
    485c:	f8 94       	cli
			break;
		}
}
void CPU_SleepEnable(void)
{
	SET_BIT(MCUCR,SE);
    485e:	85 b7       	in	r24, 0x35	; 53
    4860:	80 68       	ori	r24, 0x80	; 128
    4862:	85 bf       	out	0x35, r24	; 53
void CPU_Sleep(void)
{
	Set_SleepMode();
	cli();
	CPU_SleepEnable();
	sei();
    4864:	78 94       	sei

void Sleep_CPU(void)
{
	do
	{
		sleep();
    4866:	88 95       	sleep
	SET_BIT(MCUCR,SE);
}

void CPU_SleepDisable(void)
{
	CLR_BIT(MCUCR,SE);
    4868:	85 b7       	in	r24, 0x35	; 53
    486a:	8f 77       	andi	r24, 0x7F	; 127
    486c:	85 bf       	out	0x35, r24	; 53
	cli();
	CPU_SleepEnable();
	sei();
	Sleep_CPU();
	CPU_SleepDisable();
}
    486e:	08 95       	ret

00004870 <GIE_voidEnable>:
#include "GIE_Interface.h"


void GIE_voidEnable(void)
{
	SET_BIT(SREG,SREG_I_BIT);
    4870:	8f b7       	in	r24, 0x3f	; 63
    4872:	80 68       	ori	r24, 0x80	; 128
    4874:	8f bf       	out	0x3f, r24	; 63
}
    4876:	08 95       	ret

00004878 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
	CLR_BIT(SREG,SREG_I_BIT);
    4878:	8f b7       	in	r24, 0x3f	; 63
    487a:	8f 77       	andi	r24, 0x7F	; 127
    487c:	8f bf       	out	0x3f, r24	; 63
}
    487e:	08 95       	ret

00004880 <DIO_u8SetPortValue>:

/********************************** FUNCTION Implementation ****************************************/
ReturnType_State_t DIO_u8SetPortValue(u8 copy_u8Port , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    4880:	81 30       	cpi	r24, 0x01	; 1
    4882:	51 f0       	breq	.+20     	; 0x4898 <DIO_u8SetPortValue+0x18>
    4884:	81 30       	cpi	r24, 0x01	; 1
    4886:	30 f0       	brcs	.+12     	; 0x4894 <DIO_u8SetPortValue+0x14>
    4888:	82 30       	cpi	r24, 0x02	; 2
    488a:	41 f0       	breq	.+16     	; 0x489c <DIO_u8SetPortValue+0x1c>
    488c:	83 30       	cpi	r24, 0x03	; 3
    488e:	49 f0       	breq	.+18     	; 0x48a2 <DIO_u8SetPortValue+0x22>
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	08 95       	ret
	case DIO_PORTA:
		PORTA = copy_u8Value;
    4894:	6b bb       	out	0x1b, r22	; 27
    4896:	03 c0       	rjmp	.+6      	; 0x489e <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTB:
		PORTB = copy_u8Value;
    4898:	68 bb       	out	0x18, r22	; 24
    489a:	01 c0       	rjmp	.+2      	; 0x489e <DIO_u8SetPortValue+0x1e>
	break;
	case DIO_PORTC:
		PORTC = copy_u8Value;
    489c:	65 bb       	out	0x15, r22	; 21
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	08 95       	ret
	break;
	case DIO_PORTD:
		PORTD = copy_u8Value;
    48a2:	62 bb       	out	0x12, r22	; 18
    48a4:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    48a6:	08 95       	ret

000048a8 <DIO_u8SetPortDirection>:

ReturnType_State_t DIO_u8SetPortDirection(u8 copy_u8Port , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;
	switch(copy_u8Port){
    48a8:	81 30       	cpi	r24, 0x01	; 1
    48aa:	51 f0       	breq	.+20     	; 0x48c0 <DIO_u8SetPortDirection+0x18>
    48ac:	81 30       	cpi	r24, 0x01	; 1
    48ae:	30 f0       	brcs	.+12     	; 0x48bc <DIO_u8SetPortDirection+0x14>
    48b0:	82 30       	cpi	r24, 0x02	; 2
    48b2:	41 f0       	breq	.+16     	; 0x48c4 <DIO_u8SetPortDirection+0x1c>
    48b4:	83 30       	cpi	r24, 0x03	; 3
    48b6:	49 f0       	breq	.+18     	; 0x48ca <DIO_u8SetPortDirection+0x22>
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	08 95       	ret
	case DIO_PORTA:
		DDRA = copy_u8Direction;
    48bc:	6a bb       	out	0x1a, r22	; 26
    48be:	03 c0       	rjmp	.+6      	; 0x48c6 <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTB:
		DDRB = copy_u8Direction;
    48c0:	67 bb       	out	0x17, r22	; 23
    48c2:	01 c0       	rjmp	.+2      	; 0x48c6 <DIO_u8SetPortDirection+0x1e>
	break;
	case DIO_PORTC:
		DDRC = copy_u8Direction;
    48c4:	64 bb       	out	0x14, r22	; 20
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	08 95       	ret
	break;
	case DIO_PORTD:
		DDRD = copy_u8Direction;
    48ca:	61 bb       	out	0x11, r22	; 17
    48cc:	80 e0       	ldi	r24, 0x00	; 0
	default:
		Local_u8State = E_NOK;
		break;
	}
	return Local_u8State;
}
    48ce:	08 95       	ret

000048d0 <DIO_u8GetPortValue>:

ReturnType_State_t DIO_u8GetPortValue(u8 copy_u8Port , u8 *copy_u8Variable)
{
    48d0:	fb 01       	movw	r30, r22
	ReturnType_State_t Local_u8State = E_OK;
	if(copy_u8Variable != NULL)
    48d2:	61 15       	cp	r22, r1
    48d4:	71 05       	cpc	r23, r1
    48d6:	11 f4       	brne	.+4      	; 0x48dc <DIO_u8GetPortValue+0xc>
    48d8:	82 e0       	ldi	r24, 0x02	; 2
    48da:	08 95       	ret
	{
		switch(copy_u8Port){
    48dc:	81 30       	cpi	r24, 0x01	; 1
    48de:	51 f0       	breq	.+20     	; 0x48f4 <DIO_u8GetPortValue+0x24>
    48e0:	81 30       	cpi	r24, 0x01	; 1
    48e2:	30 f0       	brcs	.+12     	; 0x48f0 <DIO_u8GetPortValue+0x20>
    48e4:	82 30       	cpi	r24, 0x02	; 2
    48e6:	41 f0       	breq	.+16     	; 0x48f8 <DIO_u8GetPortValue+0x28>
    48e8:	83 30       	cpi	r24, 0x03	; 3
    48ea:	51 f0       	breq	.+20     	; 0x4900 <DIO_u8GetPortValue+0x30>
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	08 95       	ret
		case DIO_PORTA:
			*copy_u8Variable = PINA;
    48f0:	89 b3       	in	r24, 0x19	; 25
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTB:
			*copy_u8Variable = PINB;
    48f4:	86 b3       	in	r24, 0x16	; 22
    48f6:	01 c0       	rjmp	.+2      	; 0x48fa <DIO_u8GetPortValue+0x2a>
		break;
		case DIO_PORTC:
			*copy_u8Variable = PINC;
    48f8:	83 b3       	in	r24, 0x13	; 19
    48fa:	80 83       	st	Z, r24
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	08 95       	ret
		break;
		case DIO_PORTD:
			*copy_u8Variable = PIND;
    4900:	80 b3       	in	r24, 0x10	; 16
    4902:	80 83       	st	Z, r24
    4904:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		Local_u8State = E_NOK_NULL_PTR;
	}
	return Local_u8State;
}
    4906:	08 95       	ret

00004908 <DIO_u8SetPinValue>:

ReturnType_State_t DIO_u8SetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Value)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4908:	68 30       	cpi	r22, 0x08	; 8
    490a:	08 f0       	brcs	.+2      	; 0x490e <DIO_u8SetPinValue+0x6>
    490c:	74 c0       	rjmp	.+232    	; 0x49f6 <DIO_u8SetPinValue+0xee>
	{
		if(copy_u8Value == DIO_PIN_LOW)
    490e:	44 23       	and	r20, r20
    4910:	d1 f5       	brne	.+116    	; 0x4986 <DIO_u8SetPinValue+0x7e>
		{
			switch(copy_u8Port)
    4912:	81 30       	cpi	r24, 0x01	; 1
    4914:	a1 f0       	breq	.+40     	; 0x493e <DIO_u8SetPinValue+0x36>
    4916:	81 30       	cpi	r24, 0x01	; 1
    4918:	30 f0       	brcs	.+12     	; 0x4926 <DIO_u8SetPinValue+0x1e>
    491a:	82 30       	cpi	r24, 0x02	; 2
    491c:	e1 f0       	breq	.+56     	; 0x4956 <DIO_u8SetPinValue+0x4e>
    491e:	83 30       	cpi	r24, 0x03	; 3
    4920:	09 f0       	breq	.+2      	; 0x4924 <DIO_u8SetPinValue+0x1c>
    4922:	69 c0       	rjmp	.+210    	; 0x49f6 <DIO_u8SetPinValue+0xee>
    4924:	24 c0       	rjmp	.+72     	; 0x496e <DIO_u8SetPinValue+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(PORTA,copy_u8Pin);
    4926:	2b b3       	in	r18, 0x1b	; 27
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	02 c0       	rjmp	.+4      	; 0x4932 <DIO_u8SetPinValue+0x2a>
    492e:	88 0f       	add	r24, r24
    4930:	99 1f       	adc	r25, r25
    4932:	6a 95       	dec	r22
    4934:	e2 f7       	brpl	.-8      	; 0x492e <DIO_u8SetPinValue+0x26>
    4936:	80 95       	com	r24
    4938:	82 23       	and	r24, r18
    493a:	8b bb       	out	0x1b, r24	; 27
    493c:	5a c0       	rjmp	.+180    	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(PORTB,copy_u8Pin);
    493e:	28 b3       	in	r18, 0x18	; 24
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	02 c0       	rjmp	.+4      	; 0x494a <DIO_u8SetPinValue+0x42>
    4946:	88 0f       	add	r24, r24
    4948:	99 1f       	adc	r25, r25
    494a:	6a 95       	dec	r22
    494c:	e2 f7       	brpl	.-8      	; 0x4946 <DIO_u8SetPinValue+0x3e>
    494e:	80 95       	com	r24
    4950:	82 23       	and	r24, r18
    4952:	88 bb       	out	0x18, r24	; 24
    4954:	4e c0       	rjmp	.+156    	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(PORTC,copy_u8Pin);
    4956:	25 b3       	in	r18, 0x15	; 21
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	02 c0       	rjmp	.+4      	; 0x4962 <DIO_u8SetPinValue+0x5a>
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	6a 95       	dec	r22
    4964:	e2 f7       	brpl	.-8      	; 0x495e <DIO_u8SetPinValue+0x56>
    4966:	80 95       	com	r24
    4968:	82 23       	and	r24, r18
    496a:	85 bb       	out	0x15, r24	; 21
    496c:	42 c0       	rjmp	.+132    	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(PORTD,copy_u8Pin);
    496e:	22 b3       	in	r18, 0x12	; 18
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	02 c0       	rjmp	.+4      	; 0x497a <DIO_u8SetPinValue+0x72>
    4976:	88 0f       	add	r24, r24
    4978:	99 1f       	adc	r25, r25
    497a:	6a 95       	dec	r22
    497c:	e2 f7       	brpl	.-8      	; 0x4976 <DIO_u8SetPinValue+0x6e>
    497e:	80 95       	com	r24
    4980:	82 23       	and	r24, r18
    4982:	82 bb       	out	0x12, r24	; 18
    4984:	36 c0       	rjmp	.+108    	; 0x49f2 <DIO_u8SetPinValue+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Value == DIO_PIN_HIGH)
    4986:	41 30       	cpi	r20, 0x01	; 1
    4988:	a1 f5       	brne	.+104    	; 0x49f2 <DIO_u8SetPinValue+0xea>
		{
			switch(copy_u8Port)
    498a:	81 30       	cpi	r24, 0x01	; 1
    498c:	91 f0       	breq	.+36     	; 0x49b2 <DIO_u8SetPinValue+0xaa>
    498e:	81 30       	cpi	r24, 0x01	; 1
    4990:	28 f0       	brcs	.+10     	; 0x499c <DIO_u8SetPinValue+0x94>
    4992:	82 30       	cpi	r24, 0x02	; 2
    4994:	c9 f0       	breq	.+50     	; 0x49c8 <DIO_u8SetPinValue+0xc0>
    4996:	83 30       	cpi	r24, 0x03	; 3
    4998:	71 f5       	brne	.+92     	; 0x49f6 <DIO_u8SetPinValue+0xee>
    499a:	21 c0       	rjmp	.+66     	; 0x49de <DIO_u8SetPinValue+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(PORTA,copy_u8Pin);
    499c:	2b b3       	in	r18, 0x1b	; 27
    499e:	81 e0       	ldi	r24, 0x01	; 1
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <DIO_u8SetPinValue+0xa0>
    49a4:	88 0f       	add	r24, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	6a 95       	dec	r22
    49aa:	e2 f7       	brpl	.-8      	; 0x49a4 <DIO_u8SetPinValue+0x9c>
    49ac:	28 2b       	or	r18, r24
    49ae:	2b bb       	out	0x1b, r18	; 27
    49b0:	20 c0       	rjmp	.+64     	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(PORTB,copy_u8Pin);
    49b2:	28 b3       	in	r18, 0x18	; 24
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	02 c0       	rjmp	.+4      	; 0x49be <DIO_u8SetPinValue+0xb6>
    49ba:	88 0f       	add	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	6a 95       	dec	r22
    49c0:	e2 f7       	brpl	.-8      	; 0x49ba <DIO_u8SetPinValue+0xb2>
    49c2:	28 2b       	or	r18, r24
    49c4:	28 bb       	out	0x18, r18	; 24
    49c6:	15 c0       	rjmp	.+42     	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(PORTC,copy_u8Pin);
    49c8:	25 b3       	in	r18, 0x15	; 21
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	02 c0       	rjmp	.+4      	; 0x49d4 <DIO_u8SetPinValue+0xcc>
    49d0:	88 0f       	add	r24, r24
    49d2:	99 1f       	adc	r25, r25
    49d4:	6a 95       	dec	r22
    49d6:	e2 f7       	brpl	.-8      	; 0x49d0 <DIO_u8SetPinValue+0xc8>
    49d8:	28 2b       	or	r18, r24
    49da:	25 bb       	out	0x15, r18	; 21
    49dc:	0a c0       	rjmp	.+20     	; 0x49f2 <DIO_u8SetPinValue+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(PORTD,copy_u8Pin);
    49de:	22 b3       	in	r18, 0x12	; 18
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	02 c0       	rjmp	.+4      	; 0x49ea <DIO_u8SetPinValue+0xe2>
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	6a 95       	dec	r22
    49ec:	e2 f7       	brpl	.-8      	; 0x49e6 <DIO_u8SetPinValue+0xde>
    49ee:	28 2b       	or	r18, r24
    49f0:	22 bb       	out	0x12, r18	; 18
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	08 95       	ret
			break;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    49f8:	08 95       	ret

000049fa <DIO_u8SetPinDirection>:

ReturnType_State_t DIO_u8SetPinDirection(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8Direction)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    49fa:	68 30       	cpi	r22, 0x08	; 8
    49fc:	08 f0       	brcs	.+2      	; 0x4a00 <DIO_u8SetPinDirection+0x6>
    49fe:	74 c0       	rjmp	.+232    	; 0x4ae8 <DIO_u8SetPinDirection+0xee>
	{
		if(copy_u8Direction == DIO_PIN_INPUT)
    4a00:	44 23       	and	r20, r20
    4a02:	d1 f5       	brne	.+116    	; 0x4a78 <DIO_u8SetPinDirection+0x7e>
		{
			switch(copy_u8Port)
    4a04:	81 30       	cpi	r24, 0x01	; 1
    4a06:	a1 f0       	breq	.+40     	; 0x4a30 <DIO_u8SetPinDirection+0x36>
    4a08:	81 30       	cpi	r24, 0x01	; 1
    4a0a:	30 f0       	brcs	.+12     	; 0x4a18 <DIO_u8SetPinDirection+0x1e>
    4a0c:	82 30       	cpi	r24, 0x02	; 2
    4a0e:	e1 f0       	breq	.+56     	; 0x4a48 <DIO_u8SetPinDirection+0x4e>
    4a10:	83 30       	cpi	r24, 0x03	; 3
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <DIO_u8SetPinDirection+0x1c>
    4a14:	69 c0       	rjmp	.+210    	; 0x4ae8 <DIO_u8SetPinDirection+0xee>
    4a16:	24 c0       	rjmp	.+72     	; 0x4a60 <DIO_u8SetPinDirection+0x66>
			{
			case DIO_PORTA:
				CLR_BIT(DDRA,copy_u8Pin);
    4a18:	2a b3       	in	r18, 0x1a	; 26
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	02 c0       	rjmp	.+4      	; 0x4a24 <DIO_u8SetPinDirection+0x2a>
    4a20:	88 0f       	add	r24, r24
    4a22:	99 1f       	adc	r25, r25
    4a24:	6a 95       	dec	r22
    4a26:	e2 f7       	brpl	.-8      	; 0x4a20 <DIO_u8SetPinDirection+0x26>
    4a28:	80 95       	com	r24
    4a2a:	82 23       	and	r24, r18
    4a2c:	8a bb       	out	0x1a, r24	; 26
    4a2e:	5a c0       	rjmp	.+180    	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				CLR_BIT(DDRB,copy_u8Pin);
    4a30:	27 b3       	in	r18, 0x17	; 23
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	02 c0       	rjmp	.+4      	; 0x4a3c <DIO_u8SetPinDirection+0x42>
    4a38:	88 0f       	add	r24, r24
    4a3a:	99 1f       	adc	r25, r25
    4a3c:	6a 95       	dec	r22
    4a3e:	e2 f7       	brpl	.-8      	; 0x4a38 <DIO_u8SetPinDirection+0x3e>
    4a40:	80 95       	com	r24
    4a42:	82 23       	and	r24, r18
    4a44:	87 bb       	out	0x17, r24	; 23
    4a46:	4e c0       	rjmp	.+156    	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				CLR_BIT(DDRC,copy_u8Pin);
    4a48:	24 b3       	in	r18, 0x14	; 20
    4a4a:	81 e0       	ldi	r24, 0x01	; 1
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	02 c0       	rjmp	.+4      	; 0x4a54 <DIO_u8SetPinDirection+0x5a>
    4a50:	88 0f       	add	r24, r24
    4a52:	99 1f       	adc	r25, r25
    4a54:	6a 95       	dec	r22
    4a56:	e2 f7       	brpl	.-8      	; 0x4a50 <DIO_u8SetPinDirection+0x56>
    4a58:	80 95       	com	r24
    4a5a:	82 23       	and	r24, r18
    4a5c:	84 bb       	out	0x14, r24	; 20
    4a5e:	42 c0       	rjmp	.+132    	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				CLR_BIT(DDRD,copy_u8Pin);
    4a60:	21 b3       	in	r18, 0x11	; 17
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	02 c0       	rjmp	.+4      	; 0x4a6c <DIO_u8SetPinDirection+0x72>
    4a68:	88 0f       	add	r24, r24
    4a6a:	99 1f       	adc	r25, r25
    4a6c:	6a 95       	dec	r22
    4a6e:	e2 f7       	brpl	.-8      	; 0x4a68 <DIO_u8SetPinDirection+0x6e>
    4a70:	80 95       	com	r24
    4a72:	82 23       	and	r24, r18
    4a74:	81 bb       	out	0x11, r24	; 17
    4a76:	36 c0       	rjmp	.+108    	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			default:
			Local_u8State = E_NOK;
			break;
			}
		}
		else if(copy_u8Direction == DIO_PIN_OUTPUT)
    4a78:	41 30       	cpi	r20, 0x01	; 1
    4a7a:	a1 f5       	brne	.+104    	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
		{
			switch(copy_u8Port)
    4a7c:	81 30       	cpi	r24, 0x01	; 1
    4a7e:	91 f0       	breq	.+36     	; 0x4aa4 <DIO_u8SetPinDirection+0xaa>
    4a80:	81 30       	cpi	r24, 0x01	; 1
    4a82:	28 f0       	brcs	.+10     	; 0x4a8e <DIO_u8SetPinDirection+0x94>
    4a84:	82 30       	cpi	r24, 0x02	; 2
    4a86:	c9 f0       	breq	.+50     	; 0x4aba <DIO_u8SetPinDirection+0xc0>
    4a88:	83 30       	cpi	r24, 0x03	; 3
    4a8a:	71 f5       	brne	.+92     	; 0x4ae8 <DIO_u8SetPinDirection+0xee>
    4a8c:	21 c0       	rjmp	.+66     	; 0x4ad0 <DIO_u8SetPinDirection+0xd6>
			{
			case DIO_PORTA:
				SET_BIT(DDRA,copy_u8Pin);
    4a8e:	2a b3       	in	r18, 0x1a	; 26
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <DIO_u8SetPinDirection+0xa0>
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	6a 95       	dec	r22
    4a9c:	e2 f7       	brpl	.-8      	; 0x4a96 <DIO_u8SetPinDirection+0x9c>
    4a9e:	28 2b       	or	r18, r24
    4aa0:	2a bb       	out	0x1a, r18	; 26
    4aa2:	20 c0       	rjmp	.+64     	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTB:
				SET_BIT(DDRB,copy_u8Pin);
    4aa4:	27 b3       	in	r18, 0x17	; 23
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <DIO_u8SetPinDirection+0xb6>
    4aac:	88 0f       	add	r24, r24
    4aae:	99 1f       	adc	r25, r25
    4ab0:	6a 95       	dec	r22
    4ab2:	e2 f7       	brpl	.-8      	; 0x4aac <DIO_u8SetPinDirection+0xb2>
    4ab4:	28 2b       	or	r18, r24
    4ab6:	27 bb       	out	0x17, r18	; 23
    4ab8:	15 c0       	rjmp	.+42     	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTC:
				SET_BIT(DDRC,copy_u8Pin);
    4aba:	24 b3       	in	r18, 0x14	; 20
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	90 e0       	ldi	r25, 0x00	; 0
    4ac0:	02 c0       	rjmp	.+4      	; 0x4ac6 <DIO_u8SetPinDirection+0xcc>
    4ac2:	88 0f       	add	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	6a 95       	dec	r22
    4ac8:	e2 f7       	brpl	.-8      	; 0x4ac2 <DIO_u8SetPinDirection+0xc8>
    4aca:	28 2b       	or	r18, r24
    4acc:	24 bb       	out	0x14, r18	; 20
    4ace:	0a c0       	rjmp	.+20     	; 0x4ae4 <DIO_u8SetPinDirection+0xea>
			break;
			case DIO_PORTD:
				SET_BIT(DDRD,copy_u8Pin);
    4ad0:	21 b3       	in	r18, 0x11	; 17
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	02 c0       	rjmp	.+4      	; 0x4adc <DIO_u8SetPinDirection+0xe2>
    4ad8:	88 0f       	add	r24, r24
    4ada:	99 1f       	adc	r25, r25
    4adc:	6a 95       	dec	r22
    4ade:	e2 f7       	brpl	.-8      	; 0x4ad8 <DIO_u8SetPinDirection+0xde>
    4ae0:	28 2b       	or	r18, r24
    4ae2:	21 bb       	out	0x11, r18	; 17
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	08 95       	ret
			break;
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    4aea:	08 95       	ret

00004aec <DIO_u8GetPinValue>:

ReturnType_State_t DIO_u8GetPinValue(u8 copy_u8Port , u8 copy_u8Pin , u8 *copy_u8Variable)
{
    4aec:	fa 01       	movw	r30, r20
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4aee:	68 30       	cpi	r22, 0x08	; 8
    4af0:	d0 f4       	brcc	.+52     	; 0x4b26 <DIO_u8GetPinValue+0x3a>
	{
			switch(copy_u8Port)
    4af2:	81 30       	cpi	r24, 0x01	; 1
    4af4:	49 f0       	breq	.+18     	; 0x4b08 <DIO_u8GetPinValue+0x1c>
    4af6:	81 30       	cpi	r24, 0x01	; 1
    4af8:	28 f0       	brcs	.+10     	; 0x4b04 <DIO_u8GetPinValue+0x18>
    4afa:	82 30       	cpi	r24, 0x02	; 2
    4afc:	39 f0       	breq	.+14     	; 0x4b0c <DIO_u8GetPinValue+0x20>
    4afe:	83 30       	cpi	r24, 0x03	; 3
    4b00:	91 f4       	brne	.+36     	; 0x4b26 <DIO_u8GetPinValue+0x3a>
    4b02:	06 c0       	rjmp	.+12     	; 0x4b10 <DIO_u8GetPinValue+0x24>
			{
			case DIO_PORTA:
				*copy_u8Variable = GET_BIT(PINA,copy_u8Pin);
    4b04:	89 b3       	in	r24, 0x19	; 25
    4b06:	05 c0       	rjmp	.+10     	; 0x4b12 <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTB:
				*copy_u8Variable = GET_BIT(PINB,copy_u8Pin);
    4b08:	86 b3       	in	r24, 0x16	; 22
    4b0a:	03 c0       	rjmp	.+6      	; 0x4b12 <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTC:
				*copy_u8Variable = GET_BIT(PINC,copy_u8Pin);
    4b0c:	83 b3       	in	r24, 0x13	; 19
    4b0e:	01 c0       	rjmp	.+2      	; 0x4b12 <DIO_u8GetPinValue+0x26>
			break;
			case DIO_PORTD:
				*copy_u8Variable = GET_BIT(PIND,copy_u8Pin);
    4b10:	80 b3       	in	r24, 0x10	; 16
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	02 c0       	rjmp	.+4      	; 0x4b1a <DIO_u8GetPinValue+0x2e>
    4b16:	95 95       	asr	r25
    4b18:	87 95       	ror	r24
    4b1a:	6a 95       	dec	r22
    4b1c:	e2 f7       	brpl	.-8      	; 0x4b16 <DIO_u8GetPinValue+0x2a>
    4b1e:	81 70       	andi	r24, 0x01	; 1
    4b20:	80 83       	st	Z, r24
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	08 95       	ret
			break;
    4b26:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8State = E_NOK;
	}
	return Local_u8State;
}
    4b28:	08 95       	ret

00004b2a <DIO_u8ConnectPullUP>:

ReturnType_State_t DIO_u8ConnectPullUP(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8ConnectPullUp)
{
    4b2a:	98 2f       	mov	r25, r24
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Port <= DIO_PORTD) && (copy_u8Pin <= DIO_PIN7) )
    4b2c:	84 30       	cpi	r24, 0x04	; 4
    4b2e:	08 f0       	brcs	.+2      	; 0x4b32 <DIO_u8ConnectPullUP+0x8>
    4b30:	86 c0       	rjmp	.+268    	; 0x4c3e <DIO_u8ConnectPullUP+0x114>
    4b32:	68 30       	cpi	r22, 0x08	; 8
    4b34:	08 f0       	brcs	.+2      	; 0x4b38 <DIO_u8ConnectPullUP+0xe>
    4b36:	83 c0       	rjmp	.+262    	; 0x4c3e <DIO_u8ConnectPullUP+0x114>
	{
		CLR_BIT(SFIOR,PUD);
    4b38:	80 b7       	in	r24, 0x30	; 48
    4b3a:	8b 7f       	andi	r24, 0xFB	; 251
    4b3c:	80 bf       	out	0x30, r24	; 48
		switch(copy_u8Port)
    4b3e:	91 30       	cpi	r25, 0x01	; 1
    4b40:	31 f1       	breq	.+76     	; 0x4b8e <DIO_u8ConnectPullUP+0x64>
    4b42:	91 30       	cpi	r25, 0x01	; 1
    4b44:	38 f0       	brcs	.+14     	; 0x4b54 <DIO_u8ConnectPullUP+0x2a>
    4b46:	92 30       	cpi	r25, 0x02	; 2
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <DIO_u8ConnectPullUP+0x22>
    4b4a:	3e c0       	rjmp	.+124    	; 0x4bc8 <DIO_u8ConnectPullUP+0x9e>
    4b4c:	93 30       	cpi	r25, 0x03	; 3
    4b4e:	09 f0       	breq	.+2      	; 0x4b52 <DIO_u8ConnectPullUP+0x28>
    4b50:	74 c0       	rjmp	.+232    	; 0x4c3a <DIO_u8ConnectPullUP+0x110>
    4b52:	57 c0       	rjmp	.+174    	; 0x4c02 <DIO_u8ConnectPullUP+0xd8>
		{
		case DIO_PORTA:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4b54:	41 30       	cpi	r20, 0x01	; 1
    4b56:	79 f4       	brne	.+30     	; 0x4b76 <DIO_u8ConnectPullUP+0x4c>
			{
				CLR_BIT(DDRA,copy_u8Pin);
    4b58:	3a b3       	in	r19, 0x1a	; 26
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	02 c0       	rjmp	.+4      	; 0x4b64 <DIO_u8ConnectPullUP+0x3a>
    4b60:	88 0f       	add	r24, r24
    4b62:	99 1f       	adc	r25, r25
    4b64:	6a 95       	dec	r22
    4b66:	e2 f7       	brpl	.-8      	; 0x4b60 <DIO_u8ConnectPullUP+0x36>
    4b68:	28 2f       	mov	r18, r24
    4b6a:	20 95       	com	r18
    4b6c:	23 23       	and	r18, r19
    4b6e:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA,copy_u8Pin);
    4b70:	2b b3       	in	r18, 0x1b	; 27
    4b72:	82 2b       	or	r24, r18
    4b74:	0a c0       	rjmp	.+20     	; 0x4b8a <DIO_u8ConnectPullUP+0x60>
			}
			else
			{
				CLR_BIT(PORTA,copy_u8Pin);
    4b76:	2b b3       	in	r18, 0x1b	; 27
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	02 c0       	rjmp	.+4      	; 0x4b82 <DIO_u8ConnectPullUP+0x58>
    4b7e:	88 0f       	add	r24, r24
    4b80:	99 1f       	adc	r25, r25
    4b82:	6a 95       	dec	r22
    4b84:	e2 f7       	brpl	.-8      	; 0x4b7e <DIO_u8ConnectPullUP+0x54>
    4b86:	80 95       	com	r24
    4b88:	82 23       	and	r24, r18
    4b8a:	8b bb       	out	0x1b, r24	; 27
    4b8c:	56 c0       	rjmp	.+172    	; 0x4c3a <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTB:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4b8e:	41 30       	cpi	r20, 0x01	; 1
    4b90:	79 f4       	brne	.+30     	; 0x4bb0 <DIO_u8ConnectPullUP+0x86>
			{
				CLR_BIT(DDRB,copy_u8Pin);
    4b92:	37 b3       	in	r19, 0x17	; 23
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	02 c0       	rjmp	.+4      	; 0x4b9e <DIO_u8ConnectPullUP+0x74>
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	6a 95       	dec	r22
    4ba0:	e2 f7       	brpl	.-8      	; 0x4b9a <DIO_u8ConnectPullUP+0x70>
    4ba2:	28 2f       	mov	r18, r24
    4ba4:	20 95       	com	r18
    4ba6:	23 23       	and	r18, r19
    4ba8:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB,copy_u8Pin);
    4baa:	28 b3       	in	r18, 0x18	; 24
    4bac:	82 2b       	or	r24, r18
    4bae:	0a c0       	rjmp	.+20     	; 0x4bc4 <DIO_u8ConnectPullUP+0x9a>
			}
			else
			{
				CLR_BIT(PORTB,copy_u8Pin);
    4bb0:	28 b3       	in	r18, 0x18	; 24
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	02 c0       	rjmp	.+4      	; 0x4bbc <DIO_u8ConnectPullUP+0x92>
    4bb8:	88 0f       	add	r24, r24
    4bba:	99 1f       	adc	r25, r25
    4bbc:	6a 95       	dec	r22
    4bbe:	e2 f7       	brpl	.-8      	; 0x4bb8 <DIO_u8ConnectPullUP+0x8e>
    4bc0:	80 95       	com	r24
    4bc2:	82 23       	and	r24, r18
    4bc4:	88 bb       	out	0x18, r24	; 24
    4bc6:	39 c0       	rjmp	.+114    	; 0x4c3a <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTC:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4bc8:	41 30       	cpi	r20, 0x01	; 1
    4bca:	79 f4       	brne	.+30     	; 0x4bea <DIO_u8ConnectPullUP+0xc0>
			{
				CLR_BIT(DDRC,copy_u8Pin);
    4bcc:	34 b3       	in	r19, 0x14	; 20
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	02 c0       	rjmp	.+4      	; 0x4bd8 <DIO_u8ConnectPullUP+0xae>
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	6a 95       	dec	r22
    4bda:	e2 f7       	brpl	.-8      	; 0x4bd4 <DIO_u8ConnectPullUP+0xaa>
    4bdc:	28 2f       	mov	r18, r24
    4bde:	20 95       	com	r18
    4be0:	23 23       	and	r18, r19
    4be2:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC,copy_u8Pin);
    4be4:	25 b3       	in	r18, 0x15	; 21
    4be6:	82 2b       	or	r24, r18
    4be8:	0a c0       	rjmp	.+20     	; 0x4bfe <DIO_u8ConnectPullUP+0xd4>
			}
			else
			{
				CLR_BIT(PORTC,copy_u8Pin);
    4bea:	25 b3       	in	r18, 0x15	; 21
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <DIO_u8ConnectPullUP+0xcc>
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	6a 95       	dec	r22
    4bf8:	e2 f7       	brpl	.-8      	; 0x4bf2 <DIO_u8ConnectPullUP+0xc8>
    4bfa:	80 95       	com	r24
    4bfc:	82 23       	and	r24, r18
    4bfe:	85 bb       	out	0x15, r24	; 21
    4c00:	1c c0       	rjmp	.+56     	; 0x4c3a <DIO_u8ConnectPullUP+0x110>
			}
		break;

		case DIO_PORTD:
			if(copy_u8ConnectPullUp == DIO_PIN_HIGH)
    4c02:	41 30       	cpi	r20, 0x01	; 1
    4c04:	79 f4       	brne	.+30     	; 0x4c24 <DIO_u8ConnectPullUP+0xfa>
			{
				CLR_BIT(DDRD,copy_u8Pin);
    4c06:	31 b3       	in	r19, 0x11	; 17
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	02 c0       	rjmp	.+4      	; 0x4c12 <DIO_u8ConnectPullUP+0xe8>
    4c0e:	88 0f       	add	r24, r24
    4c10:	99 1f       	adc	r25, r25
    4c12:	6a 95       	dec	r22
    4c14:	e2 f7       	brpl	.-8      	; 0x4c0e <DIO_u8ConnectPullUP+0xe4>
    4c16:	28 2f       	mov	r18, r24
    4c18:	20 95       	com	r18
    4c1a:	23 23       	and	r18, r19
    4c1c:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD,copy_u8Pin);
    4c1e:	22 b3       	in	r18, 0x12	; 18
    4c20:	82 2b       	or	r24, r18
    4c22:	0a c0       	rjmp	.+20     	; 0x4c38 <DIO_u8ConnectPullUP+0x10e>
			}
			else
			{
				CLR_BIT(PORTD,copy_u8Pin);
    4c24:	22 b3       	in	r18, 0x12	; 18
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <DIO_u8ConnectPullUP+0x106>
    4c2c:	88 0f       	add	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	6a 95       	dec	r22
    4c32:	e2 f7       	brpl	.-8      	; 0x4c2c <DIO_u8ConnectPullUP+0x102>
    4c34:	80 95       	com	r24
    4c36:	82 23       	and	r24, r18
    4c38:	82 bb       	out	0x12, r24	; 18
    4c3a:	80 e0       	ldi	r24, 0x00	; 0
    4c3c:	08 95       	ret
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8State = E_NOK;
	}

	return Local_u8State;
}
    4c40:	08 95       	ret

00004c42 <DIO_u8TogglePinValue>:

ReturnType_State_t DIO_u8TogglePinValue(u8 copy_u8Port , u8 copy_u8Pin)
{
	ReturnType_State_t Local_u8State = E_OK;

	if((copy_u8Pin >= DIO_PIN0) && (copy_u8Pin <= DIO_PIN7))
    4c42:	68 30       	cpi	r22, 0x08	; 8
    4c44:	b0 f5       	brcc	.+108    	; 0x4cb2 <DIO_u8TogglePinValue+0x70>
	{
			switch(copy_u8Port)
    4c46:	81 30       	cpi	r24, 0x01	; 1
    4c48:	91 f0       	breq	.+36     	; 0x4c6e <DIO_u8TogglePinValue+0x2c>
    4c4a:	81 30       	cpi	r24, 0x01	; 1
    4c4c:	28 f0       	brcs	.+10     	; 0x4c58 <DIO_u8TogglePinValue+0x16>
    4c4e:	82 30       	cpi	r24, 0x02	; 2
    4c50:	c9 f0       	breq	.+50     	; 0x4c84 <DIO_u8TogglePinValue+0x42>
    4c52:	83 30       	cpi	r24, 0x03	; 3
    4c54:	71 f5       	brne	.+92     	; 0x4cb2 <DIO_u8TogglePinValue+0x70>
    4c56:	21 c0       	rjmp	.+66     	; 0x4c9a <DIO_u8TogglePinValue+0x58>
			{
			case DIO_PORTA:
				TOG_BIT(PORTA,copy_u8Pin);
    4c58:	2b b3       	in	r18, 0x1b	; 27
    4c5a:	81 e0       	ldi	r24, 0x01	; 1
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <DIO_u8TogglePinValue+0x22>
    4c60:	88 0f       	add	r24, r24
    4c62:	99 1f       	adc	r25, r25
    4c64:	6a 95       	dec	r22
    4c66:	e2 f7       	brpl	.-8      	; 0x4c60 <DIO_u8TogglePinValue+0x1e>
    4c68:	28 27       	eor	r18, r24
    4c6a:	2b bb       	out	0x1b, r18	; 27
    4c6c:	20 c0       	rjmp	.+64     	; 0x4cae <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTB:
				TOG_BIT(PORTB,copy_u8Pin);
    4c6e:	28 b3       	in	r18, 0x18	; 24
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <DIO_u8TogglePinValue+0x38>
    4c76:	88 0f       	add	r24, r24
    4c78:	99 1f       	adc	r25, r25
    4c7a:	6a 95       	dec	r22
    4c7c:	e2 f7       	brpl	.-8      	; 0x4c76 <DIO_u8TogglePinValue+0x34>
    4c7e:	28 27       	eor	r18, r24
    4c80:	28 bb       	out	0x18, r18	; 24
    4c82:	15 c0       	rjmp	.+42     	; 0x4cae <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTC:
				TOG_BIT(PORTC,copy_u8Pin);
    4c84:	25 b3       	in	r18, 0x15	; 21
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <DIO_u8TogglePinValue+0x4e>
    4c8c:	88 0f       	add	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	6a 95       	dec	r22
    4c92:	e2 f7       	brpl	.-8      	; 0x4c8c <DIO_u8TogglePinValue+0x4a>
    4c94:	28 27       	eor	r18, r24
    4c96:	25 bb       	out	0x15, r18	; 21
    4c98:	0a c0       	rjmp	.+20     	; 0x4cae <DIO_u8TogglePinValue+0x6c>
			break;
			case DIO_PORTD:
				TOG_BIT(PORTD,copy_u8Pin);
    4c9a:	22 b3       	in	r18, 0x12	; 18
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	02 c0       	rjmp	.+4      	; 0x4ca6 <DIO_u8TogglePinValue+0x64>
    4ca2:	88 0f       	add	r24, r24
    4ca4:	99 1f       	adc	r25, r25
    4ca6:	6a 95       	dec	r22
    4ca8:	e2 f7       	brpl	.-8      	; 0x4ca2 <DIO_u8TogglePinValue+0x60>
    4caa:	28 27       	eor	r18, r24
    4cac:	22 bb       	out	0x12, r18	; 18
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	08 95       	ret
			break;
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			Local_u8State = E_NOK;
		}
		return Local_u8State;
}
    4cb4:	08 95       	ret

00004cb6 <LCD_voidSendData>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendData(u8 copy_u8Data)
{
    4cb6:	1f 93       	push	r17
    4cb8:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    4cba:	83 e0       	ldi	r24, 0x03	; 3
    4cbc:	67 e0       	ldi	r22, 0x07	; 7
    4cbe:	41 e0       	ldi	r20, 0x01	; 1
    4cc0:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    4cc4:	83 e0       	ldi	r24, 0x03	; 3
    4cc6:	66 e0       	ldi	r22, 0x06	; 6
    4cc8:	40 e0       	ldi	r20, 0x00	; 0
    4cca:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Data);
    4cce:	81 e0       	ldi	r24, 0x01	; 1
    4cd0:	61 2f       	mov	r22, r17
    4cd2:	0e 94 40 24 	call	0x4880	; 0x4880 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    4cd6:	83 e0       	ldi	r24, 0x03	; 3
    4cd8:	65 e0       	ldi	r22, 0x05	; 5
    4cda:	41 e0       	ldi	r20, 0x01	; 1
    4cdc:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ce0:	80 ea       	ldi	r24, 0xA0	; 160
    4ce2:	9f e0       	ldi	r25, 0x0F	; 15
    4ce4:	01 97       	sbiw	r24, 0x01	; 1
    4ce6:	f1 f7       	brne	.-4      	; 0x4ce4 <LCD_voidSendData+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    4ce8:	83 e0       	ldi	r24, 0x03	; 3
    4cea:	65 e0       	ldi	r22, 0x05	; 5
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

}
    4cf2:	1f 91       	pop	r17
    4cf4:	08 95       	ret

00004cf6 <LCD_voidSendNumber>:
	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
}

void LCD_voidSendNumber(s64 copy_s32Number)
{
    4cf6:	2f 92       	push	r2
    4cf8:	3f 92       	push	r3
    4cfa:	4f 92       	push	r4
    4cfc:	5f 92       	push	r5
    4cfe:	6f 92       	push	r6
    4d00:	7f 92       	push	r7
    4d02:	8f 92       	push	r8
    4d04:	9f 92       	push	r9
    4d06:	af 92       	push	r10
    4d08:	bf 92       	push	r11
    4d0a:	cf 92       	push	r12
    4d0c:	df 92       	push	r13
    4d0e:	ef 92       	push	r14
    4d10:	ff 92       	push	r15
    4d12:	0f 93       	push	r16
    4d14:	1f 93       	push	r17
    4d16:	df 93       	push	r29
    4d18:	cf 93       	push	r28
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	29 97       	sbiw	r28, 0x09	; 9
    4d20:	0f b6       	in	r0, 0x3f	; 63
    4d22:	f8 94       	cli
    4d24:	de bf       	out	0x3e, r29	; 62
    4d26:	0f be       	out	0x3f, r0	; 63
    4d28:	cd bf       	out	0x3d, r28	; 61
    4d2a:	2a 83       	std	Y+2, r18	; 0x02
    4d2c:	3b 83       	std	Y+3, r19	; 0x03
    4d2e:	4c 83       	std	Y+4, r20	; 0x04
    4d30:	5d 83       	std	Y+5, r21	; 0x05
    4d32:	6e 83       	std	Y+6, r22	; 0x06
    4d34:	7f 83       	std	Y+7, r23	; 0x07
    4d36:	88 87       	std	Y+8, r24	; 0x08
    4d38:	99 87       	std	Y+9, r25	; 0x09
	u64 reversed = 1;
	if (copy_s32Number == 0)
    4d3a:	82 2f       	mov	r24, r18
    4d3c:	83 2b       	or	r24, r19
    4d3e:	84 2b       	or	r24, r20
    4d40:	85 2b       	or	r24, r21
    4d42:	86 2b       	or	r24, r22
    4d44:	87 2b       	or	r24, r23
    4d46:	98 85       	ldd	r25, Y+8	; 0x08
    4d48:	89 2b       	or	r24, r25
    4d4a:	e9 85       	ldd	r30, Y+9	; 0x09
    4d4c:	8e 2b       	or	r24, r30
    4d4e:	11 f4       	brne	.+4      	; 0x4d54 <LCD_voidSendNumber+0x5e>
	{
		LCD_voidSendData('0');
    4d50:	80 e3       	ldi	r24, 0x30	; 48
    4d52:	0e c0       	rjmp	.+28     	; 0x4d70 <LCD_voidSendNumber+0x7a>
	}
	else
	{
		if(copy_s32Number <0)
    4d54:	f9 85       	ldd	r31, Y+9	; 0x09
    4d56:	f7 fd       	sbrc	r31, 7
    4d58:	0a c0       	rjmp	.+20     	; 0x4d6e <LCD_voidSendNumber+0x78>
		{
			LCD_voidSendData('-');
    4d5a:	22 24       	eor	r2, r2
    4d5c:	23 94       	inc	r2
    4d5e:	33 24       	eor	r3, r3
    4d60:	44 24       	eor	r4, r4
    4d62:	55 24       	eor	r5, r5
    4d64:	66 24       	eor	r6, r6
    4d66:	77 24       	eor	r7, r7
    4d68:	88 24       	eor	r8, r8
    4d6a:	99 24       	eor	r9, r9
    4d6c:	04 c0       	rjmp	.+8      	; 0x4d76 <LCD_voidSendNumber+0x80>
    4d6e:	8d e2       	ldi	r24, 0x2D	; 45
    4d70:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>
    4d74:	29 c1       	rjmp	.+594    	; 0x4fc8 <LCD_voidSendNumber+0x2d2>
		}
		else
		{
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
    4d76:	91 01       	movw	r18, r2
    4d78:	a2 01       	movw	r20, r4
    4d7a:	b3 01       	movw	r22, r6
    4d7c:	c4 01       	movw	r24, r8
    4d7e:	01 e0       	ldi	r16, 0x01	; 1
    4d80:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    4d84:	12 2f       	mov	r17, r18
    4d86:	f3 2e       	mov	r15, r19
    4d88:	e4 2e       	mov	r14, r20
    4d8a:	d5 2e       	mov	r13, r21
    4d8c:	c6 2e       	mov	r12, r22
    4d8e:	b7 2e       	mov	r11, r23
    4d90:	a8 2e       	mov	r10, r24
    4d92:	89 2e       	mov	r8, r25
    4d94:	02 e0       	ldi	r16, 0x02	; 2
    4d96:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    4d9a:	92 2e       	mov	r9, r18
    4d9c:	91 0e       	add	r9, r17
    4d9e:	21 e0       	ldi	r18, 0x01	; 1
    4da0:	91 16       	cp	r9, r17
    4da2:	08 f0       	brcs	.+2      	; 0x4da6 <LCD_voidSendNumber+0xb0>
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	3f 0d       	add	r19, r15
    4da8:	e1 e0       	ldi	r30, 0x01	; 1
    4daa:	3f 15       	cp	r19, r15
    4dac:	08 f0       	brcs	.+2      	; 0x4db0 <LCD_voidSendNumber+0xba>
    4dae:	e0 e0       	ldi	r30, 0x00	; 0
    4db0:	72 2e       	mov	r7, r18
    4db2:	73 0e       	add	r7, r19
    4db4:	21 e0       	ldi	r18, 0x01	; 1
    4db6:	73 16       	cp	r7, r19
    4db8:	08 f0       	brcs	.+2      	; 0x4dbc <LCD_voidSendNumber+0xc6>
    4dba:	20 e0       	ldi	r18, 0x00	; 0
    4dbc:	e2 2b       	or	r30, r18
    4dbe:	4e 0d       	add	r20, r14
    4dc0:	31 e0       	ldi	r19, 0x01	; 1
    4dc2:	4e 15       	cp	r20, r14
    4dc4:	08 f0       	brcs	.+2      	; 0x4dc8 <LCD_voidSendNumber+0xd2>
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	6e 2e       	mov	r6, r30
    4dca:	64 0e       	add	r6, r20
    4dcc:	21 e0       	ldi	r18, 0x01	; 1
    4dce:	64 16       	cp	r6, r20
    4dd0:	08 f0       	brcs	.+2      	; 0x4dd4 <LCD_voidSendNumber+0xde>
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	32 2b       	or	r19, r18
    4dd6:	5d 0d       	add	r21, r13
    4dd8:	41 e0       	ldi	r20, 0x01	; 1
    4dda:	5d 15       	cp	r21, r13
    4ddc:	08 f0       	brcs	.+2      	; 0x4de0 <LCD_voidSendNumber+0xea>
    4dde:	40 e0       	ldi	r20, 0x00	; 0
    4de0:	53 2e       	mov	r5, r19
    4de2:	55 0e       	add	r5, r21
    4de4:	21 e0       	ldi	r18, 0x01	; 1
    4de6:	55 16       	cp	r5, r21
    4de8:	08 f0       	brcs	.+2      	; 0x4dec <LCD_voidSendNumber+0xf6>
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	42 2b       	or	r20, r18
    4dee:	6c 0d       	add	r22, r12
    4df0:	31 e0       	ldi	r19, 0x01	; 1
    4df2:	6c 15       	cp	r22, r12
    4df4:	08 f0       	brcs	.+2      	; 0x4df8 <LCD_voidSendNumber+0x102>
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	44 2e       	mov	r4, r20
    4dfa:	46 0e       	add	r4, r22
    4dfc:	21 e0       	ldi	r18, 0x01	; 1
    4dfe:	46 16       	cp	r4, r22
    4e00:	08 f0       	brcs	.+2      	; 0x4e04 <LCD_voidSendNumber+0x10e>
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	32 2b       	or	r19, r18
    4e06:	7b 0d       	add	r23, r11
    4e08:	41 e0       	ldi	r20, 0x01	; 1
    4e0a:	7b 15       	cp	r23, r11
    4e0c:	08 f0       	brcs	.+2      	; 0x4e10 <LCD_voidSendNumber+0x11a>
    4e0e:	40 e0       	ldi	r20, 0x00	; 0
    4e10:	33 2e       	mov	r3, r19
    4e12:	37 0e       	add	r3, r23
    4e14:	21 e0       	ldi	r18, 0x01	; 1
    4e16:	37 16       	cp	r3, r23
    4e18:	08 f0       	brcs	.+2      	; 0x4e1c <LCD_voidSendNumber+0x126>
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	42 2b       	or	r20, r18
    4e1e:	8a 0d       	add	r24, r10
    4e20:	31 e0       	ldi	r19, 0x01	; 1
    4e22:	8a 15       	cp	r24, r10
    4e24:	08 f0       	brcs	.+2      	; 0x4e28 <LCD_voidSendNumber+0x132>
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	24 2e       	mov	r2, r20
    4e2a:	28 0e       	add	r2, r24
    4e2c:	21 e0       	ldi	r18, 0x01	; 1
    4e2e:	28 16       	cp	r2, r24
    4e30:	08 f0       	brcs	.+2      	; 0x4e34 <LCD_voidSendNumber+0x13e>
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	32 2b       	or	r19, r18
    4e36:	98 0d       	add	r25, r8
    4e38:	83 2f       	mov	r24, r19
    4e3a:	89 0f       	add	r24, r25
    4e3c:	89 83       	std	Y+1, r24	; 0x01
    4e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    4e40:	3b 81       	ldd	r19, Y+3	; 0x03
    4e42:	4c 81       	ldd	r20, Y+4	; 0x04
    4e44:	5d 81       	ldd	r21, Y+5	; 0x05
    4e46:	6e 81       	ldd	r22, Y+6	; 0x06
    4e48:	7f 81       	ldd	r23, Y+7	; 0x07
    4e4a:	88 85       	ldd	r24, Y+8	; 0x08
    4e4c:	99 85       	ldd	r25, Y+9	; 0x09
    4e4e:	aa e0       	ldi	r26, 0x0A	; 10
    4e50:	aa 2e       	mov	r10, r26
    4e52:	bb 24       	eor	r11, r11
    4e54:	cc 24       	eor	r12, r12
    4e56:	dd 24       	eor	r13, r13
    4e58:	ee 24       	eor	r14, r14
    4e5a:	ff 24       	eor	r15, r15
    4e5c:	00 e0       	ldi	r16, 0x00	; 0
    4e5e:	10 e0       	ldi	r17, 0x00	; 0
    4e60:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__moddi3>
    4e64:	12 2f       	mov	r17, r18
    4e66:	19 0d       	add	r17, r9
    4e68:	f1 e0       	ldi	r31, 0x01	; 1
    4e6a:	12 17       	cp	r17, r18
    4e6c:	08 f0       	brcs	.+2      	; 0x4e70 <LCD_voidSendNumber+0x17a>
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	23 2f       	mov	r18, r19
    4e72:	27 0d       	add	r18, r7
    4e74:	e1 e0       	ldi	r30, 0x01	; 1
    4e76:	23 17       	cp	r18, r19
    4e78:	08 f0       	brcs	.+2      	; 0x4e7c <LCD_voidSendNumber+0x186>
    4e7a:	e0 e0       	ldi	r30, 0x00	; 0
    4e7c:	bf 2f       	mov	r27, r31
    4e7e:	b2 0f       	add	r27, r18
    4e80:	31 e0       	ldi	r19, 0x01	; 1
    4e82:	b2 17       	cp	r27, r18
    4e84:	08 f0       	brcs	.+2      	; 0x4e88 <LCD_voidSendNumber+0x192>
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	e3 2b       	or	r30, r19
    4e8a:	24 2f       	mov	r18, r20
    4e8c:	26 0d       	add	r18, r6
    4e8e:	f1 e0       	ldi	r31, 0x01	; 1
    4e90:	24 17       	cp	r18, r20
    4e92:	08 f0       	brcs	.+2      	; 0x4e96 <LCD_voidSendNumber+0x1a0>
    4e94:	f0 e0       	ldi	r31, 0x00	; 0
    4e96:	ae 2f       	mov	r26, r30
    4e98:	a2 0f       	add	r26, r18
    4e9a:	31 e0       	ldi	r19, 0x01	; 1
    4e9c:	a2 17       	cp	r26, r18
    4e9e:	08 f0       	brcs	.+2      	; 0x4ea2 <LCD_voidSendNumber+0x1ac>
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	f3 2b       	or	r31, r19
    4ea4:	25 2f       	mov	r18, r21
    4ea6:	25 0d       	add	r18, r5
    4ea8:	41 e0       	ldi	r20, 0x01	; 1
    4eaa:	25 17       	cp	r18, r21
    4eac:	08 f0       	brcs	.+2      	; 0x4eb0 <LCD_voidSendNumber+0x1ba>
    4eae:	40 e0       	ldi	r20, 0x00	; 0
    4eb0:	0f 2f       	mov	r16, r31
    4eb2:	02 0f       	add	r16, r18
    4eb4:	31 e0       	ldi	r19, 0x01	; 1
    4eb6:	02 17       	cp	r16, r18
    4eb8:	08 f0       	brcs	.+2      	; 0x4ebc <LCD_voidSendNumber+0x1c6>
    4eba:	30 e0       	ldi	r19, 0x00	; 0
    4ebc:	43 2b       	or	r20, r19
    4ebe:	26 2f       	mov	r18, r22
    4ec0:	24 0d       	add	r18, r4
    4ec2:	51 e0       	ldi	r21, 0x01	; 1
    4ec4:	26 17       	cp	r18, r22
    4ec6:	08 f0       	brcs	.+2      	; 0x4eca <LCD_voidSendNumber+0x1d4>
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	64 2f       	mov	r22, r20
    4ecc:	62 0f       	add	r22, r18
    4ece:	31 e0       	ldi	r19, 0x01	; 1
    4ed0:	62 17       	cp	r22, r18
    4ed2:	08 f0       	brcs	.+2      	; 0x4ed6 <LCD_voidSendNumber+0x1e0>
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	53 2b       	or	r21, r19
    4ed8:	27 2f       	mov	r18, r23
    4eda:	23 0d       	add	r18, r3
    4edc:	41 e0       	ldi	r20, 0x01	; 1
    4ede:	27 17       	cp	r18, r23
    4ee0:	08 f0       	brcs	.+2      	; 0x4ee4 <LCD_voidSendNumber+0x1ee>
    4ee2:	40 e0       	ldi	r20, 0x00	; 0
    4ee4:	52 0f       	add	r21, r18
    4ee6:	31 e0       	ldi	r19, 0x01	; 1
    4ee8:	52 17       	cp	r21, r18
    4eea:	08 f0       	brcs	.+2      	; 0x4eee <LCD_voidSendNumber+0x1f8>
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	43 2b       	or	r20, r19
    4ef0:	28 2f       	mov	r18, r24
    4ef2:	22 0d       	add	r18, r2
    4ef4:	31 e0       	ldi	r19, 0x01	; 1
    4ef6:	28 17       	cp	r18, r24
    4ef8:	08 f0       	brcs	.+2      	; 0x4efc <LCD_voidSendNumber+0x206>
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	42 0f       	add	r20, r18
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	42 17       	cp	r20, r18
    4f02:	08 f0       	brcs	.+2      	; 0x4f06 <LCD_voidSendNumber+0x210>
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	38 2b       	or	r19, r24
    4f08:	e9 81       	ldd	r30, Y+1	; 0x01
    4f0a:	e9 0f       	add	r30, r25
    4f0c:	21 2e       	mov	r2, r17
    4f0e:	3b 2e       	mov	r3, r27
    4f10:	4a 2e       	mov	r4, r26
    4f12:	50 2e       	mov	r5, r16
    4f14:	66 2e       	mov	r6, r22
    4f16:	75 2e       	mov	r7, r21
    4f18:	84 2e       	mov	r8, r20
    4f1a:	9e 2e       	mov	r9, r30
    4f1c:	93 0e       	add	r9, r19
				copy_s32Number/=10;
    4f1e:	2a 81       	ldd	r18, Y+2	; 0x02
    4f20:	3b 81       	ldd	r19, Y+3	; 0x03
    4f22:	4c 81       	ldd	r20, Y+4	; 0x04
    4f24:	5d 81       	ldd	r21, Y+5	; 0x05
    4f26:	6e 81       	ldd	r22, Y+6	; 0x06
    4f28:	7f 81       	ldd	r23, Y+7	; 0x07
    4f2a:	88 85       	ldd	r24, Y+8	; 0x08
    4f2c:	99 85       	ldd	r25, Y+9	; 0x09
    4f2e:	fa e0       	ldi	r31, 0x0A	; 10
    4f30:	af 2e       	mov	r10, r31
    4f32:	bb 24       	eor	r11, r11
    4f34:	cc 24       	eor	r12, r12
    4f36:	dd 24       	eor	r13, r13
    4f38:	ee 24       	eor	r14, r14
    4f3a:	ff 24       	eor	r15, r15
    4f3c:	00 e0       	ldi	r16, 0x00	; 0
    4f3e:	10 e0       	ldi	r17, 0x00	; 0
    4f40:	0e 94 c8 00 	call	0x190	; 0x190 <__divdi3>
    4f44:	2a 83       	std	Y+2, r18	; 0x02
    4f46:	3b 83       	std	Y+3, r19	; 0x03
    4f48:	4c 83       	std	Y+4, r20	; 0x04
    4f4a:	5d 83       	std	Y+5, r21	; 0x05
    4f4c:	6e 83       	std	Y+6, r22	; 0x06
    4f4e:	7f 83       	std	Y+7, r23	; 0x07
    4f50:	88 87       	std	Y+8, r24	; 0x08
    4f52:	99 87       	std	Y+9, r25	; 0x09
			LCD_voidSendData('-');
			copy_s32Number *=-1;
		}
		else
		{
			while(copy_s32Number!= 0)
    4f54:	82 2f       	mov	r24, r18
    4f56:	83 2b       	or	r24, r19
    4f58:	84 2b       	or	r24, r20
    4f5a:	85 2b       	or	r24, r21
    4f5c:	86 2b       	or	r24, r22
    4f5e:	87 2b       	or	r24, r23
    4f60:	f8 85       	ldd	r31, Y+8	; 0x08
    4f62:	8f 2b       	or	r24, r31
    4f64:	89 2b       	or	r24, r25
    4f66:	09 f0       	breq	.+2      	; 0x4f6a <LCD_voidSendNumber+0x274>
    4f68:	06 cf       	rjmp	.-500    	; 0x4d76 <LCD_voidSendNumber+0x80>
    4f6a:	1d c0       	rjmp	.+58     	; 0x4fa6 <LCD_voidSendNumber+0x2b0>
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
			{
				LCD_voidSendData(reversed%10 +'0');
    4f6c:	91 01       	movw	r18, r2
    4f6e:	a2 01       	movw	r20, r4
    4f70:	b3 01       	movw	r22, r6
    4f72:	c4 01       	movw	r24, r8
    4f74:	ea e0       	ldi	r30, 0x0A	; 10
    4f76:	ae 2e       	mov	r10, r30
    4f78:	bb 24       	eor	r11, r11
    4f7a:	cc 24       	eor	r12, r12
    4f7c:	dd 24       	eor	r13, r13
    4f7e:	ee 24       	eor	r14, r14
    4f80:	ff 24       	eor	r15, r15
    4f82:	00 e0       	ldi	r16, 0x00	; 0
    4f84:	10 e0       	ldi	r17, 0x00	; 0
    4f86:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__umoddi3>
    4f8a:	82 2f       	mov	r24, r18
    4f8c:	80 5d       	subi	r24, 0xD0	; 208
    4f8e:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>
				reversed/=10;
    4f92:	91 01       	movw	r18, r2
    4f94:	a2 01       	movw	r20, r4
    4f96:	b3 01       	movw	r22, r6
    4f98:	c4 01       	movw	r24, r8
    4f9a:	0e 94 2d 11 	call	0x225a	; 0x225a <__udivdi3>
    4f9e:	19 01       	movw	r2, r18
    4fa0:	2a 01       	movw	r4, r20
    4fa2:	3b 01       	movw	r6, r22
    4fa4:	4c 01       	movw	r8, r24
			while(copy_s32Number!= 0)
			{
				reversed = (reversed*10) + (copy_s32Number%10);
				copy_s32Number/=10;
			}
			while(reversed != 1)
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	28 16       	cp	r2, r24
    4faa:	01 f7       	brne	.-64     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fac:	33 20       	and	r3, r3
    4fae:	f1 f6       	brne	.-68     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fb0:	44 20       	and	r4, r4
    4fb2:	e1 f6       	brne	.-72     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fb4:	55 20       	and	r5, r5
    4fb6:	d1 f6       	brne	.-76     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fb8:	66 20       	and	r6, r6
    4fba:	c1 f6       	brne	.-80     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fbc:	77 20       	and	r7, r7
    4fbe:	b1 f6       	brne	.-84     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fc0:	88 20       	and	r8, r8
    4fc2:	a1 f6       	brne	.-88     	; 0x4f6c <LCD_voidSendNumber+0x276>
    4fc4:	99 20       	and	r9, r9
    4fc6:	91 f6       	brne	.-92     	; 0x4f6c <LCD_voidSendNumber+0x276>
				LCD_voidSendData(reversed%10 +'0');
				reversed/=10;
			}
		}
	}
}
    4fc8:	29 96       	adiw	r28, 0x09	; 9
    4fca:	0f b6       	in	r0, 0x3f	; 63
    4fcc:	f8 94       	cli
    4fce:	de bf       	out	0x3e, r29	; 62
    4fd0:	0f be       	out	0x3f, r0	; 63
    4fd2:	cd bf       	out	0x3d, r28	; 61
    4fd4:	cf 91       	pop	r28
    4fd6:	df 91       	pop	r29
    4fd8:	1f 91       	pop	r17
    4fda:	0f 91       	pop	r16
    4fdc:	ff 90       	pop	r15
    4fde:	ef 90       	pop	r14
    4fe0:	df 90       	pop	r13
    4fe2:	cf 90       	pop	r12
    4fe4:	bf 90       	pop	r11
    4fe6:	af 90       	pop	r10
    4fe8:	9f 90       	pop	r9
    4fea:	8f 90       	pop	r8
    4fec:	7f 90       	pop	r7
    4fee:	6f 90       	pop	r6
    4ff0:	5f 90       	pop	r5
    4ff2:	4f 90       	pop	r4
    4ff4:	3f 90       	pop	r3
    4ff6:	2f 90       	pop	r2
    4ff8:	08 95       	ret

00004ffa <LCD_voidSendString>:
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);

}

void LCD_voidSendString(const u8* copy_pu8String)
{
    4ffa:	1f 93       	push	r17
    4ffc:	cf 93       	push	r28
    4ffe:	df 93       	push	r29
    5000:	ec 01       	movw	r28, r24
    5002:	10 e0       	ldi	r17, 0x00	; 0
    5004:	03 c0       	rjmp	.+6      	; 0x500c <LCD_voidSendString+0x12>
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
    5006:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>

}

void LCD_voidSendString(const u8* copy_pu8String)
{
	for(u8 local_u8Iterator = 0; copy_pu8String[local_u8Iterator] != '\0';local_u8Iterator++)
    500a:	1f 5f       	subi	r17, 0xFF	; 255
    500c:	fe 01       	movw	r30, r28
    500e:	e1 0f       	add	r30, r17
    5010:	f1 1d       	adc	r31, r1
    5012:	80 81       	ld	r24, Z
    5014:	88 23       	and	r24, r24
    5016:	b9 f7       	brne	.-18     	; 0x5006 <LCD_voidSendString+0xc>
	{
		LCD_voidSendData(copy_pu8String[local_u8Iterator]);
	}
}
    5018:	df 91       	pop	r29
    501a:	cf 91       	pop	r28
    501c:	1f 91       	pop	r17
    501e:	08 95       	ret

00005020 <LCD_voidSendCommand>:




void LCD_voidSendCommand(u8 copy_u8Command)
{
    5020:	1f 93       	push	r17
    5022:	18 2f       	mov	r17, r24
	/*Set the RS pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    5024:	83 e0       	ldi	r24, 0x03	; 3
    5026:	67 e0       	ldi	r22, 0x07	; 7
    5028:	40 e0       	ldi	r20, 0x00	; 0
    502a:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

	/*Set the RW pin to be low*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_LOW);
    502e:	83 e0       	ldi	r24, 0x03	; 3
    5030:	66 e0       	ldi	r22, 0x06	; 6
    5032:	40 e0       	ldi	r20, 0x00	; 0
    5034:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortValue(LCD_DATA_PORT,copy_u8Command);
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	61 2f       	mov	r22, r17
    503c:	0e 94 40 24 	call	0x4880	; 0x4880 <DIO_u8SetPortValue>
#else
#error "Wrong LCD_MODE Configuration parameter"
#endif

	/*set the EN pin to high: 1 to read, waiting 2 msec and then make it low again*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
    5040:	83 e0       	ldi	r24, 0x03	; 3
    5042:	65 e0       	ldi	r22, 0x05	; 5
    5044:	41 e0       	ldi	r20, 0x01	; 1
    5046:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
    504a:	80 ea       	ldi	r24, 0xA0	; 160
    504c:	9f e0       	ldi	r25, 0x0F	; 15
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	f1 f7       	brne	.-4      	; 0x504e <LCD_voidSendCommand+0x2e>

	/*Wait 2 msec*/
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_LOW);
    5052:	83 e0       	ldi	r24, 0x03	; 3
    5054:	65 e0       	ldi	r22, 0x05	; 5
    5056:	40 e0       	ldi	r20, 0x00	; 0
    5058:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>

}
    505c:	1f 91       	pop	r17
    505e:	08 95       	ret

00005060 <LCD_voidClearScreen>:
	LCD_voidSendData(copy_u8PatternNumber);
}

void LCD_voidClearScreen(void)
{
	LCD_voidSendCommand(0x01);
    5060:	81 e0       	ldi	r24, 0x01	; 1
    5062:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>
}
    5066:	08 95       	ret

00005068 <LCD_voidSetPosition>:


void LCD_voidSetPosition(u8 copy_u8XPosition,u8 copy_u8YPosition)
{
	u8 Local_u8Address = 0;
	if(copy_u8XPosition == LCD_ROW0)
    5068:	88 23       	and	r24, r24
    506a:	29 f0       	breq	.+10     	; 0x5076 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition;
	}
	else if(copy_u8XPosition == LCD_ROW1)
    506c:	81 30       	cpi	r24, 0x01	; 1
    506e:	11 f0       	breq	.+4      	; 0x5074 <LCD_voidSetPosition+0xc>
    5070:	60 e0       	ldi	r22, 0x00	; 0
    5072:	01 c0       	rjmp	.+2      	; 0x5076 <LCD_voidSetPosition+0xe>
	{
		Local_u8Address = copy_u8YPosition + DDRAM_OFFSET;
    5074:	60 5c       	subi	r22, 0xC0	; 192
	{

	}

	SET_BIT(Local_u8Address,7);
	LCD_voidSendCommand(Local_u8Address);
    5076:	86 2f       	mov	r24, r22
    5078:	80 68       	ori	r24, 0x80	; 128
    507a:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>
}
    507e:	08 95       	ret

00005080 <LCD_voidSendCustomCharacter>:
		}
	}
}

void LCD_voidSendCustomCharacter(u8* copy_pu8CharacterArray,u8 copy_u8PatternNumber,u8 copy_u8XPosition,u8 copy_u8YPosition)
{
    5080:	df 92       	push	r13
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	8c 01       	movw	r16, r24
    5090:	f6 2e       	mov	r15, r22
    5092:	e4 2e       	mov	r14, r20
    5094:	d2 2e       	mov	r13, r18
	u8 Local_u8CGRAMAddress = 0 ,Local_u8LoopCounter;

	/*Calculating CGRAM Address*/
	Local_u8CGRAMAddress = copy_u8PatternNumber*8;
    5096:	86 2f       	mov	r24, r22
    5098:	88 0f       	add	r24, r24
    509a:	88 0f       	add	r24, r24
    509c:	88 0f       	add	r24, r24

	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    509e:	80 64       	ori	r24, 0x40	; 64
    50a0:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>
    50a4:	c0 e0       	ldi	r28, 0x00	; 0
    50a6:	d0 e0       	ldi	r29, 0x00	; 0

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
    50a8:	f8 01       	movw	r30, r16
    50aa:	ec 0f       	add	r30, r28
    50ac:	fd 1f       	adc	r31, r29
    50ae:	80 81       	ld	r24, Z
    50b0:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>
    50b4:	21 96       	adiw	r28, 0x01	; 1
	/*Make the 6th bit from address to be high and sending cmd to LCD*/
	SET_BIT(Local_u8CGRAMAddress,6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8LoopCounter = 0; Local_u8LoopCounter<8 ; Local_u8LoopCounter++)
    50b6:	c8 30       	cpi	r28, 0x08	; 8
    50b8:	d1 05       	cpc	r29, r1
    50ba:	b1 f7       	brne	.-20     	; 0x50a8 <LCD_voidSendCustomCharacter+0x28>
	{
		LCD_voidSendData(copy_pu8CharacterArray[Local_u8LoopCounter]);
	}
	LCD_voidSetPosition( copy_u8XPosition,copy_u8YPosition);
    50bc:	8e 2d       	mov	r24, r14
    50be:	6d 2d       	mov	r22, r13
    50c0:	0e 94 34 28 	call	0x5068	; 0x5068 <LCD_voidSetPosition>

	/*Displaying the pattern from CGRAM*/
	LCD_voidSendData(copy_u8PatternNumber);
    50c4:	8f 2d       	mov	r24, r15
    50c6:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <LCD_voidSendData>
}
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	1f 91       	pop	r17
    50d0:	0f 91       	pop	r16
    50d2:	ff 90       	pop	r15
    50d4:	ef 90       	pop	r14
    50d6:	df 90       	pop	r13
    50d8:	08 95       	ret

000050da <LCD_voidInit>:

/********************Functions Definitions*****************/
void LCD_voidInit(void)
{
	/************Set the control pins to be output**********/
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
    50da:	83 e0       	ldi	r24, 0x03	; 3
    50dc:	65 e0       	ldi	r22, 0x05	; 5
    50de:	41 e0       	ldi	r20, 0x01	; 1
    50e0:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    50e4:	83 e0       	ldi	r24, 0x03	; 3
    50e6:	66 e0       	ldi	r22, 0x06	; 6
    50e8:	41 e0       	ldi	r20, 0x01	; 1
    50ea:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    50ee:	83 e0       	ldi	r24, 0x03	; 3
    50f0:	67 e0       	ldi	r22, 0x07	; 7
    50f2:	41 e0       	ldi	r20, 0x01	; 1
    50f4:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
    50f8:	80 e9       	ldi	r24, 0x90	; 144
    50fa:	91 e0       	ldi	r25, 0x01	; 1
    50fc:	28 ec       	ldi	r18, 0xC8	; 200
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	f9 01       	movw	r30, r18
    5102:	31 97       	sbiw	r30, 0x01	; 1
    5104:	f1 f7       	brne	.-4      	; 0x5102 <LCD_voidInit+0x28>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5108:	d9 f7       	brne	.-10     	; 0x5100 <LCD_voidInit+0x26>

	/*Waiting for more than 30ms*/
	_delay_ms(40);

#if LCD_MODE == LCD_EIGHT_BIT
	DIO_u8SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	6f ef       	ldi	r22, 0xFF	; 255
    510e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_u8SetPortDirection>

	/*Send the function set command: N->1 (2 lines) ,F-> 0 (5*7 char font)*/
	LCD_voidSendCommand(0x38);
    5112:	88 e3       	ldi	r24, 0x38	; 56
    5114:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>

	/*delay 39 us*/
//	_delay_us(40);

	/*Display ON/OFF control*/
	LCD_voidSendCommand(0x0C);
    5118:	8c e0       	ldi	r24, 0x0C	; 12
    511a:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>

	/*delay 39 us*/
	//_delay_us(40);

	/*Display clear control*/
	LCD_voidSendCommand(0x01);
    511e:	81 e0       	ldi	r24, 0x01	; 1
    5120:	0e 94 10 28 	call	0x5020	; 0x5020 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x01);

#else
#error "Wrong LCD_MODE Configuration parameter"
#endif
}
    5124:	08 95       	ret

00005126 <KPD_u8GetPressed>:
	DIO_u8SetPinValue(KPD_PORT,KPD_C3,DIO_PIN_HIGH);
}


u8	KPD_u8GetPressed(void)
{
    5126:	8f 92       	push	r8
    5128:	9f 92       	push	r9
    512a:	bf 92       	push	r11
    512c:	cf 92       	push	r12
    512e:	df 92       	push	r13
    5130:	ef 92       	push	r14
    5132:	ff 92       	push	r15
    5134:	0f 93       	push	r16
    5136:	1f 93       	push	r17
    5138:	df 93       	push	r29
    513a:	cf 93       	push	r28
    513c:	0f 92       	push	r0
    513e:	cd b7       	in	r28, 0x3d	; 61
    5140:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	89 83       	std	Y+1, r24	; 0x01
    5146:	0f ef       	ldi	r16, 0xFF	; 255
    5148:	ee 24       	eor	r14, r14
    514a:	ff 24       	eor	r15, r15
	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
		{
			DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    514c:	6e 01       	movw	r12, r28
    514e:	08 94       	sec
    5150:	c1 1c       	adc	r12, r1
    5152:	d1 1c       	adc	r13, r1
    5154:	98 ec       	ldi	r25, 0xC8	; 200
    5156:	89 2e       	mov	r8, r25
    5158:	91 2c       	mov	r9, r1
}


u8	KPD_u8GetPressed(void)
{
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;
    515a:	be 2c       	mov	r11, r14

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	6e 2d       	mov	r22, r14
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
    5166:	14 e0       	ldi	r17, 0x04	; 4
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
		{
			DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5168:	80 e0       	ldi	r24, 0x00	; 0
    516a:	61 2f       	mov	r22, r17
    516c:	a6 01       	movw	r20, r12
    516e:	0e 94 76 25 	call	0x4aec	; 0x4aec <DIO_u8GetPinValue>
			if( LocaL_u8GetPressed == DIO_PIN_LOW )
    5172:	89 81       	ldd	r24, Y+1	; 0x01
    5174:	88 23       	and	r24, r24
    5176:	29 f5       	brne	.+74     	; 0x51c2 <KPD_u8GetPressed+0x9c>
    5178:	84 ef       	ldi	r24, 0xF4	; 244
    517a:	91 e0       	ldi	r25, 0x01	; 1
    517c:	f4 01       	movw	r30, r8
    517e:	31 97       	sbiw	r30, 0x01	; 1
    5180:	f1 f7       	brne	.-4      	; 0x517e <KPD_u8GetPressed+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5184:	d9 f7       	brne	.-10     	; 0x517c <KPD_u8GetPressed+0x56>
			{
				_delay_ms(50);

				DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	61 2f       	mov	r22, r17
    518a:	a6 01       	movw	r20, r12
    518c:	0e 94 76 25 	call	0x4aec	; 0x4aec <DIO_u8GetPinValue>
				if(LocaL_u8GetPressed == DIO_PIN_LOW)
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	88 23       	and	r24, r24
    5194:	b1 f4       	brne	.+44     	; 0x51c2 <KPD_u8GetPressed+0x9c>
				{
					Local_u8ReturnData = KPD_u8Buttons[Local_u8Row - KPD_ROW_INIT][Local_u8Col - KPD_COL_INIT];
    5196:	e1 2f       	mov	r30, r17
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	34 97       	sbiw	r30, 0x04	; 4
    519c:	ee 0f       	add	r30, r30
    519e:	ff 1f       	adc	r31, r31
    51a0:	ee 0f       	add	r30, r30
    51a2:	ff 1f       	adc	r31, r31
    51a4:	ee 0d       	add	r30, r14
    51a6:	ff 1d       	adc	r31, r15
    51a8:	e9 52       	subi	r30, 0x29	; 41
    51aa:	fe 4f       	sbci	r31, 0xFE	; 254
    51ac:	00 81       	ld	r16, Z
    51ae:	05 c0       	rjmp	.+10     	; 0x51ba <KPD_u8GetPressed+0x94>

					while(LocaL_u8GetPressed == 0)
					{
						DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	61 2f       	mov	r22, r17
    51b4:	a6 01       	movw	r20, r12
    51b6:	0e 94 76 25 	call	0x4aec	; 0x4aec <DIO_u8GetPinValue>
				DIO_u8GetPinValue(KPD_PORT,Local_u8Row,&LocaL_u8GetPressed);
				if(LocaL_u8GetPressed == DIO_PIN_LOW)
				{
					Local_u8ReturnData = KPD_u8Buttons[Local_u8Row - KPD_ROW_INIT][Local_u8Col - KPD_COL_INIT];

					while(LocaL_u8GetPressed == 0)
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	88 23       	and	r24, r24
    51be:	c1 f3       	breq	.-16     	; 0x51b0 <KPD_u8GetPressed+0x8a>
    51c0:	03 c0       	rjmp	.+6      	; 0x51c8 <KPD_u8GetPressed+0xa2>
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
	{
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_LOW);
		for( Local_u8Row= KPD_ROW_INIT ; Local_u8Row <KPD_ROW_END +1 ; Local_u8Row ++ )
    51c2:	1f 5f       	subi	r17, 0xFF	; 255
    51c4:	18 30       	cpi	r17, 0x08	; 8
    51c6:	81 f6       	brne	.-96     	; 0x5168 <KPD_u8GetPressed+0x42>
					}
					break;
				}
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_HIGH);
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	6b 2d       	mov	r22, r11
    51cc:	41 e0       	ldi	r20, 0x01	; 1
    51ce:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
    51d2:	08 94       	sec
    51d4:	e1 1c       	adc	r14, r1
    51d6:	f1 1c       	adc	r15, r1

u8	KPD_u8GetPressed(void)
{
	u8 Local_u8Col , Local_u8Row , Local_u8ReturnData = NOTPRESSED , LocaL_u8GetPressed=1 ;

	for( Local_u8Col= KPD_COL_INIT ; Local_u8Col < KPD_COL_END +1 ; Local_u8Col++ )
    51d8:	84 e0       	ldi	r24, 0x04	; 4
    51da:	e8 16       	cp	r14, r24
    51dc:	f1 04       	cpc	r15, r1
    51de:	09 f0       	breq	.+2      	; 0x51e2 <KPD_u8GetPressed+0xbc>
    51e0:	bc cf       	rjmp	.-136    	; 0x515a <KPD_u8GetPressed+0x34>
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_u8Col,DIO_PIN_HIGH);
	}
	return Local_u8ReturnData;
}
    51e2:	80 2f       	mov	r24, r16
    51e4:	0f 90       	pop	r0
    51e6:	cf 91       	pop	r28
    51e8:	df 91       	pop	r29
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16
    51ee:	ff 90       	pop	r15
    51f0:	ef 90       	pop	r14
    51f2:	df 90       	pop	r13
    51f4:	cf 90       	pop	r12
    51f6:	bf 90       	pop	r11
    51f8:	9f 90       	pop	r9
    51fa:	8f 90       	pop	r8
    51fc:	08 95       	ret

000051fe <KPD_Init>:

void KPD_Init(void)
{
	//Connect pull up for the rows pins

	DIO_u8ConnectPullUP(KPD_PORT,KPD_R0,DIO_PIN_HIGH);
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	64 e0       	ldi	r22, 0x04	; 4
    5202:	41 e0       	ldi	r20, 0x01	; 1
    5204:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R1,DIO_PIN_HIGH);
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	65 e0       	ldi	r22, 0x05	; 5
    520c:	41 e0       	ldi	r20, 0x01	; 1
    520e:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R2,DIO_PIN_HIGH);
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	66 e0       	ldi	r22, 0x06	; 6
    5216:	41 e0       	ldi	r20, 0x01	; 1
    5218:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <DIO_u8ConnectPullUP>
	DIO_u8ConnectPullUP(KPD_PORT,KPD_R3,DIO_PIN_HIGH);
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	67 e0       	ldi	r22, 0x07	; 7
    5220:	41 e0       	ldi	r20, 0x01	; 1
    5222:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <DIO_u8ConnectPullUP>

	//Make the Direction of Column pins Output
	DIO_u8SetPinDirection(KPD_PORT,KPD_C0,DIO_PIN_OUTPUT);
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	41 e0       	ldi	r20, 0x01	; 1
    522c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C1,DIO_PIN_OUTPUT);
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	61 e0       	ldi	r22, 0x01	; 1
    5234:	41 e0       	ldi	r20, 0x01	; 1
    5236:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C2,DIO_PIN_OUTPUT);
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	62 e0       	ldi	r22, 0x02	; 2
    523e:	41 e0       	ldi	r20, 0x01	; 1
    5240:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_C3,DIO_PIN_OUTPUT);
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	63 e0       	ldi	r22, 0x03	; 3
    5248:	41 e0       	ldi	r20, 0x01	; 1
    524a:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>

	//Make the Value of Column pins High
	DIO_u8SetPinValue(KPD_PORT,KPD_C0,DIO_PIN_HIGH);
    524e:	80 e0       	ldi	r24, 0x00	; 0
    5250:	60 e0       	ldi	r22, 0x00	; 0
    5252:	41 e0       	ldi	r20, 0x01	; 1
    5254:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C1,DIO_PIN_HIGH);
    5258:	80 e0       	ldi	r24, 0x00	; 0
    525a:	61 e0       	ldi	r22, 0x01	; 1
    525c:	41 e0       	ldi	r20, 0x01	; 1
    525e:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C2,DIO_PIN_HIGH);
    5262:	80 e0       	ldi	r24, 0x00	; 0
    5264:	62 e0       	ldi	r22, 0x02	; 2
    5266:	41 e0       	ldi	r20, 0x01	; 1
    5268:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_C3,DIO_PIN_HIGH);
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	63 e0       	ldi	r22, 0x03	; 3
    5270:	41 e0       	ldi	r20, 0x01	; 1
    5272:	0e 94 84 24 	call	0x4908	; 0x4908 <DIO_u8SetPinValue>
}
    5276:	08 95       	ret

00005278 <EEPROM_u8ReadDataByte>:
	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress)
{
    5278:	0f 93       	push	r16
    527a:	1f 93       	push	r17
    527c:	df 93       	push	r29
    527e:	cf 93       	push	r28
    5280:	0f 92       	push	r0
    5282:	cd b7       	in	r28, 0x3d	; 61
    5284:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8AddressPacket, Local_u8Data;

	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    5286:	8c 01       	movw	r16, r24
    5288:	10 65       	ori	r17, 0x50	; 80
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    528a:	0e 94 38 21 	call	0x4270	; 0x4270 <TWI_SendStartCondition>

	/*Send the address packet with write request*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    528e:	81 2f       	mov	r24, r17
    5290:	0e 94 5d 21 	call	0x42ba	; 0x42ba <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    5294:	80 2f       	mov	r24, r16
    5296:	0e 94 8b 21 	call	0x4316	; 0x4316 <TWI_MasterWriteDataByte>


	/*Send repeated start to change write request into read request*/
	TWI_SendRepeatedStart();
    529a:	0e 94 49 21 	call	0x4292	; 0x4292 <TWI_SendRepeatedStart>

	/*Send the address packet with read request*/
	TWI_SendSlaveAddressWithRead(Local_u8AddressPacket);
    529e:	81 2f       	mov	r24, r17
    52a0:	0e 94 74 21 	call	0x42e8	; 0x42e8 <TWI_SendSlaveAddressWithRead>

	/*Get the data from memory*/
	TWI_MasterReadDataByte(&Local_u8Data);
    52a4:	ce 01       	movw	r24, r28
    52a6:	01 96       	adiw	r24, 0x01	; 1
    52a8:	0e 94 9d 21 	call	0x433a	; 0x433a <TWI_MasterReadDataByte>

	/*send the stop condition*/
	TWI_SendStopCondition();
    52ac:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <TWI_SendStopCondition>


	return Local_u8Data;
}
    52b0:	89 81       	ldd	r24, Y+1	; 0x01
    52b2:	0f 90       	pop	r0
    52b4:	cf 91       	pop	r28
    52b6:	df 91       	pop	r29
    52b8:	1f 91       	pop	r17
    52ba:	0f 91       	pop	r16
    52bc:	08 95       	ret

000052be <EEPROM_voidSendDataByte>:
#include "avr/delay.h"



void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    52be:	ff 92       	push	r15
    52c0:	0f 93       	push	r16
    52c2:	1f 93       	push	r17
    52c4:	18 2f       	mov	r17, r24
    52c6:	09 2f       	mov	r16, r25
    52c8:	f6 2e       	mov	r15, r22
	/*if 24C02 :
	 * 	Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | A2_CONNECTION <<2 | A1_CONNECTION <<1 | A0_CONNECTION;
	 */

	/*Send start condition*/
	TWI_SendStartCondition();
    52ca:	0e 94 38 21 	call	0x4270	; 0x4270 <TWI_SendStartCondition>

	/*Send the address packet*/
	TWI_SendSlaveAddressWithWrite(Local_u8AddressPacket);
    52ce:	80 2f       	mov	r24, r16
    52d0:	80 65       	ori	r24, 0x50	; 80
    52d2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <TWI_SendSlaveAddressWithWrite>

	/*Send the rest 8bits of the location address*/
	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
    52d6:	81 2f       	mov	r24, r17
    52d8:	0e 94 8b 21 	call	0x4316	; 0x4316 <TWI_MasterWriteDataByte>

	/*Send the data byte to the memory location*/
	TWI_MasterWriteDataByte(Copy_u8DataByte);
    52dc:	8f 2d       	mov	r24, r15
    52de:	0e 94 8b 21 	call	0x4316	; 0x4316 <TWI_MasterWriteDataByte>

	/*Send stop condition*/
	TWI_SendStopCondition();
    52e2:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <TWI_SendStopCondition>
    52e6:	80 e2       	ldi	r24, 0x20	; 32
    52e8:	9e e4       	ldi	r25, 0x4E	; 78
    52ea:	01 97       	sbiw	r24, 0x01	; 1
    52ec:	f1 f7       	brne	.-4      	; 0x52ea <EEPROM_voidSendDataByte+0x2c>


	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    52ee:	1f 91       	pop	r17
    52f0:	0f 91       	pop	r16
    52f2:	ff 90       	pop	r15
    52f4:	08 95       	ret

000052f6 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    52f6:	ef 92       	push	r14
    52f8:	ff 92       	push	r15
    52fa:	0f 93       	push	r16
    52fc:	1f 93       	push	r17
    52fe:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5300:	05 80       	ldd	r0, Z+5	; 0x05
    5302:	f6 81       	ldd	r31, Z+6	; 0x06
    5304:	e0 2d       	mov	r30, r0
    5306:	e6 80       	ldd	r14, Z+6	; 0x06
    5308:	f7 80       	ldd	r15, Z+7	; 0x07
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    530a:	87 01       	movw	r16, r14
    530c:	04 5f       	subi	r16, 0xF4	; 244
    530e:	1f 4f       	sbci	r17, 0xFF	; 255
    5310:	c8 01       	movw	r24, r16
    5312:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    5316:	8f e3       	ldi	r24, 0x3F	; 63
    5318:	92 e0       	ldi	r25, 0x02	; 2
    531a:	b8 01       	movw	r22, r16
    531c:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    5320:	20 e0       	ldi	r18, 0x00	; 0
    5322:	e0 91 0e 02 	lds	r30, 0x020E
    5326:	f0 91 0f 02 	lds	r31, 0x020F
    532a:	d7 01       	movw	r26, r14
    532c:	56 96       	adiw	r26, 0x16	; 22
    532e:	9c 91       	ld	r25, X
    5330:	86 89       	ldd	r24, Z+22	; 0x16
    5332:	98 17       	cp	r25, r24
    5334:	08 f0       	brcs	.+2      	; 0x5338 <xCoRoutineRemoveFromEventList+0x42>
    5336:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    5338:	82 2f       	mov	r24, r18
    533a:	1f 91       	pop	r17
    533c:	0f 91       	pop	r16
    533e:	ff 90       	pop	r15
    5340:	ef 90       	pop	r14
    5342:	08 95       	ret

00005344 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    5344:	ff 92       	push	r15
    5346:	0f 93       	push	r16
    5348:	1f 93       	push	r17
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    534e:	99 e0       	ldi	r25, 0x09	; 9
    5350:	f9 2e       	mov	r15, r25
    5352:	21 c0       	rjmp	.+66     	; 0x5396 <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    5354:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    5356:	e0 91 44 02 	lds	r30, 0x0244
    535a:	f0 91 45 02 	lds	r31, 0x0245
    535e:	06 81       	ldd	r16, Z+6	; 0x06
    5360:	17 81       	ldd	r17, Z+7	; 0x07
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    5362:	c8 01       	movw	r24, r16
    5364:	0c 96       	adiw	r24, 0x0c	; 12
    5366:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    536a:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    536c:	e8 01       	movw	r28, r16
    536e:	22 96       	adiw	r28, 0x02	; 2
    5370:	ce 01       	movw	r24, r28
    5372:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    5376:	f8 01       	movw	r30, r16
    5378:	96 89       	ldd	r25, Z+22	; 0x16
    537a:	80 91 10 02 	lds	r24, 0x0210
    537e:	89 17       	cp	r24, r25
    5380:	10 f4       	brcc	.+4      	; 0x5386 <vCoRoutineSchedule+0x42>
    5382:	90 93 10 02 	sts	0x0210, r25
    5386:	9f 9d       	mul	r25, r15
    5388:	c0 01       	movw	r24, r0
    538a:	11 24       	eor	r1, r1
    538c:	89 5e       	subi	r24, 0xE9	; 233
    538e:	9d 4f       	sbci	r25, 0xFD	; 253
    5390:	be 01       	movw	r22, r28
    5392:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    5396:	80 91 3f 02 	lds	r24, 0x023F
    539a:	88 23       	and	r24, r24
    539c:	d9 f6       	brne	.-74     	; 0x5354 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    539e:	0e 94 46 30 	call	0x608c	; 0x608c <xTaskGetTickCount>
    53a2:	20 91 11 02 	lds	r18, 0x0211
    53a6:	30 91 12 02 	lds	r19, 0x0212
    53aa:	82 1b       	sub	r24, r18
    53ac:	93 0b       	sbc	r25, r19
    53ae:	90 93 14 02 	sts	0x0214, r25
    53b2:	80 93 13 02 	sts	0x0213, r24
					vListRemove( &( pxCRCB->xEventListItem ) );											
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    53b6:	89 e0       	ldi	r24, 0x09	; 9
    53b8:	f8 2e       	mov	r15, r24
    53ba:	53 c0       	rjmp	.+166    	; 0x5462 <vCoRoutineSchedule+0x11e>
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    53bc:	01 96       	adiw	r24, 0x01	; 1
    53be:	90 93 16 02 	sts	0x0216, r25
    53c2:	80 93 15 02 	sts	0x0215, r24
		xPassedTicks--;
    53c6:	21 50       	subi	r18, 0x01	; 1
    53c8:	30 40       	sbci	r19, 0x00	; 0
    53ca:	30 93 14 02 	sts	0x0214, r19
    53ce:	20 93 13 02 	sts	0x0213, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    53d2:	89 2b       	or	r24, r25
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <vCoRoutineSchedule+0x94>
    53d6:	3e c0       	rjmp	.+124    	; 0x5454 <vCoRoutineSchedule+0x110>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    53d8:	20 91 3b 02 	lds	r18, 0x023B
    53dc:	30 91 3c 02 	lds	r19, 0x023C
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    53e0:	80 91 3d 02 	lds	r24, 0x023D
    53e4:	90 91 3e 02 	lds	r25, 0x023E
    53e8:	90 93 3c 02 	sts	0x023C, r25
    53ec:	80 93 3b 02 	sts	0x023B, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    53f0:	30 93 3e 02 	sts	0x023E, r19
    53f4:	20 93 3d 02 	sts	0x023D, r18
    53f8:	2d c0       	rjmp	.+90     	; 0x5454 <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    53fa:	05 80       	ldd	r0, Z+5	; 0x05
    53fc:	f6 81       	ldd	r31, Z+6	; 0x06
    53fe:	e0 2d       	mov	r30, r0
    5400:	c6 81       	ldd	r28, Z+6	; 0x06
    5402:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    5404:	20 91 15 02 	lds	r18, 0x0215
    5408:	30 91 16 02 	lds	r19, 0x0216
    540c:	8a 81       	ldd	r24, Y+2	; 0x02
    540e:	9b 81       	ldd	r25, Y+3	; 0x03
    5410:	28 17       	cp	r18, r24
    5412:	39 07       	cpc	r19, r25
    5414:	30 f1       	brcs	.+76     	; 0x5462 <vCoRoutineSchedule+0x11e>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    5416:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    5418:	8e 01       	movw	r16, r28
    541a:	0e 5f       	subi	r16, 0xFE	; 254
    541c:	1f 4f       	sbci	r17, 0xFF	; 255
    541e:	c8 01       	movw	r24, r16
    5420:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    5424:	8c 89       	ldd	r24, Y+20	; 0x14
    5426:	9d 89       	ldd	r25, Y+21	; 0x15
    5428:	89 2b       	or	r24, r25
    542a:	21 f0       	breq	.+8      	; 0x5434 <vCoRoutineSchedule+0xf0>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    542c:	ce 01       	movw	r24, r28
    542e:	0c 96       	adiw	r24, 0x0c	; 12
    5430:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    5434:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    5436:	9e 89       	ldd	r25, Y+22	; 0x16
    5438:	80 91 10 02 	lds	r24, 0x0210
    543c:	89 17       	cp	r24, r25
    543e:	10 f4       	brcc	.+4      	; 0x5444 <vCoRoutineSchedule+0x100>
    5440:	90 93 10 02 	sts	0x0210, r25
    5444:	9f 9d       	mul	r25, r15
    5446:	c0 01       	movw	r24, r0
    5448:	11 24       	eor	r1, r1
    544a:	89 5e       	subi	r24, 0xE9	; 233
    544c:	9d 4f       	sbci	r25, 0xFD	; 253
    544e:	b8 01       	movw	r22, r16
    5450:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    5454:	e0 91 3b 02 	lds	r30, 0x023B
    5458:	f0 91 3c 02 	lds	r31, 0x023C
    545c:	80 81       	ld	r24, Z
    545e:	88 23       	and	r24, r24
    5460:	61 f6       	brne	.-104    	; 0x53fa <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    5462:	20 91 13 02 	lds	r18, 0x0213
    5466:	30 91 14 02 	lds	r19, 0x0214
    546a:	80 91 15 02 	lds	r24, 0x0215
    546e:	90 91 16 02 	lds	r25, 0x0216
    5472:	21 15       	cp	r18, r1
    5474:	31 05       	cpc	r19, r1
    5476:	09 f0       	breq	.+2      	; 0x547a <vCoRoutineSchedule+0x136>
    5478:	a1 cf       	rjmp	.-190    	; 0x53bc <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    547a:	90 93 12 02 	sts	0x0212, r25
    547e:	80 93 11 02 	sts	0x0211, r24
    5482:	90 91 10 02 	lds	r25, 0x0210

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    5486:	29 e0       	ldi	r18, 0x09	; 9
    5488:	06 c0       	rjmp	.+12     	; 0x5496 <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    548a:	99 23       	and	r25, r25
    548c:	19 f4       	brne	.+6      	; 0x5494 <vCoRoutineSchedule+0x150>
    548e:	10 92 10 02 	sts	0x0210, r1
    5492:	32 c0       	rjmp	.+100    	; 0x54f8 <vCoRoutineSchedule+0x1b4>
    5494:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    5496:	92 9f       	mul	r25, r18
    5498:	d0 01       	movw	r26, r0
    549a:	11 24       	eor	r1, r1
    549c:	a9 5e       	subi	r26, 0xE9	; 233
    549e:	bd 4f       	sbci	r27, 0xFD	; 253
    54a0:	8c 91       	ld	r24, X
    54a2:	88 23       	and	r24, r24
    54a4:	91 f3       	breq	.-28     	; 0x548a <vCoRoutineSchedule+0x146>
    54a6:	90 93 10 02 	sts	0x0210, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    54aa:	11 96       	adiw	r26, 0x01	; 1
    54ac:	ed 91       	ld	r30, X+
    54ae:	fc 91       	ld	r31, X
    54b0:	12 97       	sbiw	r26, 0x02	; 2
    54b2:	02 80       	ldd	r0, Z+2	; 0x02
    54b4:	f3 81       	ldd	r31, Z+3	; 0x03
    54b6:	e0 2d       	mov	r30, r0
    54b8:	12 96       	adiw	r26, 0x02	; 2
    54ba:	fc 93       	st	X, r31
    54bc:	ee 93       	st	-X, r30
    54be:	11 97       	sbiw	r26, 0x01	; 1
    54c0:	cd 01       	movw	r24, r26
    54c2:	03 96       	adiw	r24, 0x03	; 3
    54c4:	e8 17       	cp	r30, r24
    54c6:	f9 07       	cpc	r31, r25
    54c8:	31 f4       	brne	.+12     	; 0x54d6 <vCoRoutineSchedule+0x192>
    54ca:	82 81       	ldd	r24, Z+2	; 0x02
    54cc:	93 81       	ldd	r25, Z+3	; 0x03
    54ce:	12 96       	adiw	r26, 0x02	; 2
    54d0:	9c 93       	st	X, r25
    54d2:	8e 93       	st	-X, r24
    54d4:	11 97       	sbiw	r26, 0x01	; 1
    54d6:	11 96       	adiw	r26, 0x01	; 1
    54d8:	ed 91       	ld	r30, X+
    54da:	fc 91       	ld	r31, X
    54dc:	12 97       	sbiw	r26, 0x02	; 2
    54de:	06 80       	ldd	r0, Z+6	; 0x06
    54e0:	f7 81       	ldd	r31, Z+7	; 0x07
    54e2:	e0 2d       	mov	r30, r0
    54e4:	f0 93 0f 02 	sts	0x020F, r31
    54e8:	e0 93 0e 02 	sts	0x020E, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    54ec:	20 81       	ld	r18, Z
    54ee:	31 81       	ldd	r19, Z+1	; 0x01
    54f0:	cf 01       	movw	r24, r30
    54f2:	67 89       	ldd	r22, Z+23	; 0x17
    54f4:	f9 01       	movw	r30, r18
    54f6:	09 95       	icall

	return;
}
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	1f 91       	pop	r17
    54fe:	0f 91       	pop	r16
    5500:	ff 90       	pop	r15
    5502:	08 95       	ret

00005504 <vCoRoutineAddToDelayedList>:
	return xReturn;	
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    5504:	0f 93       	push	r16
    5506:	1f 93       	push	r17
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	eb 01       	movw	r28, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    550e:	00 91 15 02 	lds	r16, 0x0215
    5512:	10 91 16 02 	lds	r17, 0x0216
    5516:	08 0f       	add	r16, r24
    5518:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    551a:	80 91 0e 02 	lds	r24, 0x020E
    551e:	90 91 0f 02 	lds	r25, 0x020F
    5522:	02 96       	adiw	r24, 0x02	; 2
    5524:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    5528:	e0 91 0e 02 	lds	r30, 0x020E
    552c:	f0 91 0f 02 	lds	r31, 0x020F
    5530:	13 83       	std	Z+3, r17	; 0x03
    5532:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    5534:	80 91 15 02 	lds	r24, 0x0215
    5538:	90 91 16 02 	lds	r25, 0x0216
    553c:	bf 01       	movw	r22, r30
    553e:	6e 5f       	subi	r22, 0xFE	; 254
    5540:	7f 4f       	sbci	r23, 0xFF	; 255
    5542:	08 17       	cp	r16, r24
    5544:	19 07       	cpc	r17, r25
    5546:	28 f4       	brcc	.+10     	; 0x5552 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5548:	80 91 3d 02 	lds	r24, 0x023D
    554c:	90 91 3e 02 	lds	r25, 0x023E
    5550:	04 c0       	rjmp	.+8      	; 0x555a <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5552:	80 91 3b 02 	lds	r24, 0x023B
    5556:	90 91 3c 02 	lds	r25, 0x023C
    555a:	0e 94 ad 2b 	call	0x575a	; 0x575a <vListInsert>
	}

	if( pxEventList )
    555e:	20 97       	sbiw	r28, 0x00	; 0
    5560:	49 f0       	breq	.+18     	; 0x5574 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    5562:	60 91 0e 02 	lds	r22, 0x020E
    5566:	70 91 0f 02 	lds	r23, 0x020F
    556a:	64 5f       	subi	r22, 0xF4	; 244
    556c:	7f 4f       	sbci	r23, 0xFF	; 255
    556e:	ce 01       	movw	r24, r28
    5570:	0e 94 ad 2b 	call	0x575a	; 0x575a <vListInsert>
	}
}
    5574:	df 91       	pop	r29
    5576:	cf 91       	pop	r28
    5578:	1f 91       	pop	r17
    557a:	0f 91       	pop	r16
    557c:	08 95       	ret

0000557e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    557e:	af 92       	push	r10
    5580:	bf 92       	push	r11
    5582:	cf 92       	push	r12
    5584:	df 92       	push	r13
    5586:	ef 92       	push	r14
    5588:	ff 92       	push	r15
    558a:	0f 93       	push	r16
    558c:	1f 93       	push	r17
    558e:	cf 93       	push	r28
    5590:	df 93       	push	r29
    5592:	6c 01       	movw	r12, r24
    5594:	b6 2e       	mov	r11, r22
    5596:	a4 2e       	mov	r10, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    5598:	8a e1       	ldi	r24, 0x1A	; 26
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	0e 94 49 2b 	call	0x5692	; 0x5692 <pvPortMalloc>
    55a0:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    55a2:	00 97       	sbiw	r24, 0x00	; 0
    55a4:	11 f4       	brne	.+4      	; 0x55aa <xCoRoutineCreate+0x2c>
    55a6:	8f ef       	ldi	r24, 0xFF	; 255
    55a8:	59 c0       	rjmp	.+178    	; 0x565c <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    55aa:	80 91 0e 02 	lds	r24, 0x020E
    55ae:	90 91 0f 02 	lds	r25, 0x020F
    55b2:	89 2b       	or	r24, r25
    55b4:	21 f5       	brne	.+72     	; 0x55fe <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    55b6:	d0 93 0f 02 	sts	0x020F, r29
    55ba:	c0 93 0e 02 	sts	0x020E, r28
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    55be:	87 e1       	ldi	r24, 0x17	; 23
    55c0:	92 e0       	ldi	r25, 0x02	; 2
    55c2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
    55c6:	80 e2       	ldi	r24, 0x20	; 32
    55c8:	92 e0       	ldi	r25, 0x02	; 2
    55ca:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    55ce:	29 e2       	ldi	r18, 0x29	; 41
    55d0:	e2 2e       	mov	r14, r18
    55d2:	22 e0       	ldi	r18, 0x02	; 2
    55d4:	f2 2e       	mov	r15, r18
    55d6:	c7 01       	movw	r24, r14
    55d8:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    55dc:	02 e3       	ldi	r16, 0x32	; 50
    55de:	12 e0       	ldi	r17, 0x02	; 2
    55e0:	c8 01       	movw	r24, r16
    55e2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    55e6:	8f e3       	ldi	r24, 0x3F	; 63
    55e8:	92 e0       	ldi	r25, 0x02	; 2
    55ea:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    55ee:	f0 92 3c 02 	sts	0x023C, r15
    55f2:	e0 92 3b 02 	sts	0x023B, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    55f6:	10 93 3e 02 	sts	0x023E, r17
    55fa:	00 93 3d 02 	sts	0x023D, r16
    55fe:	eb 2c       	mov	r14, r11
    5600:	bb 20       	and	r11, r11
    5602:	11 f0       	breq	.+4      	; 0x5608 <xCoRoutineCreate+0x8a>
    5604:	ee 24       	eor	r14, r14
    5606:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    5608:	19 8e       	std	Y+25, r1	; 0x19
    560a:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    560c:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    560e:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    5610:	fe 01       	movw	r30, r28
    5612:	c1 92       	st	Z+, r12
    5614:	d1 92       	st	Z+, r13
    5616:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    5618:	cf 01       	movw	r24, r30
    561a:	0e 94 80 2b 	call	0x5700	; 0x5700 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    561e:	ce 01       	movw	r24, r28
    5620:	0c 96       	adiw	r24, 0x0c	; 12
    5622:	0e 94 80 2b 	call	0x5700	; 0x5700 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    5626:	d9 87       	std	Y+9, r29	; 0x09
    5628:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    562a:	db 8b       	std	Y+19, r29	; 0x13
    562c:	ca 8b       	std	Y+18, r28	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    562e:	84 e0       	ldi	r24, 0x04	; 4
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	8e 19       	sub	r24, r14
    5634:	91 09       	sbc	r25, r1
    5636:	9d 87       	std	Y+13, r25	; 0x0d
    5638:	8c 87       	std	Y+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    563a:	9e 89       	ldd	r25, Y+22	; 0x16
    563c:	80 91 10 02 	lds	r24, 0x0210
    5640:	89 17       	cp	r24, r25
    5642:	10 f4       	brcc	.+4      	; 0x5648 <xCoRoutineCreate+0xca>
    5644:	90 93 10 02 	sts	0x0210, r25
    5648:	89 e0       	ldi	r24, 0x09	; 9
    564a:	98 9f       	mul	r25, r24
    564c:	c0 01       	movw	r24, r0
    564e:	11 24       	eor	r1, r1
    5650:	89 5e       	subi	r24, 0xE9	; 233
    5652:	9d 4f       	sbci	r25, 0xFD	; 253
    5654:	b8 01       	movw	r22, r16
    5656:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    565a:	81 e0       	ldi	r24, 0x01	; 1
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}
	
	return xReturn;	
}
    565c:	df 91       	pop	r29
    565e:	cf 91       	pop	r28
    5660:	1f 91       	pop	r17
    5662:	0f 91       	pop	r16
    5664:	ff 90       	pop	r15
    5666:	ef 90       	pop	r14
    5668:	df 90       	pop	r13
    566a:	cf 90       	pop	r12
    566c:	bf 90       	pop	r11
    566e:	af 90       	pop	r10
    5670:	08 95       	ret

00005672 <vPortFree>:
{
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    5672:	08 95       	ret

00005674 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    5674:	10 92 49 02 	sts	0x0249, r1
    5678:	10 92 48 02 	sts	0x0248, r1
}
    567c:	08 95       	ret

0000567e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    567e:	20 eb       	ldi	r18, 0xB0	; 176
    5680:	34 e0       	ldi	r19, 0x04	; 4
    5682:	80 91 48 02 	lds	r24, 0x0248
    5686:	90 91 49 02 	lds	r25, 0x0249
    568a:	28 1b       	sub	r18, r24
    568c:	39 0b       	sbc	r19, r25
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
}
    568e:	c9 01       	movw	r24, r18
    5690:	08 95       	ret

00005692 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5692:	0f 93       	push	r16
    5694:	1f 93       	push	r17
    5696:	cf 93       	push	r28
    5698:	df 93       	push	r29
    569a:	8c 01       	movw	r16, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    569c:	0e 94 40 30 	call	0x6080	; 0x6080 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    56a0:	80 91 48 02 	lds	r24, 0x0248
    56a4:	90 91 49 02 	lds	r25, 0x0249
    56a8:	98 01       	movw	r18, r16
    56aa:	28 0f       	add	r18, r24
    56ac:	39 1f       	adc	r19, r25
    56ae:	44 e0       	ldi	r20, 0x04	; 4
    56b0:	20 3b       	cpi	r18, 0xB0	; 176
    56b2:	34 07       	cpc	r19, r20
    56b4:	58 f4       	brcc	.+22     	; 0x56cc <pvPortMalloc+0x3a>
    56b6:	82 17       	cp	r24, r18
    56b8:	93 07       	cpc	r25, r19
    56ba:	40 f4       	brcc	.+16     	; 0x56cc <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    56bc:	ec 01       	movw	r28, r24
    56be:	c6 5b       	subi	r28, 0xB6	; 182
    56c0:	dd 4f       	sbci	r29, 0xFD	; 253
			xNextFreeByte += xWantedSize;			
    56c2:	30 93 49 02 	sts	0x0249, r19
    56c6:	20 93 48 02 	sts	0x0248, r18
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <pvPortMalloc+0x3e>
    56cc:	c0 e0       	ldi	r28, 0x00	; 0
    56ce:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}
	xTaskResumeAll();
    56d0:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
    56d4:	ce 01       	movw	r24, r28
    56d6:	df 91       	pop	r29
    56d8:	cf 91       	pop	r28
    56da:	1f 91       	pop	r17
    56dc:	0f 91       	pop	r16
    56de:	08 95       	ret

000056e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    56e0:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    56e2:	9c 01       	movw	r18, r24
    56e4:	2d 5f       	subi	r18, 0xFD	; 253
    56e6:	3f 4f       	sbci	r19, 0xFF	; 255
    56e8:	32 83       	std	Z+2, r19	; 0x02
    56ea:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    56ec:	8f ef       	ldi	r24, 0xFF	; 255
    56ee:	9f ef       	ldi	r25, 0xFF	; 255
    56f0:	94 83       	std	Z+4, r25	; 0x04
    56f2:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    56f4:	36 83       	std	Z+6, r19	; 0x06
    56f6:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    56f8:	30 87       	std	Z+8, r19	; 0x08
    56fa:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    56fc:	10 82       	st	Z, r1
}
    56fe:	08 95       	ret

00005700 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    5700:	fc 01       	movw	r30, r24
    5702:	11 86       	std	Z+9, r1	; 0x09
    5704:	10 86       	std	Z+8, r1	; 0x08
}
    5706:	08 95       	ret

00005708 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	ac 01       	movw	r20, r24
    570e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    5710:	ec 01       	movw	r28, r24
    5712:	29 81       	ldd	r18, Y+1	; 0x01
    5714:	3a 81       	ldd	r19, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
    5716:	f9 01       	movw	r30, r18
    5718:	82 81       	ldd	r24, Z+2	; 0x02
    571a:	93 81       	ldd	r25, Z+3	; 0x03
    571c:	13 96       	adiw	r26, 0x03	; 3
    571e:	9c 93       	st	X, r25
    5720:	8e 93       	st	-X, r24
    5722:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	9a 81       	ldd	r25, Y+2	; 0x02
    5728:	15 96       	adiw	r26, 0x05	; 5
    572a:	9c 93       	st	X, r25
    572c:	8e 93       	st	-X, r24
    572e:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    5730:	02 80       	ldd	r0, Z+2	; 0x02
    5732:	f3 81       	ldd	r31, Z+3	; 0x03
    5734:	e0 2d       	mov	r30, r0
    5736:	75 83       	std	Z+5, r23	; 0x05
    5738:	64 83       	std	Z+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    573a:	e9 01       	movw	r28, r18
    573c:	7b 83       	std	Y+3, r23	; 0x03
    573e:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    5740:	fa 01       	movw	r30, r20
    5742:	72 83       	std	Z+2, r23	; 0x02
    5744:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5746:	19 96       	adiw	r26, 0x09	; 9
    5748:	5c 93       	st	X, r21
    574a:	4e 93       	st	-X, r20
    574c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
    574e:	80 81       	ld	r24, Z
    5750:	8f 5f       	subi	r24, 0xFF	; 255
    5752:	80 83       	st	Z, r24
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	08 95       	ret

0000575a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    575a:	cf 93       	push	r28
    575c:	df 93       	push	r29
    575e:	9c 01       	movw	r18, r24
    5760:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    5762:	48 81       	ld	r20, Y
    5764:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    5766:	8f ef       	ldi	r24, 0xFF	; 255
    5768:	4f 3f       	cpi	r20, 0xFF	; 255
    576a:	58 07       	cpc	r21, r24
    576c:	21 f4       	brne	.+8      	; 0x5776 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    576e:	f9 01       	movw	r30, r18
    5770:	a7 81       	ldd	r26, Z+7	; 0x07
    5772:	b0 85       	ldd	r27, Z+8	; 0x08
    5774:	10 c0       	rjmp	.+32     	; 0x5796 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    5776:	d9 01       	movw	r26, r18
    5778:	13 96       	adiw	r26, 0x03	; 3
    577a:	04 c0       	rjmp	.+8      	; 0x5784 <vListInsert+0x2a>
    577c:	12 96       	adiw	r26, 0x02	; 2
    577e:	0d 90       	ld	r0, X+
    5780:	bc 91       	ld	r27, X
    5782:	a0 2d       	mov	r26, r0
    5784:	12 96       	adiw	r26, 0x02	; 2
    5786:	ed 91       	ld	r30, X+
    5788:	fc 91       	ld	r31, X
    578a:	13 97       	sbiw	r26, 0x03	; 3
    578c:	80 81       	ld	r24, Z
    578e:	91 81       	ldd	r25, Z+1	; 0x01
    5790:	48 17       	cp	r20, r24
    5792:	59 07       	cpc	r21, r25
    5794:	98 f7       	brcc	.-26     	; 0x577c <vListInsert+0x22>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    5796:	12 96       	adiw	r26, 0x02	; 2
    5798:	ed 91       	ld	r30, X+
    579a:	fc 91       	ld	r31, X
    579c:	13 97       	sbiw	r26, 0x03	; 3
    579e:	fb 83       	std	Y+3, r31	; 0x03
    57a0:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    57a2:	d5 83       	std	Z+5, r29	; 0x05
    57a4:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    57a6:	bd 83       	std	Y+5, r27	; 0x05
    57a8:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    57aa:	13 96       	adiw	r26, 0x03	; 3
    57ac:	dc 93       	st	X, r29
    57ae:	ce 93       	st	-X, r28
    57b0:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    57b2:	39 87       	std	Y+9, r19	; 0x09
    57b4:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    57b6:	f9 01       	movw	r30, r18
    57b8:	80 81       	ld	r24, Z
    57ba:	8f 5f       	subi	r24, 0xFF	; 255
    57bc:	80 83       	st	Z, r24
}
    57be:	df 91       	pop	r29
    57c0:	cf 91       	pop	r28
    57c2:	08 95       	ret

000057c4 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    57c4:	cf 93       	push	r28
    57c6:	df 93       	push	r29
    57c8:	dc 01       	movw	r26, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    57ca:	12 96       	adiw	r26, 0x02	; 2
    57cc:	ed 91       	ld	r30, X+
    57ce:	fc 91       	ld	r31, X
    57d0:	13 97       	sbiw	r26, 0x03	; 3
    57d2:	14 96       	adiw	r26, 0x04	; 4
    57d4:	8d 91       	ld	r24, X+
    57d6:	9c 91       	ld	r25, X
    57d8:	15 97       	sbiw	r26, 0x05	; 5
    57da:	95 83       	std	Z+5, r25	; 0x05
    57dc:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    57de:	14 96       	adiw	r26, 0x04	; 4
    57e0:	cd 91       	ld	r28, X+
    57e2:	dc 91       	ld	r29, X
    57e4:	15 97       	sbiw	r26, 0x05	; 5
    57e6:	fb 83       	std	Y+3, r31	; 0x03
    57e8:	ea 83       	std	Y+2, r30	; 0x02
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    57ea:	18 96       	adiw	r26, 0x08	; 8
    57ec:	ed 91       	ld	r30, X+
    57ee:	fc 91       	ld	r31, X
    57f0:	19 97       	sbiw	r26, 0x09	; 9

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    57f2:	81 81       	ldd	r24, Z+1	; 0x01
    57f4:	92 81       	ldd	r25, Z+2	; 0x02
    57f6:	8a 17       	cp	r24, r26
    57f8:	9b 07       	cpc	r25, r27
    57fa:	11 f4       	brne	.+4      	; 0x5800 <vListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    57fc:	d2 83       	std	Z+2, r29	; 0x02
    57fe:	c1 83       	std	Z+1, r28	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    5800:	19 96       	adiw	r26, 0x09	; 9
    5802:	1c 92       	st	X, r1
    5804:	1e 92       	st	-X, r1
    5806:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    5808:	80 81       	ld	r24, Z
    580a:	81 50       	subi	r24, 0x01	; 1
    580c:	80 83       	st	Z, r24
}
    580e:	df 91       	pop	r29
    5810:	cf 91       	pop	r28
    5812:	08 95       	ret

00005814 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5814:	fc 01       	movw	r30, r24
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    5816:	91 e1       	ldi	r25, 0x11	; 17
    5818:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    581a:	22 e2       	ldi	r18, 0x22	; 34
    581c:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    581e:	83 e3       	ldi	r24, 0x33	; 51
    5820:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5822:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5824:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    5826:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    5828:	80 e8       	ldi	r24, 0x80	; 128
    582a:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    582c:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    582e:	82 e0       	ldi	r24, 0x02	; 2
    5830:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    5832:	83 e0       	ldi	r24, 0x03	; 3
    5834:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    5836:	84 e0       	ldi	r24, 0x04	; 4
    5838:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    583a:	85 e0       	ldi	r24, 0x05	; 5
    583c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    583e:	86 e0       	ldi	r24, 0x06	; 6
    5840:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    5842:	87 e0       	ldi	r24, 0x07	; 7
    5844:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    5846:	88 e0       	ldi	r24, 0x08	; 8
    5848:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    584a:	89 e0       	ldi	r24, 0x09	; 9
    584c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    584e:	80 e1       	ldi	r24, 0x10	; 16
    5850:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    5852:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    5854:	82 e1       	ldi	r24, 0x12	; 18
    5856:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    5858:	83 e1       	ldi	r24, 0x13	; 19
    585a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    585c:	84 e1       	ldi	r24, 0x14	; 20
    585e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    5860:	85 e1       	ldi	r24, 0x15	; 21
    5862:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    5864:	86 e1       	ldi	r24, 0x16	; 22
    5866:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    5868:	87 e1       	ldi	r24, 0x17	; 23
    586a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    586c:	88 e1       	ldi	r24, 0x18	; 24
    586e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    5870:	89 e1       	ldi	r24, 0x19	; 25
    5872:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    5874:	80 e2       	ldi	r24, 0x20	; 32
    5876:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    5878:	81 e2       	ldi	r24, 0x21	; 33
    587a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    587c:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    587e:	83 e2       	ldi	r24, 0x23	; 35
    5880:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5882:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    5884:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    5886:	86 e2       	ldi	r24, 0x26	; 38
    5888:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    588a:	87 e2       	ldi	r24, 0x27	; 39
    588c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    588e:	88 e2       	ldi	r24, 0x28	; 40
    5890:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    5892:	89 e2       	ldi	r24, 0x29	; 41
    5894:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    5896:	80 e3       	ldi	r24, 0x30	; 48
    5898:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    589a:	81 e3       	ldi	r24, 0x31	; 49
    589c:	82 93       	st	-Z, r24
    589e:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    58a0:	cf 01       	movw	r24, r30
    58a2:	08 95       	ret

000058a4 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
	OCR1AH = ucHighByte;
    58a4:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = ucLowByte;
    58a6:	8c e7       	ldi	r24, 0x7C	; 124
    58a8:	8a bd       	out	0x2a, r24	; 42

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    58aa:	8b e0       	ldi	r24, 0x0B	; 11
    58ac:	8e bd       	out	0x2e, r24	; 46

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    58ae:	89 b7       	in	r24, 0x39	; 57
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    58b0:	80 61       	ori	r24, 0x10	; 16
	TIMSK = ucLowByte;
    58b2:	89 bf       	out	0x39, r24	; 57
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    58b4:	a0 91 fa 06 	lds	r26, 0x06FA
    58b8:	b0 91 fb 06 	lds	r27, 0x06FB
    58bc:	cd 91       	ld	r28, X+
    58be:	cd bf       	out	0x3d, r28	; 61
    58c0:	dd 91       	ld	r29, X+
    58c2:	de bf       	out	0x3e, r29	; 62
    58c4:	ff 91       	pop	r31
    58c6:	ef 91       	pop	r30
    58c8:	df 91       	pop	r29
    58ca:	cf 91       	pop	r28
    58cc:	bf 91       	pop	r27
    58ce:	af 91       	pop	r26
    58d0:	9f 91       	pop	r25
    58d2:	8f 91       	pop	r24
    58d4:	7f 91       	pop	r23
    58d6:	6f 91       	pop	r22
    58d8:	5f 91       	pop	r21
    58da:	4f 91       	pop	r20
    58dc:	3f 91       	pop	r19
    58de:	2f 91       	pop	r18
    58e0:	1f 91       	pop	r17
    58e2:	0f 91       	pop	r16
    58e4:	ff 90       	pop	r15
    58e6:	ef 90       	pop	r14
    58e8:	df 90       	pop	r13
    58ea:	cf 90       	pop	r12
    58ec:	bf 90       	pop	r11
    58ee:	af 90       	pop	r10
    58f0:	9f 90       	pop	r9
    58f2:	8f 90       	pop	r8
    58f4:	7f 90       	pop	r7
    58f6:	6f 90       	pop	r6
    58f8:	5f 90       	pop	r5
    58fa:	4f 90       	pop	r4
    58fc:	3f 90       	pop	r3
    58fe:	2f 90       	pop	r2
    5900:	1f 90       	pop	r1
    5902:	0f 90       	pop	r0
    5904:	0f be       	out	0x3f, r0	; 63
    5906:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    5908:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	08 95       	ret

0000590e <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    590e:	08 95       	ret

00005910 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    5910:	0f 92       	push	r0
    5912:	0f b6       	in	r0, 0x3f	; 63
    5914:	f8 94       	cli
    5916:	0f 92       	push	r0
    5918:	1f 92       	push	r1
    591a:	11 24       	eor	r1, r1
    591c:	2f 92       	push	r2
    591e:	3f 92       	push	r3
    5920:	4f 92       	push	r4
    5922:	5f 92       	push	r5
    5924:	6f 92       	push	r6
    5926:	7f 92       	push	r7
    5928:	8f 92       	push	r8
    592a:	9f 92       	push	r9
    592c:	af 92       	push	r10
    592e:	bf 92       	push	r11
    5930:	cf 92       	push	r12
    5932:	df 92       	push	r13
    5934:	ef 92       	push	r14
    5936:	ff 92       	push	r15
    5938:	0f 93       	push	r16
    593a:	1f 93       	push	r17
    593c:	2f 93       	push	r18
    593e:	3f 93       	push	r19
    5940:	4f 93       	push	r20
    5942:	5f 93       	push	r21
    5944:	6f 93       	push	r22
    5946:	7f 93       	push	r23
    5948:	8f 93       	push	r24
    594a:	9f 93       	push	r25
    594c:	af 93       	push	r26
    594e:	bf 93       	push	r27
    5950:	cf 93       	push	r28
    5952:	df 93       	push	r29
    5954:	ef 93       	push	r30
    5956:	ff 93       	push	r31
    5958:	a0 91 fa 06 	lds	r26, 0x06FA
    595c:	b0 91 fb 06 	lds	r27, 0x06FB
    5960:	0d b6       	in	r0, 0x3d	; 61
    5962:	0d 92       	st	X+, r0
    5964:	0e b6       	in	r0, 0x3e	; 62
    5966:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    5968:	0e 94 3f 31 	call	0x627e	; 0x627e <vTaskIncrementTick>
	vTaskSwitchContext();
    596c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    5970:	a0 91 fa 06 	lds	r26, 0x06FA
    5974:	b0 91 fb 06 	lds	r27, 0x06FB
    5978:	cd 91       	ld	r28, X+
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	dd 91       	ld	r29, X+
    597e:	de bf       	out	0x3e, r29	; 62
    5980:	ff 91       	pop	r31
    5982:	ef 91       	pop	r30
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	bf 91       	pop	r27
    598a:	af 91       	pop	r26
    598c:	9f 91       	pop	r25
    598e:	8f 91       	pop	r24
    5990:	7f 91       	pop	r23
    5992:	6f 91       	pop	r22
    5994:	5f 91       	pop	r21
    5996:	4f 91       	pop	r20
    5998:	3f 91       	pop	r19
    599a:	2f 91       	pop	r18
    599c:	1f 91       	pop	r17
    599e:	0f 91       	pop	r16
    59a0:	ff 90       	pop	r15
    59a2:	ef 90       	pop	r14
    59a4:	df 90       	pop	r13
    59a6:	cf 90       	pop	r12
    59a8:	bf 90       	pop	r11
    59aa:	af 90       	pop	r10
    59ac:	9f 90       	pop	r9
    59ae:	8f 90       	pop	r8
    59b0:	7f 90       	pop	r7
    59b2:	6f 90       	pop	r6
    59b4:	5f 90       	pop	r5
    59b6:	4f 90       	pop	r4
    59b8:	3f 90       	pop	r3
    59ba:	2f 90       	pop	r2
    59bc:	1f 90       	pop	r1
    59be:	0f 90       	pop	r0
    59c0:	0f be       	out	0x3f, r0	; 63
    59c2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    59c4:	08 95       	ret

000059c6 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    59c6:	0e 94 88 2c 	call	0x5910	; 0x5910 <vPortYieldFromTick>
		asm volatile ( "reti" );
    59ca:	18 95       	reti

000059cc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    59cc:	0f 92       	push	r0
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	f8 94       	cli
    59d2:	0f 92       	push	r0
    59d4:	1f 92       	push	r1
    59d6:	11 24       	eor	r1, r1
    59d8:	2f 92       	push	r2
    59da:	3f 92       	push	r3
    59dc:	4f 92       	push	r4
    59de:	5f 92       	push	r5
    59e0:	6f 92       	push	r6
    59e2:	7f 92       	push	r7
    59e4:	8f 92       	push	r8
    59e6:	9f 92       	push	r9
    59e8:	af 92       	push	r10
    59ea:	bf 92       	push	r11
    59ec:	cf 92       	push	r12
    59ee:	df 92       	push	r13
    59f0:	ef 92       	push	r14
    59f2:	ff 92       	push	r15
    59f4:	0f 93       	push	r16
    59f6:	1f 93       	push	r17
    59f8:	2f 93       	push	r18
    59fa:	3f 93       	push	r19
    59fc:	4f 93       	push	r20
    59fe:	5f 93       	push	r21
    5a00:	6f 93       	push	r22
    5a02:	7f 93       	push	r23
    5a04:	8f 93       	push	r24
    5a06:	9f 93       	push	r25
    5a08:	af 93       	push	r26
    5a0a:	bf 93       	push	r27
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	ef 93       	push	r30
    5a12:	ff 93       	push	r31
    5a14:	a0 91 fa 06 	lds	r26, 0x06FA
    5a18:	b0 91 fb 06 	lds	r27, 0x06FB
    5a1c:	0d b6       	in	r0, 0x3d	; 61
    5a1e:	0d 92       	st	X+, r0
    5a20:	0e b6       	in	r0, 0x3e	; 62
    5a22:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    5a24:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    5a28:	a0 91 fa 06 	lds	r26, 0x06FA
    5a2c:	b0 91 fb 06 	lds	r27, 0x06FB
    5a30:	cd 91       	ld	r28, X+
    5a32:	cd bf       	out	0x3d, r28	; 61
    5a34:	dd 91       	ld	r29, X+
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	ff 91       	pop	r31
    5a3a:	ef 91       	pop	r30
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	bf 91       	pop	r27
    5a42:	af 91       	pop	r26
    5a44:	9f 91       	pop	r25
    5a46:	8f 91       	pop	r24
    5a48:	7f 91       	pop	r23
    5a4a:	6f 91       	pop	r22
    5a4c:	5f 91       	pop	r21
    5a4e:	4f 91       	pop	r20
    5a50:	3f 91       	pop	r19
    5a52:	2f 91       	pop	r18
    5a54:	1f 91       	pop	r17
    5a56:	0f 91       	pop	r16
    5a58:	ff 90       	pop	r15
    5a5a:	ef 90       	pop	r14
    5a5c:	df 90       	pop	r13
    5a5e:	cf 90       	pop	r12
    5a60:	bf 90       	pop	r11
    5a62:	af 90       	pop	r10
    5a64:	9f 90       	pop	r9
    5a66:	8f 90       	pop	r8
    5a68:	7f 90       	pop	r7
    5a6a:	6f 90       	pop	r6
    5a6c:	5f 90       	pop	r5
    5a6e:	4f 90       	pop	r4
    5a70:	3f 90       	pop	r3
    5a72:	2f 90       	pop	r2
    5a74:	1f 90       	pop	r1
    5a76:	0f 90       	pop	r0
    5a78:	0f be       	out	0x3f, r0	; 63
    5a7a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    5a7c:	08 95       	ret

00005a7e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    5a7e:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    5a80:	0f b6       	in	r0, 0x3f	; 63
    5a82:	f8 94       	cli
    5a84:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    5a86:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    5a88:	0f 90       	pop	r0
    5a8a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    5a8c:	08 95       	ret

00005a8e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    5a8e:	fc 01       	movw	r30, r24
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    5a90:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    5a92:	08 95       	ret

00005a94 <xQueueIsQueueEmptyFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    5a94:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    5a96:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a98:	90 e0       	ldi	r25, 0x00	; 0
    5a9a:	88 23       	and	r24, r24
    5a9c:	09 f4       	brne	.+2      	; 0x5aa0 <xQueueIsQueueEmptyFromISR+0xc>
    5a9e:	91 e0       	ldi	r25, 0x01	; 1

	return xReturn;
}
    5aa0:	89 2f       	mov	r24, r25
    5aa2:	08 95       	ret

00005aa4 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    5aa4:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    5aa6:	92 8d       	ldd	r25, Z+26	; 0x1a
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	83 8d       	ldd	r24, Z+27	; 0x1b
    5aac:	98 17       	cp	r25, r24
    5aae:	09 f4       	brne	.+2      	; 0x5ab2 <xQueueIsQueueFullFromISR+0xe>
    5ab0:	21 e0       	ldi	r18, 0x01	; 1

	return xReturn;
}
    5ab2:	82 2f       	mov	r24, r18
    5ab4:	08 95       	ret

00005ab6 <vQueueDelete>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    5ab6:	0f 93       	push	r16
    5ab8:	1f 93       	push	r17
    5aba:	8c 01       	movw	r16, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    5abc:	fc 01       	movw	r30, r24
    5abe:	80 81       	ld	r24, Z
    5ac0:	91 81       	ldd	r25, Z+1	; 0x01
    5ac2:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
	vPortFree( pxQueue );
    5ac6:	c8 01       	movw	r24, r16
    5ac8:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
}
    5acc:	1f 91       	pop	r17
    5ace:	0f 91       	pop	r16
    5ad0:	08 95       	ret

00005ad2 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    5ad2:	0f 93       	push	r16
    5ad4:	1f 93       	push	r17
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	ec 01       	movw	r28, r24
    5adc:	fb 01       	movw	r30, r22
    5ade:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    5ae0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5ae2:	88 23       	and	r24, r24
    5ae4:	81 f1       	breq	.+96     	; 0x5b46 <xQueueReceiveFromISR+0x74>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    5ae6:	48 81       	ld	r20, Y
    5ae8:	59 81       	ldd	r21, Y+1	; 0x01
    5aea:	41 15       	cp	r20, r1
    5aec:	51 05       	cpc	r21, r1
    5aee:	a9 f0       	breq	.+42     	; 0x5b1a <xQueueReceiveFromISR+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    5af0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5af2:	2e 81       	ldd	r18, Y+6	; 0x06
    5af4:	3f 81       	ldd	r19, Y+7	; 0x07
    5af6:	28 0f       	add	r18, r24
    5af8:	31 1d       	adc	r19, r1
    5afa:	3f 83       	std	Y+7, r19	; 0x07
    5afc:	2e 83       	std	Y+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    5afe:	8a 81       	ldd	r24, Y+2	; 0x02
    5b00:	9b 81       	ldd	r25, Y+3	; 0x03
    5b02:	28 17       	cp	r18, r24
    5b04:	39 07       	cpc	r19, r25
    5b06:	10 f0       	brcs	.+4      	; 0x5b0c <xQueueReceiveFromISR+0x3a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    5b08:	5f 83       	std	Y+7, r21	; 0x07
    5b0a:	4e 83       	std	Y+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    5b0c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5b0e:	6e 81       	ldd	r22, Y+6	; 0x06
    5b10:	7f 81       	ldd	r23, Y+7	; 0x07
    5b12:	cf 01       	movw	r24, r30
    5b14:	50 e0       	ldi	r21, 0x00	; 0
    5b16:	0e 94 00 37 	call	0x6e00	; 0x6e00 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    5b1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5b1c:	81 50       	subi	r24, 0x01	; 1
    5b1e:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    5b20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b22:	8f 3f       	cpi	r24, 0xFF	; 255
    5b24:	69 f4       	brne	.+26     	; 0x5b40 <xQueueReceiveFromISR+0x6e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5b26:	88 85       	ldd	r24, Y+8	; 0x08
    5b28:	88 23       	and	r24, r24
    5b2a:	61 f0       	breq	.+24     	; 0x5b44 <xQueueReceiveFromISR+0x72>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5b2c:	ce 01       	movw	r24, r28
    5b2e:	08 96       	adiw	r24, 0x08	; 8
    5b30:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5b34:	88 23       	and	r24, r24
    5b36:	31 f0       	breq	.+12     	; 0x5b44 <xQueueReceiveFromISR+0x72>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	f8 01       	movw	r30, r16
    5b3c:	80 83       	st	Z, r24
    5b3e:	03 c0       	rjmp	.+6      	; 0x5b46 <xQueueReceiveFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    5b40:	8f 5f       	subi	r24, 0xFF	; 255
    5b42:	8d 8f       	std	Y+29, r24	; 0x1d
    5b44:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    5b46:	df 91       	pop	r29
    5b48:	cf 91       	pop	r28
    5b4a:	1f 91       	pop	r17
    5b4c:	0f 91       	pop	r16
    5b4e:	08 95       	ret

00005b50 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    5b50:	cf 93       	push	r28
    5b52:	df 93       	push	r29
    5b54:	ec 01       	movw	r28, r24
    5b56:	84 2f       	mov	r24, r20
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    5b58:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5b5a:	44 23       	and	r20, r20
    5b5c:	a1 f1       	breq	.+104    	; 0x5bc6 <prvCopyDataToQueue+0x76>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    5b5e:	88 23       	and	r24, r24
    5b60:	b1 f4       	brne	.+44     	; 0x5b8e <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    5b62:	8c 81       	ldd	r24, Y+4	; 0x04
    5b64:	9d 81       	ldd	r25, Y+5	; 0x05
    5b66:	50 e0       	ldi	r21, 0x00	; 0
    5b68:	0e 94 00 37 	call	0x6e00	; 0x6e00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    5b6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b6e:	2c 81       	ldd	r18, Y+4	; 0x04
    5b70:	3d 81       	ldd	r19, Y+5	; 0x05
    5b72:	28 0f       	add	r18, r24
    5b74:	31 1d       	adc	r19, r1
    5b76:	3d 83       	std	Y+5, r19	; 0x05
    5b78:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    5b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b7e:	28 17       	cp	r18, r24
    5b80:	39 07       	cpc	r19, r25
    5b82:	08 f1       	brcs	.+66     	; 0x5bc6 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5b84:	88 81       	ld	r24, Y
    5b86:	99 81       	ldd	r25, Y+1	; 0x01
    5b88:	9d 83       	std	Y+5, r25	; 0x05
    5b8a:	8c 83       	std	Y+4, r24	; 0x04
    5b8c:	1c c0       	rjmp	.+56     	; 0x5bc6 <prvCopyDataToQueue+0x76>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    5b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    5b90:	9f 81       	ldd	r25, Y+7	; 0x07
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	0e 94 00 37 	call	0x6e00	; 0x6e00 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    5b98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	44 27       	eor	r20, r20
    5b9e:	55 27       	eor	r21, r21
    5ba0:	48 1b       	sub	r20, r24
    5ba2:	59 0b       	sbc	r21, r25
    5ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    5ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    5ba8:	84 0f       	add	r24, r20
    5baa:	95 1f       	adc	r25, r21
    5bac:	9f 83       	std	Y+7, r25	; 0x07
    5bae:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    5bb0:	28 81       	ld	r18, Y
    5bb2:	39 81       	ldd	r19, Y+1	; 0x01
    5bb4:	82 17       	cp	r24, r18
    5bb6:	93 07       	cpc	r25, r19
    5bb8:	30 f4       	brcc	.+12     	; 0x5bc6 <prvCopyDataToQueue+0x76>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5bba:	8a 81       	ldd	r24, Y+2	; 0x02
    5bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    5bbe:	84 0f       	add	r24, r20
    5bc0:	95 1f       	adc	r25, r21
    5bc2:	9f 83       	std	Y+7, r25	; 0x07
    5bc4:	8e 83       	std	Y+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    5bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5bc8:	8f 5f       	subi	r24, 0xFF	; 255
    5bca:	8a 8f       	std	Y+26, r24	; 0x1a
}
    5bcc:	df 91       	pop	r29
    5bce:	cf 91       	pop	r28
    5bd0:	08 95       	ret

00005bd2 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    5bd2:	0f 93       	push	r16
    5bd4:	1f 93       	push	r17
    5bd6:	cf 93       	push	r28
    5bd8:	df 93       	push	r29
    5bda:	ec 01       	movw	r28, r24
    5bdc:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    5bde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5be2:	98 17       	cp	r25, r24
    5be4:	10 f0       	brcs	.+4      	; 0x5bea <xQueueGenericSendFromISR+0x18>
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	17 c0       	rjmp	.+46     	; 0x5c18 <xQueueGenericSendFromISR+0x46>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5bea:	ce 01       	movw	r24, r28
    5bec:	42 2f       	mov	r20, r18
    5bee:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    5bf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    5bf6:	69 f4       	brne	.+26     	; 0x5c12 <xQueueGenericSendFromISR+0x40>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5bf8:	89 89       	ldd	r24, Y+17	; 0x11
    5bfa:	88 23       	and	r24, r24
    5bfc:	61 f0       	breq	.+24     	; 0x5c16 <xQueueGenericSendFromISR+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5bfe:	ce 01       	movw	r24, r28
    5c00:	41 96       	adiw	r24, 0x11	; 17
    5c02:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5c06:	88 23       	and	r24, r24
    5c08:	31 f0       	breq	.+12     	; 0x5c16 <xQueueGenericSendFromISR+0x44>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	f8 01       	movw	r30, r16
    5c0e:	80 83       	st	Z, r24
    5c10:	03 c0       	rjmp	.+6      	; 0x5c18 <xQueueGenericSendFromISR+0x46>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    5c12:	8f 5f       	subi	r24, 0xFF	; 255
    5c14:	8e 8f       	std	Y+30, r24	; 0x1e
    5c16:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    5c18:	df 91       	pop	r29
    5c1a:	cf 91       	pop	r28
    5c1c:	1f 91       	pop	r17
    5c1e:	0f 91       	pop	r16
    5c20:	08 95       	ret

00005c22 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    5c22:	0f 93       	push	r16
    5c24:	1f 93       	push	r17
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    5c2c:	0f b6       	in	r0, 0x3f	; 63
    5c2e:	f8 94       	cli
    5c30:	0f 92       	push	r0
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5c32:	8c 01       	movw	r16, r24
    5c34:	0f 5e       	subi	r16, 0xEF	; 239
    5c36:	1f 4f       	sbci	r17, 0xFF	; 255
    5c38:	0d c0       	rjmp	.+26     	; 0x5c54 <prvUnlockQueue+0x32>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5c3a:	89 89       	ldd	r24, Y+17	; 0x11
    5c3c:	88 23       	and	r24, r24
    5c3e:	69 f0       	breq	.+26     	; 0x5c5a <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5c40:	c8 01       	movw	r24, r16
    5c42:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5c46:	88 23       	and	r24, r24
    5c48:	11 f0       	breq	.+4      	; 0x5c4e <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    5c4a:	0e 94 e5 30 	call	0x61ca	; 0x61ca <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    5c4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5c50:	81 50       	subi	r24, 0x01	; 1
    5c52:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    5c54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5c56:	18 16       	cp	r1, r24
    5c58:	84 f3       	brlt	.-32     	; 0x5c3a <prvUnlockQueue+0x18>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    5c5a:	8f ef       	ldi	r24, 0xFF	; 255
    5c5c:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    5c5e:	0f 90       	pop	r0
    5c60:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    5c62:	0f b6       	in	r0, 0x3f	; 63
    5c64:	f8 94       	cli
    5c66:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5c68:	8e 01       	movw	r16, r28
    5c6a:	08 5f       	subi	r16, 0xF8	; 248
    5c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c6e:	0d c0       	rjmp	.+26     	; 0x5c8a <prvUnlockQueue+0x68>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5c70:	88 85       	ldd	r24, Y+8	; 0x08
    5c72:	88 23       	and	r24, r24
    5c74:	69 f0       	breq	.+26     	; 0x5c90 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5c76:	c8 01       	movw	r24, r16
    5c78:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5c7c:	88 23       	and	r24, r24
    5c7e:	11 f0       	breq	.+4      	; 0x5c84 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    5c80:	0e 94 e5 30 	call	0x61ca	; 0x61ca <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    5c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c86:	81 50       	subi	r24, 0x01	; 1
    5c88:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    5c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c8c:	18 16       	cp	r1, r24
    5c8e:	84 f3       	brlt	.-32     	; 0x5c70 <prvUnlockQueue+0x4e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    5c90:	8f ef       	ldi	r24, 0xFF	; 255
    5c92:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    5c94:	0f 90       	pop	r0
    5c96:	0f be       	out	0x3f, r0	; 63
}
    5c98:	df 91       	pop	r29
    5c9a:	cf 91       	pop	r28
    5c9c:	1f 91       	pop	r17
    5c9e:	0f 91       	pop	r16
    5ca0:	08 95       	ret

00005ca2 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    5ca2:	7f 92       	push	r7
    5ca4:	8f 92       	push	r8
    5ca6:	9f 92       	push	r9
    5ca8:	af 92       	push	r10
    5caa:	bf 92       	push	r11
    5cac:	cf 92       	push	r12
    5cae:	df 92       	push	r13
    5cb0:	ef 92       	push	r14
    5cb2:	ff 92       	push	r15
    5cb4:	0f 93       	push	r16
    5cb6:	1f 93       	push	r17
    5cb8:	df 93       	push	r29
    5cba:	cf 93       	push	r28
    5cbc:	00 d0       	rcall	.+0      	; 0x5cbe <xQueueGenericReceive+0x1c>
    5cbe:	00 d0       	rcall	.+0      	; 0x5cc0 <xQueueGenericReceive+0x1e>
    5cc0:	0f 92       	push	r0
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
    5cc6:	8c 01       	movw	r16, r24
    5cc8:	96 2e       	mov	r9, r22
    5cca:	87 2e       	mov	r8, r23
    5ccc:	5d 83       	std	Y+5, r21	; 0x05
    5cce:	4c 83       	std	Y+4, r20	; 0x04
    5cd0:	72 2e       	mov	r7, r18
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5cd2:	91 e1       	ldi	r25, 0x11	; 17
    5cd4:	c9 2e       	mov	r12, r25
    5cd6:	d1 2c       	mov	r13, r1
    5cd8:	c0 0e       	add	r12, r16
    5cda:	d1 1e       	adc	r13, r17
    5cdc:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5cde:	7e 01       	movw	r14, r28
    5ce0:	08 94       	sec
    5ce2:	e1 1c       	adc	r14, r1
    5ce4:	f1 1c       	adc	r15, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5ce6:	84 e0       	ldi	r24, 0x04	; 4
    5ce8:	a8 2e       	mov	r10, r24
    5cea:	b1 2c       	mov	r11, r1
    5cec:	ac 0e       	add	r10, r28
    5cee:	bd 1e       	adc	r11, r29
    5cf0:	01 c0       	rjmp	.+2      	; 0x5cf4 <xQueueGenericReceive+0x52>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5cf2:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    5cf4:	0f b6       	in	r0, 0x3f	; 63
    5cf6:	f8 94       	cli
    5cf8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    5cfe:	88 23       	and	r24, r24
    5d00:	09 f4       	brne	.+2      	; 0x5d04 <xQueueGenericReceive+0x62>
    5d02:	3e c0       	rjmp	.+124    	; 0x5d80 <xQueueGenericReceive+0xde>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    5d04:	e6 80       	ldd	r14, Z+6	; 0x06
    5d06:	f7 80       	ldd	r15, Z+7	; 0x07
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    5d08:	40 81       	ld	r20, Z
    5d0a:	51 81       	ldd	r21, Z+1	; 0x01
    5d0c:	41 15       	cp	r20, r1
    5d0e:	51 05       	cpc	r21, r1
    5d10:	b1 f0       	breq	.+44     	; 0x5d3e <xQueueGenericReceive+0x9c>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    5d12:	84 8d       	ldd	r24, Z+28	; 0x1c
    5d14:	97 01       	movw	r18, r14
    5d16:	28 0f       	add	r18, r24
    5d18:	31 1d       	adc	r19, r1
    5d1a:	37 83       	std	Z+7, r19	; 0x07
    5d1c:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    5d1e:	82 81       	ldd	r24, Z+2	; 0x02
    5d20:	93 81       	ldd	r25, Z+3	; 0x03
    5d22:	28 17       	cp	r18, r24
    5d24:	39 07       	cpc	r19, r25
    5d26:	10 f0       	brcs	.+4      	; 0x5d2c <xQueueGenericReceive+0x8a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    5d28:	57 83       	std	Z+7, r21	; 0x07
    5d2a:	46 83       	std	Z+6, r20	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    5d2c:	f8 01       	movw	r30, r16
    5d2e:	44 8d       	ldd	r20, Z+28	; 0x1c
    5d30:	66 81       	ldd	r22, Z+6	; 0x06
    5d32:	77 81       	ldd	r23, Z+7	; 0x07
    5d34:	89 2d       	mov	r24, r9
    5d36:	98 2d       	mov	r25, r8
    5d38:	50 e0       	ldi	r21, 0x00	; 0
    5d3a:	0e 94 00 37 	call	0x6e00	; 0x6e00 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    5d3e:	77 20       	and	r7, r7
    5d40:	71 f4       	brne	.+28     	; 0x5d5e <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    5d42:	f8 01       	movw	r30, r16
    5d44:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d46:	81 50       	subi	r24, 0x01	; 1
    5d48:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5d4a:	80 85       	ldd	r24, Z+8	; 0x08
    5d4c:	88 23       	and	r24, r24
    5d4e:	a1 f0       	breq	.+40     	; 0x5d78 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    5d50:	c8 01       	movw	r24, r16
    5d52:	08 96       	adiw	r24, 0x08	; 8
    5d54:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5d58:	81 30       	cpi	r24, 0x01	; 1
    5d5a:	71 f4       	brne	.+28     	; 0x5d78 <xQueueGenericReceive+0xd6>
    5d5c:	0b c0       	rjmp	.+22     	; 0x5d74 <xQueueGenericReceive+0xd2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    5d5e:	f8 01       	movw	r30, r16
    5d60:	f7 82       	std	Z+7, r15	; 0x07
    5d62:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5d64:	81 89       	ldd	r24, Z+17	; 0x11
    5d66:	88 23       	and	r24, r24
    5d68:	39 f0       	breq	.+14     	; 0x5d78 <xQueueGenericReceive+0xd6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5d6a:	c6 01       	movw	r24, r12
    5d6c:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5d70:	88 23       	and	r24, r24
    5d72:	11 f0       	breq	.+4      	; 0x5d78 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    5d74:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    5d78:	0f 90       	pop	r0
    5d7a:	0f be       	out	0x3f, r0	; 63
    5d7c:	81 e0       	ldi	r24, 0x01	; 1
    5d7e:	4a c0       	rjmp	.+148    	; 0x5e14 <xQueueGenericReceive+0x172>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    5d80:	8c 81       	ldd	r24, Y+4	; 0x04
    5d82:	9d 81       	ldd	r25, Y+5	; 0x05
    5d84:	89 2b       	or	r24, r25
    5d86:	19 f4       	brne	.+6      	; 0x5d8e <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5d88:	0f 90       	pop	r0
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	42 c0       	rjmp	.+132    	; 0x5e12 <xQueueGenericReceive+0x170>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    5d8e:	22 23       	and	r18, r18
    5d90:	19 f4       	brne	.+6      	; 0x5d98 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5d92:	c7 01       	movw	r24, r14
    5d94:	0e 94 9c 30 	call	0x6138	; 0x6138 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    5d98:	0f 90       	pop	r0
    5d9a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5d9c:	0e 94 40 30 	call	0x6080	; 0x6080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5da0:	0f b6       	in	r0, 0x3f	; 63
    5da2:	f8 94       	cli
    5da4:	0f 92       	push	r0
    5da6:	f8 01       	movw	r30, r16
    5da8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5daa:	8f 3f       	cpi	r24, 0xFF	; 255
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <xQueueGenericReceive+0x10e>
    5dae:	15 8e       	std	Z+29, r1	; 0x1d
    5db0:	f8 01       	movw	r30, r16
    5db2:	86 8d       	ldd	r24, Z+30	; 0x1e
    5db4:	8f 3f       	cpi	r24, 0xFF	; 255
    5db6:	09 f4       	brne	.+2      	; 0x5dba <xQueueGenericReceive+0x118>
    5db8:	16 8e       	std	Z+30, r1	; 0x1e
    5dba:	0f 90       	pop	r0
    5dbc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5dbe:	c7 01       	movw	r24, r14
    5dc0:	b5 01       	movw	r22, r10
    5dc2:	0e 94 a7 30 	call	0x614e	; 0x614e <xTaskCheckForTimeOut>
    5dc6:	88 23       	and	r24, r24
    5dc8:	f9 f4       	brne	.+62     	; 0x5e08 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    5dca:	0f b6       	in	r0, 0x3f	; 63
    5dcc:	f8 94       	cli
    5dce:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    5dd0:	f8 01       	movw	r30, r16
    5dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    5dd4:	0f 90       	pop	r0
    5dd6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    5dd8:	88 23       	and	r24, r24
    5dda:	81 f4       	brne	.+32     	; 0x5dfc <xQueueGenericReceive+0x15a>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5ddc:	6c 81       	ldd	r22, Y+4	; 0x04
    5dde:	7d 81       	ldd	r23, Y+5	; 0x05
    5de0:	c6 01       	movw	r24, r12
    5de2:	0e 94 68 32 	call	0x64d0	; 0x64d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    5de6:	c8 01       	movw	r24, r16
    5de8:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    5dec:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5df0:	88 23       	and	r24, r24
    5df2:	09 f0       	breq	.+2      	; 0x5df6 <xQueueGenericReceive+0x154>
    5df4:	7e cf       	rjmp	.-260    	; 0x5cf2 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    5df6:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
    5dfa:	7b cf       	rjmp	.-266    	; 0x5cf2 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    5dfc:	c8 01       	movw	r24, r16
    5dfe:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5e02:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5e06:	75 cf       	rjmp	.-278    	; 0x5cf2 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    5e08:	c8 01       	movw	r24, r16
    5e0a:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5e0e:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5e12:	80 e0       	ldi	r24, 0x00	; 0
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    5e14:	0f 90       	pop	r0
    5e16:	0f 90       	pop	r0
    5e18:	0f 90       	pop	r0
    5e1a:	0f 90       	pop	r0
    5e1c:	0f 90       	pop	r0
    5e1e:	cf 91       	pop	r28
    5e20:	df 91       	pop	r29
    5e22:	1f 91       	pop	r17
    5e24:	0f 91       	pop	r16
    5e26:	ff 90       	pop	r15
    5e28:	ef 90       	pop	r14
    5e2a:	df 90       	pop	r13
    5e2c:	cf 90       	pop	r12
    5e2e:	bf 90       	pop	r11
    5e30:	af 90       	pop	r10
    5e32:	9f 90       	pop	r9
    5e34:	8f 90       	pop	r8
    5e36:	7f 90       	pop	r7
    5e38:	08 95       	ret

00005e3a <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    5e3a:	7f 92       	push	r7
    5e3c:	8f 92       	push	r8
    5e3e:	9f 92       	push	r9
    5e40:	af 92       	push	r10
    5e42:	bf 92       	push	r11
    5e44:	cf 92       	push	r12
    5e46:	df 92       	push	r13
    5e48:	ef 92       	push	r14
    5e4a:	ff 92       	push	r15
    5e4c:	0f 93       	push	r16
    5e4e:	1f 93       	push	r17
    5e50:	df 93       	push	r29
    5e52:	cf 93       	push	r28
    5e54:	00 d0       	rcall	.+0      	; 0x5e56 <xQueueGenericSend+0x1c>
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <xQueueGenericSend+0x1e>
    5e58:	0f 92       	push	r0
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
    5e5e:	8c 01       	movw	r16, r24
    5e60:	6b 01       	movw	r12, r22
    5e62:	5d 83       	std	Y+5, r21	; 0x05
    5e64:	4c 83       	std	Y+4, r20	; 0x04
    5e66:	72 2e       	mov	r7, r18
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5e68:	48 e0       	ldi	r20, 0x08	; 8
    5e6a:	e4 2e       	mov	r14, r20
    5e6c:	f1 2c       	mov	r15, r1
    5e6e:	e8 0e       	add	r14, r24
    5e70:	f9 1e       	adc	r15, r25
    5e72:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5e74:	5e 01       	movw	r10, r28
    5e76:	08 94       	sec
    5e78:	a1 1c       	adc	r10, r1
    5e7a:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5e7c:	34 e0       	ldi	r19, 0x04	; 4
    5e7e:	83 2e       	mov	r8, r19
    5e80:	91 2c       	mov	r9, r1
    5e82:	8c 0e       	add	r8, r28
    5e84:	9d 1e       	adc	r9, r29
    5e86:	01 c0       	rjmp	.+2      	; 0x5e8a <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5e88:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5e8a:	0f b6       	in	r0, 0x3f	; 63
    5e8c:	f8 94       	cli
    5e8e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    5e90:	f8 01       	movw	r30, r16
    5e92:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e94:	83 8d       	ldd	r24, Z+27	; 0x1b
    5e96:	98 17       	cp	r25, r24
    5e98:	a8 f4       	brcc	.+42     	; 0x5ec4 <xQueueGenericSend+0x8a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5e9a:	c8 01       	movw	r24, r16
    5e9c:	b6 01       	movw	r22, r12
    5e9e:	47 2d       	mov	r20, r7
    5ea0:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5ea4:	f8 01       	movw	r30, r16
    5ea6:	81 89       	ldd	r24, Z+17	; 0x11
    5ea8:	88 23       	and	r24, r24
    5eaa:	41 f0       	breq	.+16     	; 0x5ebc <xQueueGenericSend+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    5eac:	c8 01       	movw	r24, r16
    5eae:	41 96       	adiw	r24, 0x11	; 17
    5eb0:	0e 94 00 31 	call	0x6200	; 0x6200 <xTaskRemoveFromEventList>
    5eb4:	81 30       	cpi	r24, 0x01	; 1
    5eb6:	11 f4       	brne	.+4      	; 0x5ebc <xQueueGenericSend+0x82>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    5eb8:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    5ebc:	0f 90       	pop	r0
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	81 e0       	ldi	r24, 0x01	; 1
    5ec2:	4c c0       	rjmp	.+152    	; 0x5f5c <xQueueGenericSend+0x122>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    5ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    5ec8:	89 2b       	or	r24, r25
    5eca:	19 f4       	brne	.+6      	; 0x5ed2 <xQueueGenericSend+0x98>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5ecc:	0f 90       	pop	r0
    5ece:	0f be       	out	0x3f, r0	; 63
    5ed0:	44 c0       	rjmp	.+136    	; 0x5f5a <xQueueGenericSend+0x120>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    5ed2:	22 23       	and	r18, r18
    5ed4:	19 f4       	brne	.+6      	; 0x5edc <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5ed6:	c5 01       	movw	r24, r10
    5ed8:	0e 94 9c 30 	call	0x6138	; 0x6138 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    5edc:	0f 90       	pop	r0
    5ede:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5ee0:	0e 94 40 30 	call	0x6080	; 0x6080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    5ee4:	0f b6       	in	r0, 0x3f	; 63
    5ee6:	f8 94       	cli
    5ee8:	0f 92       	push	r0
    5eea:	f8 01       	movw	r30, r16
    5eec:	85 8d       	ldd	r24, Z+29	; 0x1d
    5eee:	8f 3f       	cpi	r24, 0xFF	; 255
    5ef0:	09 f4       	brne	.+2      	; 0x5ef4 <xQueueGenericSend+0xba>
    5ef2:	15 8e       	std	Z+29, r1	; 0x1d
    5ef4:	f8 01       	movw	r30, r16
    5ef6:	86 8d       	ldd	r24, Z+30	; 0x1e
    5ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    5efa:	09 f4       	brne	.+2      	; 0x5efe <xQueueGenericSend+0xc4>
    5efc:	16 8e       	std	Z+30, r1	; 0x1e
    5efe:	0f 90       	pop	r0
    5f00:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    5f02:	c5 01       	movw	r24, r10
    5f04:	b4 01       	movw	r22, r8
    5f06:	0e 94 a7 30 	call	0x614e	; 0x614e <xTaskCheckForTimeOut>
    5f0a:	88 23       	and	r24, r24
    5f0c:	09 f5       	brne	.+66     	; 0x5f50 <xQueueGenericSend+0x116>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    5f0e:	0f b6       	in	r0, 0x3f	; 63
    5f10:	f8 94       	cli
    5f12:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    5f14:	f8 01       	movw	r30, r16
    5f16:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    5f18:	0f 90       	pop	r0
    5f1a:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    5f1c:	f8 01       	movw	r30, r16
    5f1e:	83 8d       	ldd	r24, Z+27	; 0x1b
    5f20:	98 17       	cp	r25, r24
    5f22:	81 f4       	brne	.+32     	; 0x5f44 <xQueueGenericSend+0x10a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    5f24:	6c 81       	ldd	r22, Y+4	; 0x04
    5f26:	7d 81       	ldd	r23, Y+5	; 0x05
    5f28:	c7 01       	movw	r24, r14
    5f2a:	0e 94 68 32 	call	0x64d0	; 0x64d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    5f2e:	c8 01       	movw	r24, r16
    5f30:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    5f34:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5f38:	88 23       	and	r24, r24
    5f3a:	09 f0       	breq	.+2      	; 0x5f3e <xQueueGenericSend+0x104>
    5f3c:	a5 cf       	rjmp	.-182    	; 0x5e88 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    5f3e:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
    5f42:	a2 cf       	rjmp	.-188    	; 0x5e88 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    5f44:	c8 01       	movw	r24, r16
    5f46:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5f4a:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5f4e:	9c cf       	rjmp	.-200    	; 0x5e88 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    5f50:	c8 01       	movw	r24, r16
    5f52:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5f56:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
    5f5a:	80 e0       	ldi	r24, 0x00	; 0
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    5f5c:	0f 90       	pop	r0
    5f5e:	0f 90       	pop	r0
    5f60:	0f 90       	pop	r0
    5f62:	0f 90       	pop	r0
    5f64:	0f 90       	pop	r0
    5f66:	cf 91       	pop	r28
    5f68:	df 91       	pop	r29
    5f6a:	1f 91       	pop	r17
    5f6c:	0f 91       	pop	r16
    5f6e:	ff 90       	pop	r15
    5f70:	ef 90       	pop	r14
    5f72:	df 90       	pop	r13
    5f74:	cf 90       	pop	r12
    5f76:	bf 90       	pop	r11
    5f78:	af 90       	pop	r10
    5f7a:	9f 90       	pop	r9
    5f7c:	8f 90       	pop	r8
    5f7e:	7f 90       	pop	r7
    5f80:	08 95       	ret

00005f82 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    5f82:	af 92       	push	r10
    5f84:	bf 92       	push	r11
    5f86:	cf 92       	push	r12
    5f88:	df 92       	push	r13
    5f8a:	ef 92       	push	r14
    5f8c:	ff 92       	push	r15
    5f8e:	0f 93       	push	r16
    5f90:	1f 93       	push	r17
    5f92:	cf 93       	push	r28
    5f94:	df 93       	push	r29
    5f96:	b8 2e       	mov	r11, r24
    5f98:	a6 2e       	mov	r10, r22
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    5f9a:	88 23       	and	r24, r24
    5f9c:	09 f4       	brne	.+2      	; 0x5fa0 <xQueueCreate+0x1e>
    5f9e:	42 c0       	rjmp	.+132    	; 0x6024 <xQueueCreate+0xa2>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    5fa0:	8f e1       	ldi	r24, 0x1F	; 31
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	0e 94 49 2b 	call	0x5692	; 0x5692 <pvPortMalloc>
    5fa8:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
    5faa:	00 97       	sbiw	r24, 0x00	; 0
    5fac:	d9 f1       	breq	.+118    	; 0x6024 <xQueueCreate+0xa2>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    5fae:	eb 2c       	mov	r14, r11
    5fb0:	ff 24       	eor	r15, r15
    5fb2:	ca 2c       	mov	r12, r10
    5fb4:	dd 24       	eor	r13, r13
    5fb6:	ce 9c       	mul	r12, r14
    5fb8:	80 01       	movw	r16, r0
    5fba:	cf 9c       	mul	r12, r15
    5fbc:	10 0d       	add	r17, r0
    5fbe:	de 9c       	mul	r13, r14
    5fc0:	10 0d       	add	r17, r0
    5fc2:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    5fc4:	c8 01       	movw	r24, r16
    5fc6:	01 96       	adiw	r24, 0x01	; 1
    5fc8:	0e 94 49 2b 	call	0x5692	; 0x5692 <pvPortMalloc>
    5fcc:	9c 01       	movw	r18, r24
    5fce:	99 83       	std	Y+1, r25	; 0x01
    5fd0:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
    5fd2:	00 97       	sbiw	r24, 0x00	; 0
    5fd4:	21 f1       	breq	.+72     	; 0x601e <xQueueCreate+0x9c>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    5fd6:	08 0f       	add	r16, r24
    5fd8:	19 1f       	adc	r17, r25
    5fda:	1b 83       	std	Y+3, r17	; 0x03
    5fdc:	0a 83       	std	Y+2, r16	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    5fde:	1a 8e       	std	Y+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    5fe0:	9d 83       	std	Y+5, r25	; 0x05
    5fe2:	8c 83       	std	Y+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    5fe4:	08 94       	sec
    5fe6:	e1 08       	sbc	r14, r1
    5fe8:	f1 08       	sbc	r15, r1
    5fea:	ec 9c       	mul	r14, r12
    5fec:	c0 01       	movw	r24, r0
    5fee:	ed 9c       	mul	r14, r13
    5ff0:	90 0d       	add	r25, r0
    5ff2:	fc 9c       	mul	r15, r12
    5ff4:	90 0d       	add	r25, r0
    5ff6:	11 24       	eor	r1, r1
    5ff8:	28 0f       	add	r18, r24
    5ffa:	39 1f       	adc	r19, r25
    5ffc:	3f 83       	std	Y+7, r19	; 0x07
    5ffe:	2e 83       	std	Y+6, r18	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    6000:	bb 8e       	std	Y+27, r11	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    6002:	ac 8e       	std	Y+28, r10	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    6004:	8f ef       	ldi	r24, 0xFF	; 255
    6006:	8d 8f       	std	Y+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    6008:	8e 8f       	std	Y+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    600a:	ce 01       	movw	r24, r28
    600c:	08 96       	adiw	r24, 0x08	; 8
    600e:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    6012:	ce 01       	movw	r24, r28
    6014:	41 96       	adiw	r24, 0x11	; 17
    6016:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
    601a:	9e 01       	movw	r18, r28
    601c:	05 c0       	rjmp	.+10     	; 0x6028 <xQueueCreate+0xa6>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    601e:	ce 01       	movw	r24, r28
    6020:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
    6024:	20 e0       	ldi	r18, 0x00	; 0
    6026:	30 e0       	ldi	r19, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
    6028:	c9 01       	movw	r24, r18
    602a:	df 91       	pop	r29
    602c:	cf 91       	pop	r28
    602e:	1f 91       	pop	r17
    6030:	0f 91       	pop	r16
    6032:	ff 90       	pop	r15
    6034:	ef 90       	pop	r14
    6036:	df 90       	pop	r13
    6038:	cf 90       	pop	r12
    603a:	bf 90       	pop	r11
    603c:	af 90       	pop	r10
    603e:	08 95       	ret

00006040 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    6040:	1f 93       	push	r17
    6042:	16 2f       	mov	r17, r22
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    6044:	60 e0       	ldi	r22, 0x00	; 0
    6046:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    604a:	fc 01       	movw	r30, r24

		if( pxHandle != NULL )
    604c:	00 97       	sbiw	r24, 0x00	; 0
    604e:	09 f0       	breq	.+2      	; 0x6052 <xQueueCreateCountingSemaphore+0x12>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    6050:	12 8f       	std	Z+26, r17	; 0x1a
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
    6052:	cf 01       	movw	r24, r30
    6054:	1f 91       	pop	r17
    6056:	08 95       	ret

00006058 <xTaskIsTaskSuspended>:
#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    6058:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    605a:	82 85       	ldd	r24, Z+10	; 0x0a
    605c:	93 85       	ldd	r25, Z+11	; 0x0b
    605e:	84 55       	subi	r24, 0x54	; 84
    6060:	97 40       	sbci	r25, 0x07	; 7
    6062:	59 f4       	brne	.+22     	; 0x607a <xTaskIsTaskSuspended+0x22>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    6064:	84 89       	ldd	r24, Z+20	; 0x14
    6066:	95 89       	ldd	r25, Z+21	; 0x15
    6068:	27 e0       	ldi	r18, 0x07	; 7
    606a:	82 34       	cpi	r24, 0x42	; 66
    606c:	92 07       	cpc	r25, r18
    606e:	29 f0       	breq	.+10     	; 0x607a <xTaskIsTaskSuspended+0x22>
    6070:	20 e0       	ldi	r18, 0x00	; 0
    6072:	89 2b       	or	r24, r25
    6074:	19 f4       	brne	.+6      	; 0x607c <xTaskIsTaskSuspended+0x24>
    6076:	21 e0       	ldi	r18, 0x01	; 1
    6078:	01 c0       	rjmp	.+2      	; 0x607c <xTaskIsTaskSuspended+0x24>
    607a:	20 e0       	ldi	r18, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    607c:	82 2f       	mov	r24, r18
    607e:	08 95       	ret

00006080 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    6080:	80 91 00 07 	lds	r24, 0x0700
    6084:	8f 5f       	subi	r24, 0xFF	; 255
    6086:	80 93 00 07 	sts	0x0700, r24
}
    608a:	08 95       	ret

0000608c <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    608c:	0f b6       	in	r0, 0x3f	; 63
    608e:	f8 94       	cli
    6090:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    6092:	20 91 fe 06 	lds	r18, 0x06FE
    6096:	30 91 ff 06 	lds	r19, 0x06FF
	}
	taskEXIT_CRITICAL();
    609a:	0f 90       	pop	r0
    609c:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    609e:	c9 01       	movw	r24, r18
    60a0:	08 95       	ret

000060a2 <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    60a2:	20 91 fe 06 	lds	r18, 0x06FE
    60a6:	30 91 ff 06 	lds	r19, 0x06FF
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    60aa:	c9 01       	movw	r24, r18
    60ac:	08 95       	ret

000060ae <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    60ae:	80 91 03 07 	lds	r24, 0x0703
}
    60b2:	08 95       	ret

000060b4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    60b4:	80 91 00 07 	lds	r24, 0x0700
    60b8:	88 23       	and	r24, r24
    60ba:	51 f0       	breq	.+20     	; 0x60d0 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    60bc:	81 e0       	ldi	r24, 0x01	; 1
    60be:	80 93 fc 06 	sts	0x06FC, r24
    60c2:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    60c4:	80 91 01 07 	lds	r24, 0x0701
    60c8:	81 50       	subi	r24, 0x01	; 1
    60ca:	80 93 01 07 	sts	0x0701, r24
    60ce:	01 c0       	rjmp	.+2      	; 0x60d2 <vTaskSwitchContext+0x1e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    60d0:	99 e0       	ldi	r25, 0x09	; 9
    60d2:	e0 91 01 07 	lds	r30, 0x0701
    60d6:	e9 9f       	mul	r30, r25
    60d8:	f0 01       	movw	r30, r0
    60da:	11 24       	eor	r1, r1
    60dc:	e8 5f       	subi	r30, 0xF8	; 248
    60de:	f8 4f       	sbci	r31, 0xF8	; 248
    60e0:	80 81       	ld	r24, Z
    60e2:	88 23       	and	r24, r24
    60e4:	79 f3       	breq	.-34     	; 0x60c4 <vTaskSwitchContext+0x10>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    60e6:	90 91 01 07 	lds	r25, 0x0701
    60ea:	89 e0       	ldi	r24, 0x09	; 9
    60ec:	98 9f       	mul	r25, r24
    60ee:	d0 01       	movw	r26, r0
    60f0:	11 24       	eor	r1, r1
    60f2:	a8 5f       	subi	r26, 0xF8	; 248
    60f4:	b8 4f       	sbci	r27, 0xF8	; 248
    60f6:	11 96       	adiw	r26, 0x01	; 1
    60f8:	ed 91       	ld	r30, X+
    60fa:	fc 91       	ld	r31, X
    60fc:	12 97       	sbiw	r26, 0x02	; 2
    60fe:	02 80       	ldd	r0, Z+2	; 0x02
    6100:	f3 81       	ldd	r31, Z+3	; 0x03
    6102:	e0 2d       	mov	r30, r0
    6104:	12 96       	adiw	r26, 0x02	; 2
    6106:	fc 93       	st	X, r31
    6108:	ee 93       	st	-X, r30
    610a:	11 97       	sbiw	r26, 0x01	; 1
    610c:	cd 01       	movw	r24, r26
    610e:	03 96       	adiw	r24, 0x03	; 3
    6110:	e8 17       	cp	r30, r24
    6112:	f9 07       	cpc	r31, r25
    6114:	31 f4       	brne	.+12     	; 0x6122 <vTaskSwitchContext+0x6e>
    6116:	82 81       	ldd	r24, Z+2	; 0x02
    6118:	93 81       	ldd	r25, Z+3	; 0x03
    611a:	12 96       	adiw	r26, 0x02	; 2
    611c:	9c 93       	st	X, r25
    611e:	8e 93       	st	-X, r24
    6120:	11 97       	sbiw	r26, 0x01	; 1
    6122:	11 96       	adiw	r26, 0x01	; 1
    6124:	ed 91       	ld	r30, X+
    6126:	fc 91       	ld	r31, X
    6128:	12 97       	sbiw	r26, 0x02	; 2
    612a:	86 81       	ldd	r24, Z+6	; 0x06
    612c:	97 81       	ldd	r25, Z+7	; 0x07
    612e:	90 93 fb 06 	sts	0x06FB, r25
    6132:	80 93 fa 06 	sts	0x06FA, r24
    6136:	08 95       	ret

00006138 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    6138:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    613a:	80 91 fd 06 	lds	r24, 0x06FD
    613e:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    6140:	80 91 fe 06 	lds	r24, 0x06FE
    6144:	90 91 ff 06 	lds	r25, 0x06FF
    6148:	92 83       	std	Z+2, r25	; 0x02
    614a:	81 83       	std	Z+1, r24	; 0x01
}
    614c:	08 95       	ret

0000614e <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    614e:	fc 01       	movw	r30, r24
    6150:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    6152:	0f b6       	in	r0, 0x3f	; 63
    6154:	f8 94       	cli
    6156:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    6158:	4d 91       	ld	r20, X+
    615a:	5c 91       	ld	r21, X
    615c:	11 97       	sbiw	r26, 0x01	; 1
    615e:	8f ef       	ldi	r24, 0xFF	; 255
    6160:	4f 3f       	cpi	r20, 0xFF	; 255
    6162:	58 07       	cpc	r21, r24
    6164:	61 f1       	breq	.+88     	; 0x61be <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    6166:	90 91 fd 06 	lds	r25, 0x06FD
    616a:	80 81       	ld	r24, Z
    616c:	98 17       	cp	r25, r24
    616e:	49 f0       	breq	.+18     	; 0x6182 <xTaskCheckForTimeOut+0x34>
    6170:	20 91 fe 06 	lds	r18, 0x06FE
    6174:	30 91 ff 06 	lds	r19, 0x06FF
    6178:	81 81       	ldd	r24, Z+1	; 0x01
    617a:	92 81       	ldd	r25, Z+2	; 0x02
    617c:	28 17       	cp	r18, r24
    617e:	39 07       	cpc	r19, r25
    6180:	00 f5       	brcc	.+64     	; 0x61c2 <xTaskCheckForTimeOut+0x74>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    6182:	80 91 fe 06 	lds	r24, 0x06FE
    6186:	90 91 ff 06 	lds	r25, 0x06FF
    618a:	21 81       	ldd	r18, Z+1	; 0x01
    618c:	32 81       	ldd	r19, Z+2	; 0x02
    618e:	82 1b       	sub	r24, r18
    6190:	93 0b       	sbc	r25, r19
    6192:	84 17       	cp	r24, r20
    6194:	95 07       	cpc	r25, r21
    6196:	a8 f4       	brcc	.+42     	; 0x61c2 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    6198:	80 91 fe 06 	lds	r24, 0x06FE
    619c:	90 91 ff 06 	lds	r25, 0x06FF
    61a0:	28 1b       	sub	r18, r24
    61a2:	39 0b       	sbc	r19, r25
    61a4:	24 0f       	add	r18, r20
    61a6:	35 1f       	adc	r19, r21
    61a8:	2d 93       	st	X+, r18
    61aa:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    61ac:	80 91 fd 06 	lds	r24, 0x06FD
    61b0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    61b2:	80 91 fe 06 	lds	r24, 0x06FE
    61b6:	90 91 ff 06 	lds	r25, 0x06FF
    61ba:	92 83       	std	Z+2, r25	; 0x02
    61bc:	81 83       	std	Z+1, r24	; 0x01
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <xTaskCheckForTimeOut+0x76>
    61c2:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    61c4:	0f 90       	pop	r0
    61c6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    61c8:	08 95       	ret

000061ca <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    61ca:	81 e0       	ldi	r24, 0x01	; 1
    61cc:	80 93 fc 06 	sts	0x06FC, r24
}
    61d0:	08 95       	ret

000061d2 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    61d2:	00 97       	sbiw	r24, 0x00	; 0
    61d4:	29 f4       	brne	.+10     	; 0x61e0 <uxTaskGetStackHighWaterMark+0xe>
    61d6:	e0 91 fa 06 	lds	r30, 0x06FA
    61da:	f0 91 fb 06 	lds	r31, 0x06FB
    61de:	01 c0       	rjmp	.+2      	; 0x61e2 <uxTaskGetStackHighWaterMark+0x10>
    61e0:	fc 01       	movw	r30, r24

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    61e2:	87 89       	ldd	r24, Z+23	; 0x17
    61e4:	90 8d       	ldd	r25, Z+24	; 0x18
    61e6:	9c 01       	movw	r18, r24
    61e8:	f9 01       	movw	r30, r18
    61ea:	20 e0       	ldi	r18, 0x00	; 0
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	03 c0       	rjmp	.+6      	; 0x61f6 <uxTaskGetStackHighWaterMark+0x24>
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
    61f0:	31 96       	adiw	r30, 0x01	; 1
			usCount++;
    61f2:	2f 5f       	subi	r18, 0xFF	; 255
    61f4:	3f 4f       	sbci	r19, 0xFF	; 255

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    61f6:	80 81       	ld	r24, Z
    61f8:	85 3a       	cpi	r24, 0xA5	; 165
    61fa:	d1 f3       	breq	.-12     	; 0x61f0 <uxTaskGetStackHighWaterMark+0x1e>
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    61fc:	82 2f       	mov	r24, r18
    61fe:	08 95       	ret

00006200 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    6200:	0f 93       	push	r16
    6202:	1f 93       	push	r17
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	fc 01       	movw	r30, r24
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    620a:	05 80       	ldd	r0, Z+5	; 0x05
    620c:	f6 81       	ldd	r31, Z+6	; 0x06
    620e:	e0 2d       	mov	r30, r0
    6210:	06 81       	ldd	r16, Z+6	; 0x06
    6212:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    6214:	e8 01       	movw	r28, r16
    6216:	2c 96       	adiw	r28, 0x0c	; 12
    6218:	ce 01       	movw	r24, r28
    621a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    621e:	80 91 00 07 	lds	r24, 0x0700
    6222:	88 23       	and	r24, r24
    6224:	a9 f4       	brne	.+42     	; 0x6250 <xTaskRemoveFromEventList+0x50>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    6226:	e8 01       	movw	r28, r16
    6228:	22 96       	adiw	r28, 0x02	; 2
    622a:	ce 01       	movw	r24, r28
    622c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    6230:	d8 01       	movw	r26, r16
    6232:	56 96       	adiw	r26, 0x16	; 22
    6234:	9c 91       	ld	r25, X
    6236:	80 91 01 07 	lds	r24, 0x0701
    623a:	89 17       	cp	r24, r25
    623c:	10 f4       	brcc	.+4      	; 0x6242 <xTaskRemoveFromEventList+0x42>
    623e:	90 93 01 07 	sts	0x0701, r25
    6242:	89 e0       	ldi	r24, 0x09	; 9
    6244:	98 9f       	mul	r25, r24
    6246:	c0 01       	movw	r24, r0
    6248:	11 24       	eor	r1, r1
    624a:	88 5f       	subi	r24, 0xF8	; 248
    624c:	98 4f       	sbci	r25, 0xF8	; 248
    624e:	02 c0       	rjmp	.+4      	; 0x6254 <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    6250:	82 e4       	ldi	r24, 0x42	; 66
    6252:	97 e0       	ldi	r25, 0x07	; 7
    6254:	be 01       	movw	r22, r28
    6256:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    625a:	e0 91 fa 06 	lds	r30, 0x06FA
    625e:	f0 91 fb 06 	lds	r31, 0x06FB
    6262:	20 e0       	ldi	r18, 0x00	; 0
    6264:	d8 01       	movw	r26, r16
    6266:	56 96       	adiw	r26, 0x16	; 22
    6268:	9c 91       	ld	r25, X
    626a:	86 89       	ldd	r24, Z+22	; 0x16
    626c:	98 17       	cp	r25, r24
    626e:	08 f0       	brcs	.+2      	; 0x6272 <xTaskRemoveFromEventList+0x72>
    6270:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    6272:	82 2f       	mov	r24, r18
    6274:	df 91       	pop	r29
    6276:	cf 91       	pop	r28
    6278:	1f 91       	pop	r17
    627a:	0f 91       	pop	r16
    627c:	08 95       	ret

0000627e <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    627e:	ff 92       	push	r15
    6280:	0f 93       	push	r16
    6282:	1f 93       	push	r17
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6288:	80 91 00 07 	lds	r24, 0x0700
    628c:	88 23       	and	r24, r24
    628e:	09 f0       	breq	.+2      	; 0x6292 <vTaskIncrementTick+0x14>
    6290:	8f c0       	rjmp	.+286    	; 0x63b0 <vTaskIncrementTick+0x132>
	{
		++xTickCount;
    6292:	80 91 fe 06 	lds	r24, 0x06FE
    6296:	90 91 ff 06 	lds	r25, 0x06FF
    629a:	01 96       	adiw	r24, 0x01	; 1
    629c:	90 93 ff 06 	sts	0x06FF, r25
    62a0:	80 93 fe 06 	sts	0x06FE, r24
		if( xTickCount == ( portTickType ) 0U )
    62a4:	80 91 fe 06 	lds	r24, 0x06FE
    62a8:	90 91 ff 06 	lds	r25, 0x06FF
    62ac:	89 2b       	or	r24, r25
    62ae:	79 f5       	brne	.+94     	; 0x630e <vTaskIncrementTick+0x90>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    62b0:	20 91 3e 07 	lds	r18, 0x073E
    62b4:	30 91 3f 07 	lds	r19, 0x073F
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    62b8:	80 91 40 07 	lds	r24, 0x0740
    62bc:	90 91 41 07 	lds	r25, 0x0741
    62c0:	90 93 3f 07 	sts	0x073F, r25
    62c4:	80 93 3e 07 	sts	0x073E, r24
			pxOverflowDelayedTaskList = pxTemp;
    62c8:	30 93 41 07 	sts	0x0741, r19
    62cc:	20 93 40 07 	sts	0x0740, r18
			xNumOfOverflows++;
    62d0:	80 91 fd 06 	lds	r24, 0x06FD
    62d4:	8f 5f       	subi	r24, 0xFF	; 255
    62d6:	80 93 fd 06 	sts	0x06FD, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    62da:	e0 91 3e 07 	lds	r30, 0x073E
    62de:	f0 91 3f 07 	lds	r31, 0x073F
    62e2:	80 81       	ld	r24, Z
    62e4:	88 23       	and	r24, r24
    62e6:	19 f4       	brne	.+6      	; 0x62ee <vTaskIncrementTick+0x70>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    62e8:	8f ef       	ldi	r24, 0xFF	; 255
    62ea:	9f ef       	ldi	r25, 0xFF	; 255
    62ec:	0c c0       	rjmp	.+24     	; 0x6306 <vTaskIncrementTick+0x88>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    62ee:	e0 91 3e 07 	lds	r30, 0x073E
    62f2:	f0 91 3f 07 	lds	r31, 0x073F
    62f6:	05 80       	ldd	r0, Z+5	; 0x05
    62f8:	f6 81       	ldd	r31, Z+6	; 0x06
    62fa:	e0 2d       	mov	r30, r0
    62fc:	06 80       	ldd	r0, Z+6	; 0x06
    62fe:	f7 81       	ldd	r31, Z+7	; 0x07
    6300:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    6302:	82 81       	ldd	r24, Z+2	; 0x02
    6304:	93 81       	ldd	r25, Z+3	; 0x03
    6306:	90 93 e8 01 	sts	0x01E8, r25
    630a:	80 93 e7 01 	sts	0x01E7, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    630e:	20 91 fe 06 	lds	r18, 0x06FE
    6312:	30 91 ff 06 	lds	r19, 0x06FF
    6316:	80 91 e7 01 	lds	r24, 0x01E7
    631a:	90 91 e8 01 	lds	r25, 0x01E8
    631e:	28 17       	cp	r18, r24
    6320:	39 07       	cpc	r19, r25
    6322:	08 f4       	brcc	.+2      	; 0x6326 <vTaskIncrementTick+0xa8>
    6324:	4a c0       	rjmp	.+148    	; 0x63ba <vTaskIncrementTick+0x13c>
    6326:	89 e0       	ldi	r24, 0x09	; 9
    6328:	f8 2e       	mov	r15, r24
    632a:	e0 91 3e 07 	lds	r30, 0x073E
    632e:	f0 91 3f 07 	lds	r31, 0x073F
    6332:	80 81       	ld	r24, Z
    6334:	88 23       	and	r24, r24
    6336:	39 f4       	brne	.+14     	; 0x6346 <vTaskIncrementTick+0xc8>
    6338:	8f ef       	ldi	r24, 0xFF	; 255
    633a:	9f ef       	ldi	r25, 0xFF	; 255
    633c:	90 93 e8 01 	sts	0x01E8, r25
    6340:	80 93 e7 01 	sts	0x01E7, r24
    6344:	3a c0       	rjmp	.+116    	; 0x63ba <vTaskIncrementTick+0x13c>
    6346:	e0 91 3e 07 	lds	r30, 0x073E
    634a:	f0 91 3f 07 	lds	r31, 0x073F
    634e:	05 80       	ldd	r0, Z+5	; 0x05
    6350:	f6 81       	ldd	r31, Z+6	; 0x06
    6352:	e0 2d       	mov	r30, r0
    6354:	c6 81       	ldd	r28, Z+6	; 0x06
    6356:	d7 81       	ldd	r29, Z+7	; 0x07
    6358:	2a 81       	ldd	r18, Y+2	; 0x02
    635a:	3b 81       	ldd	r19, Y+3	; 0x03
    635c:	80 91 fe 06 	lds	r24, 0x06FE
    6360:	90 91 ff 06 	lds	r25, 0x06FF
    6364:	82 17       	cp	r24, r18
    6366:	93 07       	cpc	r25, r19
    6368:	28 f4       	brcc	.+10     	; 0x6374 <vTaskIncrementTick+0xf6>
    636a:	30 93 e8 01 	sts	0x01E8, r19
    636e:	20 93 e7 01 	sts	0x01E7, r18
    6372:	23 c0       	rjmp	.+70     	; 0x63ba <vTaskIncrementTick+0x13c>
    6374:	8e 01       	movw	r16, r28
    6376:	0e 5f       	subi	r16, 0xFE	; 254
    6378:	1f 4f       	sbci	r17, 0xFF	; 255
    637a:	c8 01       	movw	r24, r16
    637c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
    6380:	8c 89       	ldd	r24, Y+20	; 0x14
    6382:	9d 89       	ldd	r25, Y+21	; 0x15
    6384:	89 2b       	or	r24, r25
    6386:	21 f0       	breq	.+8      	; 0x6390 <vTaskIncrementTick+0x112>
    6388:	ce 01       	movw	r24, r28
    638a:	0c 96       	adiw	r24, 0x0c	; 12
    638c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
    6390:	9e 89       	ldd	r25, Y+22	; 0x16
    6392:	80 91 01 07 	lds	r24, 0x0701
    6396:	89 17       	cp	r24, r25
    6398:	10 f4       	brcc	.+4      	; 0x639e <vTaskIncrementTick+0x120>
    639a:	90 93 01 07 	sts	0x0701, r25
    639e:	9f 9d       	mul	r25, r15
    63a0:	c0 01       	movw	r24, r0
    63a2:	11 24       	eor	r1, r1
    63a4:	88 5f       	subi	r24, 0xF8	; 248
    63a6:	98 4f       	sbci	r25, 0xF8	; 248
    63a8:	b8 01       	movw	r22, r16
    63aa:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    63ae:	bd cf       	rjmp	.-134    	; 0x632a <vTaskIncrementTick+0xac>
	}
	else
	{
		++uxMissedTicks;
    63b0:	80 91 02 07 	lds	r24, 0x0702
    63b4:	8f 5f       	subi	r24, 0xFF	; 255
    63b6:	80 93 02 07 	sts	0x0702, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    63ba:	df 91       	pop	r29
    63bc:	cf 91       	pop	r28
    63be:	1f 91       	pop	r17
    63c0:	0f 91       	pop	r16
    63c2:	ff 90       	pop	r15
    63c4:	08 95       	ret

000063c6 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    63c6:	df 92       	push	r13
    63c8:	ef 92       	push	r14
    63ca:	ff 92       	push	r15
    63cc:	0f 93       	push	r16
    63ce:	1f 93       	push	r17
    63d0:	cf 93       	push	r28
    63d2:	df 93       	push	r29
	portBASE_TYPE xYieldRequired = pdFALSE;
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    63d4:	ec 01       	movw	r28, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    63d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    63d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    63da:	84 55       	subi	r24, 0x54	; 84
    63dc:	97 40       	sbci	r25, 0x07	; 7
    63de:	91 f5       	brne	.+100    	; 0x6444 <xTaskResumeFromISR+0x7e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    63e0:	8c 89       	ldd	r24, Y+20	; 0x14
    63e2:	9d 89       	ldd	r25, Y+21	; 0x15
    63e4:	27 e0       	ldi	r18, 0x07	; 7
    63e6:	82 34       	cpi	r24, 0x42	; 66
    63e8:	92 07       	cpc	r25, r18
    63ea:	61 f1       	breq	.+88     	; 0x6444 <xTaskResumeFromISR+0x7e>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    63ec:	89 2b       	or	r24, r25
    63ee:	51 f5       	brne	.+84     	; 0x6444 <xTaskResumeFromISR+0x7e>
    63f0:	33 c0       	rjmp	.+102    	; 0x6458 <xTaskResumeFromISR+0x92>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    63f2:	de 88       	ldd	r13, Y+22	; 0x16
    63f4:	e0 91 fa 06 	lds	r30, 0x06FA
    63f8:	f0 91 fb 06 	lds	r31, 0x06FB
    63fc:	06 89       	ldd	r16, Z+22	; 0x16
				vListRemove(  &( pxTCB->xGenericListItem ) );
    63fe:	92 e0       	ldi	r25, 0x02	; 2
    6400:	e9 2e       	mov	r14, r25
    6402:	f1 2c       	mov	r15, r1
    6404:	ec 0e       	add	r14, r28
    6406:	fd 1e       	adc	r15, r29
    6408:	c7 01       	movw	r24, r14
    640a:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    640e:	6e 89       	ldd	r22, Y+22	; 0x16
    6410:	80 91 01 07 	lds	r24, 0x0701
    6414:	86 17       	cp	r24, r22
    6416:	10 f4       	brcc	.+4      	; 0x641c <xTaskResumeFromISR+0x56>
    6418:	60 93 01 07 	sts	0x0701, r22
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    641c:	10 e0       	ldi	r17, 0x00	; 0
    641e:	d0 16       	cp	r13, r16
    6420:	08 f0       	brcs	.+2      	; 0x6424 <xTaskResumeFromISR+0x5e>
    6422:	11 e0       	ldi	r17, 0x01	; 1
				vListRemove(  &( pxTCB->xGenericListItem ) );
				prvAddTaskToReadyQueue( pxTCB );
    6424:	89 e0       	ldi	r24, 0x09	; 9
    6426:	68 9f       	mul	r22, r24
    6428:	c0 01       	movw	r24, r0
    642a:	11 24       	eor	r1, r1
    642c:	88 5f       	subi	r24, 0xF8	; 248
    642e:	98 4f       	sbci	r25, 0xF8	; 248
    6430:	b7 01       	movw	r22, r14
    6432:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    6436:	07 c0       	rjmp	.+14     	; 0x6446 <xTaskResumeFromISR+0x80>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6438:	2c 96       	adiw	r28, 0x0c	; 12
    643a:	82 e4       	ldi	r24, 0x42	; 66
    643c:	97 e0       	ldi	r25, 0x07	; 7
    643e:	be 01       	movw	r22, r28
    6440:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    6444:	10 e0       	ldi	r17, 0x00	; 0
			}
		}

		return xYieldRequired;
	}
    6446:	81 2f       	mov	r24, r17
    6448:	df 91       	pop	r29
    644a:	cf 91       	pop	r28
    644c:	1f 91       	pop	r17
    644e:	0f 91       	pop	r16
    6450:	ff 90       	pop	r15
    6452:	ef 90       	pop	r14
    6454:	df 90       	pop	r13
    6456:	08 95       	ret

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    6458:	80 91 00 07 	lds	r24, 0x0700
    645c:	88 23       	and	r24, r24
    645e:	49 f2       	breq	.-110    	; 0x63f2 <xTaskResumeFromISR+0x2c>
    6460:	eb cf       	rjmp	.-42     	; 0x6438 <xTaskResumeFromISR+0x72>

00006462 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    6462:	cf 93       	push	r28
    6464:	df 93       	push	r29
    6466:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    6468:	e0 91 fa 06 	lds	r30, 0x06FA
    646c:	f0 91 fb 06 	lds	r31, 0x06FB
    6470:	93 83       	std	Z+3, r25	; 0x03
    6472:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    6474:	80 91 fe 06 	lds	r24, 0x06FE
    6478:	90 91 ff 06 	lds	r25, 0x06FF
    647c:	c8 17       	cp	r28, r24
    647e:	d9 07       	cpc	r29, r25
    6480:	68 f4       	brcc	.+26     	; 0x649c <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6482:	80 91 40 07 	lds	r24, 0x0740
    6486:	90 91 41 07 	lds	r25, 0x0741
    648a:	60 91 fa 06 	lds	r22, 0x06FA
    648e:	70 91 fb 06 	lds	r23, 0x06FB
    6492:	6e 5f       	subi	r22, 0xFE	; 254
    6494:	7f 4f       	sbci	r23, 0xFF	; 255
    6496:	0e 94 ad 2b 	call	0x575a	; 0x575a <vListInsert>
    649a:	17 c0       	rjmp	.+46     	; 0x64ca <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    649c:	80 91 3e 07 	lds	r24, 0x073E
    64a0:	90 91 3f 07 	lds	r25, 0x073F
    64a4:	60 91 fa 06 	lds	r22, 0x06FA
    64a8:	70 91 fb 06 	lds	r23, 0x06FB
    64ac:	6e 5f       	subi	r22, 0xFE	; 254
    64ae:	7f 4f       	sbci	r23, 0xFF	; 255
    64b0:	0e 94 ad 2b 	call	0x575a	; 0x575a <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    64b4:	80 91 e7 01 	lds	r24, 0x01E7
    64b8:	90 91 e8 01 	lds	r25, 0x01E8
    64bc:	c8 17       	cp	r28, r24
    64be:	d9 07       	cpc	r29, r25
    64c0:	20 f4       	brcc	.+8      	; 0x64ca <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    64c2:	d0 93 e8 01 	sts	0x01E8, r29
    64c6:	c0 93 e7 01 	sts	0x01E7, r28
		}
	}
}
    64ca:	df 91       	pop	r29
    64cc:	cf 91       	pop	r28
    64ce:	08 95       	ret

000064d0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    64d0:	cf 93       	push	r28
    64d2:	df 93       	push	r29
    64d4:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    64d6:	60 91 fa 06 	lds	r22, 0x06FA
    64da:	70 91 fb 06 	lds	r23, 0x06FB
    64de:	64 5f       	subi	r22, 0xF4	; 244
    64e0:	7f 4f       	sbci	r23, 0xFF	; 255
    64e2:	0e 94 ad 2b 	call	0x575a	; 0x575a <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    64e6:	80 91 fa 06 	lds	r24, 0x06FA
    64ea:	90 91 fb 06 	lds	r25, 0x06FB
    64ee:	02 96       	adiw	r24, 0x02	; 2
    64f0:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    64f4:	8f ef       	ldi	r24, 0xFF	; 255
    64f6:	cf 3f       	cpi	r28, 0xFF	; 255
    64f8:	d8 07       	cpc	r29, r24
    64fa:	59 f4       	brne	.+22     	; 0x6512 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    64fc:	60 91 fa 06 	lds	r22, 0x06FA
    6500:	70 91 fb 06 	lds	r23, 0x06FB
    6504:	6e 5f       	subi	r22, 0xFE	; 254
    6506:	7f 4f       	sbci	r23, 0xFF	; 255
    6508:	84 e5       	ldi	r24, 0x54	; 84
    650a:	97 e0       	ldi	r25, 0x07	; 7
    650c:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
    6510:	08 c0       	rjmp	.+16     	; 0x6522 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    6512:	80 91 fe 06 	lds	r24, 0x06FE
    6516:	90 91 ff 06 	lds	r25, 0x06FF
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    651a:	8c 0f       	add	r24, r28
    651c:	9d 1f       	adc	r25, r29
    651e:	0e 94 31 32 	call	0x6462	; 0x6462 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    6522:	df 91       	pop	r29
    6524:	cf 91       	pop	r28
    6526:	08 95       	ret

00006528 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    6528:	cf 92       	push	r12
    652a:	df 92       	push	r13
    652c:	ff 92       	push	r15
    652e:	0f 93       	push	r16
    6530:	1f 93       	push	r17
    6532:	df 93       	push	r29
    6534:	cf 93       	push	r28
    6536:	0f 92       	push	r0
    6538:	cd b7       	in	r28, 0x3d	; 61
    653a:	de b7       	in	r29, 0x3e	; 62
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    653c:	0f b6       	in	r0, 0x3f	; 63
    653e:	f8 94       	cli
    6540:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    6542:	80 91 00 07 	lds	r24, 0x0700
    6546:	81 50       	subi	r24, 0x01	; 1
    6548:	80 93 00 07 	sts	0x0700, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    654c:	80 91 00 07 	lds	r24, 0x0700
    6550:	88 23       	and	r24, r24
    6552:	09 f0       	breq	.+2      	; 0x6556 <xTaskResumeAll+0x2e>
    6554:	58 c0       	rjmp	.+176    	; 0x6606 <xTaskResumeAll+0xde>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    6556:	80 91 03 07 	lds	r24, 0x0703
    655a:	88 23       	and	r24, r24
    655c:	09 f4       	brne	.+2      	; 0x6560 <xTaskResumeAll+0x38>
    655e:	53 c0       	rjmp	.+166    	; 0x6606 <xTaskResumeAll+0xde>
    6560:	19 82       	std	Y+1, r1	; 0x01
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    6562:	29 e0       	ldi	r18, 0x09	; 9
    6564:	f2 2e       	mov	r15, r18
    6566:	2d c0       	rjmp	.+90     	; 0x65c2 <xTaskResumeAll+0x9a>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    6568:	e0 91 47 07 	lds	r30, 0x0747
    656c:	f0 91 48 07 	lds	r31, 0x0748
    6570:	c6 80       	ldd	r12, Z+6	; 0x06
    6572:	d7 80       	ldd	r13, Z+7	; 0x07
					vListRemove( &( pxTCB->xEventListItem ) );
    6574:	c6 01       	movw	r24, r12
    6576:	0c 96       	adiw	r24, 0x0c	; 12
    6578:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    657c:	86 01       	movw	r16, r12
    657e:	0e 5f       	subi	r16, 0xFE	; 254
    6580:	1f 4f       	sbci	r17, 0xFF	; 255
    6582:	c8 01       	movw	r24, r16
    6584:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    6588:	d6 01       	movw	r26, r12
    658a:	56 96       	adiw	r26, 0x16	; 22
    658c:	9c 91       	ld	r25, X
    658e:	80 91 01 07 	lds	r24, 0x0701
    6592:	89 17       	cp	r24, r25
    6594:	10 f4       	brcc	.+4      	; 0x659a <xTaskResumeAll+0x72>
    6596:	90 93 01 07 	sts	0x0701, r25
    659a:	9f 9d       	mul	r25, r15
    659c:	c0 01       	movw	r24, r0
    659e:	11 24       	eor	r1, r1
    65a0:	88 5f       	subi	r24, 0xF8	; 248
    65a2:	98 4f       	sbci	r25, 0xF8	; 248
    65a4:	b8 01       	movw	r22, r16
    65a6:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    65aa:	e0 91 fa 06 	lds	r30, 0x06FA
    65ae:	f0 91 fb 06 	lds	r31, 0x06FB
    65b2:	d6 01       	movw	r26, r12
    65b4:	56 96       	adiw	r26, 0x16	; 22
    65b6:	9c 91       	ld	r25, X
    65b8:	86 89       	ldd	r24, Z+22	; 0x16
    65ba:	98 17       	cp	r25, r24
    65bc:	10 f0       	brcs	.+4      	; 0x65c2 <xTaskResumeAll+0x9a>
    65be:	b1 e0       	ldi	r27, 0x01	; 1
    65c0:	b9 83       	std	Y+1, r27	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    65c2:	80 91 42 07 	lds	r24, 0x0742
    65c6:	88 23       	and	r24, r24
    65c8:	79 f6       	brne	.-98     	; 0x6568 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    65ca:	80 91 02 07 	lds	r24, 0x0702
    65ce:	88 23       	and	r24, r24
    65d0:	41 f4       	brne	.+16     	; 0x65e2 <xTaskResumeAll+0xba>
    65d2:	0c c0       	rjmp	.+24     	; 0x65ec <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    65d4:	0e 94 3f 31 	call	0x627e	; 0x627e <vTaskIncrementTick>
						--uxMissedTicks;
    65d8:	80 91 02 07 	lds	r24, 0x0702
    65dc:	81 50       	subi	r24, 0x01	; 1
    65de:	80 93 02 07 	sts	0x0702, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    65e2:	80 91 02 07 	lds	r24, 0x0702
    65e6:	88 23       	and	r24, r24
    65e8:	a9 f7       	brne	.-22     	; 0x65d4 <xTaskResumeAll+0xac>
    65ea:	07 c0       	rjmp	.+14     	; 0x65fa <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    65ec:	e9 81       	ldd	r30, Y+1	; 0x01
    65ee:	e1 30       	cpi	r30, 0x01	; 1
    65f0:	21 f0       	breq	.+8      	; 0x65fa <xTaskResumeAll+0xd2>
    65f2:	80 91 fc 06 	lds	r24, 0x06FC
    65f6:	81 30       	cpi	r24, 0x01	; 1
    65f8:	31 f4       	brne	.+12     	; 0x6606 <xTaskResumeAll+0xde>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    65fa:	10 92 fc 06 	sts	0x06FC, r1
					portYIELD_WITHIN_API();
    65fe:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
    6602:	81 e0       	ldi	r24, 0x01	; 1
    6604:	01 c0       	rjmp	.+2      	; 0x6608 <xTaskResumeAll+0xe0>
    6606:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    6608:	0f 90       	pop	r0
    660a:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    660c:	0f 90       	pop	r0
    660e:	cf 91       	pop	r28
    6610:	df 91       	pop	r29
    6612:	1f 91       	pop	r17
    6614:	0f 91       	pop	r16
    6616:	ff 90       	pop	r15
    6618:	df 90       	pop	r13
    661a:	cf 90       	pop	r12
    661c:	08 95       	ret

0000661e <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    6626:	ec 01       	movw	r28, r24

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    6628:	00 97       	sbiw	r24, 0x00	; 0
    662a:	09 f4       	brne	.+2      	; 0x662e <vTaskResume+0x10>
    662c:	3c c0       	rjmp	.+120    	; 0x66a6 <vTaskResume+0x88>
    662e:	80 91 fa 06 	lds	r24, 0x06FA
    6632:	90 91 fb 06 	lds	r25, 0x06FB
    6636:	c8 17       	cp	r28, r24
    6638:	d9 07       	cpc	r29, r25
    663a:	a9 f1       	breq	.+106    	; 0x66a6 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
    663c:	0f b6       	in	r0, 0x3f	; 63
    663e:	f8 94       	cli
    6640:	0f 92       	push	r0
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    6642:	8a 85       	ldd	r24, Y+10	; 0x0a
    6644:	9b 85       	ldd	r25, Y+11	; 0x0b
    6646:	84 55       	subi	r24, 0x54	; 84
    6648:	97 40       	sbci	r25, 0x07	; 7
    664a:	f1 f4       	brne	.+60     	; 0x6688 <vTaskResume+0x6a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    664c:	8c 89       	ldd	r24, Y+20	; 0x14
    664e:	9d 89       	ldd	r25, Y+21	; 0x15
    6650:	27 e0       	ldi	r18, 0x07	; 7
    6652:	82 34       	cpi	r24, 0x42	; 66
    6654:	92 07       	cpc	r25, r18
    6656:	c1 f0       	breq	.+48     	; 0x6688 <vTaskResume+0x6a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    6658:	89 2b       	or	r24, r25
    665a:	b1 f4       	brne	.+44     	; 0x6688 <vTaskResume+0x6a>
    665c:	18 c0       	rjmp	.+48     	; 0x668e <vTaskResume+0x70>
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    665e:	90 93 01 07 	sts	0x0701, r25
    6662:	89 e0       	ldi	r24, 0x09	; 9
    6664:	98 9f       	mul	r25, r24
    6666:	c0 01       	movw	r24, r0
    6668:	11 24       	eor	r1, r1
    666a:	88 5f       	subi	r24, 0xF8	; 248
    666c:	98 4f       	sbci	r25, 0xF8	; 248
    666e:	b8 01       	movw	r22, r16
    6670:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6674:	e0 91 fa 06 	lds	r30, 0x06FA
    6678:	f0 91 fb 06 	lds	r31, 0x06FB
    667c:	9e 89       	ldd	r25, Y+22	; 0x16
    667e:	86 89       	ldd	r24, Z+22	; 0x16
    6680:	98 17       	cp	r25, r24
    6682:	10 f0       	brcs	.+4      	; 0x6688 <vTaskResume+0x6a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    6684:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    6688:	0f 90       	pop	r0
    668a:	0f be       	out	0x3f, r0	; 63
    668c:	0c c0       	rjmp	.+24     	; 0x66a6 <vTaskResume+0x88>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    668e:	8e 01       	movw	r16, r28
    6690:	0e 5f       	subi	r16, 0xFE	; 254
    6692:	1f 4f       	sbci	r17, 0xFF	; 255
    6694:	c8 01       	movw	r24, r16
    6696:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    669a:	9e 89       	ldd	r25, Y+22	; 0x16
    669c:	80 91 01 07 	lds	r24, 0x0701
    66a0:	89 17       	cp	r24, r25
    66a2:	e8 f2       	brcs	.-70     	; 0x665e <vTaskResume+0x40>
    66a4:	de cf       	rjmp	.-68     	; 0x6662 <vTaskResume+0x44>
					}
				}
			}
			taskEXIT_CRITICAL();
		}
	}
    66a6:	df 91       	pop	r29
    66a8:	cf 91       	pop	r28
    66aa:	1f 91       	pop	r17
    66ac:	0f 91       	pop	r16
    66ae:	08 95       	ret

000066b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    66b0:	ef 92       	push	r14
    66b2:	ff 92       	push	r15
    66b4:	0f 93       	push	r16
    66b6:	1f 93       	push	r17
    66b8:	cf 93       	push	r28
    66ba:	df 93       	push	r29
    66bc:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    66be:	0f b6       	in	r0, 0x3f	; 63
    66c0:	f8 94       	cli
    66c2:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    66c4:	80 91 fa 06 	lds	r24, 0x06FA
    66c8:	90 91 fb 06 	lds	r25, 0x06FB
    66cc:	08 17       	cp	r16, r24
    66ce:	19 07       	cpc	r17, r25
    66d0:	19 f4       	brne	.+6      	; 0x66d8 <vTaskSuspend+0x28>
    66d2:	00 e0       	ldi	r16, 0x00	; 0
    66d4:	10 e0       	ldi	r17, 0x00	; 0
    66d6:	03 c0       	rjmp	.+6      	; 0x66de <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    66d8:	01 15       	cp	r16, r1
    66da:	11 05       	cpc	r17, r1
    66dc:	29 f4       	brne	.+10     	; 0x66e8 <vTaskSuspend+0x38>
    66de:	c0 91 fa 06 	lds	r28, 0x06FA
    66e2:	d0 91 fb 06 	lds	r29, 0x06FB
    66e6:	01 c0       	rjmp	.+2      	; 0x66ea <vTaskSuspend+0x3a>
    66e8:	e8 01       	movw	r28, r16

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    66ea:	32 e0       	ldi	r19, 0x02	; 2
    66ec:	e3 2e       	mov	r14, r19
    66ee:	f1 2c       	mov	r15, r1
    66f0:	ec 0e       	add	r14, r28
    66f2:	fd 1e       	adc	r15, r29
    66f4:	c7 01       	movw	r24, r14
    66f6:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    66fa:	8c 89       	ldd	r24, Y+20	; 0x14
    66fc:	9d 89       	ldd	r25, Y+21	; 0x15
    66fe:	89 2b       	or	r24, r25
    6700:	21 f0       	breq	.+8      	; 0x670a <vTaskSuspend+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    6702:	ce 01       	movw	r24, r28
    6704:	0c 96       	adiw	r24, 0x0c	; 12
    6706:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    670a:	84 e5       	ldi	r24, 0x54	; 84
    670c:	97 e0       	ldi	r25, 0x07	; 7
    670e:	b7 01       	movw	r22, r14
    6710:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    6714:	0f 90       	pop	r0
    6716:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    6718:	01 2b       	or	r16, r17
    671a:	a1 f4       	brne	.+40     	; 0x6744 <vTaskSuspend+0x94>
		{
			if( xSchedulerRunning != pdFALSE )
    671c:	80 91 04 07 	lds	r24, 0x0704
    6720:	88 23       	and	r24, r24
    6722:	19 f0       	breq	.+6      	; 0x672a <vTaskSuspend+0x7a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    6724:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
    6728:	0d c0       	rjmp	.+26     	; 0x6744 <vTaskSuspend+0x94>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    672a:	90 91 54 07 	lds	r25, 0x0754
    672e:	80 91 03 07 	lds	r24, 0x0703
    6732:	98 17       	cp	r25, r24
    6734:	29 f4       	brne	.+10     	; 0x6740 <vTaskSuspend+0x90>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    6736:	10 92 fb 06 	sts	0x06FB, r1
    673a:	10 92 fa 06 	sts	0x06FA, r1
    673e:	02 c0       	rjmp	.+4      	; 0x6744 <vTaskSuspend+0x94>
				}
				else
				{
					vTaskSwitchContext();
    6740:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <vTaskSwitchContext>
				}
			}
		}
	}
    6744:	df 91       	pop	r29
    6746:	cf 91       	pop	r28
    6748:	1f 91       	pop	r17
    674a:	0f 91       	pop	r16
    674c:	ff 90       	pop	r15
    674e:	ef 90       	pop	r14
    6750:	08 95       	ret

00006752 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    6752:	0f 93       	push	r16
    6754:	1f 93       	push	r17
    6756:	cf 93       	push	r28
    6758:	df 93       	push	r29
    675a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    675c:	00 97       	sbiw	r24, 0x00	; 0
    675e:	c9 f0       	breq	.+50     	; 0x6792 <vTaskDelay+0x40>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    6760:	80 91 00 07 	lds	r24, 0x0700
    6764:	8f 5f       	subi	r24, 0xFF	; 255
    6766:	80 93 00 07 	sts	0x0700, r24
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    676a:	00 91 fe 06 	lds	r16, 0x06FE
    676e:	10 91 ff 06 	lds	r17, 0x06FF

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6772:	80 91 fa 06 	lds	r24, 0x06FA
    6776:	90 91 fb 06 	lds	r25, 0x06FB
    677a:	02 96       	adiw	r24, 0x02	; 2
    677c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    6780:	ce 01       	movw	r24, r28
    6782:	80 0f       	add	r24, r16
    6784:	91 1f       	adc	r25, r17
    6786:	0e 94 31 32 	call	0x6462	; 0x6462 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    678a:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    678e:	88 23       	and	r24, r24
    6790:	11 f4       	brne	.+4      	; 0x6796 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
    6792:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
		}
	}
    6796:	df 91       	pop	r29
    6798:	cf 91       	pop	r28
    679a:	1f 91       	pop	r17
    679c:	0f 91       	pop	r16
    679e:	08 95       	ret

000067a0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    67a0:	cf 93       	push	r28
    67a2:	df 93       	push	r29
    67a4:	fc 01       	movw	r30, r24
    67a6:	eb 01       	movw	r28, r22

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    67a8:	80 91 00 07 	lds	r24, 0x0700
    67ac:	8f 5f       	subi	r24, 0xFF	; 255
    67ae:	80 93 00 07 	sts	0x0700, r24
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    67b2:	20 81       	ld	r18, Z
    67b4:	31 81       	ldd	r19, Z+1	; 0x01
    67b6:	c2 0f       	add	r28, r18
    67b8:	d3 1f       	adc	r29, r19

			if( xTickCount < *pxPreviousWakeTime )
    67ba:	80 91 fe 06 	lds	r24, 0x06FE
    67be:	90 91 ff 06 	lds	r25, 0x06FF
    67c2:	82 17       	cp	r24, r18
    67c4:	93 07       	cpc	r25, r19
    67c6:	28 f4       	brcc	.+10     	; 0x67d2 <vTaskDelayUntil+0x32>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    67c8:	c2 17       	cp	r28, r18
    67ca:	d3 07       	cpc	r29, r19
    67cc:	28 f0       	brcs	.+10     	; 0x67d8 <vTaskDelayUntil+0x38>
    67ce:	20 e0       	ldi	r18, 0x00	; 0
    67d0:	0c c0       	rjmp	.+24     	; 0x67ea <vTaskDelayUntil+0x4a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    67d2:	c2 17       	cp	r28, r18
    67d4:	d3 07       	cpc	r29, r19
    67d6:	40 f0       	brcs	.+16     	; 0x67e8 <vTaskDelayUntil+0x48>
    67d8:	80 91 fe 06 	lds	r24, 0x06FE
    67dc:	90 91 ff 06 	lds	r25, 0x06FF
    67e0:	20 e0       	ldi	r18, 0x00	; 0
    67e2:	8c 17       	cp	r24, r28
    67e4:	9d 07       	cpc	r25, r29
    67e6:	08 f4       	brcc	.+2      	; 0x67ea <vTaskDelayUntil+0x4a>
    67e8:	21 e0       	ldi	r18, 0x01	; 1
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    67ea:	d1 83       	std	Z+1, r29	; 0x01
    67ec:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    67ee:	22 23       	and	r18, r18
    67f0:	51 f0       	breq	.+20     	; 0x6806 <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    67f2:	80 91 fa 06 	lds	r24, 0x06FA
    67f6:	90 91 fb 06 	lds	r25, 0x06FB
    67fa:	02 96       	adiw	r24, 0x02	; 2
    67fc:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    6800:	ce 01       	movw	r24, r28
    6802:	0e 94 31 32 	call	0x6462	; 0x6462 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    6806:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    680a:	88 23       	and	r24, r24
    680c:	11 f4       	brne	.+4      	; 0x6812 <vTaskDelayUntil+0x72>
		{
			portYIELD_WITHIN_API();
    680e:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
		}
	}
    6812:	df 91       	pop	r29
    6814:	cf 91       	pop	r28
    6816:	08 95       	ret

00006818 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    6818:	ef 92       	push	r14
    681a:	ff 92       	push	r15
    681c:	0f 93       	push	r16
    681e:	1f 93       	push	r17
    6820:	cf 93       	push	r28
    6822:	df 93       	push	r29
    6824:	8c 01       	movw	r16, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    6826:	0f b6       	in	r0, 0x3f	; 63
    6828:	f8 94       	cli
    682a:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    682c:	80 91 fa 06 	lds	r24, 0x06FA
    6830:	90 91 fb 06 	lds	r25, 0x06FB
    6834:	08 17       	cp	r16, r24
    6836:	19 07       	cpc	r17, r25
    6838:	19 f4       	brne	.+6      	; 0x6840 <vTaskDelete+0x28>
    683a:	00 e0       	ldi	r16, 0x00	; 0
    683c:	10 e0       	ldi	r17, 0x00	; 0
    683e:	03 c0       	rjmp	.+6      	; 0x6846 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    6840:	01 15       	cp	r16, r1
    6842:	11 05       	cpc	r17, r1
    6844:	29 f4       	brne	.+10     	; 0x6850 <vTaskDelete+0x38>
    6846:	c0 91 fa 06 	lds	r28, 0x06FA
    684a:	d0 91 fb 06 	lds	r29, 0x06FB
    684e:	01 c0       	rjmp	.+2      	; 0x6852 <vTaskDelete+0x3a>
    6850:	e8 01       	movw	r28, r16

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    6852:	42 e0       	ldi	r20, 0x02	; 2
    6854:	e4 2e       	mov	r14, r20
    6856:	f1 2c       	mov	r15, r1
    6858:	ec 0e       	add	r14, r28
    685a:	fd 1e       	adc	r15, r29
    685c:	c7 01       	movw	r24, r14
    685e:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    6862:	8c 89       	ldd	r24, Y+20	; 0x14
    6864:	9d 89       	ldd	r25, Y+21	; 0x15
    6866:	89 2b       	or	r24, r25
    6868:	21 f0       	breq	.+8      	; 0x6872 <vTaskDelete+0x5a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    686a:	ce 01       	movw	r24, r28
    686c:	0c 96       	adiw	r24, 0x0c	; 12
    686e:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    6872:	8b e4       	ldi	r24, 0x4B	; 75
    6874:	97 e0       	ldi	r25, 0x07	; 7
    6876:	b7 01       	movw	r22, r14
    6878:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    687c:	80 91 05 07 	lds	r24, 0x0705
    6880:	8f 5f       	subi	r24, 0xFF	; 255
    6882:	80 93 05 07 	sts	0x0705, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    6886:	80 91 06 07 	lds	r24, 0x0706
    688a:	8f 5f       	subi	r24, 0xFF	; 255
    688c:	80 93 06 07 	sts	0x0706, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    6890:	0f 90       	pop	r0
    6892:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    6894:	80 91 04 07 	lds	r24, 0x0704
    6898:	88 23       	and	r24, r24
    689a:	21 f0       	breq	.+8      	; 0x68a4 <vTaskDelete+0x8c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    689c:	01 2b       	or	r16, r17
    689e:	11 f4       	brne	.+4      	; 0x68a4 <vTaskDelete+0x8c>
			{
				portYIELD_WITHIN_API();
    68a0:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
			}
		}
	}
    68a4:	df 91       	pop	r29
    68a6:	cf 91       	pop	r28
    68a8:	1f 91       	pop	r17
    68aa:	0f 91       	pop	r16
    68ac:	ff 90       	pop	r15
    68ae:	ef 90       	pop	r14
    68b0:	08 95       	ret

000068b2 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    68b2:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    68b4:	10 92 04 07 	sts	0x0704, r1
	vPortEndScheduler();
    68b8:	0e 94 87 2c 	call	0x590e	; 0x590e <vPortEndScheduler>
}
    68bc:	08 95       	ret

000068be <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    68be:	0f 93       	push	r16
    68c0:	1f 93       	push	r17
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    68c2:	80 91 05 07 	lds	r24, 0x0705
    68c6:	88 23       	and	r24, r24
    68c8:	e1 f3       	breq	.-8      	; 0x68c2 <prvIdleTask+0x4>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    68ca:	80 91 00 07 	lds	r24, 0x0700
    68ce:	8f 5f       	subi	r24, 0xFF	; 255
    68d0:	80 93 00 07 	sts	0x0700, r24
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    68d4:	10 91 4b 07 	lds	r17, 0x074B
			xTaskResumeAll();
    68d8:	0e 94 94 32 	call	0x6528	; 0x6528 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    68dc:	11 23       	and	r17, r17
    68de:	89 f3       	breq	.-30     	; 0x68c2 <prvIdleTask+0x4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    68e0:	0f b6       	in	r0, 0x3f	; 63
    68e2:	f8 94       	cli
    68e4:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    68e6:	e0 91 50 07 	lds	r30, 0x0750
    68ea:	f0 91 51 07 	lds	r31, 0x0751
    68ee:	06 81       	ldd	r16, Z+6	; 0x06
    68f0:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    68f2:	c8 01       	movw	r24, r16
    68f4:	02 96       	adiw	r24, 0x02	; 2
    68f6:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <vListRemove>
					--uxCurrentNumberOfTasks;
    68fa:	80 91 03 07 	lds	r24, 0x0703
    68fe:	81 50       	subi	r24, 0x01	; 1
    6900:	80 93 03 07 	sts	0x0703, r24
					--uxTasksDeleted;
    6904:	80 91 05 07 	lds	r24, 0x0705
    6908:	81 50       	subi	r24, 0x01	; 1
    690a:	80 93 05 07 	sts	0x0705, r24
				}
				taskEXIT_CRITICAL();
    690e:	0f 90       	pop	r0
    6910:	0f be       	out	0x3f, r0	; 63

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    6912:	f8 01       	movw	r30, r16
    6914:	87 89       	ldd	r24, Z+23	; 0x17
    6916:	90 8d       	ldd	r25, Z+24	; 0x18
    6918:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
		vPortFree( pxTCB );
    691c:	c8 01       	movw	r24, r16
    691e:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
    6922:	cf cf       	rjmp	.-98     	; 0x68c2 <prvIdleTask+0x4>

00006924 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    6924:	2f 92       	push	r2
    6926:	3f 92       	push	r3
    6928:	5f 92       	push	r5
    692a:	6f 92       	push	r6
    692c:	7f 92       	push	r7
    692e:	8f 92       	push	r8
    6930:	9f 92       	push	r9
    6932:	af 92       	push	r10
    6934:	bf 92       	push	r11
    6936:	cf 92       	push	r12
    6938:	df 92       	push	r13
    693a:	ef 92       	push	r14
    693c:	ff 92       	push	r15
    693e:	0f 93       	push	r16
    6940:	1f 93       	push	r17
    6942:	df 93       	push	r29
    6944:	cf 93       	push	r28
    6946:	00 d0       	rcall	.+0      	; 0x6948 <xTaskGenericCreate+0x24>
    6948:	00 d0       	rcall	.+0      	; 0x694a <xTaskGenericCreate+0x26>
    694a:	cd b7       	in	r28, 0x3d	; 61
    694c:	de b7       	in	r29, 0x3e	; 62
    694e:	9a 83       	std	Y+2, r25	; 0x02
    6950:	89 83       	std	Y+1, r24	; 0x01
    6952:	4b 01       	movw	r8, r22
    6954:	5a 01       	movw	r10, r20
    6956:	19 01       	movw	r2, r18
    6958:	50 2e       	mov	r5, r16
    695a:	37 01       	movw	r6, r14
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    695c:	81 e2       	ldi	r24, 0x21	; 33
    695e:	90 e0       	ldi	r25, 0x00	; 0
    6960:	0e 94 49 2b 	call	0x5692	; 0x5692 <pvPortMalloc>
    6964:	8b 83       	std	Y+3, r24	; 0x03
    6966:	9c 83       	std	Y+4, r25	; 0x04

	if( pxNewTCB != NULL )
    6968:	8b 81       	ldd	r24, Y+3	; 0x03
    696a:	9c 81       	ldd	r25, Y+4	; 0x04
    696c:	89 2b       	or	r24, r25
    696e:	89 f0       	breq	.+34     	; 0x6992 <xTaskGenericCreate+0x6e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    6970:	c1 14       	cp	r12, r1
    6972:	d1 04       	cpc	r13, r1
    6974:	21 f4       	brne	.+8      	; 0x697e <xTaskGenericCreate+0x5a>
    6976:	c5 01       	movw	r24, r10
    6978:	0e 94 49 2b 	call	0x5692	; 0x5692 <pvPortMalloc>
    697c:	6c 01       	movw	r12, r24
    697e:	eb 81       	ldd	r30, Y+3	; 0x03
    6980:	fc 81       	ldd	r31, Y+4	; 0x04
    6982:	d0 8e       	std	Z+24, r13	; 0x18
    6984:	c7 8a       	std	Z+23, r12	; 0x17

		if( pxNewTCB->pxStack == NULL )
    6986:	c1 14       	cp	r12, r1
    6988:	d1 04       	cpc	r13, r1
    698a:	29 f4       	brne	.+10     	; 0x6996 <xTaskGenericCreate+0x72>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    698c:	cf 01       	movw	r24, r30
    698e:	0e 94 39 2b 	call	0x5672	; 0x5672 <vPortFree>
    6992:	8f ef       	ldi	r24, 0xFF	; 255
    6994:	da c0       	rjmp	.+436    	; 0x6b4a <xTaskGenericCreate+0x226>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    6996:	c6 01       	movw	r24, r12
    6998:	65 ea       	ldi	r22, 0xA5	; 165
    699a:	70 e0       	ldi	r23, 0x00	; 0
    699c:	a5 01       	movw	r20, r10
    699e:	0e 94 09 37 	call	0x6e12	; 0x6e12 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    69a2:	08 94       	sec
    69a4:	a1 08       	sbc	r10, r1
    69a6:	b1 08       	sbc	r11, r1
    69a8:	eb 81       	ldd	r30, Y+3	; 0x03
    69aa:	fc 81       	ldd	r31, Y+4	; 0x04
    69ac:	e7 88       	ldd	r14, Z+23	; 0x17
    69ae:	f0 8c       	ldd	r15, Z+24	; 0x18
    69b0:	ea 0c       	add	r14, r10
    69b2:	fb 1c       	adc	r15, r11
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    69b4:	cf 01       	movw	r24, r30
    69b6:	49 96       	adiw	r24, 0x19	; 25
    69b8:	b4 01       	movw	r22, r8
    69ba:	48 e0       	ldi	r20, 0x08	; 8
    69bc:	50 e0       	ldi	r21, 0x00	; 0
    69be:	0e 94 10 37 	call	0x6e20	; 0x6e20 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    69c2:	eb 81       	ldd	r30, Y+3	; 0x03
    69c4:	fc 81       	ldd	r31, Y+4	; 0x04
    69c6:	10 a2       	std	Z+32, r1	; 0x20
    69c8:	05 2d       	mov	r16, r5
    69ca:	f3 e0       	ldi	r31, 0x03	; 3
    69cc:	f5 15       	cp	r31, r5
    69ce:	08 f4       	brcc	.+2      	; 0x69d2 <xTaskGenericCreate+0xae>
    69d0:	03 e0       	ldi	r16, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    69d2:	eb 81       	ldd	r30, Y+3	; 0x03
    69d4:	fc 81       	ldd	r31, Y+4	; 0x04
    69d6:	06 8b       	std	Z+22, r16	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    69d8:	62 e0       	ldi	r22, 0x02	; 2
    69da:	c6 2e       	mov	r12, r22
    69dc:	d1 2c       	mov	r13, r1
    69de:	ce 0e       	add	r12, r30
    69e0:	df 1e       	adc	r13, r31
    69e2:	c6 01       	movw	r24, r12
    69e4:	0e 94 80 2b 	call	0x5700	; 0x5700 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    69e8:	8b 81       	ldd	r24, Y+3	; 0x03
    69ea:	9c 81       	ldd	r25, Y+4	; 0x04
    69ec:	0c 96       	adiw	r24, 0x0c	; 12
    69ee:	0e 94 80 2b 	call	0x5700	; 0x5700 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    69f2:	8b 81       	ldd	r24, Y+3	; 0x03
    69f4:	9c 81       	ldd	r25, Y+4	; 0x04
    69f6:	fc 01       	movw	r30, r24
    69f8:	91 87       	std	Z+9, r25	; 0x09
    69fa:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    69fc:	84 e0       	ldi	r24, 0x04	; 4
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	80 1b       	sub	r24, r16
    6a02:	91 09       	sbc	r25, r1
    6a04:	95 87       	std	Z+13, r25	; 0x0d
    6a06:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    6a08:	f3 8b       	std	Z+19, r31	; 0x13
    6a0a:	e2 8b       	std	Z+18, r30	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    6a0c:	c7 01       	movw	r24, r14
    6a0e:	69 81       	ldd	r22, Y+1	; 0x01
    6a10:	7a 81       	ldd	r23, Y+2	; 0x02
    6a12:	a1 01       	movw	r20, r2
    6a14:	0e 94 0a 2c 	call	0x5814	; 0x5814 <pxPortInitialiseStack>
    6a18:	eb 81       	ldd	r30, Y+3	; 0x03
    6a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    6a1c:	91 83       	std	Z+1, r25	; 0x01
    6a1e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    6a20:	61 14       	cp	r6, r1
    6a22:	71 04       	cpc	r7, r1
    6a24:	21 f0       	breq	.+8      	; 0x6a2e <xTaskGenericCreate+0x10a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    6a26:	cf 01       	movw	r24, r30
    6a28:	f3 01       	movw	r30, r6
    6a2a:	91 83       	std	Z+1, r25	; 0x01
    6a2c:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    6a2e:	0f b6       	in	r0, 0x3f	; 63
    6a30:	f8 94       	cli
    6a32:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    6a34:	80 91 03 07 	lds	r24, 0x0703
    6a38:	8f 5f       	subi	r24, 0xFF	; 255
    6a3a:	80 93 03 07 	sts	0x0703, r24
			if( pxCurrentTCB == NULL )
    6a3e:	80 91 fa 06 	lds	r24, 0x06FA
    6a42:	90 91 fb 06 	lds	r25, 0x06FB
    6a46:	89 2b       	or	r24, r25
    6a48:	e1 f5       	brne	.+120    	; 0x6ac2 <xTaskGenericCreate+0x19e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    6a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    6a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    6a4e:	f0 93 fb 06 	sts	0x06FB, r31
    6a52:	e0 93 fa 06 	sts	0x06FA, r30

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    6a56:	80 91 03 07 	lds	r24, 0x0703
    6a5a:	81 30       	cpi	r24, 0x01	; 1
    6a5c:	09 f0       	breq	.+2      	; 0x6a60 <xTaskGenericCreate+0x13c>
    6a5e:	42 c0       	rjmp	.+132    	; 0x6ae4 <xTaskGenericCreate+0x1c0>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    6a60:	88 e0       	ldi	r24, 0x08	; 8
    6a62:	97 e0       	ldi	r25, 0x07	; 7
    6a64:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
    6a68:	81 e1       	ldi	r24, 0x11	; 17
    6a6a:	97 e0       	ldi	r25, 0x07	; 7
    6a6c:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
    6a70:	8a e1       	ldi	r24, 0x1A	; 26
    6a72:	97 e0       	ldi	r25, 0x07	; 7
    6a74:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
    6a78:	83 e2       	ldi	r24, 0x23	; 35
    6a7a:	97 e0       	ldi	r25, 0x07	; 7
    6a7c:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    6a80:	5c e2       	ldi	r21, 0x2C	; 44
    6a82:	e5 2e       	mov	r14, r21
    6a84:	57 e0       	ldi	r21, 0x07	; 7
    6a86:	f5 2e       	mov	r15, r21
    6a88:	c7 01       	movw	r24, r14
    6a8a:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    6a8e:	05 e3       	ldi	r16, 0x35	; 53
    6a90:	17 e0       	ldi	r17, 0x07	; 7
    6a92:	c8 01       	movw	r24, r16
    6a94:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    6a98:	82 e4       	ldi	r24, 0x42	; 66
    6a9a:	97 e0       	ldi	r25, 0x07	; 7
    6a9c:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    6aa0:	8b e4       	ldi	r24, 0x4B	; 75
    6aa2:	97 e0       	ldi	r25, 0x07	; 7
    6aa4:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    6aa8:	84 e5       	ldi	r24, 0x54	; 84
    6aaa:	97 e0       	ldi	r25, 0x07	; 7
    6aac:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    6ab0:	f0 92 3f 07 	sts	0x073F, r15
    6ab4:	e0 92 3e 07 	sts	0x073E, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    6ab8:	10 93 41 07 	sts	0x0741, r17
    6abc:	00 93 40 07 	sts	0x0740, r16
    6ac0:	11 c0       	rjmp	.+34     	; 0x6ae4 <xTaskGenericCreate+0x1c0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    6ac2:	80 91 04 07 	lds	r24, 0x0704
    6ac6:	88 23       	and	r24, r24
    6ac8:	69 f4       	brne	.+26     	; 0x6ae4 <xTaskGenericCreate+0x1c0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    6aca:	e0 91 fa 06 	lds	r30, 0x06FA
    6ace:	f0 91 fb 06 	lds	r31, 0x06FB
    6ad2:	86 89       	ldd	r24, Z+22	; 0x16
    6ad4:	58 16       	cp	r5, r24
    6ad6:	30 f0       	brcs	.+12     	; 0x6ae4 <xTaskGenericCreate+0x1c0>
					{
						pxCurrentTCB = pxNewTCB;
    6ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    6ada:	9c 81       	ldd	r25, Y+4	; 0x04
    6adc:	90 93 fb 06 	sts	0x06FB, r25
    6ae0:	80 93 fa 06 	sts	0x06FA, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    6ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    6ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    6ae8:	96 89       	ldd	r25, Z+22	; 0x16
    6aea:	80 91 07 07 	lds	r24, 0x0707
    6aee:	89 17       	cp	r24, r25
    6af0:	10 f4       	brcc	.+4      	; 0x6af6 <xTaskGenericCreate+0x1d2>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    6af2:	90 93 07 07 	sts	0x0707, r25
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    6af6:	80 91 06 07 	lds	r24, 0x0706
    6afa:	8f 5f       	subi	r24, 0xFF	; 255
    6afc:	80 93 06 07 	sts	0x0706, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    6b00:	eb 81       	ldd	r30, Y+3	; 0x03
    6b02:	fc 81       	ldd	r31, Y+4	; 0x04
    6b04:	96 89       	ldd	r25, Z+22	; 0x16
    6b06:	80 91 01 07 	lds	r24, 0x0701
    6b0a:	89 17       	cp	r24, r25
    6b0c:	10 f4       	brcc	.+4      	; 0x6b12 <xTaskGenericCreate+0x1ee>
    6b0e:	90 93 01 07 	sts	0x0701, r25
    6b12:	eb 81       	ldd	r30, Y+3	; 0x03
    6b14:	fc 81       	ldd	r31, Y+4	; 0x04
    6b16:	86 89       	ldd	r24, Z+22	; 0x16
    6b18:	29 e0       	ldi	r18, 0x09	; 9
    6b1a:	82 9f       	mul	r24, r18
    6b1c:	c0 01       	movw	r24, r0
    6b1e:	11 24       	eor	r1, r1
    6b20:	88 5f       	subi	r24, 0xF8	; 248
    6b22:	98 4f       	sbci	r25, 0xF8	; 248
    6b24:	b6 01       	movw	r22, r12
    6b26:	0e 94 84 2b 	call	0x5708	; 0x5708 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    6b2a:	0f 90       	pop	r0
    6b2c:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    6b2e:	80 91 04 07 	lds	r24, 0x0704
    6b32:	88 23       	and	r24, r24
    6b34:	49 f0       	breq	.+18     	; 0x6b48 <xTaskGenericCreate+0x224>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    6b36:	e0 91 fa 06 	lds	r30, 0x06FA
    6b3a:	f0 91 fb 06 	lds	r31, 0x06FB
    6b3e:	86 89       	ldd	r24, Z+22	; 0x16
    6b40:	85 15       	cp	r24, r5
    6b42:	10 f4       	brcc	.+4      	; 0x6b48 <xTaskGenericCreate+0x224>
			{
				portYIELD_WITHIN_API();
    6b44:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <vPortYield>
    6b48:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    6b4a:	0f 90       	pop	r0
    6b4c:	0f 90       	pop	r0
    6b4e:	0f 90       	pop	r0
    6b50:	0f 90       	pop	r0
    6b52:	cf 91       	pop	r28
    6b54:	df 91       	pop	r29
    6b56:	1f 91       	pop	r17
    6b58:	0f 91       	pop	r16
    6b5a:	ff 90       	pop	r15
    6b5c:	ef 90       	pop	r14
    6b5e:	df 90       	pop	r13
    6b60:	cf 90       	pop	r12
    6b62:	bf 90       	pop	r11
    6b64:	af 90       	pop	r10
    6b66:	9f 90       	pop	r9
    6b68:	8f 90       	pop	r8
    6b6a:	7f 90       	pop	r7
    6b6c:	6f 90       	pop	r6
    6b6e:	5f 90       	pop	r5
    6b70:	3f 90       	pop	r3
    6b72:	2f 90       	pop	r2
    6b74:	08 95       	ret

00006b76 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    6b76:	af 92       	push	r10
    6b78:	bf 92       	push	r11
    6b7a:	cf 92       	push	r12
    6b7c:	df 92       	push	r13
    6b7e:	ef 92       	push	r14
    6b80:	ff 92       	push	r15
    6b82:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    6b84:	8f e5       	ldi	r24, 0x5F	; 95
    6b86:	94 e3       	ldi	r25, 0x34	; 52
    6b88:	6c ec       	ldi	r22, 0xCC	; 204
    6b8a:	70 e0       	ldi	r23, 0x00	; 0
    6b8c:	42 e3       	ldi	r20, 0x32	; 50
    6b8e:	50 e0       	ldi	r21, 0x00	; 0
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	00 e0       	ldi	r16, 0x00	; 0
    6b96:	ee 24       	eor	r14, r14
    6b98:	ff 24       	eor	r15, r15
    6b9a:	cc 24       	eor	r12, r12
    6b9c:	dd 24       	eor	r13, r13
    6b9e:	aa 24       	eor	r10, r10
    6ba0:	bb 24       	eor	r11, r11
    6ba2:	0e 94 92 34 	call	0x6924	; 0x6924 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    6ba6:	81 30       	cpi	r24, 0x01	; 1
    6ba8:	49 f4       	brne	.+18     	; 0x6bbc <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    6baa:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    6bac:	80 93 04 07 	sts	0x0704, r24
		xTickCount = ( portTickType ) 0U;
    6bb0:	10 92 ff 06 	sts	0x06FF, r1
    6bb4:	10 92 fe 06 	sts	0x06FE, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    6bb8:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    6bbc:	0f 91       	pop	r16
    6bbe:	ff 90       	pop	r15
    6bc0:	ef 90       	pop	r14
    6bc2:	df 90       	pop	r13
    6bc4:	cf 90       	pop	r12
    6bc6:	bf 90       	pop	r11
    6bc8:	af 90       	pop	r10
    6bca:	08 95       	ret

00006bcc <main>:

xQueueHandle PW_Queue;
xQueueHandle PW_State;


s32 main(void){
    6bcc:	af 92       	push	r10
    6bce:	bf 92       	push	r11
    6bd0:	cf 92       	push	r12
    6bd2:	df 92       	push	r13
    6bd4:	ef 92       	push	r14
    6bd6:	ff 92       	push	r15
    6bd8:	0f 93       	push	r16

	/********************************Periferals Initialisation**************************************/
	LCD_voidInit();
    6bda:	0e 94 6d 28 	call	0x50da	; 0x50da <LCD_voidInit>
	USART_voidInit();
    6bde:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <USART_voidInit>

	KPD_Init();
    6be2:	0e 94 ff 28 	call	0x51fe	; 0x51fe <KPD_Init>

	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_OUTPUT);
    6be6:	83 e0       	ldi	r24, 0x03	; 3
    6be8:	64 e0       	ldi	r22, 0x04	; 4
    6bea:	41 e0       	ldi	r20, 0x01	; 1
    6bec:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
    6bf0:	82 e0       	ldi	r24, 0x02	; 2
    6bf2:	60 e0       	ldi	r22, 0x00	; 0
    6bf4:	41 e0       	ldi	r20, 0x01	; 1
    6bf6:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
    6bfa:	82 e0       	ldi	r24, 0x02	; 2
    6bfc:	61 e0       	ldi	r22, 0x01	; 1
    6bfe:	41 e0       	ldi	r20, 0x01	; 1
    6c00:	0e 94 fd 24 	call	0x49fa	; 0x49fa <DIO_u8SetPinDirection>
	TWI_voidInitMaster(0);
    6c04:	80 e0       	ldi	r24, 0x00	; 0
    6c06:	0e 94 20 21 	call	0x4240	; 0x4240 <TWI_voidInitMaster>

	vSemaphoreCreateBinary(LCD_Mutex);
    6c0a:	81 e0       	ldi	r24, 0x01	; 1
    6c0c:	60 e0       	ldi	r22, 0x00	; 0
    6c0e:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    6c12:	90 93 6a 07 	sts	0x076A, r25
    6c16:	80 93 69 07 	sts	0x0769, r24
    6c1a:	00 97       	sbiw	r24, 0x00	; 0
    6c1c:	39 f0       	breq	.+14     	; 0x6c2c <main+0x60>
    6c1e:	60 e0       	ldi	r22, 0x00	; 0
    6c20:	70 e0       	ldi	r23, 0x00	; 0
    6c22:	40 e0       	ldi	r20, 0x00	; 0
    6c24:	50 e0       	ldi	r21, 0x00	; 0
    6c26:	20 e0       	ldi	r18, 0x00	; 0
    6c28:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
	vSemaphoreCreateBinary(PW_CheckSemaphore);
    6c2c:	81 e0       	ldi	r24, 0x01	; 1
    6c2e:	60 e0       	ldi	r22, 0x00	; 0
    6c30:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    6c34:	90 93 68 07 	sts	0x0768, r25
    6c38:	80 93 67 07 	sts	0x0767, r24
    6c3c:	00 97       	sbiw	r24, 0x00	; 0
    6c3e:	39 f0       	breq	.+14     	; 0x6c4e <main+0x82>
    6c40:	60 e0       	ldi	r22, 0x00	; 0
    6c42:	70 e0       	ldi	r23, 0x00	; 0
    6c44:	40 e0       	ldi	r20, 0x00	; 0
    6c46:	50 e0       	ldi	r21, 0x00	; 0
    6c48:	20 e0       	ldi	r18, 0x00	; 0
    6c4a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>
	vSemaphoreCreateBinary(PW_EnterSemaphore);
    6c4e:	81 e0       	ldi	r24, 0x01	; 1
    6c50:	60 e0       	ldi	r22, 0x00	; 0
    6c52:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    6c56:	90 93 6e 07 	sts	0x076E, r25
    6c5a:	80 93 6d 07 	sts	0x076D, r24
    6c5e:	00 97       	sbiw	r24, 0x00	; 0
    6c60:	39 f0       	breq	.+14     	; 0x6c70 <main+0xa4>
    6c62:	60 e0       	ldi	r22, 0x00	; 0
    6c64:	70 e0       	ldi	r23, 0x00	; 0
    6c66:	40 e0       	ldi	r20, 0x00	; 0
    6c68:	50 e0       	ldi	r21, 0x00	; 0
    6c6a:	20 e0       	ldi	r18, 0x00	; 0
    6c6c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <xQueueGenericSend>



	PW_Queue= xQueueCreate(1,sizeof(u16));
    6c70:	81 e0       	ldi	r24, 0x01	; 1
    6c72:	62 e0       	ldi	r22, 0x02	; 2
    6c74:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    6c78:	90 93 66 07 	sts	0x0766, r25
    6c7c:	80 93 65 07 	sts	0x0765, r24
	PW_State= xQueueCreate(1,sizeof(u8));
    6c80:	81 e0       	ldi	r24, 0x01	; 1
    6c82:	61 e0       	ldi	r22, 0x01	; 1
    6c84:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <xQueueCreate>
    6c88:	90 93 64 07 	sts	0x0764, r25
    6c8c:	80 93 63 07 	sts	0x0763, r24

	xTaskCreate(&PW_Set,NULL,150,NULL,3,NULL);
    6c90:	8b ec       	ldi	r24, 0xCB	; 203
    6c92:	9f e1       	ldi	r25, 0x1F	; 31
    6c94:	60 e0       	ldi	r22, 0x00	; 0
    6c96:	70 e0       	ldi	r23, 0x00	; 0
    6c98:	46 e9       	ldi	r20, 0x96	; 150
    6c9a:	50 e0       	ldi	r21, 0x00	; 0
    6c9c:	20 e0       	ldi	r18, 0x00	; 0
    6c9e:	30 e0       	ldi	r19, 0x00	; 0
    6ca0:	03 e0       	ldi	r16, 0x03	; 3
    6ca2:	ee 24       	eor	r14, r14
    6ca4:	ff 24       	eor	r15, r15
    6ca6:	cc 24       	eor	r12, r12
    6ca8:	dd 24       	eor	r13, r13
    6caa:	aa 24       	eor	r10, r10
    6cac:	bb 24       	eor	r11, r11
    6cae:	0e 94 92 34 	call	0x6924	; 0x6924 <xTaskGenericCreate>
	xTaskCreate(&Keypad_Task,NULL,50,NULL,3,&xKeyHandle);
    6cb2:	85 ee       	ldi	r24, 0xE5	; 229
    6cb4:	9f e1       	ldi	r25, 0x1F	; 31
    6cb6:	60 e0       	ldi	r22, 0x00	; 0
    6cb8:	70 e0       	ldi	r23, 0x00	; 0
    6cba:	42 e3       	ldi	r20, 0x32	; 50
    6cbc:	50 e0       	ldi	r21, 0x00	; 0
    6cbe:	20 e0       	ldi	r18, 0x00	; 0
    6cc0:	30 e0       	ldi	r19, 0x00	; 0
    6cc2:	af e5       	ldi	r26, 0x5F	; 95
    6cc4:	ea 2e       	mov	r14, r26
    6cc6:	a7 e0       	ldi	r26, 0x07	; 7
    6cc8:	fa 2e       	mov	r15, r26
    6cca:	0e 94 92 34 	call	0x6924	; 0x6924 <xTaskGenericCreate>
	xTaskCreate(&PW_Enter,NULL,250,NULL,1,&xEnterHandle);
    6cce:	8a e2       	ldi	r24, 0x2A	; 42
    6cd0:	9f e1       	ldi	r25, 0x1F	; 31
    6cd2:	60 e0       	ldi	r22, 0x00	; 0
    6cd4:	70 e0       	ldi	r23, 0x00	; 0
    6cd6:	4a ef       	ldi	r20, 0xFA	; 250
    6cd8:	50 e0       	ldi	r21, 0x00	; 0
    6cda:	20 e0       	ldi	r18, 0x00	; 0
    6cdc:	30 e0       	ldi	r19, 0x00	; 0
    6cde:	01 e0       	ldi	r16, 0x01	; 1
    6ce0:	fd e5       	ldi	r31, 0x5D	; 93
    6ce2:	ef 2e       	mov	r14, r31
    6ce4:	f7 e0       	ldi	r31, 0x07	; 7
    6ce6:	ff 2e       	mov	r15, r31
    6ce8:	0e 94 92 34 	call	0x6924	; 0x6924 <xTaskGenericCreate>
	xTaskCreate(&PW_Check,NULL,250,NULL,2,&xCheckHandle);
    6cec:	82 e1       	ldi	r24, 0x12	; 18
    6cee:	9e e1       	ldi	r25, 0x1E	; 30
    6cf0:	60 e0       	ldi	r22, 0x00	; 0
    6cf2:	70 e0       	ldi	r23, 0x00	; 0
    6cf4:	4a ef       	ldi	r20, 0xFA	; 250
    6cf6:	50 e0       	ldi	r21, 0x00	; 0
    6cf8:	20 e0       	ldi	r18, 0x00	; 0
    6cfa:	30 e0       	ldi	r19, 0x00	; 0
    6cfc:	02 e0       	ldi	r16, 0x02	; 2
    6cfe:	e1 e6       	ldi	r30, 0x61	; 97
    6d00:	ee 2e       	mov	r14, r30
    6d02:	e7 e0       	ldi	r30, 0x07	; 7
    6d04:	fe 2e       	mov	r15, r30
    6d06:	0e 94 92 34 	call	0x6924	; 0x6924 <xTaskGenericCreate>





	vTaskStartScheduler();
    6d0a:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <vTaskStartScheduler>
    6d0e:	ff cf       	rjmp	.-2      	; 0x6d0e <main+0x142>

00006d10 <__mulsi3>:
    6d10:	62 9f       	mul	r22, r18
    6d12:	d0 01       	movw	r26, r0
    6d14:	73 9f       	mul	r23, r19
    6d16:	f0 01       	movw	r30, r0
    6d18:	82 9f       	mul	r24, r18
    6d1a:	e0 0d       	add	r30, r0
    6d1c:	f1 1d       	adc	r31, r1
    6d1e:	64 9f       	mul	r22, r20
    6d20:	e0 0d       	add	r30, r0
    6d22:	f1 1d       	adc	r31, r1
    6d24:	92 9f       	mul	r25, r18
    6d26:	f0 0d       	add	r31, r0
    6d28:	83 9f       	mul	r24, r19
    6d2a:	f0 0d       	add	r31, r0
    6d2c:	74 9f       	mul	r23, r20
    6d2e:	f0 0d       	add	r31, r0
    6d30:	65 9f       	mul	r22, r21
    6d32:	f0 0d       	add	r31, r0
    6d34:	99 27       	eor	r25, r25
    6d36:	72 9f       	mul	r23, r18
    6d38:	b0 0d       	add	r27, r0
    6d3a:	e1 1d       	adc	r30, r1
    6d3c:	f9 1f       	adc	r31, r25
    6d3e:	63 9f       	mul	r22, r19
    6d40:	b0 0d       	add	r27, r0
    6d42:	e1 1d       	adc	r30, r1
    6d44:	f9 1f       	adc	r31, r25
    6d46:	bd 01       	movw	r22, r26
    6d48:	cf 01       	movw	r24, r30
    6d4a:	11 24       	eor	r1, r1
    6d4c:	08 95       	ret

00006d4e <__udivmodsi4>:
    6d4e:	a1 e2       	ldi	r26, 0x21	; 33
    6d50:	1a 2e       	mov	r1, r26
    6d52:	aa 1b       	sub	r26, r26
    6d54:	bb 1b       	sub	r27, r27
    6d56:	fd 01       	movw	r30, r26
    6d58:	0d c0       	rjmp	.+26     	; 0x6d74 <__udivmodsi4_ep>

00006d5a <__udivmodsi4_loop>:
    6d5a:	aa 1f       	adc	r26, r26
    6d5c:	bb 1f       	adc	r27, r27
    6d5e:	ee 1f       	adc	r30, r30
    6d60:	ff 1f       	adc	r31, r31
    6d62:	a2 17       	cp	r26, r18
    6d64:	b3 07       	cpc	r27, r19
    6d66:	e4 07       	cpc	r30, r20
    6d68:	f5 07       	cpc	r31, r21
    6d6a:	20 f0       	brcs	.+8      	; 0x6d74 <__udivmodsi4_ep>
    6d6c:	a2 1b       	sub	r26, r18
    6d6e:	b3 0b       	sbc	r27, r19
    6d70:	e4 0b       	sbc	r30, r20
    6d72:	f5 0b       	sbc	r31, r21

00006d74 <__udivmodsi4_ep>:
    6d74:	66 1f       	adc	r22, r22
    6d76:	77 1f       	adc	r23, r23
    6d78:	88 1f       	adc	r24, r24
    6d7a:	99 1f       	adc	r25, r25
    6d7c:	1a 94       	dec	r1
    6d7e:	69 f7       	brne	.-38     	; 0x6d5a <__udivmodsi4_loop>
    6d80:	60 95       	com	r22
    6d82:	70 95       	com	r23
    6d84:	80 95       	com	r24
    6d86:	90 95       	com	r25
    6d88:	9b 01       	movw	r18, r22
    6d8a:	ac 01       	movw	r20, r24
    6d8c:	bd 01       	movw	r22, r26
    6d8e:	cf 01       	movw	r24, r30
    6d90:	08 95       	ret

00006d92 <__prologue_saves__>:
    6d92:	2f 92       	push	r2
    6d94:	3f 92       	push	r3
    6d96:	4f 92       	push	r4
    6d98:	5f 92       	push	r5
    6d9a:	6f 92       	push	r6
    6d9c:	7f 92       	push	r7
    6d9e:	8f 92       	push	r8
    6da0:	9f 92       	push	r9
    6da2:	af 92       	push	r10
    6da4:	bf 92       	push	r11
    6da6:	cf 92       	push	r12
    6da8:	df 92       	push	r13
    6daa:	ef 92       	push	r14
    6dac:	ff 92       	push	r15
    6dae:	0f 93       	push	r16
    6db0:	1f 93       	push	r17
    6db2:	cf 93       	push	r28
    6db4:	df 93       	push	r29
    6db6:	cd b7       	in	r28, 0x3d	; 61
    6db8:	de b7       	in	r29, 0x3e	; 62
    6dba:	ca 1b       	sub	r28, r26
    6dbc:	db 0b       	sbc	r29, r27
    6dbe:	0f b6       	in	r0, 0x3f	; 63
    6dc0:	f8 94       	cli
    6dc2:	de bf       	out	0x3e, r29	; 62
    6dc4:	0f be       	out	0x3f, r0	; 63
    6dc6:	cd bf       	out	0x3d, r28	; 61
    6dc8:	09 94       	ijmp

00006dca <__epilogue_restores__>:
    6dca:	2a 88       	ldd	r2, Y+18	; 0x12
    6dcc:	39 88       	ldd	r3, Y+17	; 0x11
    6dce:	48 88       	ldd	r4, Y+16	; 0x10
    6dd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    6dd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    6dd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    6dd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    6dd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    6dda:	aa 84       	ldd	r10, Y+10	; 0x0a
    6ddc:	b9 84       	ldd	r11, Y+9	; 0x09
    6dde:	c8 84       	ldd	r12, Y+8	; 0x08
    6de0:	df 80       	ldd	r13, Y+7	; 0x07
    6de2:	ee 80       	ldd	r14, Y+6	; 0x06
    6de4:	fd 80       	ldd	r15, Y+5	; 0x05
    6de6:	0c 81       	ldd	r16, Y+4	; 0x04
    6de8:	1b 81       	ldd	r17, Y+3	; 0x03
    6dea:	aa 81       	ldd	r26, Y+2	; 0x02
    6dec:	b9 81       	ldd	r27, Y+1	; 0x01
    6dee:	ce 0f       	add	r28, r30
    6df0:	d1 1d       	adc	r29, r1
    6df2:	0f b6       	in	r0, 0x3f	; 63
    6df4:	f8 94       	cli
    6df6:	de bf       	out	0x3e, r29	; 62
    6df8:	0f be       	out	0x3f, r0	; 63
    6dfa:	cd bf       	out	0x3d, r28	; 61
    6dfc:	ed 01       	movw	r28, r26
    6dfe:	08 95       	ret

00006e00 <memcpy>:
    6e00:	fb 01       	movw	r30, r22
    6e02:	dc 01       	movw	r26, r24
    6e04:	02 c0       	rjmp	.+4      	; 0x6e0a <memcpy+0xa>
    6e06:	01 90       	ld	r0, Z+
    6e08:	0d 92       	st	X+, r0
    6e0a:	41 50       	subi	r20, 0x01	; 1
    6e0c:	50 40       	sbci	r21, 0x00	; 0
    6e0e:	d8 f7       	brcc	.-10     	; 0x6e06 <memcpy+0x6>
    6e10:	08 95       	ret

00006e12 <memset>:
    6e12:	dc 01       	movw	r26, r24
    6e14:	01 c0       	rjmp	.+2      	; 0x6e18 <memset+0x6>
    6e16:	6d 93       	st	X+, r22
    6e18:	41 50       	subi	r20, 0x01	; 1
    6e1a:	50 40       	sbci	r21, 0x00	; 0
    6e1c:	e0 f7       	brcc	.-8      	; 0x6e16 <memset+0x4>
    6e1e:	08 95       	ret

00006e20 <strncpy>:
    6e20:	fb 01       	movw	r30, r22
    6e22:	dc 01       	movw	r26, r24
    6e24:	41 50       	subi	r20, 0x01	; 1
    6e26:	50 40       	sbci	r21, 0x00	; 0
    6e28:	48 f0       	brcs	.+18     	; 0x6e3c <strncpy+0x1c>
    6e2a:	01 90       	ld	r0, Z+
    6e2c:	0d 92       	st	X+, r0
    6e2e:	00 20       	and	r0, r0
    6e30:	c9 f7       	brne	.-14     	; 0x6e24 <strncpy+0x4>
    6e32:	01 c0       	rjmp	.+2      	; 0x6e36 <strncpy+0x16>
    6e34:	1d 92       	st	X+, r1
    6e36:	41 50       	subi	r20, 0x01	; 1
    6e38:	50 40       	sbci	r21, 0x00	; 0
    6e3a:	e0 f7       	brcc	.-8      	; 0x6e34 <strncpy+0x14>
    6e3c:	08 95       	ret

00006e3e <_exit>:
    6e3e:	f8 94       	cli

00006e40 <__stop_program>:
    6e40:	ff cf       	rjmp	.-2      	; 0x6e40 <__stop_program>
